(finseq_rel_prime
 (fs_rel_prime?_TCC1 0
  (fs_rel_prime?_TCC1-1 nil 3784541925 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (/= const-decl "boolean" notequal nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   nil
   (fs_rel_prime? subtype
    "finite_sequences[posnat].finseq_appl(finseq_rel_prime.fsp)(finseq_rel_prime.j)"
    "{jj: integers.int | booleans.=>(finite_sequences[posnat].finseq_appl(finseq_rel_prime.fsp)(finseq_rel_prime.i) = 0, jj /= 0)}")))
 (fs_rel_prime_fixed_TCC1 0
  (fs_rel_prime_fixed_TCC1-1 nil 3784542339 ("" (subtype-tcc) nil nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   nil
   (fs_rel_prime_fixed subtype
    "finite_sequences[posnat].finseq_appl(finseq_rel_prime.fsp)(finseq_rel_prime.i)"
    "{jj: integers.int | booleans.=>(finseq_rel_prime.a = 0, jj /= 0)}")))
 (fs_rel_prime_fixed_TCC2 0
  (fs_rel_prime_fixed_TCC2-1 nil 3784542339 ("" (subtype-tcc) nil nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    nil
    (gcd const-decl "{k: posnat | divides(k, i) AND divides(k, j)}" gcd
         nil)
    (rel_prime const-decl "bool" gcd nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (fs_rel_prime_fixed subtype
    "product_seq.product(finseq_rel_prime.fsp)"
    "{jj: integers.int | booleans.=>(finseq_rel_prime.a = 0, jj /= 0)}")))
 (fs_rel_prime_fixed 0
  (fs_rel_prime_fixed-1 nil 3784542341
   ("" (skolem 1 ("a!1" "_"))
    (("" (measure-induct+ "length(fsp)" "fsp")
      (("" (case "length(x!1) = 0")
        (("1" (hide (-2 -3))
          (("1" (expand "rel_prime")
            (("1" (expand "product")
              (("1" (assert)
                (("1" (hide -1)
                  (("1" (case-replace "a!1 = 0")
                    (("1" (rewrite "gcd_0_pos") nil nil)
                     ("2" (lemma "rel_prime_lem")
                      (("2" (inst -1 "a!1" "1")
                        (("2" (assert)
                          (("2" (expand "rel_prime")
                            (("2" (hide 3)
                              (("2"
                                (inst 1 "1" "0")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (case "length(x!1) = 1")
          (("1" (hide -2)
            (("1" (inst -2 "0")
              (("1" (expand "finseq_appl")
                (("1" (expand "product")
                  (("1" (assert)
                    (("1" (expand "product_rec")
                      (("1" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil)
           ("2" (expand "finseq_appl")
            (("2" (inst -1 "rest(x!1)")
              (("2" (prop)
                (("1" (inst -2 "0")
                  (("1" (lemma "rel_prime_mult_right")
                    (("1"
                      (inst -1 "a!1" "x!1`seq(0)" "product(rest(x!1))")
                      (("1" (assert)
                        (("1" (expand "rel_prime")
                          (("1" (hide (-2 -3))
                            (("1" (lemma "seq_first_rest_1[posnat]")
                              (("1"
                                (inst?)
                                (("1"
                                  (assert)
                                  (("1"
                                    (replace -1 3)
                                    (("1"
                                      (rewrite "product_mult")
                                      (("1"
                                        (expand "first")
                                        (("1"
                                          (expand "finseq_appl")
                                          (("1"
                                            (expand "product" 3 1)
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (hide (-2 -3 1))
                                                  (("1"
                                                    (expand "#")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand
                                                   "product_rec")
                                                  (("2"
                                                    (lift-if)
                                                    (("2"
                                                      (prop)
                                                      (("1"
                                                        (expand "#")
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide (- 2))
                                                        (("2"
                                                          (expand "#")
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil)
                 ("2" (hide 4)
                  (("2" (skosimp)
                    (("2" (inst -1 "i!1 + 1")
                      (("1" (expand "rest")
                        (("1" (assert)
                          (("1" (expand "^") (("1" (propax) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (typepred "i!1")
                          (("2" (expand "rest")
                            (("2" (assert)
                              (("2"
                                (expand "^")
                                (("2"
                                  (expand "min")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (hide (-1 4))
                  (("3" (expand "rest")
                    (("3" (expand "^") (("3" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (rel_prime const-decl "bool" gcd nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (product const-decl "posnat" product_seq reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (x!1 skolem-const-decl "finseq[posnat]" finseq_rel_prime nil)
    (product_rec def-decl "posnat" product_seq_scaf reals)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rest const-decl "finseq" seq_extras structures)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (i!1 skolem-const-decl "below[length(rest(x!1))]" finseq_rel_prime
     nil)
    (^ const-decl "finseq" finite_sequences nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (seq_first_rest_1 formula-decl nil seq_extras structures)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (first const-decl "T" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (|#| const-decl "finite_sequence[T]" set2seq structures)
    (product_mult formula-decl nil product_seq reals)
    (rel_prime_mult_right formula-decl nil gcd nil)
    (rel_prime_lem formula-decl nil gcd nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (gcd_0_pos formula-decl nil gcd nil))
   shostak))
 (fs_rel_prime_i_TCC1 0
  (fs_rel_prime_i_TCC1-1 nil 3784542152 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (/= const-decl "boolean" notequal nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    nil
    (gcd const-decl "{k: posnat | divides(k, i) AND divides(k, j)}" gcd
         nil)
    (rel_prime const-decl "bool" gcd nil)
    (fs_rel_prime? const-decl "bool" finseq_rel_prime nil)
    (delete const-decl "finseq" seq_extras structures))
   nil
   (fs_rel_prime_i subtype
    "product_seq.product(seq_extras[posnat].delete(finseq_rel_prime.fsp, finseq_rel_prime.i))"
    "{jj: integers.int | booleans.=>(finite_sequences[posnat].finseq_appl(finseq_rel_prime.fsp)(finseq_rel_prime.i) = 0, jj /= 0)}")))
 (fs_rel_prime_i 0
  (fs_rel_prime_i-1 nil 3784542165
   ("" (skosimp)
    (("" (expand "finseq_appl")
      (("" (lemma "fs_rel_prime_fixed")
        (("" (inst?)
          (("" (expand "finseq_appl")
            (("" (assert)
              (("" (hide 2)
                (("" (skosimp)
                  (("" (expand "fs_rel_prime?")
                    (("" (expand "finseq_appl")
                      (("" (expand "delete")
                        (("" (expand "finseq_appl")
                          (("" (lift-if)
                            (("" (prop)
                              (("1"
                                (inst?)
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (inst?)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (< const-decl "bool" reals nil)
    (delete const-decl "finseq" seq_extras structures)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (fs_rel_prime? const-decl "bool" finseq_rel_prime nil)
    (fs_rel_prime_fixed formula-decl nil finseq_rel_prime nil))
   shostak)))

