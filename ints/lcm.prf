(lcm (lcm_1 0
      (lcm_1-1 nil 3813428294
       ("" (skosimp)
        (("" (expand "lcm")
          (("" (lemma "min_def[posnat]")
            (("" (inst?)
              (("1" (flatten)
                (("1" (hide -1)
                  (("1" (expand "minimum?")
                    (("1" (split)
                      (("1" (propax) nil nil)
                       ("2" (hide 2)
                        (("2" (expand "divides")
                          (("2" (inst?) (("2" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("3" (hide 2)
                        (("3" (expand "divides")
                          (("3" (inst 1 "1") (("3" (assert) nil nil))
                            nil))
                          nil))
                        nil)
                       ("4" (hide 2)
                        (("4" (skosimp)
                          (("4" (lemma "divides_lt")
                            (("4" (typepred "x!1")
                              (("4"
                                (inst -2 "x!1" "m!1")
                                (("4" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (expand "nonempty?")
                  (("2" (expand "empty?")
                    (("2" (inst -1 "m!1")
                      (("2" (expand "member")
                        (("2" (expand "divides")
                          (("2" (ground)
                            (("1" (inst?) (("1" (assert) nil nil)) nil)
                             ("2" (inst 1 "1") (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ((lcm const-decl "int" divides_lems nil)
        (m!1 skolem-const-decl "posnat" lcm nil)
        (divides const-decl "bool" divides nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (nonempty? const-decl "bool" sets nil)
        (set type-eq-decl nil sets nil)
        (posint_times_posint_is_posint application-judgement "posint"
         integers nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (abs_nat_rew formula-decl nil abs_rews nil)
        (real_le_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (real_gt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (/= const-decl "boolean" notequal nil)
        (nzint nonempty-type-eq-decl nil integers nil)
        (divides_lt formula-decl nil divides_lems nil)
        (minimum? const-decl "bool" min_nat nil)
        (member const-decl "bool" sets nil)
        (empty? const-decl "bool" sets nil)
        (min_def formula-decl nil min_nat nil)
        (number nonempty-type-decl nil numbers nil)
        (boolean nonempty-type-decl nil booleans nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (>= const-decl "bool" reals nil)
        (nonneg_int nonempty-type-eq-decl nil integers nil)
        (> const-decl "bool" reals nil)
        (posnat nonempty-type-eq-decl nil integers nil))
       shostak))
     (lcm_same 0
      (lcm_same-1 nil 3813431409
       ("" (skosimp)
        (("" (expand "lcm")
          (("" (rewrite "min_def[posnat]")
            (("1" (expand "minimum?")
              (("1" (split)
                (("1" (expand "divides")
                  (("1" (inst 1 "1") (("1" (assert) nil nil)) nil))
                  nil)
                 ("2" (expand "divides")
                  (("2" (inst 1 "1") (("2" (assert) nil nil)) nil))
                  nil)
                 ("3" (skosimp)
                  (("3" (hide -1)
                    (("3" (lemma "divides_lt")
                      (("3" (inst?) (("3" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (expand "nonempty?")
                (("2" (expand "empty?")
                  (("2" (inst -1 "n!1")
                    (("2" (expand "member")
                      (("2" (expand "divides")
                        (("2" (prop)
                          (("1" (inst 1 "1") (("1" (assert) nil nil))
                            nil)
                           ("2" (inst 1 "1") (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ((lcm const-decl "int" divides_lems nil)
        (empty? const-decl "bool" sets nil)
        (member const-decl "bool" sets nil)
        (minimum? const-decl "bool" min_nat nil)
        (divides_lt formula-decl nil divides_lems nil)
        (abs_nat_rew formula-decl nil abs_rews nil)
        (real_le_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (/= const-decl "boolean" notequal nil)
        (nzint nonempty-type-eq-decl nil integers nil)
        (posint_times_posint_is_posint application-judgement "posint"
         integers nil)
        (posnat nonempty-type-eq-decl nil integers nil)
        (> const-decl "bool" reals nil)
        (nonneg_int nonempty-type-eq-decl nil integers nil)
        (>= const-decl "bool" reals nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (int nonempty-type-eq-decl nil integers nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (real nonempty-type-from-decl nil reals nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (boolean nonempty-type-decl nil booleans nil)
        (number nonempty-type-decl nil numbers nil)
        (divides const-decl "bool" divides nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (nonempty? const-decl "bool" sets nil)
        (set type-eq-decl nil sets nil)
        (min_def formula-decl nil min_nat nil))
       shostak))
     (lcm_sym 0
      (lcm_sym-1 nil 3813424992
       ("" (skosimp)
        (("" (lemma "min_def[posnat]")
          ((""
            (inst-cp -1 "lcm(n!1, m!1)"
             "{k: posnat | divides(n!1, k) AND divides(m!1, k)}")
            (("1"
              (inst -1 "lcm(m!1, n!1)"
               "{k: posnat | divides(m!1, k) AND divides(n!1, k)}")
              (("1" (assert)
                (("1" (ground)
                  (("1" (hide (-1 -3))
                    (("1" (expand "minimum?")
                      (("1" (inst -1 "lcm(m!1, n!1)")
                        (("1" (inst -2 "lcm(n!1, m!1)")
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but 2)
                    (("2" (expand "lcm") (("2" (propax) nil nil)) nil))
                    nil)
                   ("3" (hide-all-but 2)
                    (("3" (expand "lcm") (("3" (propax) nil nil)) nil))
                    nil)
                   ("4" (hide-all-but 2)
                    (("4" (expand "lcm") (("4" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but 1)
                (("2" (expand "nonempty?")
                  (("2" (expand "empty?")
                    (("2" (inst -1 "n!1 * m!1")
                      (("2" (expand "member")
                        (("2" (expand "divides")
                          (("2" (prop)
                            (("1" (inst?) (("1" (assert) nil nil)) nil)
                             ("2" (inst?) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil))
              nil)
             ("2" (hide 2)
              (("2" (expand "nonempty?")
                (("2" (expand "empty?")
                  (("2" (inst -1 "n!1 * m!1")
                    (("2" (expand "member")
                      (("2" (expand "divides")
                        (("2" (prop)
                          (("1" (inst?) nil nil)
                           ("2" (inst?) (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (hide 2) (("3" (grind) nil nil)) nil))
            nil))
          nil))
        nil)
       ((posnat nonempty-type-eq-decl nil integers nil)
        (> const-decl "bool" reals nil)
        (nonneg_int nonempty-type-eq-decl nil integers nil)
        (>= const-decl "bool" reals nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (int nonempty-type-eq-decl nil integers nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (real nonempty-type-from-decl nil reals nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (boolean nonempty-type-decl nil booleans nil)
        (number nonempty-type-decl nil numbers nil)
        (min_def formula-decl nil min_nat nil)
        (minimum? const-decl "bool" min_nat nil)
        (posint_times_posint_is_posint application-judgement "posint"
         integers nil)
        (* const-decl "[numfield, numfield -> numfield]" number_fields
           nil)
        (numfield nonempty-type-eq-decl nil number_fields nil)
        (member const-decl "bool" sets nil)
        (empty? const-decl "bool" sets nil)
        (set type-eq-decl nil sets nil)
        (nonempty? const-decl "bool" sets nil)
        (divides const-decl "bool" divides nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (lcm const-decl "int" divides_lems nil)
        (n!1 skolem-const-decl "posnat" lcm nil)
        (m!1 skolem-const-decl "posnat" lcm nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (real_gt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil))
       shostak))
     (divides_lcm 0
      (divides_lcm-1 nil 3858325906
       ("" (skosimp)
        (("" (lemma "min_def[posnat]")
          ((""
            (inst -1 "lcm(n!1, m!1)"
             "{k: posnat | divides(n!1, k) AND divides(m!1, k)}")
            (("1" (ground)
              (("1" (hide (1 2))
                (("1" (expand "lcm") (("1" (propax) nil nil)) nil))
                nil)
               ("2" (hide (1 2))
                (("2" (expand "lcm") (("2" (propax) nil nil)) nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (expand "nonempty?")
                (("2" (expand "empty?")
                  (("2" (inst -1 "n!1 * m!1")
                    (("2" (expand "member")
                      (("2" (expand "divides")
                        (("2" (prop)
                          (("1" (inst?) nil nil)
                           ("2" (inst?) (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (hide 2) (("3" (grind) nil nil)) nil))
            nil))
          nil))
        nil)
       ((posnat nonempty-type-eq-decl nil integers nil)
        (> const-decl "bool" reals nil)
        (nonneg_int nonempty-type-eq-decl nil integers nil)
        (>= const-decl "bool" reals nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (int nonempty-type-eq-decl nil integers nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (real nonempty-type-from-decl nil reals nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (boolean nonempty-type-decl nil booleans nil)
        (number nonempty-type-decl nil numbers nil)
        (min_def formula-decl nil min_nat nil)
        (empty? const-decl "bool" sets nil)
        (member const-decl "bool" sets nil)
        (numfield nonempty-type-eq-decl nil number_fields nil)
        (* const-decl "[numfield, numfield -> numfield]" number_fields
           nil)
        (posint_times_posint_is_posint application-judgement "posint"
         integers nil)
        (set type-eq-decl nil sets nil)
        (nonempty? const-decl "bool" sets nil)
        (divides const-decl "bool" divides nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (lcm const-decl "int" divides_lems nil)
        (n!1 skolem-const-decl "posnat" lcm nil)
        (m!1 skolem-const-decl "posnat" lcm nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (real_gt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil))
       shostak))
     (lcm_is_min 0
      (lcm_is_min-1 nil 3813433295
       ("" (skosimp*)
        (("" (expand "lcm")
          ((""
            (typepred
             "min({k: posnat | divides(n!1, k) AND divides(m!1, k)})")
            (("1" (inst?) (("1" (assert) nil nil)) nil)
             ("2" (hide (- 2))
              (("2" (expand "nonempty?")
                (("2" (expand "empty?")
                  (("2" (inst -1 "n!1 * m!1")
                    (("2" (expand "member")
                      (("2" (expand "divides")
                        (("2" (ground)
                          (("1" (inst?) nil nil)
                           ("2" (inst?) (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ((lcm const-decl "int" divides_lems nil)
        (empty? const-decl "bool" sets nil)
        (member const-decl "bool" sets nil)
        (numfield nonempty-type-eq-decl nil number_fields nil)
        (* const-decl "[numfield, numfield -> numfield]" number_fields
           nil)
        (posint_times_posint_is_posint application-judgement "posint"
         integers nil)
        (real_gt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (real_le_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (> const-decl "bool" reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (>= const-decl "bool" reals nil)
        (nonneg_int nonempty-type-eq-decl nil integers nil)
        (posnat nonempty-type-eq-decl nil integers nil)
        (set type-eq-decl nil sets nil)
        (nonempty? const-decl "bool" sets nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
        (<= const-decl "bool" reals nil)
        (min const-decl
             "{a | S(a) AND (FORALL x: S(x) IMPLIES a <= x)}" min_nat
             nil)
        (divides const-decl "bool" divides nil))
       shostak))
     (lcm_times 0
      (lcm_times-1 nil 3813414292
       ("" (skosimp)
        (("" (lemma "min_def[posnat]")
          (("" (expand "lcm" 1 1)
            ((""
              (inst-cp -1 "d!1 * lcm(n!1, m!1)"
               "{k: posnat | divides(d!1 * n!1, k) AND divides(d!1 * m!1, k)}")
              (("1" (assert)
                (("1" (hide 2)
                  (("1"
                    (inst -1 "lcm(n!1, m!1)"
                     "{k: posnat | divides(n!1, k) AND divides(m!1, k)}")
                    (("1" (prop)
                      (("1" (hide -1)
                        (("1" (expand "minimum?")
                          (("1" (flatten)
                            (("1" (prop)
                              (("1"
                                (hide (-2 -3))
                                (("1"
                                  (expand "divides")
                                  (("1"
                                    (skosimp)
                                    (("1"
                                      (replaces -1)
                                      (("1"
                                        (inst 1 "x!1")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide (-1 -3))
                                (("2"
                                  (expand "divides")
                                  (("2"
                                    (skosimp)
                                    (("2"
                                      (replaces -1)
                                      (("2"
                                        (inst 1 "x!1")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (skosimp)
                                (("3"
                                  (expand "divides")
                                  (("3"
                                    (skosimp*)
                                    (("3"
                                      (inst -5 "x!1/d!1")
                                      (("1"
                                        (prop)
                                        (("1"
                                          (hide (-2 -3 -4 -5))
                                          (("1"
                                            (lemma "div_mult_pos_le2")
                                            (("1"
                                              (inst?)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide (-2 -3 -4 2))
                                          (("2"
                                            (inst 1 "x!2")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (hide (-1 -3 -4 2))
                                          (("3"
                                            (inst 1 "x!3")
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide (-2 -3 -4 2))
                                        (("2"
                                          (ground)
                                          (("2"
                                            (replaces -1)
                                            (("2"
                                              (rewrite
                                               "associative_mult"
                                               :dir
                                               rl)
                                              (("2"
                                                (rewrite
                                                 "times_div1"
                                                 :dir
                                                 rl)
                                                (("2"
                                                  (rewrite
                                                   "div_cancel1")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide (1 3))
                        (("2" (expand "lcm") (("2" (propax) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (expand "nonempty?")
                        (("2" (expand "empty?")
                          (("2" (inst -1 "n!1 * m!1")
                            (("2" (expand "member")
                              (("2"
                                (expand "divides")
                                (("2"
                                  (prop)
                                  (("1" (inst?) nil nil)
                                   ("2"
                                    (inst 1 "n!1")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (hide 2) (("3" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (expand "nonempty?")
                  (("2" (expand "empty?")
                    (("2" (inst -1 "d!1 * n!1 * m!1")
                      (("2" (expand "member")
                        (("2" (expand "divides")
                          (("2" (prop)
                            (("1" (inst 1 "m!1")
                              (("1" (assert) nil nil)) nil)
                             ("2" (inst 1 "n!1")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide 2) (("3" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ((posnat nonempty-type-eq-decl nil integers nil)
        (> const-decl "bool" reals nil)
        (nonneg_int nonempty-type-eq-decl nil integers nil)
        (>= const-decl "bool" reals nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (int nonempty-type-eq-decl nil integers nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (real nonempty-type-from-decl nil reals nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (boolean nonempty-type-decl nil booleans nil)
        (number nonempty-type-decl nil numbers nil)
        (min_def formula-decl nil min_nat nil)
        (real_gt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (posint_times_posint_is_posint application-judgement "posint"
         integers nil)
        (int_times_int_is_int application-judgement "int" integers nil)
        (m!1 skolem-const-decl "posnat" lcm nil)
        (n!1 skolem-const-decl "posnat" lcm nil)
        (d!1 skolem-const-decl "posnat" lcm nil)
        (* const-decl "[numfield, numfield -> numfield]" number_fields
           nil)
        (numfield nonempty-type-eq-decl nil number_fields nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (divides const-decl "bool" divides nil)
        (nonempty? const-decl "bool" sets nil)
        (set type-eq-decl nil sets nil)
        (empty? const-decl "bool" sets nil)
        (member const-decl "bool" sets nil)
        (minimum? const-decl "bool" min_nat nil)
        (TRUE const-decl "bool" booleans nil)
        (posrat_div_posrat_is_posrat application-judgement "posrat"
         rationals nil)
        (/= const-decl "boolean" notequal nil)
        (nznum nonempty-type-eq-decl nil number_fields nil)
        (/ const-decl "[numfield, nznum -> numfield]" number_fields
           nil)
        (x!1 skolem-const-decl "posnat" lcm nil)
        (posreal nonempty-type-eq-decl nil real_types nil)
        (nonneg_real nonempty-type-eq-decl nil real_types nil)
        (real_le_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (div_mult_pos_le2 formula-decl nil real_props nil)
        (associative_mult formula-decl nil number_fields nil)
        (div_cancel1 formula-decl nil real_props nil)
        (rat_times_rat_is_rat application-judgement "rat" rationals
         nil)
        (rat_div_nzrat_is_rat application-judgement "rat" rationals
         nil)
        (times_div1 formula-decl nil real_props nil)
        (nonzero_real nonempty-type-eq-decl nil reals nil)
        (lcm const-decl "int" divides_lems nil))
       shostak))
     (lcm_rel_prime_TCC1 0
      (lcm_rel_prime_TCC1-1 nil 3813430513 ("" (subtype-tcc) nil nil)
       nil nil
       (lcm_rel_prime subtype "lcm.m"
        "{jj: integers.int | booleans.=>(lcm.n = 0, jj /= 0)}")))
     (lcm_rel_prime 0
      (lcm_rel_prime-1 nil 3813420427
       ("" (skosimp)
        (("" (lemma "min_def[posnat]")
          ((""
            (inst -1 "lcm(n!1, m!1)"
             "{k: posnat | divides(n!1, k) AND divides(m!1, k)}")
            (("1" (prop)
              (("1" (hide -1)
                (("1" (expand "minimum?")
                  (("1" (prop)
                    (("1" (expand "divides" -1)
                      (("1" (skosimp)
                        (("1" (replace -1 -2)
                          (("1" (lemma "rel_prime_div_prod")
                            (("1" (inst -1 "m!1" "n!1" "x!1")
                              (("1"
                                (assert)
                                (("1"
                                  (rewrite "rel_prime_sym")
                                  (("1"
                                    (lemma "divides_lt_abs")
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "abs")
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (prop)
                                              (("1"
                                                (hide
                                                 (-2 -3 -5 -6 -7 1))
                                                (("1"
                                                  (typepred "n!1")
                                                  (("1"
                                                    (expand "lcm")
                                                    (("1"
                                                      (typepred
                                                       "min({k: posnat | divides(n!1, k) AND divides(m!1, k)})")
                                                      (("1"
                                                        (hide
                                                         (-2 -3 -4))
                                                        (("1"
                                                          (replaces -4)
                                                          (("1"
                                                            (lemma
                                                             "pos_times_lt")
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide -3)
                                                        (("2"
                                                          (expand
                                                           "nonempty?")
                                                          (("2"
                                                            (expand
                                                             "empty?")
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "n!1 * m!1")
                                                              (("2"
                                                                (expand
                                                                 "member")
                                                                (("2"
                                                                  (expand
                                                                   "divides")
                                                                  (("2"
                                                                    (prop)
                                                                    (("1"
                                                                      (inst?)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (inst?)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (lemma
                                                 "both_sides_times_pos_le2")
                                                (("2"
                                                  (inst
                                                   -1
                                                   "n!1"
                                                   "m!1"
                                                   "x!1")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (inst
                                                       -6
                                                       "n!1 * m!1")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (hide-all-but
                                                           2)
                                                          (("2"
                                                            (expand
                                                             "divides")
                                                            (("2"
                                                              (ground)
                                                              (("1"
                                                                (inst?)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (inst?)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide (-1 -3 -4 -5 2))
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide (- 1 3))
                (("2" (expand "lcm") (("2" (propax) nil nil)) nil))
                nil))
              nil)
             ("2" (hide (- 2))
              (("2" (expand "nonempty?")
                (("2" (expand "empty?")
                  (("2" (inst -1 "n!1 * m!1")
                    (("2" (expand "member")
                      (("2" (expand "divides")
                        (("2" (ground)
                          (("1" (inst?) nil nil)
                           ("2" (inst?) (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (hide (- 2)) (("3" (grind) nil nil)) nil))
            nil))
          nil))
        nil)
       ((posnat nonempty-type-eq-decl nil integers nil)
        (> const-decl "bool" reals nil)
        (nonneg_int nonempty-type-eq-decl nil integers nil)
        (>= const-decl "bool" reals nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (int nonempty-type-eq-decl nil integers nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (real nonempty-type-from-decl nil reals nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (boolean nonempty-type-decl nil booleans nil)
        (number nonempty-type-decl nil numbers nil)
        (min_def formula-decl nil min_nat nil)
        (minimum? const-decl "bool" min_nat nil)
        (rel_prime_sym formula-decl nil gcd nil)
        (/= const-decl "boolean" notequal nil)
        (x!1 skolem-const-decl "int" lcm nil)
        (nzint nonempty-type-eq-decl nil integers nil)
        (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}"
             real_defs nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
        (<= const-decl "bool" reals nil)
        (min const-decl
             "{a | S(a) AND (FORALL x: S(x) IMPLIES a <= x)}" min_nat
             nil)
        (TRUE const-decl "bool" booleans nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (pos_times_lt formula-decl nil real_props nil)
        (* const-decl "[numfield, numfield -> numfield]" number_fields
           nil)
        (numfield nonempty-type-eq-decl nil number_fields nil)
        (member const-decl "bool" sets nil)
        (empty? const-decl "bool" sets nil)
        (posreal nonempty-type-eq-decl nil real_types nil)
        (nonneg_real nonempty-type-eq-decl nil real_types nil)
        (real_le_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (both_sides_times_pos_le2 formula-decl nil real_props nil)
        (abs_nat_rew formula-decl nil abs_rews nil)
        (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
         integers nil)
        (int_times_even_is_even application-judgement "even_int"
         integers nil)
        (divides_lt_abs formula-decl nil divides_lems nil)
        (int_times_int_is_int application-judgement "int" integers nil)
        (posint_times_posint_is_posint application-judgement "posint"
         integers nil)
        (rel_prime_div_prod formula-decl nil gcd nil)
        (set type-eq-decl nil sets nil)
        (nonempty? const-decl "bool" sets nil)
        (divides const-decl "bool" divides nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (lcm const-decl "int" divides_lems nil)
        (n!1 skolem-const-decl "posnat" lcm nil)
        (m!1 skolem-const-decl "posnat" lcm nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (real_gt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil))
       shostak))
     (lcm_gcd_rel 0
      (lcm_gcd_rel-1 nil 3909154969
       ("" (skosimp)
        (("" (lemma "gcd_div_by_gcd")
          (("" (inst -1 "n!1" "m!1")
            (("" (expand "div_by_gcd")
              (("" (rewrite "gcd_sym")
                (("" (case "integer_pred(n!1 / gcd(m!1, n!1))")
                  (("1" (case "integer_pred(m!1 / gcd(m!1, n!1))")
                    (("1" (lemma "lcm_rel_prime")
                      (("1"
                        (inst -1 "m!1 / gcd(m!1, n!1)"
                         "n!1 / gcd(m!1, n!1)")
                        (("1" (expand "rel_prime")
                          (("1" (assert)
                            (("1" (lemma "lcm_times")
                              (("1"
                                (inst
                                 -1
                                 "gcd(m!1, n!1)"
                                 "m!1 / gcd(m!1, n!1)"
                                 "n!1 / gcd(m!1,n!1)")
                                (("1"
                                  (rewrite "div_cancel1")
                                  (("1"
                                    (rewrite "div_cancel1")
                                    (("1"
                                      (replaces -2)
                                      (("1"
                                        (rewrite "div_times")
                                        (("1"
                                          (rewrite "div_cancel4")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil) ("3" (assert) nil nil))
                        nil))
                      nil)
                     ("2" (hide (- 2))
                      (("2" (typepred "n!1" "m!1")
                        (("2" (lemma "gcd_divides")
                          (("2" (inst?)
                            (("2" (ground)
                              (("2"
                                (hide -2)
                                (("2"
                                  (expand "divides")
                                  (("2"
                                    (skosimp)
                                    (("2"
                                      (name-replace
                                       "gcd!1"
                                       "gcd(m!1, n!1)")
                                      (("2"
                                        (replaces -1)
                                        (("2"
                                          (lemma "times_div1")
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (rewrite "div_cancel1")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide (-1 2))
                    (("2" (typepred "n!1" "m!1")
                      (("2" (lemma "gcd_divides")
                        (("2" (inst?)
                          (("2" (ground)
                            (("2" (hide -1)
                              (("2"
                                (expand "divides")
                                (("2"
                                  (skosimp)
                                  (("2"
                                    (name-replace
                                     "gcd!1"
                                     "gcd(m!1, n!1)")
                                    (("2"
                                      (replaces -1)
                                      (("2"
                                        (lemma "times_div1")
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (rewrite "div_cancel1")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ((gcd_div_by_gcd formula-decl nil gcd_fractions nil)
        (div_by_gcd const-decl "posint" gcd_fractions nil)
        (gcd const-decl "{k: posnat | divides(k, i) AND divides(k, j)}"
             gcd nil)
        (divides const-decl "bool" divides nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (= const-decl "[T, T -> boolean]" equalities nil)
        (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
        (/ const-decl "[numfield, nznum -> numfield]" number_fields
           nil)
        (nznum nonempty-type-eq-decl nil number_fields nil)
        (/= const-decl "boolean" notequal nil)
        (numfield nonempty-type-eq-decl nil number_fields nil)
        (gcd_divides formula-decl nil gcd nil)
        (times_div1 formula-decl nil real_props nil)
        (rat_div_nzrat_is_rat application-judgement "rat" rationals
         nil)
        (real_div_nzreal_is_real application-judgement "real" reals
         nil)
        (real_times_real_is_real application-judgement "real" reals
         nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (lcm_rel_prime formula-decl nil lcm nil)
        (rel_prime const-decl "bool" gcd nil)
        (lcm_times formula-decl nil lcm nil)
        (nonzero_real nonempty-type-eq-decl nil reals nil)
        (div_cancel1 formula-decl nil real_props nil)
        (TRUE const-decl "bool" booleans nil)
        (int_times_int_is_int application-judgement "int" integers nil)
        (* const-decl "[numfield, numfield -> numfield]" number_fields
           nil)
        (lcm const-decl "int" divides_lems nil)
        (div_cancel4 formula-decl nil real_props nil)
        (posrat_times_posrat_is_posrat application-judgement "posrat"
         rationals nil)
        (div_times formula-decl nil real_props nil)
        (n!1 skolem-const-decl "posnat" lcm nil)
        (m!1 skolem-const-decl "posnat" lcm nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (real_gt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (posrat_div_posrat_is_posrat application-judgement "posrat"
         rationals nil)
        (posint_times_posint_is_posint application-judgement "posint"
         integers nil)
        (gcd_sym formula-decl nil gcd nil)
        (posnat nonempty-type-eq-decl nil integers nil)
        (posint nonempty-type-eq-decl nil integers nil)
        (> const-decl "bool" reals nil)
        (nonneg_int nonempty-type-eq-decl nil integers nil)
        (>= const-decl "bool" reals nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (int nonempty-type-eq-decl nil integers nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (real nonempty-type-from-decl nil reals nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (boolean nonempty-type-decl nil booleans nil)
        (number nonempty-type-decl nil numbers nil))
       shostak))
     (lcm_absorption 0
      (lcm_absorption-1 nil 3813432233
       ("" (skosimp)
        (("" (expand "lcm")
          (("" (rewrite "min_def[posnat]")
            (("1" (expand "minimum?")
              (("1" (split)
                (("1" (expand "divides")
                  (("1" (inst 1 "1") (("1" (assert) nil nil)) nil))
                  nil)
                 ("2" (lemma "gcd_divides")
                  (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)
                 ("3" (skosimp)
                  (("3" (hide -2)
                    (("3" (lemma "divides_lt")
                      (("3" (inst?) (("3" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (expand "nonempty?")
                (("2" (expand "empty?")
                  (("2" (inst -1 "n!1")
                    (("2" (expand "member")
                      (("2" (expand "divides")
                        (("2" (prop)
                          (("1" (inst 1 "1") (("1" (assert) nil nil))
                            nil)
                           ("2" (inst 1 "n!1 / gcd(n!1, m!1)")
                            (("1" (assert) nil nil)
                             ("2" (typepred "n!1" "m!1")
                              (("2"
                                (lemma "gcd_divides")
                                (("2"
                                  (inst?)
                                  (("2"
                                    (prop)
                                    (("1"
                                      (hide (-2 -3 -4))
                                      (("1"
                                        (expand "divides")
                                        (("1"
                                          (skosimp)
                                          (("1"
                                            (name-replace
                                             "gcd!1"
                                             "gcd(n!1, m!1)")
                                            (("1"
                                              (replaces -1)
                                              (("1"
                                                (lemma "times_div1")
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (rewrite
                                                     "div_cancel1")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ((lcm const-decl "int" divides_lems nil)
        (empty? const-decl "bool" sets nil)
        (member const-decl "bool" sets nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (TRUE const-decl "bool" booleans nil)
        (real_times_real_is_real application-judgement "real" reals
         nil)
        (real_div_nzreal_is_real application-judgement "real" reals
         nil)
        (nonzero_real nonempty-type-eq-decl nil reals nil)
        (int_times_int_is_int application-judgement "int" integers nil)
        (rat_div_nzrat_is_rat application-judgement "rat" rationals
         nil)
        (div_cancel1 formula-decl nil real_props nil)
        (times_div1 formula-decl nil real_props nil)
        (posrat_times_posrat_is_posrat application-judgement "posrat"
         rationals nil)
        (m!1 skolem-const-decl "posnat" lcm nil)
        (n!1 skolem-const-decl "posnat" lcm nil)
        (/ const-decl "[numfield, nznum -> numfield]" number_fields
           nil)
        (nznum nonempty-type-eq-decl nil number_fields nil)
        (numfield nonempty-type-eq-decl nil number_fields nil)
        (posrat_div_posrat_is_posrat application-judgement "posrat"
         rationals nil)
        (minimum? const-decl "bool" min_nat nil)
        (divides_lt formula-decl nil divides_lems nil)
        (abs_nat_rew formula-decl nil abs_rews nil)
        (real_le_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (nzint nonempty-type-eq-decl nil integers nil)
        (gcd_divides formula-decl nil gcd nil)
        (posint_times_posint_is_posint application-judgement "posint"
         integers nil)
        (posnat nonempty-type-eq-decl nil integers nil)
        (> const-decl "bool" reals nil)
        (nonneg_int nonempty-type-eq-decl nil integers nil)
        (>= const-decl "bool" reals nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (int nonempty-type-eq-decl nil integers nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (real nonempty-type-from-decl nil reals nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (boolean nonempty-type-decl nil booleans nil)
        (number nonempty-type-decl nil numbers nil)
        (gcd const-decl "{k: posnat | divides(k, i) AND divides(k, j)}"
             gcd nil)
        (/= const-decl "boolean" notequal nil)
        (= const-decl "[T, T -> boolean]" equalities nil)
        (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
        (divides const-decl "bool" divides nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (nonempty? const-decl "bool" sets nil)
        (set type-eq-decl nil sets nil)
        (min_def formula-decl nil min_nat nil))
       shostak))
     (lcm_divides 0
      (lcm_divides-1 nil 3813425850
       ("" (skosimp)
        (("" (rewrite "lcm_gcd_rel")
          (("" (lemma "gcd_divides")
            (("" (inst?)
              (("" (prop)
                (("1" (expand "divides")
                  (("1" (skosimp*)
                    (("1" (replace -1 -3)
                      (("1" (replace -2 -4)
                        (("1" (lemma "div_cancel4")
                          (("1"
                            (inst-cp -1 "gcd(n!1, m!1)" "x!1" "n!1")
                            (("1"
                              (inst-cp -1 "gcd(n!1, m!1)" "x!2" "m!1")
                              (("1"
                                (inst-cp
                                 -1
                                 "gcd(n!1, m!1)"
                                 "x!1 * x!3"
                                 "d!1")
                                (("1"
                                  (inst
                                   -1
                                   "gcd(n!1, m!1)"
                                   "x!2 * x!4"
                                   "d!1")
                                  (("1"
                                    (prop)
                                    (("1"
                                      (hide (-2 -4 -6 -8))
                                      (("1"
                                        (replace -3 -4 rl)
                                        (("1"
                                          (hide -3)
                                          (("1"
                                            (lemma "gcd_div_by_gcd")
                                            (("1"
                                              (inst -1 "n!1" "m!1")
                                              (("1"
                                                (expand "div_by_gcd")
                                                (("1"
                                                  (lemma "gcd_sym")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (replace
                                                         -1
                                                         -2
                                                         rl)
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (replace
                                                             -2
                                                             -1
                                                             rl)
                                                            (("1"
                                                              (replace
                                                               -3
                                                               -1
                                                               rl)
                                                              (("1"
                                                                (lemma
                                                                 "rel_prime_div_prod")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "x!1"
                                                                   "x!2"
                                                                   "x!4")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "rel_prime")
                                                                      (("1"
                                                                        (prop)
                                                                        (("1"
                                                                          (expand
                                                                           "divides")
                                                                          (("1"
                                                                            (skosimp)
                                                                            (("1"
                                                                              (replace
                                                                               -1
                                                                               -9)
                                                                              (("1"
                                                                                (replace
                                                                                 -3
                                                                                 -9)
                                                                                (("1"
                                                                                  (replace
                                                                                   -4
                                                                                   -9)
                                                                                  (("1"
                                                                                    (inst
                                                                                     1
                                                                                     "x!5")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           (-4
                                                                            1))
                                                                          (("2"
                                                                            (expand
                                                                             "divides")
                                                                            (("2"
                                                                              (inst?)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil)
                                     ("3" (assert) nil nil)
                                     ("4" (assert) nil nil)
                                     ("5" (assert) nil nil)
                                     ("6" (assert) nil nil)
                                     ("7" (assert) nil nil)
                                     ("8" (assert) nil nil)
                                     ("9" (assert) nil nil)
                                     ("10" (assert) nil nil)
                                     ("11" (assert) nil nil)
                                     ("12" (assert) nil nil)
                                     ("13" (assert) nil nil)
                                     ("14" (assert) nil nil)
                                     ("15" (assert) nil nil)
                                     ("16" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide (-3 -4 1))
                  (("2" (typepred "n!1" "m!1") (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ((lcm_gcd_rel formula-decl nil lcm nil)
        (number nonempty-type-decl nil numbers nil)
        (boolean nonempty-type-decl nil booleans nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (>= const-decl "bool" reals nil)
        (nonneg_int nonempty-type-eq-decl nil integers nil)
        (> const-decl "bool" reals nil)
        (posnat nonempty-type-eq-decl nil integers nil)
        (posint_times_posint_is_posint application-judgement "posint"
         integers nil)
        (posrat_div_posrat_is_posrat application-judgement "posrat"
         rationals nil)
        (real_gt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (divides const-decl "bool" divides nil)
        (div_cancel4 formula-decl nil real_props nil)
        (posint nonempty-type-eq-decl nil integers nil)
        (gcd_sym formula-decl nil gcd nil)
        (rel_prime const-decl "bool" gcd nil)
        (rat_times_rat_is_rat application-judgement "rat" rationals
         nil)
        (posrat_times_posrat_is_posrat application-judgement "posrat"
         rationals nil)
        (rel_prime_div_prod formula-decl nil gcd nil)
        (div_by_gcd const-decl "posint" gcd_fractions nil)
        (gcd_div_by_gcd formula-decl nil gcd_fractions nil)
        (numfield nonempty-type-eq-decl nil number_fields nil)
        (* const-decl "[numfield, numfield -> numfield]" number_fields
           nil)
        (int_times_int_is_int application-judgement "int" integers nil)
        (gcd const-decl "{k: posnat | divides(k, i) AND divides(k, j)}"
             gcd nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (= const-decl "[T, T -> boolean]" equalities nil)
        (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
        (nonzero_real nonempty-type-eq-decl nil reals nil)
        (/= const-decl "boolean" notequal nil)
        (gcd_divides formula-decl nil gcd nil))
       shostak))
     (rel_primes_lcm_div 0
      (rel_primes_lcm_div-1 nil 3909158613
       ("" (skosimp)
        (("" (expand "rel_prime")
          (("" (lemma "lcm_divides")
            (("" (inst -1 "d!1" "m!1" "n!1")
              (("" (rewrite "lcm_gcd_rel") (("" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ((rel_prime const-decl "bool" gcd nil)
        (number nonempty-type-decl nil numbers nil)
        (boolean nonempty-type-decl nil booleans nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (>= const-decl "bool" reals nil)
        (nonneg_int nonempty-type-eq-decl nil integers nil)
        (> const-decl "bool" reals nil)
        (posnat nonempty-type-eq-decl nil integers nil)
        (posrat_div_posrat_is_posrat application-judgement "posrat"
         rationals nil)
        (posint_times_posint_is_posint application-judgement "posint"
         integers nil)
        (lcm_gcd_rel formula-decl nil lcm nil)
        (lcm_divides formula-decl nil lcm nil))
       shostak)))

