(vectors_3D_extra
 (angle_nnreal_le_pi_exists 0
  (angle_nnreal_le_pi_exists-1 nil 3907348180
   ("" (skosimp*)
    (("" (assert)
      (("" (case "norm(va!1)*norm(vb!1) = 0")
        (("1" (assert)
          (("1" (inst + "0")
            (("1" (rewrite "cos_0")
              (("1" (mult-cases -1)
                (("1" (lemma "norm_eq_0")
                  (("1" (inst?)
                    (("1" (assert)
                      (("1" (replace -1)
                        (("1" (hide -1)
                          (("1" (replace -1)
                            (("1" (hide -1) (("1" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (lemma "norm_eq_0")
                  (("2" (inst?)
                    (("2" (assert)
                      (("2" (replace -1)
                        (("2" (hide -1)
                          (("2" (replace -1)
                            (("2" (hide -1) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil)
         ("2" (lemma "dot_norm")
          (("2" (inst?)
            (("2" (flatten)
              (("2"
                (case " -1 <= va!1 * vb!1 / (norm(va!1) * norm(vb!1)) AND
                va!1 * vb!1 / (norm(va!1) * norm(vb!1)) <= 1")
                (("1" (flatten)
                  (("1" (hide -3 -4)
                    (("1"
                      (inst +
                       "acos(va!1 * vb!1/( norm(va!1) * norm(vb!1))) ")
                      (("1" (rewrite "cos_acos")
                        (("1" (cross-mult 2) nil nil)) nil)
                       ("2" (ground) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (prop)
                  (("1" (cross-mult 1) (("1" (assert) nil nil)) nil)
                   ("2" (cross-mult 1) (("2" (assert) nil nil)) nil))
                  nil)
                 ("3" (assert) nil nil) ("4" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (dot_norm formula-decl nil vectors_3D vectors)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (acos const-decl "nnreal_le_pi" acos trig)
    (real_abs_le1 nonempty-type-eq-decl nil trig_types trig)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div2 formula-decl nil real_props nil)
    (cos_acos formula-decl nil trig_inverses trig)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (cos_0 formula-decl nil sincos_def trig)
    (dot_zero_right formula-decl nil vectors_3D vectors)
    (norm_eq_0 formula-decl nil vectors_3D vectors)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (zero const-decl "Vector" vectors_3D vectors)
    (sqv const-decl "nnreal" vectors_3D vectors)
    (* const-decl "real" vectors_3D vectors)
    (zero_times3 formula-decl nil real_props nil)
    (nnreal_le_pi nonempty-type-eq-decl nil trig_types trig)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (cos const-decl "real" sincos_def trig)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil vectors_3D vectors)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (norm const-decl "nnreal" vectors_3D vectors)
    (Vect3 type-eq-decl nil vectors_3D_def vectors))
   shostak))
 (angle_between_nnreal_le_pi 0
  (angle_between_nnreal_le_pi-1 nil 3907343715
   ("" (judgement-tcc) nil nil)
   ((Nz_vect3 type-eq-decl nil vectors_3D vectors)
    (zero const-decl "Vector" vectors_3D vectors)
    (/= const-decl "boolean" notequal nil)
    (Vector type-eq-decl nil vectors_3D vectors)
    (real nonempty-type-from-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (* const-decl "real" vectors_3D vectors)
    (sqv const-decl "nnreal" vectors_3D vectors)
    (norm const-decl "nnreal" vectors_3D vectors)
    (acos const-decl "nnreal_le_pi" acos trig)
    (angle_between const-decl "real" vectors_3D_cos vectors)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil))
   nil
   (angle_between_nnreal_le_pi subtype
    "vectors_3D_cos.angle_between(vectors_3D_extra.u, vectors_3D_extra.v)"
    "nnreal_le_pi")))
 (LI_implies_nzvector 0
  (LI_implies_nzvector-1 nil 3908437983
   ("" (skeep)
    (("" (expand "linearly_independent?")
      (("" (expand "linearly_dependent?")
        (("" (prop)
          (("1" (inst 1 "1" "0") (("1" (assert) nil nil)) nil)
           ("2" (inst 1 "0" "1") (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((linearly_independent? const-decl "bool" cross_3D vectors)
    (scal_1 formula-decl nil vectors_3D vectors)
    (scal_0 formula-decl nil vectors_3D vectors)
    (add_zero_right formula-decl nil vectors_3D vectors)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (add_zero_left formula-decl nil vectors_3D vectors)
    (linearly_dependent? const-decl "bool" cross_3D vectors))
   shostak))
 (norm_cross_charac_aux 0
  (norm_cross_charac_aux-1 nil 3907348358
   ("" (skeep) (("" (grind) nil nil)) nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (sq const-decl "nonneg_real" sq reals)
    (sqv const-decl "nnreal" vectors_3D vectors)
    (* const-decl "real" vectors_3D vectors)
    (cross const-decl "Vector" cross_3D vectors))
   shostak))
 (norm_cross_charac_ 0
  (norm_cross_charac_-1 nil 3907348391
   ("" (skeep)
    (("" (typepred "angle_between(u, v)")
      (("" (expand "angle_between")
        (("" (lemma "angle_nnreal_le_pi_exists")
          (("" (inst?)
            (("" (skeep)
              (("" (beta)
                (("" (case "u * v / (norm(u) * norm(v)) = cos(ab)")
                  (("1" (replaces -1)
                    (("1" (rewrite "acos_cos")
                      (("1" (lemma "norm_cross_charac_aux")
                        (("1" (inst?)
                          (("1" (rewrite* "sq_norm" :dir rl)
                            (("1" (replace -2 -1 RL)
                              (("1"
                                (case-replace
                                 "sq(norm(u) * norm(v) * cos(ab)) = sq(norm(u)) * sq(norm(v)) - sq(norm(u)) * sq(norm(v)) * sq(sin(ab))")
                                (("1"
                                  (assert)
                                  (("1"
                                    (hide -1)
                                    (("1"
                                      (rewrite* "sq_times" :dir rl)
                                      (("1"
                                        (rewrite "sq_eq_abs")
                                        (("1"
                                          (typepred
                                           "norm(cross(u, v))")
                                          (("1"
                                            (expand "abs" -2 1)
                                            (("1"
                                              (case
                                               "norm(u) * norm(v) * sin(ab) >= 0")
                                              (("1"
                                                (expand "abs" -3 1)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but
                                                 (-4 -5 1))
                                                (("2"
                                                  (typepred
                                                   "norm(u)"
                                                   "norm(v)")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (case
                                                       "sin(ab) >= 0")
                                                      (("1"
                                                        (rewrite*
                                                         "nonneg_real_mult_closed")
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         (-5 -6 1))
                                                        (("2"
                                                          (rewrite
                                                           "sin_ge_0")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (rewrite* "sq_times")
                                  (("2"
                                    (rewrite "cos2")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (hide-all-but (-1 1))
                      (("2" (typepred "u" "v")
                        (("2" (lemma "both_sides_div1")
                          (("2"
                            (inst -1 "norm(u) * norm(v)"
                             "cos(ab) * norm(u) * norm(v)" " u * v")
                            (("2" (prop)
                              (("2"
                                (case
                                 "cos(ab) * norm(u) * norm(v) / (norm(u) * norm(v)) = cos(ab)")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (hide-all-but (1 2 3))
                                  (("2"
                                    (rewrite
                                     "associative_mult"
                                     :dir
                                     rl)
                                    (("2"
                                      (name-replace
                                       "nuv"
                                       "norm(u) * norm(v)")
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (cos const-decl "real" sincos_def trig)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (angle_between const-decl "real" vectors_3D_cos vectors)
    (Nz_vect3 type-eq-decl nil vectors_3D vectors)
    (zero const-decl "Vector" vectors_3D vectors)
    (/= const-decl "boolean" notequal nil)
    (Vector type-eq-decl nil vectors_3D vectors)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (angle_between_nnreal_le_pi application-judgement "nnreal_le_pi"
     vectors_3D_extra nil)
    (angle_nnreal_le_pi_exists formula-decl nil vectors_3D_extra nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (* const-decl "real" vectors_3D vectors)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnreal type-eq-decl nil real_types nil)
    (norm const-decl "nnreal" vectors_3D vectors)
    (nnreal_le_pi nonempty-type-eq-decl nil trig_types trig)
    (acos_cos formula-decl nil trig_inverses trig)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (cos2 formula-decl nil sincos_def trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sq_times formula-decl nil sq reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (nonneg_real_mult_closed formula-decl nil real_types nil)
    (sin_ge_0 formula-decl nil trig_ineq trig)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (sq_eq_abs formula-decl nil sq reals)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (sq const-decl "nonneg_real" sq reals)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sin const-decl "real" sincos_def trig)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (cross const-decl "Vector" cross_3D vectors)
    (sq_norm formula-decl nil vectors_3D vectors)
    (nz_sqv_gt_0 application-judgement "posreal" vectors_3D vectors)
    (norm_cross_charac_aux formula-decl nil vectors_3D_extra nil)
    (TRUE const-decl "bool" booleans nil)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (both_sides_div1 formula-decl nil real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (associative_mult formula-decl nil number_fields nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nz_norm_gt_0 application-judgement "posreal" vectors_3D vectors))
   shostak))
 (orth_cross 0
  (orth_cross-1 nil 3907348537
   ("" (skeep)
    (("" (rewrite "dot_comm")
      (("" (lemma "mixed_prod_perm_neg")
        (("" (inst -1 "va" "va" "vb") (("" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((dot_comm formula-decl nil vectors_3D vectors)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil vectors_3D vectors)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (cross const-decl "Vector" cross_3D vectors)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    ([\|\|] const-decl "real" cross_3D vectors)
    (* const-decl "real" vectors_3D vectors)
    (mixed_prod_perm_neg formula-decl nil cross_3D vectors))
   shostak)))

