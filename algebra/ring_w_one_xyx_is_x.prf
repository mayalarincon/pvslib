(ring_w_one_xyx_is_x
 (IMP_ring_xyx_is_x_TCC1 0
  (IMP_ring_xyx_is_x_TCC1-1 nil 3801925197
   ("" (lemma "fullset_is_ring_with_one")
    (("" (expand "ring_with_one?") (("" (assert) nil nil)) nil)) nil)
   ((ring_with_one? const-decl "bool" ring_with_one_def nil)
    (fullset_is_ring_with_one formula-decl nil ring_w_one_xyx_is_x
     nil))
   nil
   (IMP_ring_xyx_is_x assuming
    "ring_xyx_is_x[ring_w_one_xyx_is_x.T, ring_w_one_xyx_is_x.+, ring_w_one_xyx_is_x.*, ring_w_one_xyx_is_x.zero].ring_xyx_is_x"
    "fullset_is_ring: ASSUMPTION ring_def[ring_xyx_is_x.T, ring_xyx_is_x.+, ring_xyx_is_x.*, ring_xyx_is_x.zero].ring?(sets[ring_xyx_is_x.T].fullset)")))
 (IMP_ring_with_one_nz_closed_TCC1 0
  (IMP_ring_with_one_nz_closed_TCC1-1 nil 3801925197
   ("" (rewrite "fullset_is_ring_with_one") nil nil)
   ((fullset_is_ring_with_one formula-decl nil ring_w_one_xyx_is_x
     nil))
   nil
   (IMP_ring_with_one_nz_closed assuming
    "ring_with_one_nz_closed[ring_w_one_xyx_is_x.T, ring_w_one_xyx_is_x.+, ring_w_one_xyx_is_x.*, ring_w_one_xyx_is_x.zero, ring_w_one_xyx_is_x.one].ring_with_one_nz_closed"
    "fullset_is_ring_with_one: ASSUMPTION ring_with_one_def[ring_with_one_nz_closed.T, ring_with_one_nz_closed.+, ring_with_one_nz_closed.*, ring_with_one_nz_closed.zero, ring_with_one_nz_closed.one].ring_with_one?(sets[ring_with_one_nz_closed.T].fullset)")))
 (xyx_one_is_member 0
  (xyx_one_is_member-2 nil 3797957484
   ("" (skosimp)
    (("" (lemma subring_nz_closed_one)
      (("" (inst -1 "U!1" "S!1")
        (("" (assert)
          (("" (lemma xyx_has_identity)
            (("" (inst -1 "S!1")
              (("" (skosimp)
                (("" (expand "identity?")
                  (("" (inst -2 "y!1")
                    (("" (expand "restrict") (("" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((one formal-const-decl "T" ring_w_one_xyx_is_x nil)
    (zero formal-const-decl "T" ring_w_one_xyx_is_x nil)
    (* formal-const-decl "[T, T -> T]" ring_w_one_xyx_is_x nil)
    (+ formal-const-decl "[T, T -> T]" ring_w_one_xyx_is_x nil)
    (T formal-nonempty-type-decl nil ring_w_one_xyx_is_x nil)
    (subring_nz_closed_one formula-decl nil ring_with_one_nz_closed
     nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (member const-decl "bool" sets nil)
    (identity? const-decl "bool" operator_defs nil)
    (restrict const-decl "R" restrict nil)
    (xyx_has_identity formula-decl nil ring_xyx_is_x nil)
    (xyx_R type-eq-decl nil ring_xyx_is_x_def nil)
    (xyx_R? const-decl "bool" ring_xyx_is_x_def nil) nil nil nil nil
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil)
  (xyx_one_is_member-1 nil 3797783904
   ("" (skosimp)
    (("" (lemma nz_closed_subring_same_id)
      (("" (inst -1 "S!1")
        (("" (assert)
          (("" (lemma xyx_has_identity)
            (("" (inst -1 "S!1")
              (("" (skosimp)
                (("" (expand "identity?")
                  (("" (inst -2 "y!1")
                    (("" (expand "restrict") (("" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((one formal-const-decl "T" ring_w_one_xyx_is_x nil)
    (zero formal-const-decl "T" ring_w_one_xyx_is_x nil)
    (* formal-const-decl "[T, T -> T]" ring_w_one_xyx_is_x nil)
    (+ formal-const-decl "[T, T -> T]" ring_w_one_xyx_is_x nil)
    (T formal-nonempty-type-decl nil ring_w_one_xyx_is_x nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (member const-decl "bool" sets nil)
    (identity? const-decl "bool" operator_defs nil)
    (restrict const-decl "R" restrict nil)
    (xyx_has_identity formula-decl nil ring_xyx_is_x nil)
    (xyx_R type-eq-decl nil ring_xyx_is_x_def nil)
    (xyx_R? const-decl "bool" ring_xyx_is_x_def nil) nil nil
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (xyx_ring_with_one 0
  (xyx_ring_with_one-1 nil 3800807984
   ("" (skosimp)
    (("" (lemma "xyx_one_is_member")
      (("" (inst -1 "U!1" "S!1")
        (("" (assert)
          (("" (typepred "S!1")
            (("" (expand "xyx_R?")
              (("" (flatten)
                (("" (hide -2 -4 1)
                  (("" (expand "ring_with_one?")
                    (("" (assert)
                      (("" (expand "monoid?")
                        (("" (expand "monad?")
                          (("" (expand "member")
                            (("" (expand "ring?")
                              ((""
                                (flatten)
                                ((""
                                  (assert)
                                  ((""
                                    (expand "identity?")
                                    ((""
                                      (hide -)
                                      ((""
                                        (skosimp)
                                        ((""
                                          (expand "restrict")
                                          ((""
                                            (rewrite "times_one")
                                            ((""
                                              (rewrite "one_times")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((xyx_one_is_member formula-decl nil ring_w_one_xyx_is_x nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (member const-decl "bool" sets nil) nil nil
    (restrict const-decl "R" restrict nil) nil nil
    (identity? const-decl "bool" operator_defs nil) nil
    (NOT const-decl "[bool -> bool]" booleans nil)
    (xyx_R type-eq-decl nil ring_xyx_is_x_def nil)
    (xyx_R? const-decl "bool" ring_xyx_is_x_def nil) nil nil
    (one formal-const-decl "T" ring_w_one_xyx_is_x nil)
    (zero formal-const-decl "T" ring_w_one_xyx_is_x nil)
    (* formal-const-decl "[T, T -> T]" ring_w_one_xyx_is_x nil)
    (+ formal-const-decl "[T, T -> T]" ring_w_one_xyx_is_x nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-nonempty-type-decl nil ring_w_one_xyx_is_x nil))
   shostak))
 (xyx_R_unit 0
  (xyx_R_unit-1 nil 3801394639
   ("" (skosimp*)
    (("" (typepred "S!1")
      (("" (expand "xyx_R?")
        (("" (flatten)
          (("" (inst -2 "x!1")
            (("" (expand "exists1")
              (("" (flatten)
                (("" (skosimp)
                  (("" (copy -2)
                    (("" (inst 2 "x!2")
                      (("" (lemma times_one)
                        (("" (split 2)
                          (("1" (lemma yxy_is_y)
                            (("1" (inst -1 "x!1" "x!2" "S!1")
                              (("1"
                                (typepred "x!1" "x!2")
                                (("1"
                                  (assert)
                                  (("1"
                                    (inst -4 "x!2")
                                    (("1"
                                      (replace -4 -3 rl)
                                      (("1"
                                        (lemma cancel_right_plus)
                                        (("1"
                                          (inst
                                           -1
                                           "x!2 * one * x!1 * (x!2 * one)"
                                           "x!2 * one"
                                           "inv(x!2 * one)")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lemma times_negative)
                                              (("1"
                                                (inst -1 "x!2" "one")
                                                (("1"
                                                  (case-replace
                                                   "x!2*one = x!2")
                                                  (("1"
                                                    (replace -2 -3 rl)
                                                    (("1"
                                                      (lemma
                                                       "times_associative")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "x!2"
                                                         "x!1"
                                                         "x!2")
                                                        (("1"
                                                          (replace
                                                           -1
                                                           -4)
                                                          (("1"
                                                            (hide -1)
                                                            (("1"
                                                              (rewrite
                                                               "right_distributive"
                                                               :dir
                                                               rl)
                                                              (("1"
                                                                (case
                                                                 "x!2/= zero")
                                                                (("1"
                                                                  (expand
                                                                   "nz_closed?")
                                                                  (("1"
                                                                    (expand
                                                                     "star_closed?")
                                                                    (("1"
                                                                      (inst
                                                                       -12
                                                                       "x!2"
                                                                       " ((x!1 * x!2) + inv(one))")
                                                                      (("1"
                                                                        (expand
                                                                         "member")
                                                                        (("1"
                                                                          (expand
                                                                           "remove")
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (expand
                                                                               "member")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "remove")
                                                                        (("2"
                                                                          (split)
                                                                          (("1"
                                                                            (lemma
                                                                             "cancel_right_plus")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "x!1*x!2"
                                                                               "one"
                                                                               "inv[T, +, zero](one)")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             "member")
                                                                            (("2"
                                                                              (typepred
                                                                               "U!1")
                                                                              (("2"
                                                                                (expand
                                                                                 "ring_with_one?")
                                                                                (("2"
                                                                                  (expand
                                                                                   "monoid?")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "monad?")
                                                                                    (("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (hide-all-but
                                                                                         (-1
                                                                                          -3
                                                                                          -9
                                                                                          -10
                                                                                          -16
                                                                                          1))
                                                                                        (("2"
                                                                                          (case
                                                                                           "member((x!1 * x!2), U!1) AND member((x!1 * x!2), U!1)")
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "R_sum_star_closed")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "U!1"
                                                                                                 "(x!1 * x!2)"
                                                                                                 "inv[T, +, zero](one)")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (hide-all-but
                                                                                                     (-3
                                                                                                      -4
                                                                                                      1))
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "inv_is_member_R")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "U!1"
                                                                                                         "one")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "member")
                                                                                                          (("1"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "subring?")
                                                                                              (("2"
                                                                                                (hide-all-but
                                                                                                 (-1
                                                                                                  -3
                                                                                                  -4
                                                                                                  -5
                                                                                                  1))
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "subset?")
                                                                                                  (("2"
                                                                                                    (inst-cp
                                                                                                     -4
                                                                                                     "x!1")
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -4
                                                                                                       "x!2")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (hide
                                                                                                           -2
                                                                                                           -3)
                                                                                                          (("2"
                                                                                                            (lemma
                                                                                                             "R_prod_star_closed")
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "U!1"
                                                                                                               "x!1"
                                                                                                               "x!2")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (expand
                                                                         "remove")
                                                                        (("3"
                                                                          (assert)
                                                                          (("3"
                                                                            (hide-all-but
                                                                             (-6
                                                                              -12
                                                                              1))
                                                                            (("3"
                                                                              (expand
                                                                               "subring?")
                                                                              (("3"
                                                                                (expand
                                                                                 "subset?")
                                                                                (("3"
                                                                                  (inst
                                                                                   -2
                                                                                   "x!2")
                                                                                  (("3"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (case-replace
                                                                   "x!2=zero")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (hide-all-but
                                                                       (-5
                                                                        -8))
                                                                      (("1"
                                                                        (expand
                                                                         "remove")
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (case-replace "x!1*one = x!1")
                            (("1" (lemma "cancel_right_plus")
                              (("1"
                                (inst
                                 -1
                                 " x!1 * x!2 * x!1"
                                 "x!1"
                                 "inv(x!1)")
                                (("1"
                                  (assert)
                                  (("1"
                                    (lemma "times_negative")
                                    (("1"
                                      (inst -1 "x!1" "one")
                                      (("1"
                                        (case "(x!1 * one) = x!1")
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (replace -1 -2 rl)
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (rewrite
                                                 "times_associative")
                                                (("1"
                                                  (rewrite
                                                   "right_distributive"
                                                   :dir
                                                   rl)
                                                  (("1"
                                                    (expand
                                                     "nz_closed?")
                                                    (("1"
                                                      (expand
                                                       "star_closed?")
                                                      (("1"
                                                        (inst
                                                         -7
                                                         "x!1"
                                                         "((x!2 * x!1) + inv(one))")
                                                        (("1"
                                                          (expand
                                                           "member")
                                                          (("1"
                                                            (expand
                                                             "remove")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "remove")
                                                          (("2"
                                                            (split)
                                                            (("1"
                                                              (hide
                                                               -1
                                                               -2
                                                               -3
                                                               -5
                                                               -6
                                                               3)
                                                              (("1"
                                                                (lemma
                                                                 "cancel_right_plus")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "x!2*x!1"
                                                                   "one"
                                                                   "inv[T, +, zero](one)")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "member")
                                                              (("2"
                                                                (case
                                                                 "member((x!2 * x!1), U!1) AND member(inv[T, +, zero](one),U!1)")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (lemma
                                                                     "R_sum_star_closed")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "U!1"
                                                                       "(x!2 * x!1)"
                                                                       " inv[T, +, zero](one)")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (typepred
                                                                   "U!1")
                                                                  (("2"
                                                                    (expand
                                                                     "ring_with_one?")
                                                                    (("2"
                                                                      (expand
                                                                       "monoid?")
                                                                      (("2"
                                                                        (expand
                                                                         "monad?")
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (hide-all-but
                                                                             (-1
                                                                              -3
                                                                              -12
                                                                              1))
                                                                            (("2"
                                                                              (typepred
                                                                               "x!1"
                                                                               "x!2")
                                                                              (("2"
                                                                                (expand
                                                                                 "remove")
                                                                                (("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "R_prod_star_closed")
                                                                                    (("2"
                                                                                      (lemma
                                                                                       "inv_is_member_R")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -1
                                                                                         "U!1"
                                                                                         "one")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (hide
                                                                                             -1
                                                                                             -6)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "subring?")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "subset?")
                                                                                                (("2"
                                                                                                  (inst-cp
                                                                                                   -5
                                                                                                   "x!1")
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -5
                                                                                                     "x!2")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (hide
                                                                                                         -2
                                                                                                         -3)
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "U!1"
                                                                                                           "x!2"
                                                                                                           "x!1")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (expand
                                                           "remove")
                                                          (("3"
                                                            (expand
                                                             "subring?")
                                                            (("3"
                                                              (typepred
                                                               "x!1")
                                                              (("3"
                                                                (expand
                                                                 "remove")
                                                                (("3"
                                                                  (flatten)
                                                                  (("3"
                                                                    (assert)
                                                                    (("3"
                                                                      (hide-all-but
                                                                       (-1
                                                                        -8
                                                                        2))
                                                                      (("3"
                                                                        (expand
                                                                         "subset?")
                                                                        (("3"
                                                                          (inst
                                                                           -2
                                                                           "x!1")
                                                                          (("3"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((xyx_R type-eq-decl nil ring_xyx_is_x_def nil)
    (xyx_R? const-decl "bool" ring_xyx_is_x_def nil)
    (zero formal-const-decl "T" ring_w_one_xyx_is_x nil)
    (* formal-const-decl "[T, T -> T]" ring_w_one_xyx_is_x nil)
    (+ formal-const-decl "[T, T -> T]" ring_w_one_xyx_is_x nil)
    (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil ring_w_one_xyx_is_x nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (exists1 const-decl "bool" exists1 nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    nil (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil nil nil
    nil nil nil nil nil nil nil nil nil nil nil nil
    (member const-decl "bool" sets nil) nil
    (R_sum_star_closed formula-decl nil ring_basic_properties nil)
    (inv_is_member_R formula-decl nil ring_basic_properties nil) nil
    nil (subset? const-decl "bool" sets nil)
    (R_prod_star_closed formula-decl nil ring_basic_properties nil) nil
    nil (/= const-decl "boolean" notequal nil) nil nil
    (yxy_is_y formula-decl nil ring_xyx_is_x nil)
    (TRUE const-decl "bool" booleans nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (one formal-const-decl "T" ring_w_one_xyx_is_x nil) nil
    (remove const-decl "set" sets nil))
   nil))
 (unit_xyx_R_TCC1 0
  (unit_xyx_R_TCC1-1 nil 3801235702 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil ring_w_one_xyx_is_x nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" ring_w_one_xyx_is_x nil)
    (* formal-const-decl "[T, T -> T]" ring_w_one_xyx_is_x nil)
    (zero formal-const-decl "T" ring_w_one_xyx_is_x nil)
    (one formal-const-decl "T" ring_w_one_xyx_is_x nil)
    (ring_with_one? const-decl "bool" ring_with_one_def nil)
    (ring_with_one nonempty-type-eq-decl nil ring_with_one nil)
    (remove const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (plus_zero formula-decl nil ring nil)
    (restrict const-decl "R" restrict nil)
    (zero_plus formula-decl nil ring nil)
    (identity? const-decl "bool" operator_defs nil)
    (monad? const-decl "bool" monad_def nil)
    (associative? const-decl "bool" operator_defs nil)
    (monoid? const-decl "bool" monoid_def nil)
    (inv_exists? const-decl "bool" group_def nil)
    (group? const-decl "bool" group_def nil)
    (commutative? const-decl "bool" operator_defs nil)
    (abelian_group? const-decl "bool" group_def nil)
    (left_distributive? const-decl "bool" operator_defs_more nil)
    (right_distributive? const-decl "bool" operator_defs_more nil)
    (ring? const-decl "bool" ring_def nil)
    (times_one formula-decl nil ring_with_one nil)
    (one_times formula-decl nil ring_with_one nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (unit_xyx_R subtype "ring_w_one_xyx_is_x.x"
    "(ring_w_one_xyx_is_x.U)")))
 (unit_xyx_R 0
  (unit_xyx_R-1 nil 3801235710
   ("" (skosimp)
    (("" (expand "xyx_R?")
      (("" (split)
        (("1" (typepred "U!1")
          (("1" (expand "ring_with_one?") (("1" (assert) nil nil))
            nil))
          nil)
         ("2" (skosimp)
          (("2" (expand "exists1")
            (("2" (split)
              (("1" (inst -1 "x!1")
                (("1" (expand "unit?")
                  (("1" (flatten)
                    (("1" (expand "r_invertible?")
                      (("1" (skosimp)
                        (("1" (inst 1 "y!1")
                          (("1" (replaces -2 1)
                            (("1" (rewrite one_times) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "unique?")
                (("2" (skosimp)
                  (("2" (lemma l_r_inv_equal)
                    (("2" (inst -1 "U!1" "x!1")
                      (("1" (expand "exists1")
                        (("1" (flatten)
                          (("1" (expand "unique?")
                            (("1" (inst -2 "x!2" "y!1")
                              (("1"
                                (case
                                 "(x!1 * x!2 = one AND x!2 * x!1 = one) AND x!1 * y!1 = one AND y!1 * x!1 = one")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (skosimp)
                                  (("2"
                                    (split)
                                    (("1"
                                      (hide -3 2)
                                      (("1"
                                        (copy -1)
                                        (("1"
                                          (replace -4 -1 rl)
                                          (("1"
                                            (rewrite
                                             times_associative
                                             -1)
                                            (("1"
                                              (rewrite
                                               times_associative
                                               -1)
                                              (("1"
                                                (rewrite
                                                 times_associative
                                                 -1)
                                                (("1"
                                                  (replace -2 -1)
                                                  (("1"
                                                    (rewrite times_one)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (copy -2)
                                      (("2"
                                        (hide -4 2)
                                        (("2"
                                          (replace -4 -1 rl)
                                          (("2"
                                            (rewrite
                                             times_associative
                                             -1)
                                            (("2"
                                              (rewrite
                                               "times_associative"
                                               -1
                                               :dir
                                               rl)
                                              (("2"
                                                (rewrite
                                                 "times_associative"
                                                 -1
                                                 :dir
                                                 rl)
                                                (("2"
                                                  (rewrite
                                                   "times_associative"
                                                   -1
                                                   :dir
                                                   rl)
                                                  (("2"
                                                    (replace -3 -1)
                                                    (("2"
                                                      (rewrite
                                                       one_times)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (hide -3 2)
                                      (("3"
                                        (copy -1)
                                        (("3"
                                          (replace -5 -1 rl)
                                          (("3"
                                            (rewrite
                                             times_associative
                                             -1)
                                            (("3"
                                              (rewrite
                                               times_associative
                                               -1)
                                              (("3"
                                                (rewrite
                                                 times_associative
                                                 -1)
                                                (("3"
                                                  (replace -2 -1)
                                                  (("3"
                                                    (rewrite times_one)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("4"
                                      (copy -2)
                                      (("4"
                                        (replace -6 -1 rl)
                                        (("4"
                                          (rewrite
                                           times_associative
                                           -1)
                                          (("4"
                                            (rewrite
                                             "times_associative"
                                             -1
                                             :dir
                                             rl)
                                            (("4"
                                              (rewrite
                                               "times_associative"
                                               -1
                                               :dir
                                               rl)
                                              (("4"
                                                (rewrite
                                                 "times_associative"
                                                 -1
                                                 :dir
                                                 rl)
                                                (("4"
                                                  (replace -3 -1)
                                                  (("4"
                                                    (rewrite one_times)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (split)
                        (("1" (hide-all-but 1)
                          (("1" (typepred "x!1")
                            (("1" (expand "remove")
                              (("1"
                                (expand "member")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (inst -3 "x!1") nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((xyx_R? const-decl "bool" ring_xyx_is_x_def nil)
    (unit? const-decl "bool" ring_unit_def nil)
    (r_invertible? const-decl "bool" ring_unit_def nil) nil
    (TRUE const-decl "bool" booleans nil)
    (remove const-decl "set" sets nil) nil nil
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil nil
    (= const-decl "[T, T -> boolean]" equalities nil)
    (member const-decl "bool" sets nil)
    (l_r_inv_equal formula-decl nil ring_unit_def nil)
    (unique? const-decl "bool" exists1 nil)
    (exists1 const-decl "bool" exists1 nil) nil nil
    (one formal-const-decl "T" ring_w_one_xyx_is_x nil)
    (zero formal-const-decl "T" ring_w_one_xyx_is_x nil)
    (* formal-const-decl "[T, T -> T]" ring_w_one_xyx_is_x nil)
    (+ formal-const-decl "[T, T -> T]" ring_w_one_xyx_is_x nil)
    (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil ring_w_one_xyx_is_x nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (unit_nz_closed 0
  (unit_nz_closed-1 nil 3801235751
   ("" (skosimp)
    (("" (lemma "unit_xyx_R")
      (("" (inst -1 "U!1")
        (("" (case "xyx_R?(U!1)")
          (("1" (rewrite "xyx_is_x_nz_closed" :dir rl) nil nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((unit_xyx_R formula-decl nil ring_w_one_xyx_is_x nil)
    (xyx_R? const-decl "bool" ring_xyx_is_x_def nil)
    (xyx_R type-eq-decl nil ring_xyx_is_x_def nil)
    (xyx_is_x_nz_closed formula-decl nil ring_xyx_is_x nil) nil nil
    (one formal-const-decl "T" ring_w_one_xyx_is_x nil)
    (zero formal-const-decl "T" ring_w_one_xyx_is_x nil)
    (* formal-const-decl "[T, T -> T]" ring_w_one_xyx_is_x nil)
    (+ formal-const-decl "[T, T -> T]" ring_w_one_xyx_is_x nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-nonempty-type-decl nil ring_w_one_xyx_is_x nil))
   nil)))

