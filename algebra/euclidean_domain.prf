(euclidean_domain
 (IMP_ring_with_one_basic_properties_TCC1 0
  (IMP_ring_with_one_basic_properties_TCC1-1 nil 3908456551
   ("" (lemma "fullset_is_ring_with_one") (("" (propax) nil nil)) nil)
   ((fullset_is_ring_with_one formula-decl nil euclidean_domain nil))
   nil
   (IMP_ring_with_one_basic_properties assuming
    "ring_with_one_basic_properties[euclidean_domain.T, euclidean_domain.+, euclidean_domain.*, euclidean_domain.zero, euclidean_domain.one].ring_with_one_basic_properties"
    "fullset_is_ring_with_one: ASSUMPTION ring_with_one_def[ring_with_one_basic_properties.T, ring_with_one_basic_properties.+, ring_with_one_basic_properties.*, ring_with_one_basic_properties.zero, ring_with_one_basic_properties.one].ring_with_one?(sets[ring_with_one_basic_properties.T].fullset)")))
 (IMP_euclidean_ring_TCC1 0
  (IMP_euclidean_ring_TCC1-1 nil 3908456551
   ("" (lemma "fullset_is_ring_with_one")
    (("" (expand "ring_with_one?") (("" (assert) nil nil)) nil)) nil)
   ((ring_with_one? const-decl "bool" ring_with_one_def nil)
    (fullset_is_ring_with_one formula-decl nil euclidean_domain nil))
   nil
   (IMP_euclidean_ring assuming
    "euclidean_ring[euclidean_domain.T, euclidean_domain.+, euclidean_domain.*, euclidean_domain.zero].euclidean_ring"
    "fullset_is_ring: ASSUMPTION ring_def[euclidean_ring.T, euclidean_ring.+, euclidean_ring.*, euclidean_ring.zero].ring?(sets[euclidean_ring.T].fullset)")))
 (integers_is_euclidean_domain 0
  (integers_is_euclidean_domain-1 nil 3855932955
   ("" (expand "euclidean_domain?")
    (("" (split)
      (("1" (expand "euclidean_ring?")
        (("1" (split)
          (("1" (lemma "Z_commutative_ring_w_one")
            (("1" (expand "commutative_ring_with_one?")
              (("1" (expand "commutative_ring?")
                (("1" (flatten)
                  (("1" (split)
                    (("1" (hide -2)
                      (("1" (expand "Z")
                        (("1" (expand "ring_with_one?")
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (hide -1)
                      (("2" (expand "commutative?")
                        (("2" (skeep)
                          (("2" (inst?)
                            (("1" (inst -1 "y")
                              (("1"
                                (expand "restrict")
                                (("1" (propax) nil nil))
                                nil)
                               ("2"
                                (expand "Z")
                                (("2" (propax) nil nil))
                                nil))
                              nil)
                             ("2" (expand "Z") (("2" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (inst 1 "LAMBDA (x:int): abs(x)")
            (("2" (skeep)
              (("2" (split)
                (("1" (prop)
                  (("1" (expand "restrict")
                    (("1" (lemma "div_mult_pos_le1")
                      (("1" (lemma "abs_mult")
                        (("1" (inst -1 "a" "b")
                          (("1" (replaces -1)
                            (("1" (inst -1 "abs(a)" "abs(b)" "abs(a)")
                              (("1"
                                (case "abs(a) / abs(a) <= abs(b)")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (hide -1 3)
                                  (("2"
                                    (case-replace
                                     "abs(a) / abs(a) = 1")
                                    (("1"
                                      (case "b/=0")
                                      (("1"
                                        (hide -2)
                                        (("1"
                                          (expand "abs")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (prop)
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide -1 2)
                                        (("2"
                                          (prop)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (rewrite "div_simp")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (case "a/=0")
                                (("1"
                                  (hide 3)
                                  (("1"
                                    (expand "abs")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (lift-if)
                                        (("1"
                                          (prop)
                                          (("1" (assert) nil nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2 4)
                                  (("2"
                                    (prop)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (prop)
                  (("2" (lemma "euclid_int")
                    (("2" (case "b > 0")
                      (("1" (inst -2 "b" "a")
                        (("1" (skeep)
                          (("1" (inst 2 "q" "r")
                            (("1" (typepred "r")
                              (("1"
                                (expand "restrict")
                                (("1"
                                  (split)
                                  (("1"
                                    (replace -3 1)
                                    (("1"
                                      (case-replace "b*q = q*b")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (split)
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (expand "abs")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "fullset")
                              (("2" (propax) nil nil)) nil)
                             ("3" (expand "fullset")
                              (("3" (propax) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (hide 3) (("2" (assert) nil nil)) nil))
                        nil)
                       ("2" (inst -1 "-b" "a")
                        (("1" (skeep)
                          (("1" (inst 3 "-q" "r")
                            (("1" (split)
                              (("1"
                                (case-replace "-b*q = -q*b")
                                (("1"
                                  (hide -1 2 3)
                                  (("1"
                                    (replace -1 1)
                                    (("1"
                                      (lemma "commutative_add")
                                      (("1"
                                        (inst -1 "-q*b" "r")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (expand "restrict")
                                  (("2"
                                    (typepred "r")
                                    (("2"
                                      (expand "abs")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "fullset")
                              (("2" (propax) nil nil)) nil)
                             ("3" (expand "fullset")
                              (("3" (propax) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (hide 4) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (lemma "Z_integral_domain_w_one")
        (("2" (expand "Z") (("2" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((commutative_ring_with_one? const-decl "bool" ring_with_one_def
     nil)
    (y skolem-const-decl "(fullset[int])" euclidean_domain nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ring? const-decl "bool" ring_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (fullset const-decl "set" sets nil)
    (x skolem-const-decl "(fullset[int])" euclidean_domain nil)
    (commutative? const-decl "bool" operator_defs nil)
    (ring_with_one? const-decl "bool" ring_with_one_def nil)
    (Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     ring_zn nil)
    (commutative_ring? const-decl "bool" ring_def nil)
    (Z_commutative_ring_w_one formula-decl nil ring_zn nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (r skolem-const-decl "mod(b)" euclidean_domain nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (< const-decl "bool" reals nil)
    (q skolem-const-decl "int" euclidean_domain nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (b skolem-const-decl "(fullset[int])" euclidean_domain nil)
    (commutative_add formula-decl nil number_fields nil)
    (r skolem-const-decl "mod(-b)" euclidean_domain nil)
    (q skolem-const-decl "int" euclidean_domain nil)
    (euclid_int formula-decl nil euclidean_division nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (> const-decl "bool" reals nil)
    (a skolem-const-decl "(fullset[int])" euclidean_domain nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_simp formula-decl nil real_props nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (<= const-decl "bool" reals nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (TRUE const-decl "bool" booleans nil)
    (abs_mult formula-decl nil real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (difference const-decl "set" sets nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (euclidean_ring? const-decl "bool" euclidean_ring_def nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (Z_integral_domain_w_one formula-decl nil ring_zn nil)
    (euclidean_domain? const-decl "bool" euclidean_domain_def nil))
   shostak))
 (field_is_euclidean_domain 0
  (field_is_euclidean_domain-1 nil 3855927762
   ("" (skeep)
    (("" (typepred "F")
      (("" (expand "euclidean_domain?")
        (("" (expand "euclidean_ring?")
          (("" (expand "field?")
            (("" (flatten)
              (("" (expand "division_ring?")
                (("" (expand "ring_with_one?")
                  (("" (flatten)
                    (("" (expand "commutative_ring?")
                      (("" (assert)
                        (("" (split)
                          (("1"
                            (inst 1
                             "(LAMBDA (x: (difference(F, singleton(zero)))): 1)")
                            (("1" (skeep)
                              (("1"
                                (split)
                                (("1"
                                  (prop)
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (prop)
                                  (("2"
                                    (expand "group?")
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (expand "inv_exists?")
                                        (("2"
                                          (inst -4 "b")
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (inst 2 "a * y" "zero")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (rewrite
                                                   "times_associative")
                                                  (("1"
                                                    (replaces -5)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (lemma
                                                 "zero_is_member_R[T,+,*,zero]")
                                                (("2"
                                                  (inst -1 "F")
                                                  (("2"
                                                    (expand "member")
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (lemma
                                                 "R_prod_star_closed[T,+,*,zero]")
                                                (("3"
                                                  (inst -1 "F" "a" "y")
                                                  (("3"
                                                    (assert)
                                                    (("3"
                                                      (typepred "y")
                                                      (("3"
                                                        (expand
                                                         "remove")
                                                        (("3"
                                                          (expand
                                                           "member")
                                                          (("3"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "remove")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "integral_domain_w_one?")
                            (("2" (expand "integral_domain?")
                              (("2"
                                (expand "commutative_ring?")
                                (("2"
                                  (expand "monad?")
                                  (("2"
                                    (expand "group?")
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (expand "monoid?")
                                        (("2"
                                          (expand "monad?")
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "nz_closed?")
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((field? const-decl "bool" field_def nil)
    (one formal-const-decl "T" euclidean_domain nil)
    (zero formal-const-decl "T" euclidean_domain nil)
    (* formal-const-decl "[T, T -> T]" euclidean_domain nil)
    (+ formal-const-decl "[T, T -> T]" euclidean_domain nil)
    (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil euclidean_domain nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (euclidean_ring? const-decl "bool" euclidean_ring_def nil)
    (ring_with_one? const-decl "bool" ring_with_one_def nil)
    (commutative_ring? const-decl "bool" ring_def nil)
    (remove const-decl "set" sets nil)
    (F skolem-const-decl "(field?)" euclidean_domain nil)
    (b skolem-const-decl "(F)" euclidean_domain nil)
    (a skolem-const-decl "(F)" euclidean_domain nil)
    (y skolem-const-decl "(remove(zero, F))" euclidean_domain nil)
    (times_associative formula-decl nil ring nil)
    (times_one formula-decl nil ring_with_one nil)
    (TRUE const-decl "bool" booleans nil)
    (right_identity formula-decl nil monad nil)
    (ring? const-decl "bool" ring_def nil)
    (member const-decl "bool" sets nil)
    (zero_is_member_R formula-decl nil ring_basic_properties nil)
    (R_prod_star_closed formula-decl nil ring_basic_properties nil)
    (inv_exists? const-decl "bool" group_def nil)
    (group? const-decl "bool" group_def nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (difference const-decl "set" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set[T]" euclidean_domain nil)
    (integral_domain? const-decl "bool" integral_domain_def nil)
    (monad? const-decl "bool" monad_def nil)
    (one_member formula-decl nil monad nil)
    (nz_closed? const-decl "bool" ring_nz_closed_def nil)
    (monoid? const-decl "bool" monoid_def nil)
    (integral_domain_w_one? const-decl "bool"
     integral_domain_with_one_def nil)
    (division_ring? const-decl "bool" division_ring_def nil)
    (euclidean_domain? const-decl "bool" euclidean_domain_def nil))
   shostak))
 (euclidean_is_unique_factorization_domain_TCC1 0
  (euclidean_is_unique_factorization_domain_TCC1-1 nil 3858611750
   ("" (subtype-tcc) nil nil)
   ((euclidean_domain? const-decl "bool" euclidean_domain_def nil)
    (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (commutative_ring? const-decl "bool" ring_def nil)
    (/= const-decl "boolean" notequal nil)
    (euclidean_ring? const-decl "bool" euclidean_ring_def nil)
    (remove const-decl "set" sets nil)
    (nz_closed? const-decl "bool" ring_nz_closed_def nil)
    (integral_domain? const-decl "bool" integral_domain_def nil)
    (integral_domain_w_one? const-decl "bool"
     integral_domain_with_one_def nil)
    (member const-decl "bool" sets nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (zero formal-const-decl "T" euclidean_domain nil)
    (+ formal-const-decl "[T, T -> T]" euclidean_domain nil)
    (T formal-nonempty-type-decl nil euclidean_domain nil)
    (one_member formula-decl nil monad nil)
    (right_identity formula-decl nil monad nil)
    (restrict const-decl "R" restrict nil)
    (left_identity formula-decl nil monad nil)
    (identity? const-decl "bool" operator_defs nil)
    (monad? const-decl "bool" monad_def nil)
    (associative? const-decl "bool" operator_defs nil)
    (monoid? const-decl "bool" monoid_def nil)
    (inv_exists? const-decl "bool" group_def nil)
    (group? const-decl "bool" group_def nil)
    (commutative? const-decl "bool" operator_defs nil)
    (abelian_group? const-decl "bool" group_def nil)
    (left_distributive? const-decl "bool" operator_defs_more nil)
    (right_distributive? const-decl "bool" operator_defs_more nil)
    (ring? const-decl "bool" ring_def nil)
    (one formal-const-decl "T" euclidean_domain nil)
    (* formal-const-decl "[T, T -> T]" euclidean_domain nil)
    (times_one formula-decl nil ring_with_one nil)
    (one_times formula-decl nil ring_with_one nil)
    (ring_with_one? const-decl "bool" ring_with_one_def nil))
   nil
   (euclidean_is_unique_factorization_domain subtype
    "euclidean_domain.R"
    "(ring_with_one_def[euclidean_domain.T, euclidean_domain.+, euclidean_domain.*, euclidean_domain.zero, euclidean_domain.one].ring_with_one?)")))
 (euclidean_is_unique_factorization_domain 0
  (euclidean_is_unique_factorization_domain-1 nil 3858611757
   ("" (skeep)
    (("" (lemma "PID_is_UFD")
      (("" (lemma "euclidean_ring_is_principal_ideal")
        (("" (inst -1 "R")
          (("" (inst -2 "R")
            (("" (expand "principal_ideal_domain?")
              (("" (typepred "R")
                (("" (expand "euclidean_domain?")
                  (("" (flatten) (("" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((one formal-const-decl "T" euclidean_domain nil)
    (zero formal-const-decl "T" euclidean_domain nil)
    (* formal-const-decl "[T, T -> T]" euclidean_domain nil)
    (+ formal-const-decl "[T, T -> T]" euclidean_domain nil)
    (T formal-nonempty-type-decl nil euclidean_domain nil)
    (PID_is_UFD formula-decl nil ring_unique_factorization_domain nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (euclidean_ring? const-decl "bool" euclidean_ring_def nil)
    (euclidean_domain? const-decl "bool" euclidean_domain_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (R skolem-const-decl "(euclidean_domain?[T, +, *, zero, one])"
     euclidean_domain nil)
    (principal_ideal_domain? const-decl "bool"
     ring_principal_ideal_domain_def nil)
    (principal_ideal_domain type-eq-decl nil
     ring_principal_ideal_domain_def nil)
    (euclidean_ring_is_principal_ideal formula-decl nil euclidean_ring
     nil))
   shostak)))

