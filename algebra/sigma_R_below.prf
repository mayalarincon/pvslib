(sigma_R_below
 (IMP_ring_TCC1 0
  (IMP_ring_TCC1-1 nil 3784736036
   ("" (rewrite "fullset_is_ring") nil nil)
   ((fullset_is_ring formula-decl nil sigma_R_below nil)) nil
   (IMP_ring assuming
    "ring[sigma_R_below.T, sigma_R_below.+, sigma_R_below.*, sigma_R_below.zero].ring"
    "fullset_is_ring: ASSUMPTION ring_def[ring.T, ring.+, ring.*, ring.zero].ring?(sets[ring.T].fullset)")))
 (R_sigma_below_TCC1 0
  (R_sigma_below_TCC1-1 nil 3784736036 ("" (subtype-tcc) nil nil) nil
   nil
   (R_sigma_below subtype "(number_fields.-)(sigma_R_below.high, 1)"
    "int_below_N")))
 (R_sigma_below_TCC2 0
  (R_sigma_below_TCC2-1 nil 3784736036 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" sigma_R_below nil)
    (int_below_N type-eq-decl nil sigma_R_below nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (int_plus_int_is_int application-judgement "int" integers nil))
   nil
   (R_sigma_below termination
    "sigma_R_below.R_sigma_below(sigma_R_below.low, (number_fields.-)(sigma_R_below.high, 1), sigma_R_below.F)"
    "nil")))
 (R_sigma_below_TCC3 0
  (R_sigma_below_TCC3-1 nil 3784736036 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" sigma_R_below nil)
    (int_below_N type-eq-decl nil sigma_R_below nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil (R_sigma_below subtype "sigma_R_below.high" "below[N]")))
 (R_sigma_b_eq_arg 0
  (R_sigma_b_eq_arg-1 nil 3784736439
   ("" (skosimp)
    (("" (expand "R_sigma_below")
      (("" (expand "R_sigma_below") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((R_sigma_below def-decl "T" sigma_R_below nil)
    (left_identity formula-decl nil monad nil)
    (T formal-nonempty-type-decl nil sigma_R_below nil)
    (+ formal-const-decl "[T, T -> T]" sigma_R_below nil)
    (zero formal-const-decl "T" sigma_R_below nil))
   shostak))
 (R_sigma_b_spl_TCC1 0
  (R_sigma_b_spl_TCC1-1 nil 3784736036 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" sigma_R_below nil)
    (int_below_N type-eq-decl nil sigma_R_below nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (R_sigma_b_spl subtype
    "(number_fields.+)(sigma_R_below.low, sigma_R_below.n)"
    "int_below_N")))
 (R_sigma_b_spl 0
  (R_sigma_b_spl-1 nil 3784736498
   ("" (induct "m")
    (("1" (skosimp*)
      (("1" (expand "R_sigma_below") (("1" (assert) nil nil)) nil))
      nil)
     ("2" (skosimp*)
      (("2" (expand "R_sigma_below" + (1 3))
        (("2" (inst?)
          (("2" (assert)
            (("2" (lemma "plus_associative")
              (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skosimp)
        (("3" (lemma "R_sigma_b_spl_TCC1")
          (("3" (inst -1 "high!1" "low!1" " m!2" "n!1")
            (("3" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((R_sigma_b_spl_TCC1 subtype-tcc nil sigma_R_below nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (plus_associative formula-decl nil ring nil)
    (* formal-const-decl "[T, T -> T]" sigma_R_below nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (zero formal-const-decl "T" sigma_R_below nil)
    (right_identity formula-decl nil monad nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (+ formal-const-decl "[T, T -> T]" sigma_R_below nil)
    (R_sigma_below def-decl "T" sigma_R_below nil)
    (T formal-nonempty-type-decl nil sigma_R_below nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" sigma_R_below nil)
    (int_below_N type-eq-decl nil sigma_R_below nil)
    (below type-eq-decl nil nat_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (R_sigma_b_split_TCC1 0
  (R_sigma_b_split_TCC1-1 nil 3784736036 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" sigma_R_below nil)
    (int_below_N type-eq-decl nil sigma_R_below nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (R_sigma_b_split subtype "sigma_R_below.m" "int_below_N")))
 (R_sigma_b_split 0
  (R_sigma_b_split-1 nil 3784736536
   ("" (skosimp*)
    (("" (case "high!1<low!1")
      (("1" (expand "R_sigma_below") (("1" (assert) nil nil)) nil)
       ("2" (case-replace "m!1=low!1-1")
        (("1" (assert)
          (("1" (expand "R_sigma_below") (("1" (assert) nil nil)) nil))
          nil)
         ("2" (lemma "R_sigma_b_spl")
          (("2"
            (inst -1 "F!1" "high!1" "low!1" "high!1-m!1" "m!1-low!1")
            (("1" (assert) nil nil) ("2" (assert) nil nil)
             ("3" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_below_N type-eq-decl nil sigma_R_below nil)
    (N formal-const-decl "posnat" sigma_R_below nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (zero formal-const-decl "T" sigma_R_below nil)
    (+ formal-const-decl "[T, T -> T]" sigma_R_below nil)
    (T formal-nonempty-type-decl nil sigma_R_below nil)
    (left_identity formula-decl nil monad nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (R_sigma_below def-decl "T" sigma_R_below nil)
    (R_sigma_b_spl formula-decl nil sigma_R_below nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (below type-eq-decl nil nat_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil nil
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields
       nil))
   shostak))
 (R_sigma_b_first_TCC1 0
  (R_sigma_b_first_TCC1-1 nil 3784736036 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" sigma_R_below nil)
    (int_below_N type-eq-decl nil sigma_R_below nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (R_sigma_b_first subtype "sigma_R_below.low" "below[N]")))
 (R_sigma_b_first 0
  (R_sigma_b_first-1 nil 3784736583
   ("" (skosimp*)
    (("" (lemma "R_sigma_b_split")
      (("" (inst?)
        (("" (inst -1 "low!1")
          (("" (rewrite "R_sigma_b_eq_arg") (("" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((R_sigma_b_split formula-decl nil sigma_R_below nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (R_sigma_b_eq_arg formula-decl nil sigma_R_below nil)
    (int_below_N type-eq-decl nil sigma_R_below nil)
    (T formal-nonempty-type-decl nil sigma_R_below nil)
    (below type-eq-decl nil nat_types nil)
    (N formal-const-decl "posnat" sigma_R_below nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (R_sigma_b_last_TCC1 0
  (R_sigma_b_last_TCC1-1 nil 3784736036 ("" (subtype-tcc) nil nil) nil
   nil
   (R_sigma_b_last subtype "(number_fields.-)(sigma_R_below.high, 1)"
    "int_below_N")))
 (R_sigma_b_last_TCC2 0
  (R_sigma_b_last_TCC2-1 nil 3784736036 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" sigma_R_below nil)
    (int_below_N type-eq-decl nil sigma_R_below nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (R_sigma_b_last subtype "sigma_R_below.high" "below[N]")))
 (R_sigma_b_last 0
  (R_sigma_b_last-1 nil 3784736611
   ("" (skosimp)
    (("" (expand "R_sigma_below" 1 1) (("" (assert) nil nil)) nil))
    nil)
   ((R_sigma_below def-decl "T" sigma_R_below nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (R_sigma_b_middle_TCC1 0
  (R_sigma_b_middle_TCC1-1 nil 3784736036 ("" (subtype-tcc) nil nil)
   nil nil
   (R_sigma_b_middle subtype "(number_fields.-)(sigma_R_below.i, 1)"
    "int_below_N")))
 (R_sigma_b_middle 0
  (R_sigma_b_middle-1 nil 3784736636
   ("" (skosimp*)
    (("" (lemma "R_sigma_b_split")
      (("" (inst?)
        (("" (inst -1 "i!1")
          (("" (assert)
            (("" (expand "R_sigma_below" -1 2) (("" (propax) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((R_sigma_b_split formula-decl nil sigma_R_below nil)
    (R_sigma_below def-decl "T" sigma_R_below nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_below_N type-eq-decl nil sigma_R_below nil)
    (T formal-nonempty-type-decl nil sigma_R_below nil)
    (below type-eq-decl nil nat_types nil)
    (N formal-const-decl "posnat" sigma_R_below nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (R_sigma_b_left_aux 0
  (R_sigma_b_left_aux-1 nil 3784736657
   ("" (induct "highn")
    (("1" (prop)
      (("1" (skosimp*)
        (("1" (expand "R_sigma_below")
          (("1" (lift-if)
            (("1" (assert)
              (("1" (prop)
                (("1" (expand "R_sigma_below") (("1" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skosimp*)
      (("2" (expand "R_sigma_below" 1)
        (("2" (lift-if)
          (("2" (prop)
            (("1" (hide -3) (("1" (assert) nil nil)) nil)
             ("2" (inst?)
              (("2" (replaces -2)
                (("2" (rewrite "right_distributive") nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((right_distributive formula-decl nil ring nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (TRUE const-decl "bool" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (zero formal-const-decl "T" sigma_R_below nil)
    (+ formal-const-decl "[T, T -> T]" sigma_R_below nil)
    (times_zero formula-decl nil ring nil)
    (left_identity formula-decl nil monad nil)
    (below_induction formula-decl nil bounded_nat_inductions nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" sigma_R_below nil)
    (* formal-const-decl "[T, T -> T]" sigma_R_below nil)
    (R_sigma_below def-decl "T" sigma_R_below nil)
    (int_below_N type-eq-decl nil sigma_R_below nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (T formal-nonempty-type-decl nil sigma_R_below nil)
    (below type-eq-decl nil nat_types nil)
    (pred type-eq-decl nil defined_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   shostak))
 (R_sigma_b_left 0
  (R_sigma_b_left-1 nil 3784736706
   ("" (skosimp)
    (("" (case "high!1 < 0")
      (("1" (expand "R_sigma_below") (("1" (assert) nil nil)) nil)
       ("2" (lemma "R_sigma_b_left_aux")
        (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((int_below_N type-eq-decl nil sigma_R_below nil)
    (N formal-const-decl "posnat" sigma_R_below nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (zero formal-const-decl "T" sigma_R_below nil)
    (* formal-const-decl "[T, T -> T]" sigma_R_below nil)
    (+ formal-const-decl "[T, T -> T]" sigma_R_below nil)
    (T formal-nonempty-type-decl nil sigma_R_below nil)
    (times_zero formula-decl nil ring nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (R_sigma_below def-decl "T" sigma_R_below nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil) nil
    (R_sigma_b_left_aux formula-decl nil sigma_R_below nil))
   shostak))
 (R_sigma_b_right_aux 0
  (R_sigma_b_right_aux-1 nil 3784736730
   ("" (induct "highn")
    (("1" (prop)
      (("1" (skosimp*)
        (("1" (expand "R_sigma_below")
          (("1" (lift-if)
            (("1" (assert)
              (("1" (prop)
                (("1" (expand "R_sigma_below") (("1" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skosimp*)
      (("2" (expand "R_sigma_below" 1)
        (("2" (lift-if)
          (("2" (prop)
            (("1" (hide -3) (("1" (assert) nil nil)) nil)
             ("2" (inst?)
              (("2" (replaces -2)
                (("2" (rewrite "left_distributive") nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((left_distributive formula-decl nil ring nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (TRUE const-decl "bool" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (zero formal-const-decl "T" sigma_R_below nil)
    (+ formal-const-decl "[T, T -> T]" sigma_R_below nil)
    (zero_times formula-decl nil ring nil)
    (left_identity formula-decl nil monad nil)
    (below_induction formula-decl nil bounded_nat_inductions nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" sigma_R_below nil)
    (* formal-const-decl "[T, T -> T]" sigma_R_below nil)
    (R_sigma_below def-decl "T" sigma_R_below nil)
    (int_below_N type-eq-decl nil sigma_R_below nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (T formal-nonempty-type-decl nil sigma_R_below nil)
    (below type-eq-decl nil nat_types nil)
    (pred type-eq-decl nil defined_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   shostak))
 (R_sigma_b_right 0
  (R_sigma_b_right-1 nil 3784736815
   ("" (skosimp)
    (("" (case "high!1 < 0")
      (("1" (expand "R_sigma_below") (("1" (assert) nil nil)) nil)
       ("2" (lemma "R_sigma_b_right_aux")
        (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((int_below_N type-eq-decl nil sigma_R_below nil)
    (N formal-const-decl "posnat" sigma_R_below nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (zero formal-const-decl "T" sigma_R_below nil)
    (* formal-const-decl "[T, T -> T]" sigma_R_below nil)
    (+ formal-const-decl "[T, T -> T]" sigma_R_below nil)
    (T formal-nonempty-type-decl nil sigma_R_below nil)
    (zero_times formula-decl nil ring nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (R_sigma_below def-decl "T" sigma_R_below nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil) nil
    (R_sigma_b_right_aux formula-decl nil sigma_R_below nil))
   shostak))
 (R_sigma_b_inv_aux 0
  (R_sigma_b_inv_aux-1 nil 3784736841
   ("" (induct "highn")
    (("1" (prop)
      (("1" (skosimp)
        (("1" (expand "R_sigma_below")
          (("1" (lift-if)
            (("1" (prop)
              (("1" (assert) nil nil)
               ("2" (expand "R_sigma_below") (("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skosimp*)
      (("2" (expand "R_sigma_below" 1)
        (("2" (lift-if)
          (("2" (prop)
            (("1" (assert) nil nil)
             ("2" (inst?)
              (("2" (replace -2 2)
                (("2" (rewrite "negate_plus")
                  (("2" (rewrite "plus_commutative") nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((* formal-const-decl "[T, T -> T]" sigma_R_below nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (negate_plus formula-decl nil ring nil)
    (plus_commutative formula-decl nil ring nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (inv_one formula-decl nil group nil)
    (left_identity formula-decl nil monad nil)
    (below_induction formula-decl nil bounded_nat_inductions nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" sigma_R_below nil)
    (inv const-decl "{y | x * y = one AND y * x = one}" group nil)
    (zero formal-const-decl "T" sigma_R_below nil)
    (+ formal-const-decl "[T, T -> T]" sigma_R_below nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (R_sigma_below def-decl "T" sigma_R_below nil)
    (int_below_N type-eq-decl nil sigma_R_below nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (T formal-nonempty-type-decl nil sigma_R_below nil)
    (below type-eq-decl nil nat_types nil)
    (pred type-eq-decl nil defined_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   shostak))
 (R_sigma_b_inv 0
  (R_sigma_b_inv-1 nil 3784736866
   ("" (skosimp)
    (("" (case "high!1 < 0")
      (("1" (expand "R_sigma_below") (("1" (assert) nil nil)) nil)
       ("2" (lemma "R_sigma_b_inv_aux")
        (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((int_below_N type-eq-decl nil sigma_R_below nil)
    (N formal-const-decl "posnat" sigma_R_below nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (zero formal-const-decl "T" sigma_R_below nil)
    (+ formal-const-decl "[T, T -> T]" sigma_R_below nil)
    (T formal-nonempty-type-decl nil sigma_R_below nil)
    (inv_one formula-decl nil group nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (R_sigma_below def-decl "T" sigma_R_below nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil) nil
    (R_sigma_b_inv_aux formula-decl nil sigma_R_below nil))
   shostak))
 (R_sigma_b_eq_k_aux_TCC1 0
  (R_sigma_b_eq_k_aux_TCC1-1 nil 3784736036 ("" (subtype-tcc) nil nil)
   nil nil (R_sigma_b_eq_k_aux subtype "sigma_R_below.j" "below[N]")))
 (R_sigma_b_eq_k_aux_TCC2 0
  (R_sigma_b_eq_k_aux_TCC2-1 nil 3784736036 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" sigma_R_below nil)
    (below type-eq-decl nil nat_types nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (subrange type-eq-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil))
   nil
   (R_sigma_b_eq_k_aux subtype
    "(number_fields.+)(sigma_R_below.j, sigma_R_below.k)" "below[N]")))
 (R_sigma_b_eq_k_aux 0
  (R_sigma_b_eq_k_aux-1 nil 3784736899
   ("" (induct "highn")
    (("1" (prop)
      (("1" (skosimp)
        (("1" (expand "R_sigma_below")
          (("1" (assert)
            (("1" (lift-if)
              (("1" (prop)
                (("1" (assert) nil nil)
                 ("2" (lift-if)
                  (("2" (prop)
                    (("1" (assert) nil nil)
                     ("2" (assert)
                      (("2" (inst -3 "0")
                        (("2" (assert)
                          (("2" (expand "R_sigma_below")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skosimp*)
      (("2" (inst -2 "F!1" "G!1" "low!1" "k!1")
        (("2" (prop)
          (("1" (expand "R_sigma_below" 1)
            (("1" (lift-if)
              (("1" (prop)
                (("1" (assert) nil nil)
                 ("2" (assert)
                  (("2" (inst -4 "1 + jb!1") (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert) nil nil)
           ("3" (hide 2)
            (("3" (skosimp) (("3" (inst -3 "j!1") nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("3" (hide 2) (("3" (skosimp) (("3" (assert) nil nil)) nil)) nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (zero formal-const-decl "T" sigma_R_below nil)
    (+ formal-const-decl "[T, T -> T]" sigma_R_below nil)
    (left_identity formula-decl nil monad nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below_induction formula-decl nil bounded_nat_inductions nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" sigma_R_below nil)
    (R_sigma_below def-decl "T" sigma_R_below nil)
    (int_below_N type-eq-decl nil sigma_R_below nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (T formal-nonempty-type-decl nil sigma_R_below nil)
    (pred type-eq-decl nil defined_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (subrange type-eq-decl nil integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (R_sigma_b_eq_k_TCC1 0
  (R_sigma_b_eq_k_TCC1-1 nil 3784736036 ("" (subtype-tcc) nil nil) nil
   nil (R_sigma_b_eq_k subtype "sigma_R_below.j" "below[N]")))
 (R_sigma_b_eq_k_TCC2 0
  (R_sigma_b_eq_k_TCC2-1 nil 3784736036 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" sigma_R_below nil)
    (int_below_N type-eq-decl nil sigma_R_below nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (subrange type-eq-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil))
   nil
   (R_sigma_b_eq_k subtype
    "(number_fields.+)(sigma_R_below.j, sigma_R_below.k)" "below[N]")))
 (R_sigma_b_eq_k 0
  (R_sigma_b_eq_k-1 nil 3784736940
   ("" (skosimp)
    (("" (case "high!1 < 0")
      (("1" (expand "R_sigma_below") (("1" (assert) nil nil)) nil)
       ("2" (lemma "R_sigma_b_eq_k_aux")
        (("2" (inst?) (("1" (assert) nil nil) ("2" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((int_below_N type-eq-decl nil sigma_R_below nil)
    (N formal-const-decl "posnat" sigma_R_below nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (R_sigma_below def-decl "T" sigma_R_below nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    nil (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-nonempty-type-decl nil sigma_R_below nil)
    (R_sigma_b_eq_k_aux formula-decl nil sigma_R_below nil))
   shostak))
 (R_sigma_b_in_ideal_aux_TCC1 0
  (R_sigma_b_in_ideal_aux_TCC1-1 nil 3784736036
   ("" (skosimp*)
    (("" (typepred "j!1")
      (("" (typepred "highn!1") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((subrange type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil)
    (N formal-const-decl "posnat" sigma_R_below nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (R_sigma_b_in_ideal_aux subtype "sigma_R_below.j" "below[N]")))
 (R_sigma_b_in_ideal_aux 0
  (R_sigma_b_in_ideal_aux-1 nil 3784737002
   ("" (induct "highn")
    (("1" (prop)
      (("1" (skosimp*)
        (("1" (expand "member")
          (("1" (expand "R_sigma_below")
            (("1" (prop)
              (("1" (hide (-1 -2 -4))
                (("1" (expand "ideal?")
                  (("1" (expand "left_ideal?")
                    (("1" (expand "subring?")
                      (("1" (expand "left_swallow?")
                        (("1" (expand "ring?")
                          (("1" (expand "abelian_group?")
                            (("1" (expand "group?")
                              (("1"
                                (expand "monoid?")
                                (("1"
                                  (expand "monad?")
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand "member")
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "R_sigma_below")
                (("2" (assert) (("2" (inst?) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skosimp*)
      (("2" (expand "member")
        (("2" (expand "R_sigma_below" 1)
          (("2" (prop)
            (("1" (hide (-1 -2 -3 -5))
              (("1" (expand "ideal?")
                (("1" (expand "left_ideal?")
                  (("1" (expand "subring?")
                    (("1" (expand "ring?")
                      (("1" (expand "abelian_group?")
                        (("1" (expand "group?")
                          (("1" (expand "monoid?")
                            (("1" (expand "monad?")
                              (("1"
                                (flatten)
                                (("1"
                                  (expand "member")
                                  (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (inst -2 "F!1" "I!1" "R!1" "low!1")
              (("2" (assert)
                (("2" (prop)
                  (("1" (inst -4 "1 + jb!1")
                    (("1" (hide (-2 1))
                      (("1" (expand "ideal?")
                        (("1" (expand "left_ideal?")
                          (("1" (flatten)
                            (("1" (hide (-3 -4))
                              (("1"
                                (expand "subring?")
                                (("1"
                                  (expand "ring?")
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (hide (-2 -4 -5 -6 -7))
                                      (("1"
                                        (expand "abelian_group?")
                                        (("1"
                                          (expand "group?")
                                          (("1"
                                            (expand "monoid?")
                                            (("1"
                                              (expand "monad?")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (hide
                                                   (-3 -4 -5 -6 -7))
                                                  (("1"
                                                    (expand
                                                     "star_closed?")
                                                    (("1"
                                                      (expand "member")
                                                      (("1"
                                                        (inst?)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (hide (-2 3))
                      (("2" (skosimp) (("2" (inst?) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   (nil nil nil nil (star_closed? const-decl "bool" groupoid_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (subring? const-decl "bool" ring_def nil)
    (group? const-decl "bool" group_def nil)
    (monad? const-decl "bool" monad_def nil)
    (monoid? const-decl "bool" monoid_def nil)
    (abelian_group? const-decl "bool" group_def nil)
    (left_swallow? const-decl "bool" ring_ideal_def nil)
    (left_ideal? const-decl "bool" ring_ideal_def nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (left_identity formula-decl nil monad nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (below_induction formula-decl nil bounded_nat_inductions nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" sigma_R_below nil)
    (R_sigma_below def-decl "T" sigma_R_below nil)
    (int_below_N type-eq-decl nil sigma_R_below nil)
    (member const-decl "bool" sets nil)
    (subrange type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (ring? const-decl "bool" ring_def nil)
    (zero formal-const-decl "T" sigma_R_below nil)
    (* formal-const-decl "[T, T -> T]" sigma_R_below nil)
    (+ formal-const-decl "[T, T -> T]" sigma_R_below nil)
    (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil sigma_R_below nil)
    (below type-eq-decl nil nat_types nil)
    (pred type-eq-decl nil defined_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   shostak))
 (R_sigma_b_in_ideal_TCC1 0
  (R_sigma_b_in_ideal_TCC1-1 nil 3784736036
   ("" (skosimp*) (("" (typepred "j!1") (("" (assert) nil nil)) nil))
    nil)
   ((subrange type-eq-decl nil integers nil)
    (int_below_N type-eq-decl nil sigma_R_below nil)
    (N formal-const-decl "posnat" sigma_R_below nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil (R_sigma_b_in_ideal subtype "sigma_R_below.j" "below[N]")))
 (R_sigma_b_in_ideal 0
  (R_sigma_b_in_ideal-1 nil 3784737053
   ("" (skosimp)
    (("" (case "high!1 < 0")
      (("1" (expand "R_sigma_below")
        (("1" (assert)
          (("1" (hide (-1 -3))
            (("1" (expand "ideal?")
              (("1" (expand "left_ideal?")
                (("1" (expand "subring?")
                  (("1" (expand "left_swallow?")
                    (("1" (expand "ring?")
                      (("1" (expand "abelian_group?")
                        (("1" (expand "group?")
                          (("1" (expand "monoid?")
                            (("1" (expand "monad?")
                              (("1"
                                (flatten)
                                (("1"
                                  (expand "member")
                                  (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (lemma "R_sigma_b_in_ideal_aux")
        (("2" (inst -1 "F!1" "I!1" "R!1" "high!1" "low!1")
          (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((int_below_N type-eq-decl nil sigma_R_below nil)
    (N formal-const-decl "posnat" sigma_R_below nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member const-decl "bool" sets nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (subring? const-decl "bool" ring_def nil)
    (ring? const-decl "bool" ring_def nil)
    (group? const-decl "bool" group_def nil)
    (monad? const-decl "bool" monad_def nil)
    (monoid? const-decl "bool" monoid_def nil)
    (abelian_group? const-decl "bool" group_def nil)
    (left_swallow? const-decl "bool" ring_ideal_def nil)
    (left_ideal? const-decl "bool" ring_ideal_def nil)
    (R_sigma_below def-decl "T" sigma_R_below nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    nil (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-nonempty-type-decl nil sigma_R_below nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" sigma_R_below nil)
    (* formal-const-decl "[T, T -> T]" sigma_R_below nil)
    (zero formal-const-decl "T" sigma_R_below nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (R_sigma_b_in_ideal_aux formula-decl nil sigma_R_below nil))
   shostak))
 (R_sigma_b_add_zero_aux 0
  (R_sigma_b_add_zero_aux-1 nil 3784737126
   ("" (skosimp*)
    (("" (lemma R_sigma_b_in_ideal_aux)
      (("" (inst -1 "F!1" "I!1" "R!1" "highn!1" "low!1")
        (("" (assert)
          (("" (split)
            (("1" (lemma "self_coset")
              (("1"
                (name-replace "b" "R_sigma_below(low!1, highn!1, F!1)")
                (("1" (inst -1 "I!1" "R!1" "b")
                  (("1" (expand "ideal?")
                    (("1" (expand "left_ideal?")
                      (("1" (flatten) (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp)
              (("2" (inst -2 "j!1")
                (("2" (flatten)
                  (("2" (lemma "self_coset")
                    (("2" (inst -1 "I!1" "R!1" "F!1(j!1)")
                      (("2" (expand "ideal?")
                        (("2" (expand "left_ideal?")
                          (("2" (flatten) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((R_sigma_b_in_ideal_aux formula-decl nil sigma_R_below nil)
    (member const-decl "bool" sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (subrange type-eq-decl nil integers nil)
    (self_coset formula-decl nil ring_cosets_lemmas nil)
    (left_ideal? const-decl "bool" ring_ideal_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (R_sigma_below def-decl "T" sigma_R_below nil)
    (int_below_N type-eq-decl nil sigma_R_below nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (ring? const-decl "bool" ring_def nil)
    (zero formal-const-decl "T" sigma_R_below nil)
    (* formal-const-decl "[T, T -> T]" sigma_R_below nil)
    (+ formal-const-decl "[T, T -> T]" sigma_R_below nil)
    (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil sigma_R_below nil)
    (below type-eq-decl nil nat_types nil)
    (N formal-const-decl "posnat" sigma_R_below nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (R_sigma_b_add_zero 0
  (R_sigma_b_add_zero-1 nil 3784737176
   ("" (skosimp)
    (("" (case "high!1 < 0")
      (("1" (expand "R_sigma_below")
        (("1" (assert) (("1" (rewrite "left_zero") nil nil)) nil)) nil)
       ("2" (lemma "R_sigma_b_add_zero_aux")
        (("2" (inst?) (("1" (assert) nil nil) ("2" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((int_below_N type-eq-decl nil sigma_R_below nil)
    (N formal-const-decl "posnat" sigma_R_below nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member const-decl "bool" sets nil)
    (left_zero formula-decl nil ring_cosets_lemmas nil)
    (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil sigma_R_below nil)
    (+ formal-const-decl "[T, T -> T]" sigma_R_below nil)
    (* formal-const-decl "[T, T -> T]" sigma_R_below nil)
    (zero formal-const-decl "T" sigma_R_below nil)
    (R_sigma_below def-decl "T" sigma_R_below nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    nil (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (ring? const-decl "bool" ring_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (R_sigma_b_add_zero_aux formula-decl nil sigma_R_below nil))
   shostak)))

