%%----------------------------------------------------------------------------
%%
%% Authors:	
%% 		Thaynara Arielly de Lima
%% 		Universidade Federal de Goiás - Brasil
%%			
%%		André Luiz Galdino
%%		Universidade Federal de Catalão - Brasil
%%
%%              Andréia Borges Avelar da Silva
%%		Universidade de Brasília - Brasil
%%
%%		Mauricio Ayala-Rincón
%%		Universidade de Brasília - Brasil
%%
%%----------------------------------------------------------------------------
%%
%%	Last version: October 27, 2023
%%
%%----------------------------------------------------------------------------

quaternions_def[T:Type+,+,*:[T,T->T],zero,one,a,b:T]: THEORY

BEGIN

ASSUMING IMPORTING group_def[T,+,zero]  

       fullset_is_group: ASSUMPTION group?(fullset[T])

   ENDASSUMING


IMPORTING group[T,+,zero] %the unary operator inv(x) is defined in this theory

 quat: TYPE = [#  x, y, z, t: T #]

 mk_quat(x,y,z,t: T) : MACRO quat =  (# x := x, y := y, z := z, t := t #) 

  CONVERSION mk_quat

%----------- Special quaternions ---------------------------------------------

zero_q: quat = (zero, zero, zero, zero)
one_q: quat = (one, zero, zero, zero)
i: quat = (zero, one, zero, zero)
j: quat = (zero, zero, one, zero)
k: quat = (zero, zero, zero, one)
a_q: quat = (a, zero, zero, zero)
b_q: quat = (b, zero, zero, zero)


% %  ----------- Scalar and Pure Quaternion --------------------------------------
  nzquat: set[quat] = remove(zero_q,fullset[quat])
  scalar_F: set[quat] = {u: quat | u`y = zero AND u`z = zero AND u`t = zero}
  pure_quat: set[quat] = {u: quat | u`x = zero}
  nzpure_quat: set[(pure_quat)] = remove(zero_q,fullset[(pure_quat)])
  pure_part(q: quat): quat = (zero, q`y, q`z, q`t)
  sc_part(q: quat): quat = (q`x, zero, zero, zero)

% %  ----------- Quaternion Operations -------------------------------------------

u, v, w:  VAR quat
c, d :    VAR T

inv(v): quat = ( inv(v`x), inv(v`y), inv(v`z), inv(v`t) ) ;

conjugate(v): quat = ( v`x, inv(v`y), inv(v`z), inv(v`t) ) ; 

+(u,v): quat  = ( u`x + v`x, u`y + v`y, u`z + v`z, u`t + v`t ) ; 

*(c,v): quat = ( c * v`x, c * v`y,  c * v`z, c * v`t ) ;  %scalar multiplication

* :[quat,quat -> quat] ; %quaternion multiplication

red_trace(v): quat = v + conjugate(v);

red_norm(v): quat = v*conjugate(v);

sqr_i          :AXIOM i * i = a_q
sqr_j          :AXIOM j * j = b_q
ij_is_k        :AXIOM i * j = k
ji_prod        :AXIOM j * i = inv(k)
sc_quat_assoc  :AXIOM c*(u*v) = (c*u)*v 
sc_comm        :AXIOM (c*u)*v = u*(c*v)
sc_assoc       :AXIOM c*(d*u) = (c*d)*u
q_distr        :AXIOM distributive?[quat](*, +) 
q_distrl       :AXIOM (u + v) * w = u * w + v * w
q_assoc        :AXIOM associative?[quat](*)
one_q_times    :AXIOM one_q * u = u
times_one_q    :AXIOM u * one_q = u


END quaternions_def
