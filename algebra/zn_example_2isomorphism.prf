(zn_example_2isomorphism
 (Z_epi_mZ_nZ_TCC1 0
  (Z_epi_mZ_nZ_TCC1-1 nil 3810338858
   ("" (skosimp)
    (("" (expand "/")
      (("" (lemma "lcoset_iff_coset")
        (("" (inst?)
          (("" (assert)
            (("" (hide 2)
              (("" (expand "left_coset?")
                (("" (inst?)
                  (("" (expand "nZ")
                    (("" (inst 1 "x!1") (("" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((/ const-decl "setof[set[T]]" cosets_def nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil) nil
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (ring? const-decl "bool" ring_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     ring_zn nil)
    (nZ const-decl "set[int]" ring_zn nil) nil nil
    (left_coset? const-decl "bool" cosets_def nil)
    (lcoset_iff_coset formula-decl nil ring_cosets_lemmas nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields
       nil))
   nil
   (Z_epi_mZ_nZ subtype
    "(cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].+)(number_fields.*(zn_example_2isomorphism.m, zn_example_2isomorphism.x), ring_zn.nZ(zn_example_2isomorphism.n))"
    "(cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)]./(ring_zn.nZ(zn_example_2isomorphism.m), ring_zn.nZ(zn_example_2isomorphism.n)))")))
 (Z_epi_mZ_nZ_TCC2 0
  (Z_epi_mZ_nZ_TCC2-1 nil 3810338858
   ("" (skosimp)
    (("" (lemma "quotient_group_is_abelian_group")
      (("" (inst?)
        (("1" (expand "abelian_group?") (("1" (flatten) nil nil)) nil)
         ("2" (hide (-1 2))
          (("2" (lemma "nZ_mZ_subset")
            (("2" (inst?)
              (("2" (assert)
                (("2" (lemma "nZ_ideal")
                  (("2" (inst-cp -1 "n!1")
                    (("2" (inst -1 "m!1")
                      (("2" (expand "ideal?" -1)
                        (("2" (expand "left_ideal?")
                          (("2" (flatten)
                            (("2" (hide (-2 -3))
                              (("2"
                                (lemma "ideal_transitive")
                                (("2"
                                  (inst -1 "nZ(m!1)" "nZ(n!1)" "Z")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (hide (-1 2))
          (("3" (lemma "nZ_ideal")
            (("3" (inst?)
              (("3" (expand "ideal?")
                (("3" (expand "left_ideal?")
                  (("3" (expand "subring?") (("3" (flatten) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (quotient_group_is_abelian_group formula-decl nil quotient_rings
     nil)
    (subring? const-decl "bool" ring_def nil)
    (nZ_ideal formula-decl nil ring_zn nil)
    (left_ideal? const-decl "bool" ring_ideal_def nil)
    (Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     ring_zn nil)
    (ideal_transitive formula-decl nil ring_ideal nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (nZ_mZ_subset formula-decl nil ring_zn nil)
    (abelian_group? const-decl "bool" group_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (ideal? const-decl "bool" ring_ideal_def nil) nil
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (ring? const-decl "bool" ring_def nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nZ const-decl "set[int]" ring_zn nil) nil)
   nil
   (Z_epi_mZ_nZ subtype
    "restrict[set[int], cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset(ring_zn.nZ(zn_example_2isomorphism.m), ring_zn.nZ(zn_example_2isomorphism.n)), booleans.bool].restrict(cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)]./(ring_zn.nZ(zn_example_2isomorphism.m), ring_zn.nZ(zn_example_2isomorphism.n)))"
    "group[coset[int, restrict[[numfield, numfield], [int, int], numfield](+)](nZ(m), nZ(n)), add[int, restrict[[numfield, numfield], [int, int], numfield](+)](nZ(m), nZ(n)), nZ(n)]")))
 (Z_epi_mZ_nZ_TCC3 0
  (Z_epi_mZ_nZ_TCC3-1 nil 3810338858
   ("" (skosimp*)
    (("" (expand "restrict")
      (("" (lemma "lcoset_iff_coset")
        (("" (inst?)
          (("" (assert)
            (("" (hide 2)
              (("" (expand "left_coset?")
                (("" (inst 1 "m!1 * x1!1")
                  (("1" (replaces -1) (("1" (assert) nil nil)) nil)
                   ("2" (hide -)
                    (("2" (expand "nZ")
                      (("2" (inst 1 "x1!1") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((restrict const-decl "R" restrict nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (ring? const-decl "bool" ring_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     ring_zn nil)
    (setof type-eq-decl nil defined_types nil)
    (/ const-decl "setof[set[T]]" cosets_def nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nZ const-decl "set[int]" ring_zn nil)
    (int_times_int_is_int application-judgement "int" integers nil) nil
    nil (TRUE const-decl "bool" booleans nil)
    (left_coset? const-decl "bool" cosets_def nil)
    (lcoset_iff_coset formula-decl nil ring_cosets_lemmas nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields
       nil))
   nil
   (Z_epi_mZ_nZ subtype "zn_example_2isomorphism.phi"
    "[(ring_zn.Z) -> (restrict[set[int], cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset(ring_zn.nZ(zn_example_2isomorphism.m), ring_zn.nZ(zn_example_2isomorphism.n)), booleans.bool].restrict(cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)]./(ring_zn.nZ(zn_example_2isomorphism.m), ring_zn.nZ(zn_example_2isomorphism.n))))]")))
 (Z_epi_mZ_nZ_TCC4 0
  (Z_epi_mZ_nZ_TCC4-1 nil 3810338858
   ("" (skosimp*)
    (("" (hide -1)
      (("" (lemma "lcoset_iff_coset")
        (("" (inst?)
          (("" (assert)
            (("" (hide 2)
              (("" (expand "left_coset?")
                (("" (lemma "add_is_coset")
                  (("" (inst -1 "nZ(m!1)" "nZ(n!1)" "x1!1`1" "x1!1`2")
                    (("1" (skosimp)
                      (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
                     ("2" (hide 2)
                      (("2" (lemma "nZ_mZ_subset")
                        (("2" (inst?)
                          (("2" (assert)
                            (("2" (lemma "nZ_ideal")
                              (("2"
                                (inst-cp -1 "n!1")
                                (("2"
                                  (inst -1 "m!1")
                                  (("2"
                                    (expand "ideal?" -1)
                                    (("2"
                                      (expand "left_ideal?")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (hide (-2 -3))
                                          (("2"
                                            (lemma "ideal_transitive")
                                            (("2"
                                              (inst
                                               -1
                                               "nZ(m!1)"
                                               "nZ(n!1)"
                                               "Z")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (hide 2)
                      (("3" (lemma "nZ_ideal")
                        (("3" (inst?)
                          (("3" (expand "ideal?")
                            (("3" (expand "left_ideal?")
                              (("3"
                                (expand "subring?")
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_plus_int_is_int application-judgement "int" integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (coset? const-decl "bool" cosets_def nil)
    (coset type-eq-decl nil cosets_def nil)
    (add const-decl "set[T]" cosets_def nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nZ const-decl "set[int]" ring_zn nil)
    (add_is_coset formula-decl nil quotient_rings nil)
    (subring? const-decl "bool" ring_def nil)
    (nZ_ideal formula-decl nil ring_zn nil)
    (left_ideal? const-decl "bool" ring_ideal_def nil)
    (Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     ring_zn nil)
    (ideal_transitive formula-decl nil ring_ideal nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (nZ_mZ_subset formula-decl nil ring_zn nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (ideal type-eq-decl nil ring_ideal_def nil) nil
    (ideal? const-decl "bool" ring_ideal_def nil) nil
    (ring? const-decl "bool" ring_def nil)
    (left_coset? const-decl "bool" cosets_def nil)
    (lcoset_iff_coset formula-decl nil ring_cosets_lemmas nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields
       nil))
   nil
   (Z_epi_mZ_nZ subtype
    "cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].add(ring_zn.nZ(zn_example_2isomorphism.m), ring_zn.nZ(zn_example_2isomorphism.n))"
    "[[cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset(ring_zn.nZ(zn_example_2isomorphism.m), ring_zn.nZ(zn_example_2isomorphism.n)), cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset(ring_zn.nZ(zn_example_2isomorphism.m), ring_zn.nZ(zn_example_2isomorphism.n))] -> cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset(ring_zn.nZ(zn_example_2isomorphism.m), ring_zn.nZ(zn_example_2isomorphism.n))]")))
 (Z_epi_mZ_nZ_TCC5 0
  (Z_epi_mZ_nZ_TCC5-1 nil 3810338858
   ("" (skosimp*)
    (("" (rewrite "ideal_is_coset")
      (("1" (hide (-1 2))
        (("1" (lemma "nZ_mZ_subset")
          (("1" (inst?)
            (("1" (assert)
              (("1" (lemma "nZ_ideal")
                (("1" (inst-cp -1 "n!1")
                  (("1" (inst -1 "m!1")
                    (("1" (expand "ideal?" -1)
                      (("1" (expand "left_ideal?")
                        (("1" (flatten)
                          (("1" (hide (-2 -3))
                            (("1" (lemma "ideal_transitive")
                              (("1"
                                (inst -1 "nZ(m!1)" "nZ(n!1)" "Z")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide (-1 2))
        (("2" (lemma "nZ_ideal")
          (("2" (inst?)
            (("2" (expand "ideal?")
              (("2" (expand "left_ideal?")
                (("2" (expand "subring?") (("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ideal_is_coset formula-decl nil ring_cosets_lemmas nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (ring? const-decl "bool" ring_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nZ const-decl "set[int]" ring_zn nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nZ_mZ_subset formula-decl nil ring_zn nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (ideal_transitive formula-decl nil ring_ideal nil)
    (Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     ring_zn nil)
    (left_ideal? const-decl "bool" ring_ideal_def nil)
    (nZ_ideal formula-decl nil ring_zn nil)
    (subring? const-decl "bool" ring_def nil))
   nil
   (Z_epi_mZ_nZ subtype "ring_zn.nZ(zn_example_2isomorphism.n)"
    "cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset(ring_zn.nZ(zn_example_2isomorphism.m), ring_zn.nZ(zn_example_2isomorphism.n))")))
 (Z_epi_mZ_nZ_TCC6 0
  (Z_epi_mZ_nZ_TCC6-1 nil 3810338858
   ("" (skosimp)
    (("" (hide -)
      (("" (lemma "Z_ring")
        (("" (expand "ring?")
          (("" (expand "abelian_group?") (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((ring? const-decl "bool" ring_def nil)
    (abelian_group? const-decl "bool" group_def nil)
    (Z_ring formula-decl nil ring_zn nil))
   nil
   (Z_epi_mZ_nZ assuming
    "homomorphisms[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+), 0, cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset(ring_zn.nZ(zn_example_2isomorphism.m), ring_zn.nZ(zn_example_2isomorphism.n)), cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].add(ring_zn.nZ(zn_example_2isomorphism.m), ring_zn.nZ(zn_example_2isomorphism.n)), ring_zn.nZ(zn_example_2isomorphism.n)].homomorphisms"
    "T1_is_group: ASSUMPTION group_def[homomorphisms.T1, homomorphisms.*, homomorphisms.one1].group?(sets[homomorphisms.T1].fullset)")))
 (Z_epi_mZ_nZ_TCC7 0
  (Z_epi_mZ_nZ_TCC7-1 nil 3810338858
   ("" (skosimp)
    (("" (lemma "fullset_quot_group_is_ring")
      (("" (inst -1 "nZ(m!1)" "nZ(n!1)")
        (("1" (expand "ring?")
          (("1" (expand "abelian_group?") (("1" (flatten) nil nil))
            nil))
          nil)
         ("2" (hide (-1 2))
          (("2" (lemma "nZ_mZ_subset")
            (("2" (inst?)
              (("2" (assert)
                (("2" (lemma "nZ_ideal")
                  (("2" (inst-cp -1 "n!1")
                    (("2" (inst -1 "m!1")
                      (("2" (expand "ideal?" -1)
                        (("2" (expand "left_ideal?")
                          (("2" (flatten)
                            (("2" (hide (-2 -3))
                              (("2"
                                (lemma "ideal_transitive")
                                (("2"
                                  (inst -1 "nZ(m!1)" "nZ(n!1)" "Z")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (hide (-1 2))
          (("3" (lemma "nZ_ideal")
            (("3" (inst?)
              (("3" (expand "ideal?")
                (("3" (expand "left_ideal?")
                  (("3" (expand "subring?") (("3" (flatten) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (fullset_quot_group_is_ring formula-decl nil quotient_rings nil)
    (subring? const-decl "bool" ring_def nil)
    (nZ_ideal formula-decl nil ring_zn nil)
    (left_ideal? const-decl "bool" ring_ideal_def nil)
    (Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     ring_zn nil)
    (ideal_transitive formula-decl nil ring_ideal nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (nZ_mZ_subset formula-decl nil ring_zn nil)
    (abelian_group? const-decl "bool" group_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (ideal? const-decl "bool" ring_ideal_def nil) nil
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (ring? const-decl "bool" ring_def nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nZ const-decl "set[int]" ring_zn nil) nil)
   nil
   (Z_epi_mZ_nZ assuming
    "homomorphisms[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+), 0, cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset(ring_zn.nZ(zn_example_2isomorphism.m), ring_zn.nZ(zn_example_2isomorphism.n)), cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].add(ring_zn.nZ(zn_example_2isomorphism.m), ring_zn.nZ(zn_example_2isomorphism.n)), ring_zn.nZ(zn_example_2isomorphism.n)].homomorphisms"
    "T2_is_group: ASSUMPTION group_def[homomorphisms.T2, homomorphisms.o, homomorphisms.one2].group?(sets[homomorphisms.T2].fullset)")))
 (Z_epi_mZ_nZ_TCC8 0
  (Z_epi_mZ_nZ_TCC8-1 nil 3810338858
   ("" (skosimp)
    (("" (hide (-1 -3 -4))
      (("" (prop)
        (("1" (expand "divides")
          (("1" (skosimp)
            (("1" (replaces -1)
              (("1" (lemma "times_div1")
                (("1" (inst?)
                  (("1" (rewrite "div_cancel1")
                    (("1" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert) nil nil) ("3" (assert) nil nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    nil (TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (div_cancel1 formula-decl nil real_props nil)
    (times_div1 formula-decl nil real_props nil))
   nil
   (Z_epi_mZ_nZ subtype
    "number_fields./(zn_example_2isomorphism.n, zn_example_2isomorphism.m)"
    "posnat")))
 (Z_epi_mZ_nZ 0
  (Z_epi_mZ_nZ-1 nil 3810339015
   ("" (skosimp*)
    (("" (skoletin*)
      (("" (prop)
        (("1" (expand "homomorphism?")
          (("1" (skosimp)
            (("1" (replaces -2)
              (("1" (assert)
                (("1" (expand "restrict")
                  (("1" (lemma "add_charac")
                    (("1" (inst?)
                      (("1" (replaces -1)
                        (("1" (lemma "commutative_mult")
                          (("1" (inst-cp -1 "a!1" "m!1")
                            (("1" (inst -1 "b!1" "m!1")
                              (("1"
                                (replaces -1)
                                (("1" (replaces -1) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (expand "nZ")
                          (("2" (inst 1 "b!1") (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil)
                       ("3" (hide 2)
                        (("3" (expand "nZ")
                          (("3" (inst 1 "a!1") (("3" (assert) nil nil))
                            nil))
                          nil))
                        nil)
                       ("4" (hide 2)
                        (("4" (lemma "nZ_mZ_subset")
                          (("4" (inst?)
                            (("4" (assert)
                              (("4"
                                (lemma "nZ_ideal")
                                (("4"
                                  (inst-cp -1 "n!1")
                                  (("4"
                                    (inst -1 "m!1")
                                    (("4"
                                      (expand "ideal?" -1)
                                      (("4"
                                        (expand "left_ideal?")
                                        (("4"
                                          (flatten)
                                          (("4"
                                            (hide (-2 -3))
                                            (("4"
                                              (lemma
                                               "ideal_transitive")
                                              (("4"
                                                (inst
                                                 -1
                                                 "nZ(m!1)"
                                                 "nZ(n!1)"
                                                 "Z")
                                                (("4"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("5" (hide 2)
                        (("5" (lemma "nZ_ideal")
                          (("5" (inst?)
                            (("5" (expand "ideal?")
                              (("5"
                                (expand "left_ideal?")
                                (("5"
                                  (expand "subring?")
                                  (("5" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "surjective?")
          (("2" (skosimp*)
            (("2" (typepred "y!1")
              (("2" (lemma "nZ_is_cyclic")
                (("2" (inst -1 "m!1")
                  (("2" (lemma "mZ_nZ_is_cyclic")
                    (("2" (inst?)
                      (("2" (assert)
                        (("2" (replaces -1)
                          (("2" (expand "extend")
                            (("2" (prop)
                              (("2"
                                (expand "generated_by" -2)
                                (("2"
                                  (skosimp)
                                  (("2"
                                    (replace -2 1)
                                    (("2"
                                      (inst 1 "i!1")
                                      (("1"
                                        (decompose-equality -5)
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (replaces -1)
                                            (("1"
                                              (lemma
                                               "lcoset_power_int")
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (replaces -1)
                                                  (("1"
                                                    (rewrite
                                                     "power_sum_int")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (expand "nZ")
                                                    (("2"
                                                      (inst 1 "1")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (hide (-1 -2 -3 2))
                                                  (("3"
                                                    (lemma
                                                     "nZ_mZ_subset")
                                                    (("3"
                                                      (inst?)
                                                      (("3"
                                                        (assert)
                                                        (("3"
                                                          (lemma
                                                           "nZ_ideal")
                                                          (("3"
                                                            (inst-cp
                                                             -1
                                                             "n!1")
                                                            (("3"
                                                              (inst
                                                               -1
                                                               "m!1")
                                                              (("3"
                                                                (expand
                                                                 "ideal?"
                                                                 -1)
                                                                (("3"
                                                                  (expand
                                                                   "left_ideal?")
                                                                  (("3"
                                                                    (flatten)
                                                                    (("3"
                                                                      (hide
                                                                       (-2
                                                                        -3))
                                                                      (("3"
                                                                        (lemma
                                                                         "ideal_transitive")
                                                                        (("3"
                                                                          (inst
                                                                           -1
                                                                           "nZ(m!1)"
                                                                           "nZ(n!1)"
                                                                           "Z")
                                                                          (("3"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("4"
                                                  (hide 2)
                                                  (("4"
                                                    (lemma "nZ_ideal")
                                                    (("4"
                                                      (inst?)
                                                      (("4"
                                                        (expand
                                                         "ideal?")
                                                        (("4"
                                                          (expand
                                                           "left_ideal?")
                                                          (("4"
                                                            (expand
                                                             "subring?")
                                                            (("4"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide -)
                                        (("2"
                                          (expand "Z")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "fullset")
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (decompose-equality 1)
          (("1" (iff)
            (("1" (prop)
              (("1" (expand "kernel")
                (("1" (prop)
                  (("1" (hide -)
                    (("1" (expand "Z")
                      (("1" (assert)
                        (("1" (expand "fullset")
                          (("1" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (decompose-equality 1)
                    (("2" (replaces -3)
                      (("2" (assert)
                        (("2" (expand "nZ" -1)
                          (("2" (skosimp)
                            (("2" (replaces -1)
                              (("2"
                                (lemma "times_div1")
                                (("2"
                                  (inst?)
                                  (("2"
                                    (replaces -1)
                                    (("2"
                                      (rewrite "div_cancel1")
                                      (("2"
                                        (lemma "self_coset")
                                        (("2"
                                          (inst
                                           -1
                                           "nZ(n!1)"
                                           "Z"
                                           "k!1 * n!1")
                                          (("2"
                                            (prop)
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (hide (- 2 3))
                                              (("2"
                                                (expand "member")
                                                (("2"
                                                  (expand "nZ")
                                                  (("2"
                                                    (inst?)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (hide (- 2))
                                              (("3"
                                                (lemma "nZ_ideal")
                                                (("3"
                                                  (inst?)
                                                  (("3"
                                                    (expand "ideal?")
                                                    (("3"
                                                      (expand
                                                       "left_ideal?")
                                                      (("3"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "kernel")
                (("2" (flatten)
                  (("2" (replaces -4 -2)
                    (("2" (assert)
                      (("2" (expand "nZ" 1)
                        (("2" (lemma "self_coset")
                          (("2" (inst -1 "nZ(n!1)" "Z" "m!1 * x!1")
                            (("2" (prop)
                              (("1"
                                (expand "member")
                                (("1"
                                  (expand "nZ" -2)
                                  (("1"
                                    (skosimp)
                                    (("1"
                                      (inst 1 "k!1")
                                      (("1"
                                        (hide (-1 -3 -4 -5))
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide (- 2))
                                (("2"
                                  (lemma "nZ_ideal")
                                  (("2"
                                    (inst?)
                                    (("2"
                                      (expand "ideal?")
                                      (("2"
                                        (expand "left_ideal?")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide -2)
            (("2" (lemma "fullset_quot_group_is_ring")
              (("2" (inst -1 "nZ(m!1)" "nZ(n!1)")
                (("1" (expand "ring?")
                  (("1" (expand "abelian_group?")
                    (("1" (propax) nil nil)) nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (lemma "nZ_mZ_subset")
                    (("2" (inst?)
                      (("2" (assert)
                        (("2" (lemma "nZ_ideal")
                          (("2" (inst-cp -1 "n!1")
                            (("2" (inst -1 "m!1")
                              (("2"
                                (expand "ideal?" -1)
                                (("2"
                                  (expand "left_ideal?")
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (hide (-2 -3))
                                      (("2"
                                        (lemma "ideal_transitive")
                                        (("2"
                                          (inst
                                           -1
                                           "nZ(m!1)"
                                           "nZ(n!1)"
                                           "Z")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (hide 2)
                  (("3" (lemma "nZ_ideal")
                    (("3" (inst?)
                      (("3" (expand "ideal?")
                        (("3" (expand "left_ideal?")
                          (("3" (expand "subring?")
                            (("3" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (lemma "Z_ring")
            (("3" (expand "ring?")
              (("3" (expand "abelian_group?") (("3" (propax) nil nil))
                nil))
              nil))
            nil)
           ("4" (rewrite "ideal_is_coset")
            (("1" (hide (-2 2))
              (("1" (lemma "nZ_mZ_subset")
                (("1" (inst?)
                  (("1" (assert)
                    (("1" (lemma "nZ_ideal")
                      (("1" (inst-cp -1 "n!1")
                        (("1" (inst -1 "m!1")
                          (("1" (expand "ideal?" -1)
                            (("1" (expand "left_ideal?")
                              (("1"
                                (flatten)
                                (("1"
                                  (hide (-2 -3))
                                  (("1"
                                    (lemma "ideal_transitive")
                                    (("1"
                                      (inst -1 "nZ(m!1)" "nZ(n!1)" "Z")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (lemma "nZ_ideal")
                (("2" (inst?)
                  (("2" (expand "ideal?")
                    (("2" (expand "left_ideal?")
                      (("2" (expand "subring?")
                        (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("5" (skosimp*)
            (("5" (lemma "lcoset_iff_coset")
              (("5" (inst?)
                (("5" (assert)
                  (("5" (hide 2)
                    (("5" (expand "left_coset?")
                      (("5" (lemma "add_is_coset")
                        (("5"
                          (inst -1 "nZ(m!1)" "nZ(n!1)" "x1!1`1"
                           "x1!1`2")
                          (("1" (skosimp)
                            (("1" (inst?) (("1" (assert) nil nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (lemma "nZ_mZ_subset")
                              (("2"
                                (inst?)
                                (("2"
                                  (assert)
                                  (("2"
                                    (lemma "nZ_ideal")
                                    (("2"
                                      (inst-cp -1 "n!1")
                                      (("2"
                                        (inst -1 "m!1")
                                        (("2"
                                          (expand "ideal?" -1)
                                          (("2"
                                            (expand "left_ideal?")
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (hide (-2 -3))
                                                (("2"
                                                  (lemma
                                                   "ideal_transitive")
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "nZ(m!1)"
                                                     "nZ(n!1)"
                                                     "Z")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide 2)
                            (("3" (lemma "nZ_ideal")
                              (("3"
                                (inst?)
                                (("3"
                                  (expand "ideal?")
                                  (("3"
                                    (expand "left_ideal?")
                                    (("3"
                                      (expand "subring?")
                                      (("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("6" (skosimp*)
            (("6" (hide -)
              (("6"
                (stop-rewrite "plus_zero" "zero_plus" "one_right"
                 "one_left" "right_identity" "left_identity")
                (("6" (lemma "reals.closed_plus")
                  (("6" (inst -1 "x1!1`1" "x1!1`2")
                    (("6" (expand "restrict") (("6" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("7" (hide -2)
            (("7" (expand "divides")
              (("7" (skosimp)
                (("7" (replace -1 1)
                  (("7" (lemma "times_div1")
                    (("7" (inst?)
                      (("7" (rewrite "div_cancel1")
                        (("7" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   (nil (nZ const-decl "set[int]" ring_zn nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (/ const-decl "setof[set[T]]" cosets_def nil)
    (setof type-eq-decl nil defined_types nil)
    (Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     ring_zn nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (ring? const-decl "bool" ring_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (set type-eq-decl nil sets nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil) nil
    (coset? const-decl "bool" cosets_def nil)
    (coset type-eq-decl nil cosets_def nil)
    (add const-decl "set[T]" cosets_def nil)
    (group? const-decl "bool" group_def nil)
    (fullset const-decl "set" sets nil)
    (group nonempty-type-eq-decl nil group nil)
    (homomorphism? const-decl "bool" homomorphisms nil)
    (surjective? const-decl "bool" functions nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (homomorphism type-eq-decl nil homomorphisms nil)
    (subgroup? const-decl "bool" group_def nil)
    (subgroup type-eq-decl nil group nil)
    (kernel const-decl "subgroup[T1, *, one1](G)" homomorphisms nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_cancel1 formula-decl nil real_props nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (member const-decl "bool" sets nil)
    (self_coset formula-decl nil ring_cosets_lemmas nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (times_div1 formula-decl nil real_props nil)
    (fullset_quot_group_is_ring formula-decl nil quotient_rings nil)
    (abelian_group? const-decl "bool" group_def nil)
    (Z_ring formula-decl nil ring_zn nil)
    (ideal_is_coset formula-decl nil ring_cosets_lemmas nil)
    (lcoset_iff_coset formula-decl nil ring_cosets_lemmas nil)
    (left_coset? const-decl "bool" cosets_def nil)
    (add_is_coset formula-decl nil quotient_rings nil)
    (closed_plus formula-decl nil reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    nil (lcoset_power_int formula-decl nil quotient_rings nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (one_times formula-decl nil ring_with_one nil)
    (power_sum_int formula-decl nil ring_zn nil)
    (generated_by const-decl "group" group nil)
    (extend const-decl "R" extend nil)
    (mZ_nZ_is_cyclic formula-decl nil ring_zn nil)
    (nZ_is_cyclic formula-decl nil ring_zn nil) nil
    (ideal? const-decl "bool" ring_ideal_def nil) nil nil nil
    (ideal type-eq-decl nil ring_ideal_def nil)
    (commutative_mult formula-decl nil number_fields nil)
    (nZ_mZ_subset formula-decl nil ring_zn nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (ideal_transitive formula-decl nil ring_ideal nil)
    (left_ideal? const-decl "bool" ring_ideal_def nil)
    (nZ_ideal formula-decl nil ring_zn nil)
    (subring? const-decl "bool" ring_def nil)
    (add_charac formula-decl nil quotient_rings nil))
   shostak))
 (Z_iso_mZ_nZ_TCC1 0
  (Z_iso_mZ_nZ_TCC1-1 nil 3810343326
   ("" (skosimp)
    (("" (prop)
      (("1" (expand "divides")
        (("1" (skosimp)
          (("1" (replaces -1)
            (("1" (lemma "times_div1")
              (("1" (inst?)
                (("1" (rewrite "div_cancel1") (("1" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (assert) nil nil) ("3" (assert) nil nil))
      nil))
    nil)
   ((times_div1 formula-decl nil real_props nil)
    (div_cancel1 formula-decl nil real_props nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil) nil
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (Z_iso_mZ_nZ subtype
    "number_fields./(zn_example_2isomorphism.n, zn_example_2isomorphism.m)"
    "posnat")))
 (Z_iso_mZ_nZ_TCC2 0
  (Z_iso_mZ_nZ_TCC2-1 nil 3810343326
   ("" (skosimp*)
    (("" (expand "Z")
      (("" (lemma "quotient_group_is_ring")
        (("" (inst?)
          (("1" (expand "ring?")
            (("1" (expand "abelian_group?") (("1" (flatten) nil nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (lemma "nZ_ideal")
              (("2" (inst?)
                (("2" (hide 2)
                  (("2" (prop)
                    (("1" (expand "divides")
                      (("1" (skosimp)
                        (("1" (replace -1 1)
                          (("1" (lemma "times_div1")
                            (("1" (inst?)
                              (("1"
                                (rewrite "div_cancel1")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (hide 2)
            (("3" (prop)
              (("1" (expand "divides")
                (("1" (skosimp)
                  (("1" (replace -1 1)
                    (("1" (lemma "times_div1")
                      (("1" (inst?)
                        (("1" (rewrite "div_cancel1")
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Z const-decl "setofsets[int]" ring_zn nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    nil nil (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     ring_zn nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (nZ const-decl "set[int]" ring_zn nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ring? const-decl "bool" ring_def nil)
    (set type-eq-decl nil sets nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (abelian_group? const-decl "bool" group_def nil)
    (nZ_ideal formula-decl nil ring_zn nil) nil
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (div_cancel1 formula-decl nil real_props nil)
    (times_div1 formula-decl nil real_props nil)
    (quotient_group_is_ring formula-decl nil quotient_rings nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields
       nil))
   nil
   (Z_iso_mZ_nZ subtype
    "restrict[setof[int], cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset(ring_zn.Z, ring_zn.nZ(number_fields./(zn_example_2isomorphism.n, zn_example_2isomorphism.m))), booleans.bool].restrict(ring_zn.Z(number_fields./(zn_example_2isomorphism.n, zn_example_2isomorphism.m)))"
    "group[coset[int, restrict[[numfield, numfield], [int, int], numfield](+)](Z, nZ(n / m)), add[int, restrict[[numfield, numfield], [int, int], numfield](+)](Z, nZ(n / m)), nZ(n / m)]")))
 (Z_iso_mZ_nZ_TCC3 0
  (Z_iso_mZ_nZ_TCC3-1 nil 3810343326
   ("" (skosimp)
    (("" (lemma "quotient_group_is_abelian_group")
      (("" (inst?)
        (("1" (expand "abelian_group?") (("1" (flatten) nil nil)) nil)
         ("2" (hide 2)
          (("2" (lemma "nZ_mZ_subset")
            (("2" (inst?)
              (("2" (assert)
                (("2" (lemma "nZ_ideal")
                  (("2" (inst-cp -1 "n!1")
                    (("2" (inst -1 "m!1")
                      (("2" (expand "ideal?" -1)
                        (("2" (expand "left_ideal?")
                          (("2" (flatten)
                            (("2" (hide (-2 -3))
                              (("2"
                                (lemma "ideal_transitive")
                                (("2"
                                  (inst -1 "nZ(m!1)" "nZ(n!1)" "Z")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (hide (-1 2))
          (("3" (lemma "nZ_ideal")
            (("3" (inst?)
              (("3" (expand "ideal?")
                (("3" (expand "left_ideal?")
                  (("3" (expand "subring?") (("3" (flatten) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (quotient_group_is_abelian_group formula-decl nil quotient_rings
     nil)
    (subring? const-decl "bool" ring_def nil)
    (nZ_ideal formula-decl nil ring_zn nil)
    (left_ideal? const-decl "bool" ring_ideal_def nil)
    (Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     ring_zn nil)
    (ideal_transitive formula-decl nil ring_ideal nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (nZ_mZ_subset formula-decl nil ring_zn nil)
    (abelian_group? const-decl "bool" group_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (ideal? const-decl "bool" ring_ideal_def nil) nil
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (ring? const-decl "bool" ring_def nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nZ const-decl "set[int]" ring_zn nil) nil)
   nil
   (Z_iso_mZ_nZ subtype
    "restrict[set[int], cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset(ring_zn.nZ(zn_example_2isomorphism.m), ring_zn.nZ(zn_example_2isomorphism.n)), booleans.bool].restrict(cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)]./(ring_zn.nZ(zn_example_2isomorphism.m), ring_zn.nZ(zn_example_2isomorphism.n)))"
    "group[coset[int, restrict[[numfield, numfield], [int, int], numfield](+)](nZ(m), nZ(n)), add[int, restrict[[numfield, numfield], [int, int], numfield](+)](nZ(m), nZ(n)), nZ(n)]")))
 (Z_iso_mZ_nZ_TCC4 0
  (Z_iso_mZ_nZ_TCC4-1 nil 3810343326
   ("" (skosimp*)
    (("" (lemma "lcoset_iff_coset")
      (("" (inst?)
        (("1" (assert)
          (("1" (hide 2)
            (("1" (expand "left_coset?")
              (("1" (lemma "add_is_coset")
                (("1" (inst -1 "Z" "nZ(n!1 / m!1)" "x1!1`1" "x1!1`2")
                  (("1" (skosimp)
                    (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
                   ("2" (hide 2)
                    (("2" (lemma "nZ_ideal")
                      (("2" (inst?)
                        (("2" (hide 2)
                          (("2" (expand "divides")
                            (("2" (skosimp)
                              (("2"
                                (replaces -1)
                                (("2"
                                  (lemma "times_div1")
                                  (("2"
                                    (inst?)
                                    (("2"
                                      (rewrite "div_cancel1")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (hide 2)
                    (("3" (expand "divides")
                      (("3" (skosimp)
                        (("3" (replaces -1)
                          (("3" (lemma "times_div1")
                            (("3" (inst?)
                              (("3"
                                (rewrite "div_cancel1")
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (prop)
            (("1" (expand "divides")
              (("1" (skosimp)
                (("1" (replaces -1)
                  (("1" (lemma "times_div1")
                    (("1" (inst?)
                      (("1" (rewrite "div_cancel1")
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (lcoset_iff_coset formula-decl nil ring_cosets_lemmas nil)
    (left_coset? const-decl "bool" cosets_def nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (nZ_ideal formula-decl nil ring_zn nil)
    (times_div1 formula-decl nil real_props nil)
    (div_cancel1 formula-decl nil real_props nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (TRUE const-decl "bool" booleans nil) nil
    (add_is_coset formula-decl nil quotient_rings nil)
    (nZ const-decl "set[int]" ring_zn nil)
    (Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     ring_zn nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (ring? const-decl "bool" ring_def nil)
    (add const-decl "set[T]" cosets_def nil)
    (coset type-eq-decl nil cosets_def nil)
    (coset? const-decl "bool" cosets_def nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil) nil nil
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (Z_iso_mZ_nZ subtype
    "cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].add(ring_zn.Z, ring_zn.nZ(number_fields./(zn_example_2isomorphism.n, zn_example_2isomorphism.m)))"
    "[[cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset(ring_zn.Z, ring_zn.nZ(number_fields./(zn_example_2isomorphism.n, zn_example_2isomorphism.m))), cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset(ring_zn.Z, ring_zn.nZ(number_fields./(zn_example_2isomorphism.n, zn_example_2isomorphism.m)))] -> cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset(ring_zn.Z, ring_zn.nZ(number_fields./(zn_example_2isomorphism.n, zn_example_2isomorphism.m)))]")))
 (Z_iso_mZ_nZ_TCC5 0
  (Z_iso_mZ_nZ_TCC5-1 nil 3810343326
   ("" (skosimp)
    (("" (rewrite "ideal_is_coset")
      (("1" (hide 2)
        (("1" (lemma "nZ_ideal")
          (("1" (inst?)
            (("1" (hide 2)
              (("1" (expand "divides")
                (("1" (skosimp)
                  (("1" (replaces -1)
                    (("1" (lemma "times_div1")
                      (("1" (inst?)
                        (("1" (rewrite "div_cancel1")
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (expand "divides")
          (("2" (skosimp)
            (("2" (replaces -1)
              (("2" (lemma "times_div1")
                (("2" (inst?)
                  (("2" (rewrite "div_cancel1")
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (ideal_is_coset formula-decl nil ring_cosets_lemmas nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (ring? const-decl "bool" ring_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     ring_zn nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nZ const-decl "set[int]" ring_zn nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nZ_ideal formula-decl nil ring_zn nil)
    (times_div1 formula-decl nil real_props nil)
    (div_cancel1 formula-decl nil real_props nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (TRUE const-decl "bool" booleans nil) nil nil nil)
   nil
   (Z_iso_mZ_nZ subtype
    "ring_zn.nZ(number_fields./(zn_example_2isomorphism.n, zn_example_2isomorphism.m))"
    "cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset(ring_zn.Z, ring_zn.nZ(number_fields./(zn_example_2isomorphism.n, zn_example_2isomorphism.m)))")))
 (Z_iso_mZ_nZ_TCC6 0
  (Z_iso_mZ_nZ_TCC6-1 nil 3810343326
   ("" (skosimp*)
    (("" (lemma "lcoset_iff_coset")
      (("" (inst?)
        (("" (assert)
          (("" (hide 2)
            (("" (expand "left_coset?")
              (("" (lemma "add_is_coset")
                (("" (inst -1 "nZ(m!1)" "nZ(n!1)" "x1!1`1" "x1!1`2")
                  (("1" (skosimp)
                    (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
                   ("2" (hide 2)
                    (("2" (lemma "nZ_mZ_subset")
                      (("2" (inst?)
                        (("2" (assert)
                          (("2" (lemma "nZ_ideal")
                            (("2" (inst-cp -1 "n!1")
                              (("2"
                                (inst -1 "m!1")
                                (("2"
                                  (expand "ideal?" -1)
                                  (("2"
                                    (expand "left_ideal?")
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (hide (-2 -3))
                                        (("2"
                                          (lemma "ideal_transitive")
                                          (("2"
                                            (inst
                                             -1
                                             "nZ(m!1)"
                                             "nZ(n!1)"
                                             "Z")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (hide 2)
                    (("3" (lemma "nZ_ideal")
                      (("3" (inst?)
                        (("3" (expand "ideal?")
                          (("3" (expand "left_ideal?")
                            (("3" (expand "subring?")
                              (("3" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (lcoset_iff_coset formula-decl nil ring_cosets_lemmas nil)
    (left_coset? const-decl "bool" cosets_def nil)
    (ring? const-decl "bool" ring_def nil) nil
    (ideal? const-decl "bool" ring_ideal_def nil) nil
    (ideal type-eq-decl nil ring_ideal_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (nZ_mZ_subset formula-decl nil ring_zn nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (ideal_transitive formula-decl nil ring_ideal nil)
    (Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     ring_zn nil)
    (left_ideal? const-decl "bool" ring_ideal_def nil)
    (nZ_ideal formula-decl nil ring_zn nil)
    (subring? const-decl "bool" ring_def nil)
    (add_is_coset formula-decl nil quotient_rings nil)
    (nZ const-decl "set[int]" ring_zn nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (add const-decl "set[T]" cosets_def nil)
    (coset type-eq-decl nil cosets_def nil)
    (coset? const-decl "bool" cosets_def nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int_plus_int_is_int application-judgement "int" integers nil))
   nil
   (Z_iso_mZ_nZ subtype
    "cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].add(ring_zn.nZ(zn_example_2isomorphism.m), ring_zn.nZ(zn_example_2isomorphism.n))"
    "[[cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset(ring_zn.nZ(zn_example_2isomorphism.m), ring_zn.nZ(zn_example_2isomorphism.n)), cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset(ring_zn.nZ(zn_example_2isomorphism.m), ring_zn.nZ(zn_example_2isomorphism.n))] -> cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset(ring_zn.nZ(zn_example_2isomorphism.m), ring_zn.nZ(zn_example_2isomorphism.n))]")))
 (Z_iso_mZ_nZ_TCC7 0
  (Z_iso_mZ_nZ_TCC7-1 nil 3810343326
   ("" (skosimp)
    (("" (rewrite "ideal_is_coset")
      (("1" (hide 2)
        (("1" (lemma "nZ_mZ_subset")
          (("1" (inst?)
            (("1" (assert)
              (("1" (lemma "nZ_ideal")
                (("1" (inst-cp -1 "n!1")
                  (("1" (inst -1 "m!1")
                    (("1" (expand "ideal?" -1)
                      (("1" (expand "left_ideal?")
                        (("1" (flatten)
                          (("1" (hide (-2 -3))
                            (("1" (lemma "ideal_transitive")
                              (("1"
                                (inst -1 "nZ(m!1)" "nZ(n!1)" "Z")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide (-1 2))
        (("2" (lemma "nZ_ideal")
          (("2" (inst?)
            (("2" (expand "ideal?")
              (("2" (expand "left_ideal?")
                (("2" (expand "subring?") (("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ideal_is_coset formula-decl nil ring_cosets_lemmas nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (ring? const-decl "bool" ring_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nZ const-decl "set[int]" ring_zn nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nZ_mZ_subset formula-decl nil ring_zn nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (ideal_transitive formula-decl nil ring_ideal nil)
    (Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     ring_zn nil)
    (left_ideal? const-decl "bool" ring_ideal_def nil)
    (nZ_ideal formula-decl nil ring_zn nil)
    (subring? const-decl "bool" ring_def nil))
   nil
   (Z_iso_mZ_nZ subtype "ring_zn.nZ(zn_example_2isomorphism.n)"
    "cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset(ring_zn.nZ(zn_example_2isomorphism.m), ring_zn.nZ(zn_example_2isomorphism.n))")))
 (Z_iso_mZ_nZ_TCC8 0
  (Z_iso_mZ_nZ_TCC8-1 nil 3810343326
   ("" (skosimp)
    (("" (lemma "fullset_quot_group_is_ring")
      (("" (inst -1 "Z" "nZ(n!1 / m!1)")
        (("1" (expand "ring?")
          (("1" (expand "abelian_group?") (("1" (flatten) nil nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (lemma "nZ_mZ_subset")
            (("2" (inst?)
              (("2" (assert)
                (("2" (lemma "nZ_ideal")
                  (("2" (inst -1 "n!1 / m!1")
                    (("2" (hide (-1 2))
                      (("2" (expand "divides")
                        (("2" (skosimp)
                          (("2" (replaces -1)
                            (("2" (lemma "times_div1")
                              (("2"
                                (inst?)
                                (("2"
                                  (rewrite "div_cancel1")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (hide 2)
          (("3" (prop)
            (("1" (expand "divides")
              (("1" (skosimp)
                (("1" (replaces -1)
                  (("1" (lemma "times_div1")
                    (("1" (inst?)
                      (("1" (rewrite "div_cancel1")
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert) nil nil) ("3" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (fullset_quot_group_is_ring formula-decl nil quotient_rings nil)
    (nZ_ideal formula-decl nil ring_zn nil)
    (times_div1 formula-decl nil real_props nil)
    (div_cancel1 formula-decl nil real_props nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (TRUE const-decl "bool" booleans nil) nil
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (nZ_mZ_subset formula-decl nil ring_zn nil)
    (abelian_group? const-decl "bool" group_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (set type-eq-decl nil sets nil)
    (ring? const-decl "bool" ring_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (nZ const-decl "set[int]" ring_zn nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     ring_zn nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil) nil nil
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (Z_iso_mZ_nZ assuming
    "homomorphisms[cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset(ring_zn.Z, ring_zn.nZ(number_fields./(zn_example_2isomorphism.n, zn_example_2isomorphism.m))), cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].add(ring_zn.Z, ring_zn.nZ(number_fields./(zn_example_2isomorphism.n, zn_example_2isomorphism.m))), ring_zn.nZ(number_fields./(zn_example_2isomorphism.n, zn_example_2isomorphism.m)), cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset(ring_zn.nZ(zn_example_2isomorphism.m), ring_zn.nZ(zn_example_2isomorphism.n)), cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].add(ring_zn.nZ(zn_example_2isomorphism.m), ring_zn.nZ(zn_example_2isomorphism.n)), ring_zn.nZ(zn_example_2isomorphism.n)].homomorphisms"
    "T1_is_group: ASSUMPTION group_def[homomorphisms.T1, homomorphisms.*, homomorphisms.one1].group?(sets[homomorphisms.T1].fullset)")))
 (Z_iso_mZ_nZ_TCC9 0
  (Z_iso_mZ_nZ_TCC9-1 nil 3810343326
   ("" (skosimp)
    (("" (lemma "fullset_quot_group_is_ring")
      (("" (inst -1 "nZ(m!1)" "nZ(n!1)")
        (("1" (expand "ring?")
          (("1" (expand "abelian_group?") (("1" (flatten) nil nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (lemma "nZ_mZ_subset")
            (("2" (inst?)
              (("2" (assert)
                (("2" (lemma "nZ_ideal")
                  (("2" (inst-cp -1 "n!1")
                    (("2" (inst -1 "m!1")
                      (("2" (expand "ideal?" -1)
                        (("2" (expand "left_ideal?")
                          (("2" (flatten)
                            (("2" (hide (-2 -3))
                              (("2"
                                (lemma "ideal_transitive")
                                (("2"
                                  (inst -1 "nZ(m!1)" "nZ(n!1)" "Z")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (hide 2)
          (("3" (lemma "nZ_ideal")
            (("3" (inst?)
              (("3" (expand "ideal?")
                (("3" (expand "left_ideal?")
                  (("3" (expand "subring?") (("3" (flatten) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (fullset_quot_group_is_ring formula-decl nil quotient_rings nil)
    (subring? const-decl "bool" ring_def nil)
    (nZ_ideal formula-decl nil ring_zn nil)
    (left_ideal? const-decl "bool" ring_ideal_def nil)
    (Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     ring_zn nil)
    (ideal_transitive formula-decl nil ring_ideal nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (nZ_mZ_subset formula-decl nil ring_zn nil)
    (abelian_group? const-decl "bool" group_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (ideal? const-decl "bool" ring_ideal_def nil) nil
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (ring? const-decl "bool" ring_def nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nZ const-decl "set[int]" ring_zn nil) nil)
   nil
   (Z_iso_mZ_nZ assuming
    "homomorphisms[cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset(ring_zn.Z, ring_zn.nZ(number_fields./(zn_example_2isomorphism.n, zn_example_2isomorphism.m))), cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].add(ring_zn.Z, ring_zn.nZ(number_fields./(zn_example_2isomorphism.n, zn_example_2isomorphism.m))), ring_zn.nZ(number_fields./(zn_example_2isomorphism.n, zn_example_2isomorphism.m)), cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset(ring_zn.nZ(zn_example_2isomorphism.m), ring_zn.nZ(zn_example_2isomorphism.n)), cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].add(ring_zn.nZ(zn_example_2isomorphism.m), ring_zn.nZ(zn_example_2isomorphism.n)), ring_zn.nZ(zn_example_2isomorphism.n)].homomorphisms"
    "T2_is_group: ASSUMPTION group_def[homomorphisms.T2, homomorphisms.o, homomorphisms.one2].group?(sets[homomorphisms.T2].fullset)")))
 (Z_iso_mZ_nZ 0
  (Z_iso_mZ_nZ-1 nil 3810343327
   ("" (skosimp)
    (("" (lemma "Z_epi_mZ_nZ")
      (("" (inst?)
        (("" (skoletin)
          (("" (assert)
            (("" (flatten)
              ((""
                (lemma
                 "first_isomorphism_th[int,+,0,coset(nZ(m!1),nZ(n!1)),add(nZ(m!1),nZ(n!1)),nZ(n!1)]")
                (("1" (inst -1 "Z" "nZ(m!1)/nZ(n!1)" "phi")
                  (("1" (assert)
                    (("1" (replace -4 -1 rl)
                      (("1" (hide (-2 -3 -4 -5))
                        (("1" (expand "isomorphic?")
                          (("1" (skosimp)
                            (("1" (assert)
                              (("1"
                                (inst 1 "phi1!1")
                                (("1"
                                  (expand "isomorphism?")
                                  (("1"
                                    (prop)
                                    (("1"
                                      (hide -2)
                                      (("1"
                                        (expand "bijective?")
                                        (("1"
                                          (expand "injective?")
                                          (("1"
                                            (prop)
                                            (("1"
                                              (skosimp)
                                              (("1"
                                                (typepred
                                                 "x1!1"
                                                 "x2!1")
                                                (("1"
                                                  (expand "restrict")
                                                  (("1"
                                                    (expand "Z")
                                                    (("1"
                                                      (inst
                                                       -6
                                                       "x1!1"
                                                       "x2!1")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide -1)
                                              (("2"
                                                (expand "surjective?")
                                                (("2"
                                                  (skosimp)
                                                  (("2"
                                                    (inst -1 "y!1")
                                                    (("1"
                                                      (skosimp)
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (prop)
                                                          (("1"
                                                            (typepred
                                                             "x!1")
                                                            (("1"
                                                              (hide
                                                               (-1 -3))
                                                              (("1"
                                                                (expand
                                                                 "/")
                                                                (("1"
                                                                  (expand
                                                                   "restrict")
                                                                  (("1"
                                                                    (lemma
                                                                     "lcoset_iff_coset")
                                                                    (("1"
                                                                      (inst?)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (hide
                                                                           2)
                                                                          (("1"
                                                                            (expand
                                                                             "left_cosets")
                                                                            (("1"
                                                                              (expand
                                                                               "left_coset?")
                                                                              (("1"
                                                                                (skosimp)
                                                                                (("1"
                                                                                  (inst?)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "*")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "+ ")
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         (-1
                                                                          2))
                                                                        (("2"
                                                                          (expand
                                                                           "divides")
                                                                          (("2"
                                                                            (skosimp)
                                                                            (("2"
                                                                              (replaces
                                                                               -1)
                                                                              (("2"
                                                                                (lemma
                                                                                 "times_div1")
                                                                                (("2"
                                                                                  (inst?)
                                                                                  (("2"
                                                                                    (rewrite
                                                                                     "div_cancel1")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "restrict")
                                                            (("2"
                                                              (expand
                                                               "Z")
                                                              (("2"
                                                                (typepred
                                                                 "x!1")
                                                                (("2"
                                                                  (hide
                                                                   (-1
                                                                    -3))
                                                                  (("2"
                                                                    (expand
                                                                     "/")
                                                                    (("2"
                                                                      (expand
                                                                       "restrict")
                                                                      (("2"
                                                                        (lemma
                                                                         "lcoset_iff_coset")
                                                                        (("2"
                                                                          (inst?)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (hide
                                                                               2)
                                                                              (("1"
                                                                                (expand
                                                                                 "left_cosets")
                                                                                (("1"
                                                                                  (expand
                                                                                   "left_coset?")
                                                                                  (("1"
                                                                                    (skosimp)
                                                                                    (("1"
                                                                                      (inst?)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "*")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "+ ")
                                                                                          (("1"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             (-1
                                                                              2))
                                                                            (("2"
                                                                              (expand
                                                                               "divides")
                                                                              (("2"
                                                                                (skosimp)
                                                                                (("2"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "times_div1")
                                                                                    (("2"
                                                                                      (inst?)
                                                                                      (("2"
                                                                                        (rewrite
                                                                                         "div_cancel1")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (expand
                                                         "extend")
                                                        (("2"
                                                          (typepred
                                                           "y!1")
                                                          (("2"
                                                            (expand
                                                             "restrict")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "image")
                                                                (("2"
                                                                  (expand
                                                                   "phi")
                                                                  (("2"
                                                                    (expand
                                                                     "coset?")
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (hide
                                                                         (-2
                                                                          -3))
                                                                        (("2"
                                                                          (expand
                                                                           "left_coset?")
                                                                          (("2"
                                                                            (skosimp)
                                                                            (("2"
                                                                              (typepred
                                                                               "a!1")
                                                                              (("2"
                                                                                (expand
                                                                                 "nZ"
                                                                                 -1)
                                                                                (("2"
                                                                                  (skosimp)
                                                                                  (("2"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("2"
                                                                                      (inst?)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide
                                                                                         -)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "Z")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "fullset")
                                                                                            (("2"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "homomorphism?")
                                      (("2"
                                        (skosimp)
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (replace -2 1 rl)
                                            (("2"
                                              (hide -2)
                                              (("2"
                                                (expand "kernel")
                                                (("2"
                                                  (name-replace
                                                   "K!1"
                                                   "{a: int | Z(a) AND phi(a) = nZ(n!1)}")
                                                  (("2"
                                                    (typepred
                                                     "a!1"
                                                     "b!1")
                                                    (("2"
                                                      (hide (-2 -4))
                                                      (("2"
                                                        (expand
                                                         "coset?")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (hide
                                                             (-2 -4))
                                                            (("2"
                                                              (expand
                                                               "left_coset?")
                                                              (("2"
                                                                (skosimp*)
                                                                (("2"
                                                                  (replaces
                                                                   -1)
                                                                  (("2"
                                                                    (replaces
                                                                     -1)
                                                                    (("2"
                                                                      (lemma
                                                                       "add_charac")
                                                                      (("2"
                                                                        (inst?)
                                                                        (("1"
                                                                          (replaces
                                                                           -1)
                                                                          (("1"
                                                                            (case-replace
                                                                             "K!1 = nZ(n!1 / m!1)")
                                                                            (("1"
                                                                              (lemma
                                                                               "mult_lem[int,+,0]")
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "Z"
                                                                                 "nZ(n!1 / m!1)"
                                                                                 "a!2"
                                                                                 "a!3")
                                                                                (("1"
                                                                                  (expand
                                                                                   "*")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "+ ")
                                                                                    (("1"
                                                                                      (replaces
                                                                                       -1)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   (-1
                                                                                    -2
                                                                                    2))
                                                                                  (("2"
                                                                                    (expand
                                                                                     "divides")
                                                                                    (("2"
                                                                                      (skosimp)
                                                                                      (("2"
                                                                                        (replaces
                                                                                         -1)
                                                                                        (("2"
                                                                                          (lemma
                                                                                           "times_div1")
                                                                                          (("2"
                                                                                            (inst?)
                                                                                            (("2"
                                                                                              (rewrite
                                                                                               "div_cancel1")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               (-
                                                                                2))
                                                                              (("2"
                                                                                (reveal
                                                                                 -16)
                                                                                (("2"
                                                                                  (expand
                                                                                   "K!1")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "kernel")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (hide
                                                                               (-1
                                                                                2))
                                                                              (("3"
                                                                                (expand
                                                                                 "divides")
                                                                                (("3"
                                                                                  (skosimp)
                                                                                  (("3"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("3"
                                                                                      (lemma
                                                                                       "times_div1")
                                                                                      (("3"
                                                                                        (inst?)
                                                                                        (("3"
                                                                                          (rewrite
                                                                                           "div_cancel1")
                                                                                          (("3"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           (-1
                                                                            2))
                                                                          (("2"
                                                                            (lemma
                                                                             "nZ_ideal")
                                                                            (("2"
                                                                              (inst?)
                                                                              (("2"
                                                                                (hide
                                                                                 2)
                                                                                (("2"
                                                                                  (expand
                                                                                   "divides")
                                                                                  (("2"
                                                                                    (skosimp)
                                                                                    (("2"
                                                                                      (replace
                                                                                       -1
                                                                                       1)
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "times_div1")
                                                                                        (("2"
                                                                                          (inst?)
                                                                                          (("2"
                                                                                            (rewrite
                                                                                             "div_cancel1")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (hide
                                                                           (-1
                                                                            2))
                                                                          (("3"
                                                                            (expand
                                                                             "divides")
                                                                            (("3"
                                                                              (skosimp)
                                                                              (("3"
                                                                                (replaces
                                                                                 -1)
                                                                                (("3"
                                                                                  (lemma
                                                                                   "times_div1")
                                                                                  (("3"
                                                                                    (inst?)
                                                                                    (("3"
                                                                                      (rewrite
                                                                                       "div_cancel1")
                                                                                      (("3"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide -1)
                                  (("2"
                                    (prop)
                                    (("1"
                                      (skosimp)
                                      (("1"
                                        (prop)
                                        (("1"
                                          (skosimp)
                                          (("1"
                                            (hide -2)
                                            (("1"
                                              (lemma
                                               "lcoset_iff_coset")
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide 2)
                                                    (("1"
                                                      (expand
                                                       "left_coset?")
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (expand "*")
                                                          (("1"
                                                            (expand
                                                             "+ ")
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide (-1 2))
                                                  (("2"
                                                    (expand "divides")
                                                    (("2"
                                                      (skosimp)
                                                      (("2"
                                                        (replace -1 1)
                                                        (("2"
                                                          (lemma
                                                           "times_div1")
                                                          (("2"
                                                            (inst?)
                                                            (("2"
                                                              (rewrite
                                                               "div_cancel1")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "restrict")
                                          (("2"
                                            (skosimp)
                                            (("2"
                                              (hide -2)
                                              (("2"
                                                (expand "Z")
                                                (("2"
                                                  (expand "/")
                                                  (("2"
                                                    (lemma
                                                     "lcoset_iff_coset")
                                                    (("2"
                                                      (inst?)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (hide 2)
                                                          (("1"
                                                            (expand
                                                             "left_coset?")
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (expand
                                                                 "*")
                                                                (("1"
                                                                  (expand
                                                                   "+ ")
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide (-1 2))
                                                        (("2"
                                                          (expand
                                                           "divides")
                                                          (("2"
                                                            (skosimp)
                                                            (("2"
                                                              (replace
                                                               -1
                                                               1)
                                                              (("2"
                                                                (lemma
                                                                 "times_div1")
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (rewrite
                                                                     "div_cancel1")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (hide -2)
                                          (("3"
                                            (lemma "lcoset_iff_coset")
                                            (("3"
                                              (inst?)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide -2)
                                                  (("1"
                                                    (expand
                                                     "left_coset?")
                                                    (("1"
                                                      (skosimp)
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (expand "*")
                                                          (("1"
                                                            (expand
                                                             "+ ")
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide (-1 2))
                                                (("2"
                                                  (expand "divides")
                                                  (("2"
                                                    (skosimp)
                                                    (("2"
                                                      (replace -1 1)
                                                      (("2"
                                                        (lemma
                                                         "times_div1")
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (rewrite
                                                             "div_cancel1")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (hide -2)
                                          (("4"
                                            (expand "/")
                                            (("4"
                                              (expand "restrict")
                                              (("4"
                                                (expand "left_cosets")
                                                (("4"
                                                  (lemma
                                                   "lcoset_iff_coset")
                                                  (("4"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (hide -2)
                                                        (("1"
                                                          (expand
                                                           "left_coset?")
                                                          (("1"
                                                            (skosimp)
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (expand
                                                                 "+ ")
                                                                (("1"
                                                                  (expand
                                                                   "*")
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide (-1 2))
                                                      (("2"
                                                        (expand
                                                         "divides")
                                                        (("2"
                                                          (skosimp)
                                                          (("2"
                                                            (replace
                                                             -1
                                                             1)
                                                            (("2"
                                                              (lemma
                                                               "times_div1")
                                                              (("2"
                                                                (inst?)
                                                                (("2"
                                                                  (rewrite
                                                                   "div_cancel1")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (skosimp)
                                      (("2"
                                        (expand "restrict")
                                        (("2"
                                          (expand "/")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide (-1 -2 -3 -4 2))
                    (("2" (skosimp)
                      (("2" (expand "restrict")
                        (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide (-1 -2 -3 -4 2))
                  (("2" (lemma "fullset_quot_group_is_ring")
                    (("2" (inst -1 "nZ(m!1)" "nZ(n!1)")
                      (("1" (expand "ring?")
                        (("1" (expand "abelian_group?")
                          (("1" (flatten) nil nil)) nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (lemma "nZ_mZ_subset")
                          (("2" (inst?)
                            (("2" (assert)
                              (("2"
                                (lemma "nZ_ideal")
                                (("2"
                                  (inst-cp -1 "n!1")
                                  (("2"
                                    (inst -1 "m!1")
                                    (("2"
                                      (expand "ideal?" -1)
                                      (("2"
                                        (expand "left_ideal?")
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (hide (-2 -3))
                                            (("2"
                                              (lemma
                                               "ideal_transitive")
                                              (("2"
                                                (inst
                                                 -1
                                                 "nZ(m!1)"
                                                 "nZ(n!1)"
                                                 "Z")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (hide 2)
                        (("3" (lemma "nZ_ideal")
                          (("3" (inst?)
                            (("3" (expand "ideal?")
                              (("3"
                                (expand "left_ideal?")
                                (("3"
                                  (expand "subring?")
                                  (("3" (skosimp*) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (hide (-1 -2 -3 -4 2))
                  (("3" (lemma "Z_ring")
                    (("3" (expand "ring?")
                      (("3" (expand "abelian_group?")
                        (("3" (flatten) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("4" (hide (-1 -2 -3 -4 2))
                  (("4" (rewrite "ideal_is_coset")
                    (("1" (hide 2)
                      (("1" (lemma "nZ_mZ_subset")
                        (("1" (inst?)
                          (("1" (assert)
                            (("1" (lemma "nZ_ideal")
                              (("1"
                                (inst-cp -1 "n!1")
                                (("1"
                                  (inst -1 "m!1")
                                  (("1"
                                    (expand "ideal?" -1)
                                    (("1"
                                      (expand "left_ideal?")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (hide (-2 -3))
                                          (("1"
                                            (lemma "ideal_transitive")
                                            (("1"
                                              (inst
                                               -1
                                               "nZ(m!1)"
                                               "nZ(n!1)"
                                               "Z")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (lemma "nZ_ideal")
                        (("2" (inst?)
                          (("2" (expand "ideal?")
                            (("2" (expand "left_ideal?")
                              (("2"
                                (expand "subring?")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (hide (-1 -2 -3 -4 2))
                  (("5" (skosimp)
                    (("5" (lemma "lcoset_iff_coset")
                      (("5" (inst?)
                        (("5" (assert)
                          (("5" (hide 2)
                            (("5" (expand "left_coset?")
                              (("5"
                                (lemma "add_is_coset")
                                (("5"
                                  (inst
                                   -1
                                   "nZ(m!1)"
                                   "nZ(n!1)"
                                   "x1!1`1"
                                   "x1!1`2")
                                  (("1"
                                    (skosimp)
                                    (("1"
                                      (inst?)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (lemma "nZ_mZ_subset")
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (lemma "nZ_ideal")
                                            (("2"
                                              (inst-cp -1 "n!1")
                                              (("2"
                                                (inst -1 "m!1")
                                                (("2"
                                                  (expand "ideal?" -1)
                                                  (("2"
                                                    (expand
                                                     "left_ideal?")
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (hide (-2 -3))
                                                        (("2"
                                                          (lemma
                                                           "ideal_transitive")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "nZ(m!1)"
                                                             "nZ(n!1)"
                                                             "Z")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (hide 2)
                                    (("3"
                                      (lemma "nZ_ideal")
                                      (("3"
                                        (inst?)
                                        (("3"
                                          (expand "ideal?")
                                          (("3"
                                            (expand "left_ideal?")
                                            (("3"
                                              (expand "subring?")
                                              (("3" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("6" (hide (- 2))
                  (("6" (skosimp)
                    (("6" (expand "restrict") (("6" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Z_epi_mZ_nZ formula-decl nil zn_example_2isomorphism nil) nil
    (nZ const-decl "set[int]" ring_zn nil)
    (/ const-decl "setof[set[T]]" cosets_def nil)
    (setof type-eq-decl nil defined_types nil)
    (Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     ring_zn nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (ring? const-decl "bool" ring_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil) nil
    (coset? const-decl "bool" cosets_def nil)
    (coset type-eq-decl nil cosets_def nil)
    (add const-decl "set[T]" cosets_def nil)
    (group? const-decl "bool" group_def nil)
    (fullset const-decl "set" sets nil)
    (group nonempty-type-eq-decl nil group nil)
    (homomorphism? const-decl "bool" homomorphisms nil)
    (surjective? const-decl "bool" functions nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (homomorphism type-eq-decl nil homomorphisms nil)
    (subgroup? const-decl "bool" group_def nil)
    (subgroup type-eq-decl nil group nil)
    (kernel const-decl "subgroup[T1, *, one1](G)" homomorphisms nil)
    (add_is_coset formula-decl nil quotient_rings nil)
    (ideal_is_coset formula-decl nil ring_cosets_lemmas nil)
    (Z_ring formula-decl nil ring_zn nil)
    (abelian_group? const-decl "bool" group_def nil)
    (nZ_mZ_subset formula-decl nil ring_zn nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (ideal_transitive formula-decl nil ring_ideal nil)
    (left_ideal? const-decl "bool" ring_ideal_def nil)
    (subring? const-decl "bool" ring_def nil)
    (fullset_quot_group_is_ring formula-decl nil quotient_rings nil)
    (isomorphic? const-decl "bool" homomorphisms nil)
    (isomorphism? const-decl "bool" homomorphisms nil)
    (add_charac formula-decl nil quotient_rings nil)
    (nZ_ideal formula-decl nil ring_zn nil) nil
    (mult_lem formula-decl nil factor_groups nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (injective? const-decl "bool" functions nil) nil
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (left_coset? const-decl "bool" cosets_def nil)
    (left_cosets const-decl "setofsets[T]" right_left_cosets nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (div_cancel1 formula-decl nil real_props nil)
    (times_div1 formula-decl nil real_props nil)
    (lcoset_iff_coset formula-decl nil ring_cosets_lemmas nil) nil nil
    nil nil nil (extend const-decl "R" extend nil)
    (FALSE const-decl "bool" booleans nil)
    (Z const-decl "setofsets[int]" ring_zn nil)
    (setofsets type-eq-decl nil sets nil)
    (/ const-decl "group[left_cosets[T, *, one](G, N), mult(G, N), N]"
       right_left_cosets nil)
    (mult const-decl "left_cosets(G, H)" factor_groups nil)
    (left_cosets type-eq-decl nil cosets nil)
    (normal_subgroup type-eq-decl nil normal_subgroups nil)
    (normal_subgroup? const-decl "boolean" normal_subgroups nil) nil
    nil nil
    (first_isomorphism_th formula-decl nil homomorphism_lemmas nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (mZ_nZ_order_TCC1 0
  (mZ_nZ_order_TCC1-1 nil 3810421710
   ("" (skosimp)
    (("" (lemma "Z_iso_mZ_nZ")
      (("" (inst?)
        (("" (assert)
          (("" (expand "isomorphic?")
            (("" (skosimp)
              (("" (expand "isomorphism?")
                (("" (flatten)
                  (("" (hide -2)
                    (("" (lemma "Zn_card_n")
                      (("" (inst -1 "n!1 / m!1")
                        (("1" (lemma "card_bij[setof[int]]")
                          (("1" (inst -1 "n!1 / m!1" "Z(n!1 / m!1)")
                            (("1" (prop)
                              (("1"
                                (hide -1)
                                (("1"
                                  (skosimp)
                                  (("1"
                                    (expand "is_finite")
                                    (("1"
                                      (inst
                                       1
                                       "n!1 / m!1"
                                       "f!1 o inverse[(Z(n!1 / m!1)),(nZ(m!1) / nZ(n!1))](phi!1)")
                                      (("1"
                                        (lemma
                                         "bij_inv_is_bij[(Z(n!1 / m!1)), (nZ(m!1) / nZ(n!1))]")
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (expand "bijective?")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (hide-all-but
                                                   (-1 -3 -8 1))
                                                  (("1"
                                                    (lemma
                                                     "composition_injective[(nZ(m!1) / nZ(n!1)),(Z(n!1 / m!1)),below[n!1 / m!1]]")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "inverse[(Z(n!1 / m!1)), (nZ(m!1) / nZ(n!1))](phi!1)"
                                                       "f!1")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (hide
                                                         (-1 -2 2))
                                                        (("2"
                                                          (inst
                                                           1
                                                           "nZ(n!1 / m!1)")
                                                          (("1"
                                                            (expand
                                                             "Z")
                                                            (("1"
                                                              (expand
                                                               "/")
                                                              (("1"
                                                                (rewrite
                                                                 "ideal_is_coset")
                                                                (("1"
                                                                  (hide
                                                                   2)
                                                                  (("1"
                                                                    (rewrite
                                                                     "nZ_ideal")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (prop)
                                                            (("1"
                                                              (expand
                                                               "divides")
                                                              (("1"
                                                                (skosimp)
                                                                (("1"
                                                                  (replaces
                                                                   -1)
                                                                  (("1"
                                                                    (lemma
                                                                     "times_div1")
                                                                    (("1"
                                                                      (inst?)
                                                                      (("1"
                                                                        (rewrite
                                                                         "div_cancel1")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("3"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (hide
                                                         (-1 -2 2))
                                                        (("3"
                                                          (prop)
                                                          (("1"
                                                            (expand
                                                             "divides")
                                                            (("1"
                                                              (skosimp)
                                                              (("1"
                                                                (replaces
                                                                 -1)
                                                                (("1"
                                                                  (lemma
                                                                   "times_div1")
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (rewrite
                                                                       "div_cancel1")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("3"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide (-1 -2 2))
                                                      (("2"
                                                        (prop)
                                                        (("1"
                                                          (expand
                                                           "divides")
                                                          (("1"
                                                            (skosimp)
                                                            (("1"
                                                              (replaces
                                                               -1)
                                                              (("1"
                                                                (lemma
                                                                 "times_div1")
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (rewrite
                                                                     "div_cancel1")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("3"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide (-1 -2 2))
                                              (("2"
                                                (expand "bijective?")
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (prop)
                                                    (("1"
                                                      (hide -2)
                                                      (("1"
                                                        (expand
                                                         "injective?")
                                                        (("1"
                                                          (skosimp)
                                                          (("1"
                                                            (inst
                                                             -2
                                                             "x1!1"
                                                             "x2!1")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide -1)
                                                      (("2"
                                                        (expand
                                                         "surjective?")
                                                        (("2"
                                                          (skosimp)
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "y!1")
                                                            (("1"
                                                              (skosimp)
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (typepred
                                                                   "x!1")
                                                                  (("1"
                                                                    (expand
                                                                     "restrict")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "restrict")
                                                              (("2"
                                                                (hide
                                                                 2)
                                                                (("2"
                                                                  (typepred
                                                                   "y!1")
                                                                  (("2"
                                                                    (expand
                                                                     "/")
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but (-4 1))
                                          (("2"
                                            (inst 1 "nZ(n!1/m!1)")
                                            (("1"
                                              (expand "Z")
                                              (("1"
                                                (expand "/")
                                                (("1"
                                                  (rewrite
                                                   "ideal_is_coset")
                                                  (("1"
                                                    (hide 2)
                                                    (("1"
                                                      (rewrite
                                                       "nZ_ideal")
                                                      (("1"
                                                        (hide 2)
                                                        (("1"
                                                          (expand
                                                           "divides")
                                                          (("1"
                                                            (skosimp)
                                                            (("1"
                                                              (replaces
                                                               -1)
                                                              (("1"
                                                                (lemma
                                                                 "times_div1")
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (rewrite
                                                                     "div_cancel1")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (expand
                                                       "divides")
                                                      (("2"
                                                        (skosimp)
                                                        (("2"
                                                          (replaces -1)
                                                          (("2"
                                                            (lemma
                                                             "times_div1")
                                                            (("2"
                                                              (inst?)
                                                              (("2"
                                                                (rewrite
                                                                 "div_cancel1")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (prop)
                                              (("1"
                                                (expand "divides")
                                                (("1"
                                                  (skosimp)
                                                  (("1"
                                                    (replaces -1)
                                                    (("1"
                                                      (lemma
                                                       "times_div1")
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (rewrite
                                                           "div_cancel1")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil)
                                               ("3" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (hide (-1 -2 -3 2))
                                          (("3"
                                            (prop)
                                            (("1"
                                              (expand "divides")
                                              (("1"
                                                (skosimp)
                                                (("1"
                                                  (replaces -1)
                                                  (("1"
                                                    (lemma
                                                     "times_div1")
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (rewrite
                                                         "div_cancel1")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (hide (-1 -2 -3))
                                          (("2"
                                            (inst 1 "nZ(n!1/m!1)")
                                            (("1"
                                              (expand "Z")
                                              (("1"
                                                (expand "/")
                                                (("1"
                                                  (rewrite
                                                   "ideal_is_coset")
                                                  (("1"
                                                    (hide 2)
                                                    (("1"
                                                      (rewrite
                                                       "nZ_ideal")
                                                      (("1"
                                                        (hide 2)
                                                        (("1"
                                                          (expand
                                                           "divides")
                                                          (("1"
                                                            (skosimp)
                                                            (("1"
                                                              (replaces
                                                               -1)
                                                              (("1"
                                                                (lemma
                                                                 "times_div1")
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (rewrite
                                                                     "div_cancel1")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (expand
                                                       "divides")
                                                      (("2"
                                                        (skosimp)
                                                        (("2"
                                                          (replaces -1)
                                                          (("2"
                                                            (lemma
                                                             "times_div1")
                                                            (("2"
                                                              (inst?)
                                                              (("2"
                                                                (rewrite
                                                                 "div_cancel1")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "divides")
                                              (("2"
                                                (skosimp)
                                                (("2"
                                                  (replaces -1)
                                                  (("2"
                                                    (lemma
                                                     "times_div1")
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (rewrite
                                                         "div_cancel1")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (expand "restrict")
                                        (("3"
                                          (prop)
                                          (("1"
                                            (skosimp)
                                            (("1"
                                              (prop)
                                              (("1"
                                                (hide (-2 -3 -4))
                                                (("1"
                                                  (expand "Z" -1)
                                                  (("1"
                                                    (expand "/")
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skosimp)
                                            (("2"
                                              (expand "/")
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("4"
                                        (hide (-1 -2 -3))
                                        (("4"
                                          (prop)
                                          (("1"
                                            (expand "divides")
                                            (("1"
                                              (skosimp)
                                              (("1"
                                                (replaces -1)
                                                (("1"
                                                  (lemma "times_div1")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (rewrite
                                                       "div_cancel1")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide (-1 -2 2))
                              (("2"
                                (prop)
                                (("1"
                                  (expand "divides")
                                  (("1"
                                    (skosimp)
                                    (("1"
                                      (replaces -1)
                                      (("1"
                                        (lemma "times_div1")
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (rewrite "div_cancel1")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide (-1 2))
                          (("2" (prop)
                            (("1" (expand "divides")
                              (("1"
                                (skosimp)
                                (("1"
                                  (replaces -1)
                                  (("1"
                                    (lemma "times_div1")
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (rewrite "div_cancel1")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil)
                             ("3" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Z_iso_mZ_nZ formula-decl nil zn_example_2isomorphism nil)
    (Zn_card_n formula-decl nil ring_zn nil)
    (card_bij formula-decl nil finite_sets nil)
    (setof type-eq-decl nil defined_types nil)
    (int_plus_int_is_int application-judgement "int" integers nil) nil
    (/ const-decl "setof[set[T]]" cosets_def nil)
    (coset type-eq-decl nil cosets_def nil)
    (nZ const-decl "set[int]" ring_zn nil)
    (Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     ring_zn nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (ring? const-decl "bool" ring_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (coset? const-decl "bool" cosets_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (O const-decl "T3" function_props nil)
    (inverse const-decl "D" function_inverse nil)
    (NOT const-decl "[bool -> bool]" booleans nil) nil nil
    (surjective? const-decl "bool" functions nil)
    (injective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil)
    (nZ_ideal formula-decl nil ring_zn nil)
    (ideal_is_coset formula-decl nil ring_cosets_lemmas nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil) nil
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (div_cancel1 formula-decl nil real_props nil)
    (times_div1 formula-decl nil real_props nil)
    (composition_injective formula-decl nil func_composition
     finite_sets)
    (bij_inv_is_bij formula-decl nil function_inverse nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (setofsets type-eq-decl nil sets nil)
    (Z const-decl "setofsets[int]" ring_zn nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    nil nil
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (isomorphism? const-decl "bool" homomorphisms nil)
    (isomorphic? const-decl "bool" homomorphisms nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (mZ_nZ_order subtype
    "cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)]./(ring_zn.nZ(zn_example_2isomorphism.m), ring_zn.nZ(zn_example_2isomorphism.n))"
    "finite_set[set[int]]")))
 (mZ_nZ_order 0
  (mZ_nZ_order-1 nil 3810421729
   ("" (skosimp)
    (("" (lemma "Z_iso_mZ_nZ")
      (("" (inst?)
        (("" (assert)
          (("" (expand "isomorphic?")
            (("" (skosimp)
              (("" (expand "isomorphism?")
                (("" (flatten)
                  (("" (hide -2)
                    (("" (lemma "Zn_card_n")
                      (("" (inst -1 "n!1 / m!1")
                        (("1" (lemma "card_bij_inv[setof[int]]")
                          (("1" (inst -1 "n!1 / m!1" "Z(n!1 / m!1)")
                            (("1" (prop)
                              (("1"
                                (hide -1)
                                (("1"
                                  (skosimp)
                                  (("1"
                                    (lemma "card_bij_inv[setof[int]]")
                                    (("1"
                                      (inst
                                       -1
                                       "n!1 / m!1"
                                       "nZ(m!1) / nZ(n!1)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide (-2 2))
                                          (("1"
                                            (inst 1 " phi!1 o f!1")
                                            (("1"
                                              (lemma
                                               "composition_bijective[below[n!1 / m!1],(Z(n!1 / m!1)),(nZ(m!1) / nZ(n!1))]")
                                              (("1"
                                                (inst -1 "f!1" "phi!1")
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (hide (-2 -3 -4))
                                                    (("1"
                                                      (expand
                                                       "bijective?")
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (hide -2)
                                                          (("1"
                                                            (expand
                                                             "injective?")
                                                            (("1"
                                                              (skosimp)
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "o ")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide -1)
                                                          (("2"
                                                            (expand
                                                             "surjective?")
                                                            (("2"
                                                              (skosimp)
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "y!1")
                                                                (("2"
                                                                  (skosimp)
                                                                  (("2"
                                                                    (inst?)
                                                                    (("2"
                                                                      (expand
                                                                       "o ")
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide (-1 -3 2))
                                                    (("2"
                                                      (expand
                                                       "bijective?")
                                                      (("2"
                                                        (prop)
                                                        (("1"
                                                          (hide -2)
                                                          (("1"
                                                            (expand
                                                             "injective?")
                                                            (("1"
                                                              (skosimp)
                                                              (("1"
                                                                (inst
                                                                 -2
                                                                 "x1!1"
                                                                 "x2!1")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide -1)
                                                          (("2"
                                                            (expand
                                                             "surjective?")
                                                            (("2"
                                                              (skosimp)
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "y!1")
                                                                (("1"
                                                                  (skosimp)
                                                                  (("1"
                                                                    (inst
                                                                     1
                                                                     "x!1")
                                                                    (("1"
                                                                      (typepred
                                                                       "x!1")
                                                                      (("1"
                                                                        (expand
                                                                         "restrict")
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   2)
                                                                  (("2"
                                                                    (prop)
                                                                    (("1"
                                                                      (typepred
                                                                       "y!1")
                                                                      (("1"
                                                                        (expand
                                                                         "/")
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "restrict")
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (prop)
                                                    (("1"
                                                      (skosimp)
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (expand
                                                           "restrict")
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "Z"
                                                           -1)
                                                          (("2"
                                                            (expand
                                                             "/")
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (expand
                                                           "restrict")
                                                          (("3"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (skosimp)
                                                      (("2"
                                                        (expand "/")
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide (-1 -2 2))
                                                (("2"
                                                  (expand "divides")
                                                  (("2"
                                                    (skosimp)
                                                    (("2"
                                                      (replaces -1)
                                                      (("2"
                                                        (lemma
                                                         "times_div1")
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (rewrite
                                                             "div_cancel1")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (skosimp)
                                              (("2"
                                                (expand "/")
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (hide (-1 -2))
                                              (("3"
                                                (expand "divides")
                                                (("3"
                                                  (skosimp)
                                                  (("3"
                                                    (replaces -1)
                                                    (("3"
                                                      (lemma
                                                       "times_div1")
                                                      (("3"
                                                        (inst?)
                                                        (("3"
                                                          (rewrite
                                                           "div_cancel1")
                                                          (("3"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("4"
                                              (skosimp)
                                              (("4"
                                                (prop)
                                                (("1"
                                                  (hide (-1 -2))
                                                  (("1"
                                                    (typepred
                                                     "f!1(x1!1)")
                                                    (("1"
                                                      (expand "Z" -1)
                                                      (("1"
                                                        (expand "/")
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "restrict")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide (-1 -2 -3 2))
                                        (("2"
                                          (expand "divides")
                                          (("2"
                                            (skosimp)
                                            (("2"
                                              (replaces -1)
                                              (("2"
                                                (lemma "times_div1")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (rewrite
                                                     "div_cancel1")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide (-1 -2 2))
                              (("2"
                                (expand "divides")
                                (("2"
                                  (skosimp)
                                  (("2"
                                    (replaces -1)
                                    (("2"
                                      (lemma "times_div1")
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (rewrite "div_cancel1")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide (-1 2))
                          (("2" (expand "divides")
                            (("2" (skosimp)
                              (("2"
                                (replaces -1)
                                (("2"
                                  (lemma "times_div1")
                                  (("2"
                                    (inst?)
                                    (("2"
                                      (rewrite "div_cancel1")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Z_iso_mZ_nZ formula-decl nil zn_example_2isomorphism nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (Zn_card_n formula-decl nil ring_zn nil)
    (card_bij_inv formula-decl nil finite_sets nil)
    (setof type-eq-decl nil defined_types nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nZ const-decl "set[int]" ring_zn nil)
    (/ const-decl "setof[set[T]]" cosets_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (composition_bijective formula-decl nil func_composition
     finite_sets)
    (bijective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (injective? const-decl "bool" functions nil)
    (NOT const-decl "[bool -> bool]" booleans nil) nil nil
    (IFF const-decl "[bool, bool -> bool]" booleans nil) nil
    (TRUE const-decl "bool" booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (div_cancel1 formula-decl nil real_props nil)
    (times_div1 formula-decl nil real_props nil)
    (O const-decl "T3" function_props nil) nil
    (coset type-eq-decl nil cosets_def nil) nil
    (Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     ring_zn nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (ring? const-decl "bool" ring_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (coset? const-decl "bool" cosets_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (setofsets type-eq-decl nil sets nil)
    (Z const-decl "setofsets[int]" ring_zn nil) nil nil
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (isomorphism? const-decl "bool" homomorphisms nil)
    (isomorphic? const-decl "bool" homomorphisms nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (gcd_lcm_property_TCC1 0
  (gcd_lcm_property_TCC1-1 nil 3810586261 ("" (subtype-tcc) nil nil)
   nil nil
   (gcd_lcm_property subtype "zn_example_2isomorphism.m"
    "{jj: integers.int | booleans.=>(zn_example_2isomorphism.n = 0, jj /= 0)}")))
 (gcd_lcm_property 0
  (gcd_lcm_property-1 nil 3810586311
   ("" (skosimp)
    (("" (lemma "second_isomorphism_th[int,+,*,0,int,+,*,0]")
      (("1" (inst -1 "nZ(n!1)" "nZ(m!1)" "Z")
        (("1" (prop)
          (("1" (expand "R_isomorphic?")
            (("1" (skosimp)
              (("1" (expand "R_isomorphism?")
                (("1" (expand "R_epimorphism?")
                  (("1" (expand "R_monomorphism?")
                    (("1" (flatten)
                      (("1" (hide -4)
                        (("1"
                          (case "card(sum(nZ(n!1), nZ(m!1)) / nZ(m!1)) = card(nZ(n!1) / intersection(nZ(n!1), nZ(m!1)))")
                          (("1" (hide -3)
                            (("1" (lemma "nZ_mZ_sum")
                              (("1"
                                (inst?)
                                (("1"
                                  (replaces -1)
                                  (("1"
                                    (lemma "nZ_mZ_intersection")
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (lemma "mZ_nZ_order")
                                          (("1"
                                            (inst-cp
                                             -1
                                             "gcd(n!1, m!1)"
                                             "m!1")
                                            (("1"
                                              (inst
                                               -1
                                               "n!1"
                                               "lcm(n!1, m!1)")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (replaces -1)
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide (- 2))
                                                    (("2"
                                                      (lemma
                                                       "min_def[posnat]")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "lcm(n!1, m!1)"
                                                         "{k: posnat | divides(n!1, k) AND divides(m!1, k)}")
                                                        (("1"
                                                          (prop)
                                                          (("1"
                                                            (hide -1)
                                                            (("1"
                                                              (expand
                                                               "minimum?")
                                                              (("1"
                                                                (flatten)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide
                                                             (1 3))
                                                            (("2"
                                                              (expand
                                                               "lcm")
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 2)
                                                          (("2"
                                                            (expand
                                                             "nonempty?")
                                                            (("2"
                                                              (expand
                                                               "empty?")
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "n!1 * m!1")
                                                                (("2"
                                                                  (expand
                                                                   "member")
                                                                  (("2"
                                                                    (expand
                                                                     "divides")
                                                                    (("2"
                                                                      (prop)
                                                                      (("1"
                                                                        (inst?)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (inst
                                                                         1
                                                                         "n!1")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (hide 2)
                                                          (("3"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide (- 2))
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2"
                              (lemma "card_equal[set[int], set[int]]")
                              (("2"
                                (inst
                                 -1
                                 "nZ(n!1) / intersection(nZ(n!1), nZ(m!1))"
                                 "sum(nZ(n!1), nZ(m!1)) / nZ(m!1)")
                                (("2"
                                  (assert)
                                  (("2"
                                    (hide 2)
                                    (("2"
                                      (expand "card_eq")
                                      (("2"
                                        (inst?)
                                        (("1"
                                          (expand "bijective?")
                                          (("1"
                                            (prop)
                                            (("1"
                                              (hide (-2 -3))
                                              (("1"
                                                (expand "injective?")
                                                (("1"
                                                  (skosimp)
                                                  (("1"
                                                    (inst
                                                     -2
                                                     "x1!1"
                                                     "x2!1")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide (-1 -2))
                                              (("2"
                                                (expand "surjective?")
                                                (("2"
                                                  (skosimp)
                                                  (("2"
                                                    (inst -1 "y!1")
                                                    (("1"
                                                      (skosimp)
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (typepred
                                                             "x!1")
                                                            (("1"
                                                              (expand
                                                               "restrict")
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (expand
                                                         "restrict")
                                                        (("2"
                                                          (typepred
                                                           "y!1")
                                                          (("2"
                                                            (expand
                                                             "/")
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (prop)
                                          (("1"
                                            (skosimp)
                                            (("1"
                                              (expand "restrict")
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (expand "/")
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skosimp)
                                            (("2"
                                              (expand "/")
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide (- 2))
                            (("3" (lemma "nZ_mZ_intersection")
                              (("3"
                                (inst?)
                                (("3"
                                  (replaces -1)
                                  (("3"
                                    (lemma "mZ_nZ_order")
                                    (("3"
                                      (inst -1 "n!1" "lcm(n!1, m!1)")
                                      (("1"
                                        (prop)
                                        (("1"
                                          (expand "is_finite")
                                          (("1"
                                            (lemma
                                             "card_bij[set[int]]")
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (hide (-1 -3))
                                                  (("1"
                                                    (skosimp)
                                                    (("1"
                                                      (inst
                                                       1
                                                       "lcm(n!1, m!1) / n!1"
                                                       "f!1")
                                                      (("1"
                                                        (expand
                                                         "bijective?")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide -1)
                                                        (("2"
                                                          (prop)
                                                          (("1"
                                                            (lemma
                                                             "min_def[posnat]")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "lcm(n!1, m!1)"
                                                               "{k: posnat | divides(n!1, k) AND divides(m!1, k)}")
                                                              (("1"
                                                                (prop)
                                                                (("1"
                                                                  (hide
                                                                   -1)
                                                                  (("1"
                                                                    (expand
                                                                     "minimum?")
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (hide
                                                                         (-2
                                                                          -3))
                                                                        (("1"
                                                                          (expand
                                                                           "divides")
                                                                          (("1"
                                                                            (skosimp)
                                                                            (("1"
                                                                              (replaces
                                                                               -1)
                                                                              (("1"
                                                                                (lemma
                                                                                 "times_div1")
                                                                                (("1"
                                                                                  (inst?)
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "div_cancel1")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   (1
                                                                    3))
                                                                  (("2"
                                                                    (expand
                                                                     "lcm")
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 2)
                                                                (("2"
                                                                  (expand
                                                                   "nonempty?")
                                                                  (("2"
                                                                    (expand
                                                                     "empty?")
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "n!1 * m!1")
                                                                      (("2"
                                                                        (expand
                                                                         "member")
                                                                        (("2"
                                                                          (expand
                                                                           "divides")
                                                                          (("2"
                                                                            (prop)
                                                                            (("1"
                                                                              (inst?)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (inst
                                                                               1
                                                                               "n!1")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (hide
                                                                 2)
                                                                (("3"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide (-1 2))
                                                (("2" (grind) nil nil))
                                                nil)
                                               ("3"
                                                (hide (-1 2))
                                                (("3"
                                                  (prop)
                                                  (("1"
                                                    (lemma
                                                     "min_def[posnat]")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "lcm(n!1, m!1)"
                                                       "{k: posnat | divides(n!1, k) AND divides(m!1, k)}")
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (expand
                                                             "minimum?")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (hide
                                                                 (-2
                                                                  -3))
                                                                (("1"
                                                                  (expand
                                                                   "divides")
                                                                  (("1"
                                                                    (skosimp)
                                                                    (("1"
                                                                      (replaces
                                                                       -1)
                                                                      (("1"
                                                                        (lemma
                                                                         "times_div1")
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (rewrite
                                                                             "div_cancel1")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide (1 3))
                                                          (("2"
                                                            (expand
                                                             "lcm")
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (expand
                                                           "nonempty?")
                                                          (("2"
                                                            (expand
                                                             "empty?")
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "n!1 * m!1")
                                                              (("2"
                                                                (expand
                                                                 "member")
                                                                (("2"
                                                                  (expand
                                                                   "divides")
                                                                  (("2"
                                                                    (prop)
                                                                    (("1"
                                                                      (inst?)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (inst
                                                                       1
                                                                       "n!1")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (hide 2)
                                                        (("3"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (lemma "min_def[posnat]")
                                            (("2"
                                              (inst
                                               -1
                                               "lcm(n!1, m!1)"
                                               "{k: posnat | divides(n!1, k) AND divides(m!1, k)}")
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (hide -1)
                                                  (("1"
                                                    (expand "minimum?")
                                                    (("1"
                                                      (flatten)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide (1 3))
                                                  (("2"
                                                    (expand "lcm")
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (expand "nonempty?")
                                                  (("2"
                                                    (expand "empty?")
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "n!1 * m!1")
                                                      (("2"
                                                        (expand
                                                         "member")
                                                        (("2"
                                                          (expand
                                                           "divides")
                                                          (("2"
                                                            (prop)
                                                            (("1"
                                                              (inst?)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (inst
                                                               1
                                                               "n!1")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (hide 2)
                                                (("3" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("4" (hide (-1 -2 2))
                            (("4" (lemma "nZ_mZ_sum")
                              (("4"
                                (inst?)
                                (("4"
                                  (replaces -1)
                                  (("4"
                                    (lemma "mZ_nZ_order")
                                    (("4"
                                      (inst -1 "gcd(n!1, m!1)" "m!1")
                                      (("4"
                                        (assert)
                                        (("4"
                                          (expand "is_finite")
                                          (("4"
                                            (lemma
                                             "card_bij[set[int]]")
                                            (("4"
                                              (inst?)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide (-2 -3))
                                                  (("1"
                                                    (skosimp)
                                                    (("1"
                                                      (inst
                                                       1
                                                       "m!1 / gcd(n!1, m!1)"
                                                       "f!1")
                                                      (("1"
                                                        (expand
                                                         "bijective?")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide (-1 2))
                                                (("2"
                                                  (typepred
                                                   "n!1"
                                                   "m!1")
                                                  (("2"
                                                    (lemma
                                                     "gcd_divides")
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (prop)
                                                        (("1"
                                                          (hide
                                                           (-1
                                                            -3
                                                            -4
                                                            -5))
                                                          (("1"
                                                            (expand
                                                             "divides")
                                                            (("1"
                                                              (skosimp)
                                                              (("1"
                                                                (name-replace
                                                                 "gcd!1"
                                                                 "gcd(n!1, m!1)")
                                                                (("1"
                                                                  (replaces
                                                                   -1)
                                                                  (("1"
                                                                    (lemma
                                                                     "times_div1")
                                                                    (("1"
                                                                      (inst?)
                                                                      (("1"
                                                                        (rewrite
                                                                         "div_cancel1")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide -)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("4"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (lemma "nZ_ideal")
              (("2" (inst?)
                (("2" (expand "ideal?")
                  (("2" (expand "left_ideal?") (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (hide 2) (("3" (rewrite "nZ_ideal") nil nil)) nil))
          nil))
        nil)
       ("2" (hide (-1 2)) (("2" (rewrite "Z_ring") nil nil)) nil))
      nil))
    nil)
   ((* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (second_isomorphism_th formula-decl nil
     ring_2nd_3rd_isomorphism_theorems nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (fullset const-decl "set" sets nil)
    (ring? const-decl "bool" ring_def nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (R_epimorphism? const-decl "bool" ring_homomorphisms_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (setof type-eq-decl nil defined_types nil)
    (/ const-decl "setof[set[T]]" cosets_def nil)
    (sum const-decl "set[T]" cosets_def nil)
    (intersection const-decl "set" sets nil)
    (nZ_mZ_sum formula-decl nil ring_zn nil)
    (TRUE const-decl "bool" booleans nil)
    (mZ_nZ_order formula-decl nil zn_example_2isomorphism nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (lcm const-decl "int" divides_lems ints)
    (n!1 skolem-const-decl "posnat" zn_example_2isomorphism nil)
    (m!1 skolem-const-decl "posnat" zn_example_2isomorphism nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (min_def formula-decl nil min_nat nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (minimum? const-decl "bool" min_nat nil)
    (nonempty? const-decl "bool" sets nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (gcd const-decl "{k: posnat | divides(k, i) AND divides(k, j)}" gcd
         ints)
    (divides const-decl "bool" divides nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nZ_mZ_intersection formula-decl nil ring_zn nil)
    (card_equal formula-decl nil card_finite sets_aux)
    (card_eq const-decl "bool" card_comp_set sets_aux)
    (bijective? const-decl "bool" functions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (x!1 skolem-const-decl "(restrict
     [set[int],
      coset[int, restrict[[numfield, numfield], [int, int], numfield](+)](nZ
                                                                          (n!1),
                                                                          intersection
                                                                          (nZ
                                                                           (n!1),
                                                                           nZ
                                                                           (m!1))),
      bool]
     (nZ(n!1) / intersection(nZ(n!1), nZ(m!1))))"
     zn_example_2isomorphism nil)
    (y!1 skolem-const-decl "(sum(nZ(n!1), nZ(m!1)) / nZ(m!1))"
     zn_example_2isomorphism nil)
    (surjective? const-decl "bool" functions nil)
    (injective? const-decl "bool" functions nil)
    (phi!1 skolem-const-decl "[(restrict
      [set[int],
       coset[int,
             restrict[[numfield, numfield], [int, int], numfield](+)](nZ
                                                                      (n!1),
                                                                      intersection
                                                                      (nZ
                                                                       (n!1),
                                                                       nZ
                                                                       (m!1))),
       bool]
      (nZ(n!1) / intersection(nZ(n!1), nZ(m!1)))) ->
   (restrict
        [set[int],
         coset[int,
               restrict[[numfield, numfield], [int, int], numfield](+)](sum
                                                                        (nZ
                                                                         (n!1),
                                                                         nZ
                                                                         (m!1)),
                                                                        nZ
                                                                        (m!1)),
         bool]
        (sum(nZ(n!1), nZ(m!1)) / nZ(m!1)))]" zn_example_2isomorphism
     nil)
    (coset type-eq-decl nil cosets_def nil)
    (coset? const-decl "bool" cosets_def nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_cancel1 formula-decl nil real_props nil)
    (times_div1 formula-decl nil real_props nil)
    (card_bij formula-decl nil finite_sets nil)
    (gcd_divides formula-decl nil gcd ints)
    (R_monomorphism? const-decl "bool" ring_homomorphisms_def nil)
    (R_isomorphism? const-decl "bool" ring_homomorphisms_def nil)
    (R_isomorphic? const-decl "bool" ring_homomorphisms_def nil)
    (nZ_ideal formula-decl nil ring_zn nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (left_ideal? const-decl "bool" ring_ideal_def nil)
    (Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     ring_zn nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (nZ const-decl "set[int]" ring_zn nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (Z_ring formula-decl nil ring_zn nil))
   shostak)))

