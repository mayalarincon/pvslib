(ring_with_one_ideal
 (IMP_ring_with_one_TCC1 0
  (IMP_ring_with_one_TCC1-1 nil 3861799354
   ("" (lemma "fullset_is_ring_with_one") (("" (propax) nil nil)) nil)
   ((fullset_is_ring_with_one formula-decl nil ring_with_one_ideal
     nil))
   nil
   (IMP_ring_with_one assuming
    "ring_with_one[ring_with_one_ideal.T, ring_with_one_ideal.+, ring_with_one_ideal.*, ring_with_one_ideal.zero, ring_with_one_ideal.one].ring_with_one"
    "fullset_is_ring_with_one: ASSUMPTION ring_with_one_def[ring_with_one.T, ring_with_one.+, ring_with_one.*, ring_with_one.zero, ring_with_one.one].ring_with_one?(sets[ring_with_one.T].fullset)")))
 (IMP_ring_ideal_TCC1 0
  (IMP_ring_ideal_TCC1-1 nil 3861799354
   ("" (lemma "fullset_is_ring_with_one")
    (("" (expand "ring_with_one?") (("" (flatten) nil nil)) nil)) nil)
   ((ring_with_one? const-decl "bool" ring_with_one_def nil)
    (fullset_is_ring_with_one formula-decl nil ring_with_one_ideal
     nil))
   nil
   (IMP_ring_ideal assuming
    "ring_ideal[ring_with_one_ideal.T, ring_with_one_ideal.+, ring_with_one_ideal.*, ring_with_one_ideal.zero].ring_ideal"
    "fullset_is_ring: ASSUMPTION ring_def[ring_ideal.T, ring_ideal.+, ring_ideal.*, ring_ideal.zero].ring?(sets[ring_ideal.T].fullset)")))
 (l_ideal_w_one_is_R 0
  (l_ideal_w_one_is_R-1 nil 3808584076
   ("" (skeep)
    (("" (prop)
      (("1" (typepred "R")
        (("1" (expand "ring_with_one?")
          (("1" (expand "monoid?")
            (("1" (expand "monad?")
              (("1" (expand "member") (("1" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred "I!1")
        (("2" (decompose-equality)
          (("2" (iff)
            (("2" (expand "left_ideal?")
              (("2" (expand "subring?")
                (("2" (flatten)
                  (("2" (prop)
                    (("1" (hide-all-but (-1 -2 1))
                      (("1" (expand "subset?")
                        (("1" (inst -2 "x!1")
                          (("1" (expand "member")
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "left_swallow?")
                      (("2" (hide-all-but (-1 -3 -4 -6 1))
                        (("2" (inst -3 "x!1" "one")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((monad? const-decl "bool" monad_def nil)
    (member const-decl "bool" sets nil)
    (monoid? const-decl "bool" monoid_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil ring_with_one_ideal nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" ring_with_one_ideal nil)
    (* formal-const-decl "[T, T -> T]" ring_with_one_ideal nil)
    (zero formal-const-decl "T" ring_with_one_ideal nil)
    (one formal-const-decl "T" ring_with_one_ideal nil)
    (ring_with_one? const-decl "bool" ring_with_one_def nil)
    (ring_with_one nonempty-type-eq-decl nil ring_with_one nil)
    (left_swallow? const-decl "bool" ring_ideal_def nil) nil nil
    (right_identity formula-decl nil monad nil)
    (subset? const-decl "bool" sets nil)
    (subring? const-decl "bool" ring_def nil)
    (ring? const-decl "bool" ring_def nil)
    (left_ideal? const-decl "bool" ring_ideal_def nil)
    (left_ideal type-eq-decl nil ring_ideal_def nil))
   nil))
 (r_ideal_w_one_is_R 0
  (r_ideal_w_one_is_R-1 nil 3808584105
   ("" (skeep)
    (("" (prop)
      (("1" (typepred "R")
        (("1" (expand "ring_with_one?")
          (("1" (expand "monoid?")
            (("1" (expand "monad?")
              (("1" (expand "member") (("1" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred "I!1")
        (("2" (decompose-equality)
          (("2" (iff)
            (("2" (expand "right_ideal?")
              (("2" (expand "subring?")
                (("2" (flatten)
                  (("2" (prop)
                    (("1" (hide-all-but (-1 -2 1))
                      (("1" (expand "subset?")
                        (("1" (inst -2 "x!1")
                          (("1" (expand "member")
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "right_swallow?")
                      (("2" (hide-all-but (-1 -3 -4 -6 1))
                        (("2" (inst -3 "x!1" "one")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((monad? const-decl "bool" monad_def nil)
    (member const-decl "bool" sets nil)
    (monoid? const-decl "bool" monoid_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil ring_with_one_ideal nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" ring_with_one_ideal nil)
    (* formal-const-decl "[T, T -> T]" ring_with_one_ideal nil)
    (zero formal-const-decl "T" ring_with_one_ideal nil)
    (one formal-const-decl "T" ring_with_one_ideal nil)
    (ring_with_one? const-decl "bool" ring_with_one_def nil)
    (ring_with_one nonempty-type-eq-decl nil ring_with_one nil)
    (right_swallow? const-decl "bool" ring_ideal_def nil) nil nil
    (left_identity formula-decl nil monad nil)
    (subset? const-decl "bool" sets nil)
    (subring? const-decl "bool" ring_def nil)
    (ring? const-decl "bool" ring_def nil)
    (right_ideal? const-decl "bool" ring_ideal_def nil)
    (right_ideal type-eq-decl nil ring_ideal_def nil))
   nil))
 (ideal_w_one_is_R 0
  (ideal_w_one_is_R-2 nil 3808584143
   ("" (skosimp)
    (("" (typepred "I!1")
      (("" (expand "ideal?")
        (("" (flatten)
          (("" (lemma r_ideal_w_one_is_R)
            (("" (inst -1 "R!1" "I!1") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((ideal type-eq-decl nil ring_ideal_def nil)
    (ring_with_one nonempty-type-eq-decl nil ring_with_one nil)
    (ring_with_one? const-decl "bool" ring_with_one_def nil)
    (one formal-const-decl "T" ring_with_one_ideal nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ring? const-decl "bool" ring_def nil)
    (zero formal-const-decl "T" ring_with_one_ideal nil)
    (* formal-const-decl "[T, T -> T]" ring_with_one_ideal nil)
    (+ formal-const-decl "[T, T -> T]" ring_with_one_ideal nil)
    (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil ring_with_one_ideal nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (right_ideal? const-decl "bool" ring_ideal_def nil)
    (right_ideal type-eq-decl nil ring_ideal_def nil)
    (r_ideal_w_one_is_R formula-decl nil ring_with_one_ideal nil))
   nil)
  (ideal_w_one_is_R-1 nil 3801244241
   ("" (skeep)
    (("" (prop)
      (("1" (typepred "R")
        (("1" (expand "ring_with_one?")
          (("1" (expand "monoid?")
            (("1" (expand "monad?")
              (("1" (expand "member") (("1" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred "I!1")
        (("2" (decompose-equality)
          (("2" (iff)
            (("2" (expand "ideal?")
              (("2" (expand "left_ideal?")
                (("2" (expand "subring?")
                  (("2" (flatten)
                    (("2" (prop)
                      (("1" (hide-all-but (-1 -2 1))
                        (("1" (expand "subset?")
                          (("1" (inst -2 "x!1")
                            (("1" (expand "member")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "left_swallow?")
                        (("2" (hide-all-but (-1 -3 -4 -6 1))
                          (("2" (inst -3 "x!1" "one")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member const-decl "bool" sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil ring_with_one_ideal nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" ring_with_one_ideal nil)
    (* formal-const-decl "[T, T -> T]" ring_with_one_ideal nil)
    (zero formal-const-decl "T" ring_with_one_ideal nil)
    (one formal-const-decl "T" ring_with_one_ideal nil)
    (subset? const-decl "bool" sets nil)
    (left_swallow? const-decl "bool" ring_ideal_def nil)
    (left_ideal? const-decl "bool" ring_ideal_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil))
   shostak))
 (no_prop_l_ideal_nz_closed 0
  (no_prop_l_ideal_nz_closed-1 nil 3808755744
   ("" (skosimp)
    (("" (expand "nz_closed?")
      (("" (expand "star_closed?")
        (("" (skosimp)
          (("" (expand "member")
            (("" (expand "remove")
              (("" (inst -1 "+[T,*](R!1, x!1)")
                (("1" (split)
                  (("1" (decompose-equality)
                    (("1" (inst -1 "x!1")
                      (("1" (iff)
                        (("1" (flatten)
                          (("1" (case "(+[T, *])(R!1, x!1)(x!1)")
                            (("1" (assert)
                              (("1"
                                (expand "singleton")
                                (("1"
                                  (typepred "x!1")
                                  (("1"
                                    (expand "remove")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2"
                                (expand "+")
                                (("2"
                                  (inst 1 "one")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (typepred "R!1")
                                    (("2"
                                      (expand "ring_with_one?")
                                      (("2"
                                        (expand "monoid?")
                                        (("2"
                                          (expand "monad?")
                                          (("2"
                                            (expand "member")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (decompose-equality)
                    (("2" (inst -1 "one")
                      (("2" (iff)
                        (("2" (flatten)
                          (("2" (split 1)
                            (("1" (hide -1)
                              (("1"
                                (typepred "R!1")
                                (("1"
                                  (expand "ring_with_one?")
                                  (("1"
                                    (expand "monoid?")
                                    (("1"
                                      (expand "monad?")
                                      (("1"
                                        (expand "member")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (hide-all-but (-6 -7))
                                                (("1"
                                                  (expand "+" -2)
                                                  (("1"
                                                    (skosimp)
                                                    (("1"
                                                      (lemma
                                                       times_associative)
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "h!1"
                                                         "x!1"
                                                         "y!1")
                                                        (("1"
                                                          (replace
                                                           -3
                                                           -1
                                                           rl)
                                                          (("1"
                                                            (replace
                                                             -2
                                                             -1
                                                             rl)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (typepred
                                                                 "y!1")
                                                                (("1"
                                                                  (expand
                                                                   "remove")
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (rewrite R_prod_star_closed)
                              (("1"
                                (typepred "x!1")
                                (("1"
                                  (expand "remove")
                                  (("1"
                                    (expand "member")
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (typepred "y!1")
                                (("2"
                                  (expand "remove")
                                  (("2"
                                    (expand "member")
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (lemma r_prod_is_l_ideal)
                  (("2" (inst -1 "R!1" "x!1")
                    (("2" (typepred "x!1")
                      (("2" (expand "remove")
                        (("2" (expand "member")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nz_closed? const-decl "bool" ring_nz_closed_def nil)
    (remove const-decl "set" sets nil)
    (r_prod_is_l_ideal formula-decl nil ring_ideal nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (left_identity formula-decl nil monad nil)
    (monad? const-decl "bool" monad_def nil)
    (monoid? const-decl "bool" monoid_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (R_prod_star_closed formula-decl nil ring_basic_properties nil)
    (times_associative formula-decl nil ring nil)
    (times_zero formula-decl nil ring nil)
    (left_ideal type-eq-decl nil ring_ideal_def nil)
    (T formal-nonempty-type-decl nil ring_with_one_ideal nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" ring_with_one_ideal nil)
    (* formal-const-decl "[T, T -> T]" ring_with_one_ideal nil)
    (zero formal-const-decl "T" ring_with_one_ideal nil)
    (ring? const-decl "bool" ring_def nil)
    (left_ideal? const-decl "bool" ring_ideal_def nil) nil
    (one formal-const-decl "T" ring_with_one_ideal nil)
    (ring_with_one? const-decl "bool" ring_with_one_def nil)
    (ring_with_one nonempty-type-eq-decl nil ring_with_one nil) nil nil
    (member const-decl "bool" sets nil)
    (star_closed? const-decl "bool" groupoid_def nil))
   nil))
 (no_prop_r_ideal_nz_closed 0
  (no_prop_r_ideal_nz_closed-1 nil 3808755817
   ("" (skosimp)
    (("" (expand "nz_closed?")
      (("" (expand "star_closed?")
        (("" (skosimp)
          (("" (expand "member")
            (("" (expand "remove")
              (("" (split)
                (("1" (inst -1 "+[T,*](y!1, R!1)")
                  (("1" (split)
                    (("1" (decompose-equality)
                      (("1" (inst -1 "y!1")
                        (("1" (iff)
                          (("1" (flatten)
                            (("1" (case "(+[T, *])(y!1, R!1)(y!1)")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "singleton")
                                  (("1"
                                    (typepred "y!1")
                                    (("1"
                                      (expand "remove")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but 1)
                                (("2"
                                  (expand "+")
                                  (("2"
                                    (inst 1 "one")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (typepred "R!1")
                                      (("2"
                                        (expand "ring_with_one?")
                                        (("2"
                                          (expand "monoid?")
                                          (("2"
                                            (expand "monad?")
                                            (("2"
                                              (expand "member")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (decompose-equality)
                      (("2" (inst -1 "one")
                        (("2" (iff)
                          (("2" (prop)
                            (("1" (expand "+" -1)
                              (("1"
                                (skosimp)
                                (("1"
                                  (lemma times_associative)
                                  (("1"
                                    (inst -1 "x!1" "y!1" "h!1")
                                    (("1"
                                      (replace -4 -1 rl)
                                      (("1"
                                        (replace -2 -1 rl)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (typepred "x!1")
                                            (("1"
                                              (expand "remove")
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (typepred "R!1")
                              (("2"
                                (expand "ring_with_one?")
                                (("2"
                                  (expand "monoid?")
                                  (("2"
                                    (expand "monad?")
                                    (("2"
                                      (expand "member")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (lemma l_prod_is_r_ideal)
                    (("2" (inst -1 "R!1" "y!1")
                      (("2" (typepred "y!1")
                        (("2" (expand "remove")
                          (("2" (expand "member")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (rewrite R_prod_star_closed)
                  (("1" (typepred "x!1")
                    (("1" (expand "remove")
                      (("1" (expand "member") (("1" (propax) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (typepred "y!1")
                    (("2" (expand "remove")
                      (("2" (expand "member") (("2" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nz_closed? const-decl "bool" ring_nz_closed_def nil)
    (remove const-decl "set" sets nil)
    (R_prod_star_closed formula-decl nil ring_basic_properties nil) nil
    nil (ring_with_one nonempty-type-eq-decl nil ring_with_one nil)
    (ring_with_one? const-decl "bool" ring_with_one_def nil)
    (one formal-const-decl "T" ring_with_one_ideal nil) nil
    (right_ideal? const-decl "bool" ring_ideal_def nil)
    (ring? const-decl "bool" ring_def nil)
    (zero formal-const-decl "T" ring_with_one_ideal nil)
    (* formal-const-decl "[T, T -> T]" ring_with_one_ideal nil)
    (+ formal-const-decl "[T, T -> T]" ring_with_one_ideal nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-nonempty-type-decl nil ring_with_one_ideal nil)
    (right_ideal type-eq-decl nil ring_ideal_def nil)
    (times_associative formula-decl nil ring nil)
    (zero_times formula-decl nil ring nil)
    (singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (monoid? const-decl "bool" monoid_def nil)
    (monad? const-decl "bool" monad_def nil)
    (right_identity formula-decl nil monad nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (l_prod_is_r_ideal formula-decl nil ring_ideal nil)
    (member const-decl "bool" sets nil)
    (star_closed? const-decl "bool" groupoid_def nil))
   nil))
 (set_of_ideals_bounded_above 0
  (set_of_ideals_bounded_above-1 nil 3853333895
   ("" (skeep*)
    ((""
      (name-replace "S"
       " {J: set[T] | ideal?(J, R) AND subset?(I!1, J) AND J /= R}"
       :hide? nil)
      (("" (assert)
        (("" (skeep)
          (("" (expand "bounded_above?")
            (("" (case "nonempty?(ch)")
              (("1" (expand "upper_bound?")
                (("1" (inst 1 "Union(ch)")
                  (("1" (skeep)
                    (("1" (expand "restrict")
                      (("1" (expand "subset?")
                        (("1" (skeep)
                          (("1" (expand "member")
                            (("1" (typepred "r")
                              (("1"
                                (expand "Union")
                                (("1"
                                  (inst 1 "r")
                                  (("1"
                                    (expand "extend")
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "S" 1)
                    (("2" (split)
                      (("1" (rewrite "chain_ideal_union_ideal")
                        (("1" (hide 2)
                          (("1" (skeep)
                            (("1" (typepred "I!2")
                              (("1"
                                (expand "extend")
                                (("1"
                                  (prop)
                                  (("1"
                                    (hide-all-but (-1 -4 1))
                                    (("1"
                                      (expand "S" -1)
                                      (("1" (flatten) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (typepred "ch")
                          (("2" (hide-all-but (-1 1))
                            (("2" (expand "chain?")
                              (("2"
                                (expand "total_order?")
                                (("2"
                                  (expand "dichotomous?")
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (expand "restrict")
                                      (("2"
                                        (inst -1 "x" "y")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (typepred "y")
                                          (("2"
                                            (expand "extend")
                                            (("2" (prop) nil nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (typepred "x")
                                          (("3"
                                            (expand "extend")
                                            (("3" (prop) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "nonempty?")
                        (("2" (expand "empty?")
                          (("2" (skeep)
                            (("2" (expand "member")
                              (("2"
                                (expand "extend")
                                (("2"
                                  (prop)
                                  (("2"
                                    (expand "subset?")
                                    (("2"
                                      (skeep)
                                      (("2"
                                        (expand "member")
                                        (("2"
                                          (expand "Union")
                                          (("2"
                                            (inst 1 "x")
                                            (("1"
                                              (expand "S" -1)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (expand "subset?")
                                                  (("1"
                                                    (inst -2 "x!1")
                                                    (("1"
                                                      (expand "member")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (prop) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (expand "Union")
                        (("3" (prop)
                          (("3" (decompose-equality)
                            (("3" (inst -1 "one")
                              (("3"
                                (iff)
                                (("3"
                                  (prop)
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (typepred "a")
                                      (("1"
                                        (expand "extend")
                                        (("1"
                                          (prop)
                                          (("1"
                                            (expand "S" -1)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (rewrite
                                                 "ideal_w_one_is_R")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred "R")
                                    (("2"
                                      (expand "ring_with_one?")
                                      (("2"
                                        (expand "monoid?")
                                        (("2"
                                          (expand "monad?")
                                          (("2"
                                            (expand "member")
                                            (("2" (flatten) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "nonempty?")
                (("2" (inst 1 "I!1")
                  (("1" (expand "upper_bound?")
                    (("1" (skeep)
                      (("1" (expand "restrict")
                        (("1" (typepred "r")
                          (("1" (expand "empty?")
                            (("1" (inst -3 "r")
                              (("1"
                                (expand "member")
                                (("1"
                                  (expand "extend")
                                  (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (typepred "I!1")
                    (("2" (expand "S" 1)
                      (("2" (expand "subset?") (("2" (skeep) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((T formal-nonempty-type-decl nil ring_with_one_ideal nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (+ formal-const-decl "[T, T -> T]" ring_with_one_ideal nil)
    (* formal-const-decl "[T, T -> T]" ring_with_one_ideal nil)
    (zero formal-const-decl "T" ring_with_one_ideal nil)
    (ring? const-decl "bool" ring_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (one formal-const-decl "T" ring_with_one_ideal nil)
    (ring_with_one? const-decl "bool" ring_with_one_def nil)
    (ring_with_one nonempty-type-eq-decl nil ring_with_one nil)
    (subset? const-decl "bool" sets nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (/= const-decl "boolean" notequal nil)
    (nonempty? const-decl "bool" sets nil)
    (FALSE const-decl "bool" booleans nil)
    (extend const-decl "R" extend nil)
    (restrict const-decl "R" restrict nil)
    (chain? const-decl "bool" chain orders)
    (chain nonempty-type-eq-decl nil chain orders)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    nil (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (Union const-decl "set" sets nil) nil
    (NOT const-decl "[bool -> bool]" booleans nil) nil
    (member const-decl "bool" sets nil)
    (partial_order_restrict application-judgement "(partial_order?[S])"
     restrict_order_props nil)
    (dichotomous? const-decl "bool" orders nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    nil nil (total_order? const-decl "bool" orders nil)
    (chain_ideal_union_ideal formula-decl nil ring_ideal nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (empty? const-decl "bool" sets nil) nil
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (ideal_w_one_is_R formula-decl nil ring_with_one_ideal nil)
    (monad? const-decl "bool" monad_def nil)
    (monoid? const-decl "bool" monoid_def nil)
    (upper_bound? const-decl "bool" bounded_orders orders) nil nil
    (bounded_above? const-decl "bool" bounded_orders orders)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (set_of_ideals_has_maximal 0
  (set_of_ideals_has_maximal-1 nil 3852905338
   ("" (skeep*)
    ((""
      (name-replace "S"
       " {J: set[T] | ideal?(J, R) AND subset?(I!1, J) AND J /= R}"
       :hide? nil)
      (("" (assert)
        (("" (expand "has_maximal?")
          (("" (case "nonempty?(S)")
            (("1" (expand "nonempty?")
              (("1" (expand "empty?")
                (("1" (skeep)
                  (("1" (expand "member")
                    (("1" (lemma "zorn[(S), subset?[T]]")
                      (("1" (prop)
                        (("1" (skeep)
                          (("1" (inst 1 "t")
                            (("1" (expand "restrict")
                              (("1"
                                (hide-all-but (-1 1))
                                (("1"
                                  (expand "maximal?")
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand "fullset")
                                      (("1"
                                        (typepred "t")
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (inst 1 "r")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (expand "fullset")
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (skeep)
                            (("2" (lemma "set_of_ideals_bounded_above")
                              (("2"
                                (inst -1 "R" "I!1")
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst -1 "ch")
                                    (("1"
                                      (expand "bounded_above?")
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (inst 1 "t")
                                          (("1"
                                            (expand "upper_bound?")
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (inst -1 "r")
                                                (("1"
                                                  (expand "restrict")
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (typepred "r")
                                                    (("2"
                                                      (expand "extend")
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (typepred "ch")
                                        (("2"
                                          (expand "chain?")
                                          (("2"
                                            (expand "total_order?")
                                            (("2"
                                              (expand "dichotomous?")
                                              (("2"
                                                (skeep)
                                                (("2"
                                                  (inst -1 "x!1" "y")
                                                  (("1"
                                                    (expand "restrict")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 2 3)
                                                    (("2"
                                                      (typepred "y")
                                                      (("2"
                                                        (expand
                                                         "extend")
                                                        (("2"
                                                          (prop)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (hide 2 3)
                                                    (("3"
                                                      (typepred "x!1")
                                                      (("3"
                                                        (expand
                                                         "extend")
                                                        (("3"
                                                          (prop)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "nonempty?")
              (("2" (expand "empty?")
                (("2" (inst -1 "I!1")
                  (("2" (expand "member")
                    (("2" (decompose-equality)
                      (("2" (inst -1 "I!1")
                        (("2" (assert)
                          (("2" (expand "subset?")
                            (("2" (skeep) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((T formal-nonempty-type-decl nil ring_with_one_ideal nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (+ formal-const-decl "[T, T -> T]" ring_with_one_ideal nil)
    (* formal-const-decl "[T, T -> T]" ring_with_one_ideal nil)
    (zero formal-const-decl "T" ring_with_one_ideal nil)
    (ring? const-decl "bool" ring_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (one formal-const-decl "T" ring_with_one_ideal nil)
    (ring_with_one? const-decl "bool" ring_with_one_def nil)
    (ring_with_one nonempty-type-eq-decl nil ring_with_one nil)
    (subset? const-decl "bool" sets nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (/= const-decl "boolean" notequal nil)
    (has_maximal? const-decl "bool" minmax_orders orders)
    (partial_order_restrict application-judgement "(partial_order?[S])"
     restrict_order_props nil)
    (zorn formula-decl nil zorn orders)
    (restrict const-decl "R" restrict nil)
    (set_of_ideals_bounded_above formula-decl nil ring_with_one_ideal
     nil)
    (dichotomous? const-decl "bool" orders nil) nil nil
    (total_order? const-decl "bool" orders nil)
    (bounded_above? const-decl "bool" bounded_orders orders) nil
    (upper_bound? const-decl "bool" bounded_orders orders) nil
    (chain nonempty-type-eq-decl nil chain orders)
    (extend const-decl "R" extend nil)
    (FALSE const-decl "bool" booleans nil)
    (chain? const-decl "bool" chain orders) nil nil
    (maximal? const-decl "bool" minmax_orders orders)
    (fullset const-decl "set" sets nil) nil nil
    (NOT const-decl "[bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak)))

