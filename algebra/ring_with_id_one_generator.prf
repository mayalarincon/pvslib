(ring_with_id_one_generator
 (IMP_ring_one_generator_TCC1 0
  (IMP_ring_one_generator_TCC1-1 nil 3808760591
   ("" (lemma "fullset_is_ring_with_one")
    (("" (expand "ring_with_one?") (("" (flatten) nil nil)) nil)) nil)
   ((ring_with_one? const-decl "bool" ring_with_one_def nil)
    (fullset_is_ring_with_one formula-decl nil
     ring_with_id_one_generator nil))
   nil
   (IMP_ring_one_generator assuming
    "ring_one_generator[ring_with_id_one_generator.T, ring_with_id_one_generator.+, ring_with_id_one_generator.*, ring_with_id_one_generator.zero].ring_one_generator"
    "fullset_is_ring: ASSUMPTION ring_def[ring_one_generator.T, ring_one_generator.+, ring_one_generator.*, ring_one_generator.zero].ring?(sets[ring_one_generator.T].fullset)")))
 (IMP_ring_with_one_TCC1 0
  (IMP_ring_with_one_TCC1-1 nil 3808760591
   ("" (lemma "fullset_is_ring_with_one") (("" (propax) nil nil)) nil)
   ((fullset_is_ring_with_one formula-decl nil
     ring_with_id_one_generator nil))
   nil
   (IMP_ring_with_one assuming
    "ring_with_one[ring_with_id_one_generator.T, ring_with_id_one_generator.+, ring_with_id_one_generator.*, ring_with_id_one_generator.zero, ring_with_id_one_generator.one].ring_with_one"
    "fullset_is_ring_with_one: ASSUMPTION ring_with_one_def[ring_with_one.T, ring_with_one.+, ring_with_one.*, ring_with_one.zero, ring_with_one.one].ring_with_one?(sets[ring_with_one.T].fullset)")))
 (member_center_r_prod_is_one_gen 0
  (member_center_r_prod_is_one_gen-1 nil 3808757117
   ("" (skosimp)
    (("" (decompose-equality)
      (("" (iff)
        (("" (expand "+ ")
          (("" (expand "one_gen")
            (("" (split)
              (("1" (prop)
                (("1" (skosimp)
                  (("1" (expand "extend")
                    (("1" (prop)
                      (("1"
                        (inst 1 "h!1" "one" "-1"
                         "(LAMBDA (i : nat) : zero)"
                         "(LAMBDA (i : nat) : zero)" "1")
                        (("1" (rewrite inv_times_neg)
                          (("1" (grind)
                            (("1" (rewrite plus_associative) nil nil))
                            nil))
                          nil)
                         ("2" (lemma zero_is_member_R)
                          (("2" (inst -1 "R!1")
                            (("2" (expand "member")
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil)
                         ("3" (typepred "R!1")
                          (("3" (expand "ring_with_one?")
                            (("3" (expand "monoid?")
                              (("3"
                                (expand "monad?")
                                (("3"
                                  (expand "member")
                                  (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred "a!1" "h!1")
                        (("2" (lemma R_prod_star_closed)
                          (("2" (inst -1 "R!1" "h!1" "a!1")
                            (("2" (expand "member")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (prop)
                (("2" (expand "extend")
                  (("2" (prop)
                    (("2" (skosimp)
                      (("2" (expand "F_one_gen")
                        (("2"
                          (inst 1
                           "r!1+s!1+times(one,n!1)+R_sigma(0, m!1, LAMBDA (i: nat) -> (R!1): F!1(i) * G!1(i))")
                          (("1" (rewrite "left_distributive")
                            (("1" (rewrite "left_distributive")
                              (("1"
                                (rewrite "left_distributive")
                                (("1"
                                  (copy -2)
                                  (("1"
                                    (case
                                     " R_sigma(0, m!1, LAMBDA (i: nat) -> (R!1): F!1(i) * a!1 * G!1(i)) = R_sigma(0, m!1, LAMBDA (i: nat) -> (R!1): F!1(i) * G!1(i)) * a!1")
                                    (("1"
                                      (replace -1 -4)
                                      (("1"
                                        (rewrite left_times)
                                        (("1"
                                          (expand "center")
                                          (("1"
                                            (expand "extend")
                                            (("1"
                                              (inst -5 "s!1")
                                              (("1"
                                                (replace -5 1)
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lemma R_sigma_over_center_l)
                                      (("2"
                                        (expand "member")
                                        (("2"
                                          (inst
                                           -1
                                           "R!1"
                                           "a!1"
                                           "F!1"
                                           "G!1"
                                           "0"
                                           "m!1")
                                          (("2"
                                            (expand "F_one_gen")
                                            (("2"
                                              (replaces -1 1)
                                              (("2"
                                                (rewrite R_sigma_ast)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (lemma R_sum_star_closed)
                            (("2"
                              (inst -1 "R!1" "r!1+
                                    s!1 + times[T, +, *, zero](one, n!1)"
                               "R_sigma[T, +, *, zero]
                                                   (0, m!1, LAMBDA (i: nat) -> (R!1): F!1(i) * G!1(i))")
                              (("2"
                                (typepred "r!1")
                                (("2"
                                  (expand "member")
                                  (("2"
                                    (lemma R_sum_star_closed)
                                    (("2"
                                      (hide (-3 -4 -5 -6))
                                      (("2"
                                        (inst
                                         -1
                                         "R!1"
                                         "r!1+s!1"
                                         "times[T, +, *, zero](one, n!1)")
                                        (("2"
                                          (typepred "s!1")
                                          (("2"
                                            (lemma R_sum_star_closed)
                                            (("2"
                                              (inst
                                               -1
                                               "R!1"
                                               "r!1"
                                               "s!1")
                                              (("2"
                                                (expand "member")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (lemma
                                                     times_member)
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "R!1"
                                                       "n!1"
                                                       "one")
                                                      (("1"
                                                        (expand
                                                         "member")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (lemma
                                                             R_sigma_is_member_R)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "LAMBDA (i: nat) -> (R!1): F!1(i) * G!1(i)"
                                                               "R!1"
                                                               "m!1"
                                                               "0")
                                                              (("1"
                                                                (prop)
                                                                (("1"
                                                                  (expand
                                                                   "member")
                                                                  (("1"
                                                                    (lemma
                                                                     R_sum_star_closed)
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "R!1"
                                                                       "r!1 + s!1 + times[T, +, *, zero](one, n!1)"
                                                                       "R_sigma(0, m!1, LAMBDA (i: nat) -> (R!1): F!1(i) * G!1(i))")
                                                                      (("1"
                                                                        (expand
                                                                         "member")
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (skosimp)
                                                                  (("2"
                                                                    (expand
                                                                     "member")
                                                                    (("2"
                                                                      (typepred
                                                                       "F!1(n!2)"
                                                                       "G!1(n!2)")
                                                                      (("2"
                                                                        (lemma
                                                                         R_prod_star_closed)
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "R!1"
                                                                           "F!1(n!2)"
                                                                           "G!1(n!2)")
                                                                          (("2"
                                                                            (expand
                                                                             "member")
                                                                            (("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (lemma
                                                                 R_prod_star_closed)
                                                                (("2"
                                                                  (skosimp)
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "R!1"
                                                                     "F!1(i!1)"
                                                                     "G!1(i!1)")
                                                                    (("2"
                                                                      (typepred
                                                                       "F!1(i!1)"
                                                                       "G!1(i!1)")
                                                                      (("2"
                                                                        (expand
                                                                         "member")
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (typepred
                                                         "R!1")
                                                        (("2"
                                                          (expand
                                                           "ring_with_one?")
                                                          (("2"
                                                            (expand
                                                             "monoid?")
                                                            (("2"
                                                              (expand
                                                               "monad?")
                                                              (("2"
                                                                (expand
                                                                 "member")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member const-decl "bool" sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (* formal-const-decl "[T, T -> T]" ring_with_id_one_generator nil)
    (+ const-decl "set[T]" cosets_def nil)
    (+ formal-const-decl "[T, T -> T]" ring_with_id_one_generator nil)
    (zero formal-const-decl "T" ring_with_id_one_generator nil)
    (one formal-const-decl "T" ring_with_id_one_generator nil)
    (ring_with_one? const-decl "bool" ring_with_one_def nil)
    (ring_with_one nonempty-type-eq-decl nil ring_with_one nil)
    (FALSE const-decl "bool" booleans nil)
    (extend const-decl "R" extend nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (ring? const-decl "bool" ring_def nil)
    (one_gen const-decl "set[(R)]" ring_one_generator nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-nonempty-type-decl nil ring_with_id_one_generator nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (monoid? const-decl "bool" monoid_def nil)
    (monad? const-decl "bool" monad_def nil)
    (zero_is_member_R formula-decl nil ring_basic_properties nil)
    (inv_times_neg formula-decl nil ring_basic_properties nil)
    (inv_right formula-decl nil group nil)
    (inv const-decl "{y | x * y = one AND y * x = one}" group nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (plus_associative formula-decl nil ring nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (times_one formula-decl nil ring_with_one nil)
    (power def-decl "T" monoid_def nil)
    (right_identity formula-decl nil monad nil)
    (^ const-decl "T" group nil)
    (times const-decl "T" ring_basic_properties nil)
    (zero_times formula-decl nil ring nil)
    (F_one_gen const-decl "[nat -> (R)]" ring_one_generator nil)
    (R_sigma def-decl "T" ring_basic_properties nil)
    (left_identity formula-decl nil monad nil)
    (center const-decl "set[T]" center_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (R!1 skolem-const-decl "ring_with_one[T, +, *, zero, one]"
     ring_with_id_one_generator nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (R_prod_star_closed formula-decl nil ring_basic_properties nil)
    (G!1 skolem-const-decl "[nat -> (R!1)]" ring_with_id_one_generator
     nil)
    (F!1 skolem-const-decl "[nat -> (R!1)]" ring_with_id_one_generator
     nil)
    (m!1 skolem-const-decl "nat" ring_with_id_one_generator nil)
    (n!1 skolem-const-decl "int" ring_with_id_one_generator nil)
    (s!1 skolem-const-decl "(R!1)" ring_with_id_one_generator nil)
    (r!1 skolem-const-decl "(R!1)" ring_with_id_one_generator nil)
    (R_sigma_over_center_l formula-decl nil ring_one_generator nil)
    (TRUE const-decl "bool" booleans nil)
    (R_sigma_ast formula-decl nil ring_basic_properties nil)
    (one_times formula-decl nil ring_with_one nil)
    (left_times formula-decl nil ring_basic_properties nil)
    (left_distributive formula-decl nil ring nil)
    (<= const-decl "bool" reals nil)
    (subrange type-eq-decl nil integers nil)
    (R_sigma_is_member_R formula-decl nil ring_basic_properties nil)
    (times_member formula-decl nil ring_basic_properties nil)
    (R_sum_star_closed formula-decl nil ring_basic_properties nil))
   nil))
 (member_center_l_prod_is_one_gen 0
  (member_center_l_prod_is_one_gen-1 nil 3808759247
   ("" (skosimp)
    (("" (decompose-equality)
      (("" (iff)
        (("" (expand "+ ")
          (("" (expand "one_gen")
            (("" (split)
              (("1" (prop)
                (("1" (expand "extend")
                  (("1" (prop)
                    (("1" (skosimp)
                      (("1"
                        (inst 1 "one" "h!1" "-1"
                         "(LAMBDA (i : nat) : zero)"
                         "(LAMBDA (i : nat) : zero)" "1")
                        (("1" (rewrite inv_times_neg)
                          (("1" (lemma plus_commutative)
                            (("1" (inst -1 "one * a!1" "a!1 * h!1")
                              (("1"
                                (replaces -1 1)
                                (("1"
                                  (rewrite plus_associative)
                                  (("1" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (lemma zero_is_member_R)
                          (("2" (inst -1 "R!1")
                            (("2" (expand "member")
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil)
                         ("3" (typepred "R!1")
                          (("3" (expand "ring_with_one?")
                            (("3" (expand "monoid?")
                              (("3"
                                (expand "monad?")
                                (("3"
                                  (expand "member")
                                  (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skosimp)
                      (("2" (lemma R_prod_star_closed)
                        (("2" (inst -1 "R!1" "a!1" "h!1")
                          (("2" (expand "member")
                            (("2" (replace -2 -1 rl)
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "extend")
                (("2" (prop)
                  (("2" (skosimp)
                    (("2" (expand "F_one_gen")
                      (("2"
                        (inst 1
                         "r!1+s!1+times(one,n!1)+R_sigma(0, m!1, LAMBDA (i: nat) -> (R!1): F!1(i) * G!1(i))")
                        (("1" (rewrite "right_distributive")
                          (("1" (rewrite "right_distributive")
                            (("1" (rewrite "right_distributive")
                              (("1"
                                (copy -2)
                                (("1"
                                  (case
                                   " R_sigma(0, m!1, LAMBDA (i: nat) -> (R!1): F!1(i) * a!1 * G!1(i)) =  a!1*R_sigma(0, m!1, LAMBDA (i: nat) -> (R!1): F!1(i) * G!1(i))")
                                  (("1"
                                    (replace -1 1 rl)
                                    (("1"
                                      (rewrite right_times)
                                      (("1"
                                        (expand "center")
                                        (("1"
                                          (expand "extend")
                                          (("1"
                                            (inst -5 "r!1")
                                            (("1"
                                              (replace -5 1 rl)
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (lemma R_sigma_over_center_r)
                                    (("2"
                                      (inst
                                       -1
                                       "R!1"
                                       "a!1"
                                       "F!1"
                                       "G!1"
                                       "0"
                                       "m!1")
                                      (("2"
                                        (expand "member")
                                        (("2"
                                          (expand "F_one_gen")
                                          (("2"
                                            (replaces -1 1)
                                            (("2"
                                              (lemma ast_R_sigma)
                                              (("2"
                                                (inst
                                                 -1
                                                 "LAMBDA (i: nat) -> (R!1): F!1(i) * G!1(i)"
                                                 "m!1"
                                                 "0"
                                                 "a!1")
                                                (("1"
                                                  (replaces -1 1)
                                                  (("1"
                                                    (case
                                                     "FORALL(high: nat): R_sigma(0, high, LAMBDA (i: nat): a!1 * F!1(i) * G!1(i)) =
                                                                                                 R_sigma(0, high, LAMBDA (i: nat): a!1 * (F!1(i) * G!1(i)))")
                                                    (("1"
                                                      (inst -1 "m!1")
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2"
                                                        (induct "high")
                                                        (("1"
                                                          (expand
                                                           "R_sigma")
                                                          (("1"
                                                            (rewrite
                                                             times_associative)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (skosimp)
                                                          (("2"
                                                            (expand
                                                             "R_sigma"
                                                             1)
                                                            (("2"
                                                              (rewrite
                                                               times_associative)
                                                              (("2"
                                                                (rewrite
                                                                 cancel_right_plus)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (lemma
                                                   R_prod_star_closed)
                                                  (("2"
                                                    (skosimp)
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "R!1"
                                                       "F!1(i!1)"
                                                       "G!1(i!1)")
                                                      (("2"
                                                        (typepred
                                                         "F!1(i!1)"
                                                         "G!1(i!1)")
                                                        (("2"
                                                          (expand
                                                           "member")
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (lemma R_sum_star_closed)
                          (("2"
                            (inst -1 "R!1" "r!1+
                                                s!1 + times[T, +, *, zero](one, n!1)"
                             "R_sigma[T, +, *, zero]
                                                               (0, m!1, LAMBDA (i: nat) -> (R!1): F!1(i) * G!1(i))")
                            (("2" (typepred "r!1")
                              (("2"
                                (expand "member")
                                (("2"
                                  (lemma R_sum_star_closed)
                                  (("2"
                                    (hide (-4 -5))
                                    (("2"
                                      (inst
                                       -1
                                       "R!1"
                                       "r!1+s!1"
                                       "times[T, +, *, zero](one, n!1)")
                                      (("2"
                                        (typepred "s!1")
                                        (("2"
                                          (lemma R_sum_star_closed)
                                          (("2"
                                            (inst -1 "R!1" "r!1" "s!1")
                                            (("2"
                                              (expand "member")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (lemma times_member)
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "R!1"
                                                     "n!1"
                                                     "one")
                                                    (("1"
                                                      (expand "member")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (hide-all-but
                                                           1)
                                                          (("1"
                                                            (lemma
                                                             R_sigma_is_member_R)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "LAMBDA (i: nat) -> (R!1): F!1(i) * G!1(i)"
                                                               "R!1"
                                                               "m!1"
                                                               "0")
                                                              (("1"
                                                                (prop)
                                                                (("1"
                                                                  (expand
                                                                   "member")
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (skosimp)
                                                                  (("2"
                                                                    (expand
                                                                     "member")
                                                                    (("2"
                                                                      (typepred
                                                                       "F!1(n!2)"
                                                                       "G!1(n!2)")
                                                                      (("2"
                                                                        (lemma
                                                                         R_prod_star_closed)
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "R!1"
                                                                           "F!1(n!2)"
                                                                           "G!1(n!2)")
                                                                          (("2"
                                                                            (expand
                                                                             "member")
                                                                            (("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (lemma
                                                                 R_prod_star_closed)
                                                                (("2"
                                                                  (skosimp)
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "R!1"
                                                                     "F!1(i!1)"
                                                                     "G!1(i!1)")
                                                                    (("2"
                                                                      (typepred
                                                                       "F!1(i!1)"
                                                                       "G!1(i!1)")
                                                                      (("2"
                                                                        (expand
                                                                         "member")
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (typepred "R!1")
                                                      (("2"
                                                        (expand
                                                         "ring_with_one?")
                                                        (("2"
                                                          (expand
                                                           "monoid?")
                                                          (("2"
                                                            (expand
                                                             "monad?")
                                                            (("2"
                                                              (expand
                                                               "member")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member const-decl "bool" sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (* formal-const-decl "[T, T -> T]" ring_with_id_one_generator nil)
    (+ const-decl "set[T]" cosets_def nil)
    (+ formal-const-decl "[T, T -> T]" ring_with_id_one_generator nil)
    (zero formal-const-decl "T" ring_with_id_one_generator nil)
    (one formal-const-decl "T" ring_with_id_one_generator nil)
    (ring_with_one? const-decl "bool" ring_with_one_def nil)
    (ring_with_one nonempty-type-eq-decl nil ring_with_one nil)
    (FALSE const-decl "bool" booleans nil)
    (extend const-decl "R" extend nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (ring? const-decl "bool" ring_def nil)
    (one_gen const-decl "set[(R)]" ring_one_generator nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-nonempty-type-decl nil ring_with_id_one_generator nil)
    (R_prod_star_closed formula-decl nil ring_basic_properties nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (monoid? const-decl "bool" monoid_def nil)
    (monad? const-decl "bool" monad_def nil)
    (zero_is_member_R formula-decl nil ring_basic_properties nil)
    (inv_times_neg formula-decl nil ring_basic_properties nil)
    (times const-decl "T" ring_basic_properties nil)
    (inv const-decl "{y | x * y = one AND y * x = one}" group nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (plus_associative formula-decl nil ring nil)
    (one_times formula-decl nil ring_with_one nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (left_identity formula-decl nil monad nil)
    (R_sigma def-decl "T" ring_basic_properties nil)
    (F_one_gen const-decl "[nat -> (R)]" ring_one_generator nil)
    (zero_times formula-decl nil ring nil)
    (inv_right formula-decl nil group nil) (^ const-decl "T" group nil)
    (right_identity formula-decl nil monad nil)
    (power def-decl "T" monoid_def nil)
    (TRUE const-decl "bool" booleans nil)
    (plus_commutative formula-decl nil ring nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (R!1 skolem-const-decl "ring_with_one[T, +, *, zero, one]"
     ring_with_id_one_generator nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (R_sum_star_closed formula-decl nil ring_basic_properties nil)
    (times_member formula-decl nil ring_basic_properties nil)
    (<= const-decl "bool" reals nil)
    (subrange type-eq-decl nil integers nil)
    (R_sigma_is_member_R formula-decl nil ring_basic_properties nil)
    (right_distributive formula-decl nil ring nil)
    (right_times formula-decl nil ring_basic_properties nil)
    (times_one formula-decl nil ring_with_one nil)
    (center const-decl "set[T]" center_def nil)
    (ast_R_sigma formula-decl nil ring_basic_properties nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (cancel_right_plus formula-decl nil ring nil)
    (times_associative formula-decl nil ring nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (R_sigma_over_center_r formula-decl nil ring_one_generator nil)
    (r!1 skolem-const-decl "(R!1)" ring_with_id_one_generator nil)
    (s!1 skolem-const-decl "(R!1)" ring_with_id_one_generator nil)
    (n!1 skolem-const-decl "int" ring_with_id_one_generator nil)
    (m!1 skolem-const-decl "nat" ring_with_id_one_generator nil)
    (F!1 skolem-const-decl "[nat -> (R!1)]" ring_with_id_one_generator
     nil)
    (G!1 skolem-const-decl "[nat -> (R!1)]" ring_with_id_one_generator
     nil))
   nil))
 (member_center_l_prod_is_r_prod 0
  (member_center_l_prod_is_r_prod-1 nil 3808759557
   ("" (skosimp)
    (("" (rewrite member_center_l_prod_is_one_gen)
      (("" (rewrite member_center_r_prod_is_one_gen) nil nil)) nil))
    nil)
   ((member_center_l_prod_is_one_gen formula-decl nil
     ring_with_id_one_generator nil)
    (T formal-nonempty-type-decl nil ring_with_id_one_generator nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" ring_with_id_one_generator nil)
    (* formal-const-decl "[T, T -> T]" ring_with_id_one_generator nil)
    (zero formal-const-decl "T" ring_with_id_one_generator nil)
    (one formal-const-decl "T" ring_with_id_one_generator nil)
    (ring_with_one? const-decl "bool" ring_with_one_def nil)
    (ring_with_one nonempty-type-eq-decl nil ring_with_one nil)
    (member_center_r_prod_is_one_gen formula-decl nil
     ring_with_id_one_generator nil))
   nil))
 (commutative_id_one_gen_charac 0
  (commutative_id_one_gen_charac-1 nil 3779132605
   ("" (skosimp)
    (("" (lemma "commutative_ring_equal_center")
      (("" (inst -1 "R!1")
        (("" (assert)
          (("" (lemma "member_center_l_prod_is_one_gen")
            (("" (inst -1 "R!1" "a!1")
              (("" (assert)
                (("" (hide-all-but (-1 1))
                  (("" (grind)
                    (("" (hide -1)
                      (("" (expand "restrict")
                        (("" (expand "extend")
                          (("" (decompose-equality) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((zero formal-const-decl "T" ring_with_id_one_generator nil)
    (* formal-const-decl "[T, T -> T]" ring_with_id_one_generator nil)
    (+ formal-const-decl "[T, T -> T]" ring_with_id_one_generator nil)
    (T formal-nonempty-type-decl nil ring_with_id_one_generator nil)
    (commutative_ring_equal_center formula-decl nil ring_center nil)
    (ring_with_one nonempty-type-eq-decl nil ring_with_one nil)
    (extend const-decl "R" extend nil)
    (one_gen const-decl "set[(R)]" ring_one_generator nil)
    (ring? const-decl "bool" ring_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (restrict const-decl "R" restrict nil)
    (member const-decl "bool" sets nil)
    (member_center_l_prod_is_one_gen formula-decl nil
     ring_with_id_one_generator nil)
    (ring_with_one? const-decl "bool" ring_with_one_def nil)
    (one formal-const-decl "T" ring_with_id_one_generator nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil)))

