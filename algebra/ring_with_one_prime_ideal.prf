(ring_with_one_prime_ideal
 (IMP_ring_prime_ideal_TCC1 0
  (IMP_ring_prime_ideal_TCC1-1 nil 3856964765
   ("" (lemma "fullset_is_ring_with_one")
    (("" (expand "ring_with_one?") (("" (flatten) nil nil)) nil)) nil)
   ((ring_with_one? const-decl "bool" ring_with_one_def nil)
    (fullset_is_ring_with_one formula-decl nil
     ring_with_one_prime_ideal nil))
   nil
   (IMP_ring_prime_ideal assuming
    "ring_prime_ideal[ring_with_one_prime_ideal.T, ring_with_one_prime_ideal.+, ring_with_one_prime_ideal.*, ring_with_one_prime_ideal.zero].ring_prime_ideal"
    "fullset_is_ring: ASSUMPTION ring_def[ring_prime_ideal.T, ring_prime_ideal.+, ring_prime_ideal.*, ring_prime_ideal.zero].ring?(sets[ring_prime_ideal.T].fullset)")))
 (IMP_quotient_rings_with_one_TCC1 0
  (IMP_quotient_rings_with_one_TCC1-1 nil 3856964765
   ("" (lemma "fullset_is_ring_with_one") (("" (propax) nil nil)) nil)
   ((fullset_is_ring_with_one formula-decl nil
     ring_with_one_prime_ideal nil))
   nil
   (IMP_quotient_rings_with_one assuming
    "quotient_rings_with_one[ring_with_one_prime_ideal.T, ring_with_one_prime_ideal.+, ring_with_one_prime_ideal.*, ring_with_one_prime_ideal.zero, ring_with_one_prime_ideal.one].quotient_rings_with_one"
    "fullset_is_ring_with_one: ASSUMPTION ring_with_one_def[quotient_rings_with_one.T, quotient_rings_with_one.+, quotient_rings_with_one.*, quotient_rings_with_one.zero, quotient_rings_with_one.one].ring_with_one?(sets[quotient_rings_with_one.T].fullset)")))
 (prime_ideal_charac_TCC1 0
  (prime_ideal_charac_TCC1-1 nil 3779133952
   ("" (skeep)
    (("" (inst 1 "P") (("" (rewrite "ideal_is_coset") nil nil)) nil))
    nil)
   ((T formal-nonempty-type-decl nil ring_with_one_prime_ideal nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" ring_with_one_prime_ideal nil)
    (coset? const-decl "bool" cosets_def nil)
    (* formal-const-decl "[T, T -> T]" ring_with_one_prime_ideal nil)
    (zero formal-const-decl "T" ring_with_one_prime_ideal nil)
    (one formal-const-decl "T" ring_with_one_prime_ideal nil)
    (ring_with_one? const-decl "bool" ring_with_one_def nil)
    (ring_with_one nonempty-type-eq-decl nil ring_with_one nil)
    (coset type-eq-decl nil cosets_def nil)
    (P skolem-const-decl "set[T]" ring_with_one_prime_ideal nil)
    (R skolem-const-decl "ring_with_one[T, +, *, zero, one]"
     ring_with_one_prime_ideal nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (ring? const-decl "bool" ring_def nil)
    (ideal_is_coset formula-decl nil ring_cosets_lemmas nil))
   nil
   (prime_ideal_charac existence ""
    "cosets_def[ring_with_one_prime_ideal.T, ring_with_one_prime_ideal.+].coset(ring_with_one_prime_ideal.R, ring_with_one_prime_ideal.P)")))
 (prime_ideal_charac_TCC2 0
  (prime_ideal_charac_TCC2-1 nil 3779133952
   ("" (skeep*)
    (("" (lemma "coset_add")
      (("" (inst -1 "R" "P" "x1`1" "x1`2") (("" (assert) nil nil))
        nil))
      nil))
    nil)
   ((zero formal-const-decl "T" ring_with_one_prime_ideal nil)
    (* formal-const-decl "[T, T -> T]" ring_with_one_prime_ideal nil)
    (+ formal-const-decl "[T, T -> T]" ring_with_one_prime_ideal nil)
    (T formal-nonempty-type-decl nil ring_with_one_prime_ideal nil)
    (coset_add formula-decl nil quotient_rings nil)
    (coset type-eq-decl nil cosets_def nil)
    (coset? const-decl "bool" cosets_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (set type-eq-decl nil sets nil)
    (ring? const-decl "bool" ring_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (P skolem-const-decl "set[T]" ring_with_one_prime_ideal nil)
    (one formal-const-decl "T" ring_with_one_prime_ideal nil)
    (ring_with_one? const-decl "bool" ring_with_one_def nil)
    (ring_with_one nonempty-type-eq-decl nil ring_with_one nil)
    (R skolem-const-decl "ring_with_one[T, +, *, zero, one]"
     ring_with_one_prime_ideal nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (prime_ideal_charac subtype
    "cosets_def[ring_with_one_prime_ideal.T, ring_with_one_prime_ideal.+].add(ring_with_one_prime_ideal.R, ring_with_one_prime_ideal.P)"
    "[[cosets_def[ring_with_one_prime_ideal.T, ring_with_one_prime_ideal.+].coset(ring_with_one_prime_ideal.R, ring_with_one_prime_ideal.P), cosets_def[ring_with_one_prime_ideal.T, ring_with_one_prime_ideal.+].coset(ring_with_one_prime_ideal.R, ring_with_one_prime_ideal.P)] -> cosets_def[ring_with_one_prime_ideal.T, ring_with_one_prime_ideal.+].coset(ring_with_one_prime_ideal.R, ring_with_one_prime_ideal.P)]")))
 (prime_ideal_charac_TCC3 0
  (prime_ideal_charac_TCC3-1 nil 3779133952
   ("" (skeep*)
    (("" (lemma "coset_product")
      (("" (inst -1 "R" "P" "x1`1" "x1`2") (("" (assert) nil nil))
        nil))
      nil))
    nil)
   ((zero formal-const-decl "T" ring_with_one_prime_ideal nil)
    (* formal-const-decl "[T, T -> T]" ring_with_one_prime_ideal nil)
    (+ formal-const-decl "[T, T -> T]" ring_with_one_prime_ideal nil)
    (T formal-nonempty-type-decl nil ring_with_one_prime_ideal nil)
    (coset_product formula-decl nil quotient_rings nil)
    (coset type-eq-decl nil cosets_def nil)
    (coset? const-decl "bool" cosets_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (set type-eq-decl nil sets nil)
    (ring? const-decl "bool" ring_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (P skolem-const-decl "set[T]" ring_with_one_prime_ideal nil)
    (one formal-const-decl "T" ring_with_one_prime_ideal nil)
    (ring_with_one? const-decl "bool" ring_with_one_def nil)
    (ring_with_one nonempty-type-eq-decl nil ring_with_one nil)
    (R skolem-const-decl "ring_with_one[T, +, *, zero, one]"
     ring_with_one_prime_ideal nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (prime_ideal_charac subtype
    "product_coset_def[ring_with_one_prime_ideal.T, ring_with_one_prime_ideal.+, ring_with_one_prime_ideal.*].product(ring_with_one_prime_ideal.R, ring_with_one_prime_ideal.P)"
    "[[cosets_def[ring_with_one_prime_ideal.T, ring_with_one_prime_ideal.+].coset(ring_with_one_prime_ideal.R, ring_with_one_prime_ideal.P), cosets_def[ring_with_one_prime_ideal.T, ring_with_one_prime_ideal.+].coset(ring_with_one_prime_ideal.R, ring_with_one_prime_ideal.P)] -> cosets_def[ring_with_one_prime_ideal.T, ring_with_one_prime_ideal.+].coset(ring_with_one_prime_ideal.R, ring_with_one_prime_ideal.P)]")))
 (prime_ideal_charac_TCC4 0
  (prime_ideal_charac_TCC4-1 nil 3779133952
   ("" (skeep*) (("" (rewrite "ideal_is_coset") nil nil)) nil)
   ((ideal_is_coset formula-decl nil ring_cosets_lemmas nil)
    (set type-eq-decl nil sets nil)
    (ring? const-decl "bool" ring_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (one formal-const-decl "T" ring_with_one_prime_ideal nil)
    (ring_with_one? const-decl "bool" ring_with_one_def nil)
    (ring_with_one nonempty-type-eq-decl nil ring_with_one nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (T formal-nonempty-type-decl nil ring_with_one_prime_ideal nil)
    (+ formal-const-decl "[T, T -> T]" ring_with_one_prime_ideal nil)
    (* formal-const-decl "[T, T -> T]" ring_with_one_prime_ideal nil)
    (zero formal-const-decl "T" ring_with_one_prime_ideal nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (prime_ideal_charac subtype "ring_with_one_prime_ideal.P"
    "cosets_def[ring_with_one_prime_ideal.T, ring_with_one_prime_ideal.+].coset(ring_with_one_prime_ideal.R, ring_with_one_prime_ideal.P)")))
 (prime_ideal_charac_TCC5 0
  (prime_ideal_charac_TCC5-1 nil 3779133952
   ("" (skeep*)
    (("" (rewrite "lcoset_iff_coset" :dir rl)
      (("" (expand "left_coset?")
        (("" (inst 1 "one")
          (("" (typepred "R")
            (("" (expand "ring_with_one?")
              (("" (expand "monoid?")
                (("" (expand "monad?")
                  (("" (expand "member") (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((lcoset_iff_coset formula-decl nil ring_cosets_lemmas nil)
    (set type-eq-decl nil sets nil)
    (+ const-decl "set[T]" cosets_def nil)
    (one formal-const-decl "T" ring_with_one_prime_ideal nil)
    (ring_with_one? const-decl "bool" ring_with_one_def nil)
    (ring_with_one nonempty-type-eq-decl nil ring_with_one nil)
    (T formal-nonempty-type-decl nil ring_with_one_prime_ideal nil)
    (+ formal-const-decl "[T, T -> T]" ring_with_one_prime_ideal nil)
    (* formal-const-decl "[T, T -> T]" ring_with_one_prime_ideal nil)
    (zero formal-const-decl "T" ring_with_one_prime_ideal nil)
    (R skolem-const-decl "ring_with_one[T, +, *, zero, one]"
     ring_with_one_prime_ideal nil)
    (monad? const-decl "bool" monad_def nil)
    (member const-decl "bool" sets nil)
    (monoid? const-decl "bool" monoid_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (left_coset? const-decl "bool" cosets_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (prime_ideal_charac subtype
    "((cosets_def[ring_with_one_prime_ideal.T, ring_with_one_prime_ideal.+].+)(ring_with_one_prime_ideal.one, ring_with_one_prime_ideal.P))"
    "cosets_def[ring_with_one_prime_ideal.T, ring_with_one_prime_ideal.+].coset(ring_with_one_prime_ideal.R, ring_with_one_prime_ideal.P)")))
 (prime_ideal_charac 0
  (prova_2 "prova_errada" 3814007454
   ("" (skosimp)
    (("" (prop)
      (("1" (expand "prime_ideal?") (("1" (assert) nil nil)) nil)
       ("2" (expand "integral_domain_w_one?")
        (("2" (expand "integral_domain?")
          (("2" (rewrite "commutative_quotient_ring")
            (("1" (rewrite "prime_ideal_nz_closed")
              (("1" (expand "monad?")
                (("1" (lemma "prime_ideal_nz_closed")
                  (("1" (inst -1 "P!1" "R!1")
                    (("1" (assert)
                      (("1" (expand "nz_closed?")
                        (("1" (assert)
                          (("1" (hide -1)
                            (("1" (expand "remove")
                              (("1"
                                (lemma "one_diff_zero_coset")
                                (("1"
                                  (expand "prime_ideal?")
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (inst -1 "R!1" "P!1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "restrict")
                                          (("1"
                                            (lemma
                                             "quotient_ring_with_one")
                                            (("1"
                                              (inst -1 "R!1" "P!1")
                                              (("1"
                                                (hide-all-but (-1 1))
                                                (("1"
                                                  (expand
                                                   "ring_with_one?")
                                                  (("1"
                                                    (expand "monoid?")
                                                    (("1"
                                                      (expand "monad?")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (expand
                                                           "member")
                                                          (("1"
                                                            (expand
                                                             "restrict")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (hide-all-but
                                                                 (-4
                                                                  1))
                                                                (("1"
                                                                  (expand
                                                                   "identity?")
                                                                  (("1"
                                                                    (skeep)
                                                                    (("1"
                                                                      (inst?)
                                                                      (("1"
                                                                        (expand
                                                                         "restrict")
                                                                        (("1"
                                                                          (typepred
                                                                           "x")
                                                                          (("1"
                                                                            (expand
                                                                             "coset?")
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (hide-all-but
                                                                                 (-1
                                                                                  1))
                                                                                (("1"
                                                                                  (expand
                                                                                   "left_coset?")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "/")
                                                                                    (("1"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "prime_ideal?") (("2" (propax) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (expand "prime_ideal?")
        (("3" (assert)
          (("3" (split)
            (("1" (expand "integral_domain_w_one?")
              (("1" (flatten)
                (("1" (expand "monad?")
                  (("1" (flatten)
                    (("1" (expand "member")
                      (("1" (expand "remove")
                        (("1" (flatten)
                          (("1" (hide-all-but (-1 -2 1))
                            (("1" (decompose-equality -1)
                              (("1"
                                (inst -1 "one")
                                (("1"
                                  (iff)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (lemma "self_coset")
                                      (("1"
                                        (inst -1 "P!1" "R!1" "one")
                                        (("1"
                                          (expand "ideal?")
                                          (("1"
                                            (expand "left_ideal?")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (typepred "R!1")
                                      (("2"
                                        (expand "ring_with_one?")
                                        (("2"
                                          (expand "monoid?")
                                          (("2"
                                            (expand "monad?")
                                            (("2"
                                              (expand "member")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp)
              (("2" (expand "subset?")
                (("2" (skosimp*)
                  (("2" (expand "member")
                    (("2" (inst -1 "x!1*x!2")
                      (("2" (expand "sum")
                        (("2" (prop)
                          (("1" (expand "integral_domain_w_one?")
                            (("1" (expand "integral_domain?")
                              (("1"
                                (flatten)
                                (("1"
                                  (expand "nz_closed?")
                                  (("1"
                                    (expand "star_closed?")
                                    (("1"
                                      (inst
                                       -6
                                       "+[T,+](x!1,P!1)"
                                       "+[T,+](x!2,P!1)")
                                      (("1"
                                        (expand "member")
                                        (("1"
                                          (expand "remove")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (lemma "product_charac")
                                              (("1"
                                                (inst
                                                 -1
                                                 "R!1"
                                                 "P!1"
                                                 "x!1"
                                                 "x!2")
                                                (("1"
                                                  (replaces -1)
                                                  (("1"
                                                    (lemma
                                                     "self_coset")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "P!1"
                                                       "R!1"
                                                       "x!1*x!2")
                                                      (("1"
                                                        (case
                                                         "subring?(P!1, R!1)")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (-5 1))
                                                          (("2"
                                                            (expand
                                                             "ideal?")
                                                            (("2"
                                                              (expand
                                                               "left_ideal?")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred "B!1")
                                                  (("2"
                                                    (expand "ideal?")
                                                    (("2"
                                                      (expand
                                                       "left_ideal?")
                                                      (("2"
                                                        (expand
                                                         "subring?")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (hide-all-but
                                                             (-1 -7 1))
                                                            (("2"
                                                              (expand
                                                               "subset?")
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "x!2")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (typepred "A!1")
                                                  (("3"
                                                    (expand "ideal?")
                                                    (("3"
                                                      (expand
                                                       "left_ideal?")
                                                      (("3"
                                                        (expand
                                                         "subring?")
                                                        (("3"
                                                          (flatten)
                                                          (("3"
                                                            (hide-all-but
                                                             (-1 -6 1))
                                                            (("3"
                                                              (expand
                                                               "subset?")
                                                              (("3"
                                                                (inst
                                                                 -1
                                                                 "x!1")
                                                                (("3"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "remove")
                                        (("2"
                                          (expand "member")
                                          (("2"
                                            (expand "restrict")
                                            (("2"
                                              (expand "/")
                                              (("2"
                                                (case
                                                 "coset?[T, +](R!1, P!1)(((+[T, +])(x!2, P!1)))")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (lemma
                                                     "self_coset")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "P!1"
                                                       "R!1"
                                                       "x!2")
                                                      (("1"
                                                        (expand
                                                         "ideal?")
                                                        (("1"
                                                          (expand
                                                           "left_ideal?")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (hide-all-but
                                                               (-1
                                                                -3
                                                                -7
                                                                2))
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but (-3 1))
                                                  (("2"
                                                    (rewrite
                                                     "lcoset_iff_coset"
                                                     :dir
                                                     rl)
                                                    (("2"
                                                      (expand
                                                       "left_coset?")
                                                      (("2"
                                                        (inst 1 "x!2")
                                                        (("2"
                                                          (typepred
                                                           "B!1")
                                                          (("2"
                                                            (expand
                                                             "ideal?")
                                                            (("2"
                                                              (expand
                                                               "left_ideal?")
                                                              (("2"
                                                                (expand
                                                                 "subring?")
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (hide-all-but
                                                                     (-1
                                                                      -5
                                                                      1))
                                                                    (("2"
                                                                      (expand
                                                                       "subset?")
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "x!2")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (expand "remove")
                                        (("3"
                                          (expand "member")
                                          (("3"
                                            (expand "restrict")
                                            (("3"
                                              (expand "/")
                                              (("3"
                                                (case
                                                 "coset?[T, +](R!1, P!1)(((+[T, +])(x!1, P!1)))")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (lemma
                                                     "self_coset")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "P!1"
                                                       "R!1"
                                                       "x!1")
                                                      (("1"
                                                        (hide-all-but
                                                         (-1 -6 1 2))
                                                        (("1"
                                                          (expand
                                                           "ideal?")
                                                          (("1"
                                                            (expand
                                                             "left_ideal?")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (hide
                                                                 -4
                                                                 -5)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (rewrite
                                                   "lcoset_iff_coset"
                                                   :dir
                                                   rl)
                                                  (("2"
                                                    (hide-all-but
                                                     (-2 -4 1))
                                                    (("2"
                                                      (expand
                                                       "left_coset?")
                                                      (("2"
                                                        (inst 1 "x!1")
                                                        (("2"
                                                          (typepred
                                                           "A!1")
                                                          (("2"
                                                            (expand
                                                             "ideal?")
                                                            (("2"
                                                              (expand
                                                               "left_ideal?")
                                                              (("2"
                                                                (expand
                                                                 "subring?")
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (expand
                                                                     "subset?")
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "x!1")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (inst 1 "x!1" "x!2") nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((prime_ideal? const-decl "bool" ring_prime_ideal_def nil)
    (integral_domain? const-decl "bool" integral_domain_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (prime_ideal_nz_closed formula-decl nil ring_prime_ideal nil)
    (member const-decl "bool" sets nil)
    (remove const-decl "set" sets nil) nil nil
    (restrict const-decl "R" restrict nil)
    (identity? const-decl "bool" operator_defs nil)
    (/ const-decl "setof[set[T]]" cosets_def nil)
    (setof type-eq-decl nil defined_types nil)
    (coset type-eq-decl nil cosets_def nil)
    (coset? const-decl "bool" cosets_def nil) nil
    (NOT const-decl "[bool -> bool]" booleans nil)
    (left_coset? const-decl "bool" cosets_def nil)
    (monoid? const-decl "bool" monoid_def nil)
    (quotient_ring_with_one formula-decl nil quotient_rings_with_one
     nil)
    (one_diff_zero_coset formula-decl nil quotient_rings_with_one nil)
    (nz_closed? const-decl "bool" ring_nz_closed_def nil)
    (monad? const-decl "bool" monad_def nil)
    (zero formal-const-decl "T" ring_with_one_prime_ideal nil)
    (* formal-const-decl "[T, T -> T]" ring_with_one_prime_ideal nil)
    (+ formal-const-decl "[T, T -> T]" ring_with_one_prime_ideal nil)
    (T formal-nonempty-type-decl nil ring_with_one_prime_ideal nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ring? const-decl "bool" ring_def nil)
    (ring_with_one nonempty-type-eq-decl nil ring_with_one nil)
    (ring_with_one? const-decl "bool" ring_with_one_def nil)
    (one formal-const-decl "T" ring_with_one_prime_ideal nil)
    (commutative_ring? const-decl "bool" ring_def nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (commutative_quotient_ring formula-decl nil quotient_rings nil)
    (integral_domain_w_one? const-decl "bool"
     integral_domain_with_one_def nil)
    nil nil (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (product_charac formula-decl nil quotient_rings nil)
    (TRUE const-decl "bool" booleans nil)
    (subring? const-decl "bool" ring_def nil)
    (lcoset_iff_coset formula-decl nil ring_cosets_lemmas nil)
    (star_closed? const-decl "bool" groupoid_def nil) nil nil
    (sum const-decl "set[T]" cosets_def nil)
    (subset? const-decl "bool" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (self_coset formula-decl nil ring_cosets_lemmas nil)
    (left_ideal? const-decl "bool" ring_ideal_def nil))
   shostak)
  (prime_ideal_charac-1 nil 3779134090
   ("" (skosimp)
    (("" (prop)
      (("1" (expand "integral_domain_w_one?")
        (("1" (split)
          (("1" (expand "integral_domain?")
            (("1" (split)
              (("1" (rewrite "commutative_quotient_ring") nil nil)
               ("2" (rewrite "prime_ideal_nz_closed") nil nil))
              nil))
            nil)
           ("2" (expand "monad?")
            (("2" (split)
              (("1" (expand "star_closed?" 1)
                (("1" (skosimp)
                  (("1" (expand "member")
                    (("1" (expand "remove" 1)
                      (("1" (expand "member")
                        (("1" (expand "restrict")
                          (("1" (typepred "x!1" "y!1")
                            (("1" (expand "remove" (-2 -4))
                              (("1"
                                (expand "member")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (hide -1 -3)
                                    (("1"
                                      (expand "restrict")
                                      (("1"
                                        (lemma
                                         "prime_ideal_prod_closed")
                                        (("1"
                                          (inst
                                           -1
                                           "R!1"
                                           "P!1"
                                           "x!1"
                                           "y!1")
                                          (("1"
                                            (expand "member")
                                            (("1"
                                              (expand "remove")
                                              (("1"
                                                (expand "member")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "member")
                (("2" (expand "remove")
                  (("2" (split)
                    (("1" (typepred "R!1")
                      (("1" (expand "prime_ideal?")
                        (("1" (flatten)
                          (("1" (hide -4 -5 -5 -7 -8 -9 2)
                            (("1" (lemma "one_diff_zero_coset")
                              (("1"
                                (inst -1 "R!1" "P!1")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "member")
                      (("2" (expand "restrict")
                        (("2" (flatten)
                          (("2" (hide-all-but (-4 1))
                            (("2" (expand "/")
                              (("2"
                                (rewrite "lcoset_iff_coset" :dir rl)
                                (("2"
                                  (expand "left_coset?")
                                  (("2" (inst 1 "one") nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (expand "identity?")
                (("3" (skosimp)
                  (("3" (expand "restrict")
                    (("3" (lemma "quotient_ring_with_one")
                      (("3" (inst -1 "R!1" "P!1")
                        (("3" (expand "ring_with_one?")
                          (("3" (flatten)
                            (("3" (hide -1)
                              (("3"
                                (expand "monoid?")
                                (("3"
                                  (flatten)
                                  (("3"
                                    (hide -2)
                                    (("3"
                                      (expand "monad?")
                                      (("3"
                                        (flatten)
                                        (("3"
                                          (expand "identity?")
                                          (("3"
                                            (inst -3 "x!1")
                                            (("1"
                                              (expand "restrict")
                                              (("1" (propax) nil nil))
                                              nil)
                                             ("2"
                                              (expand "restrict")
                                              (("2"
                                                (typepred "x!1")
                                                (("2"
                                                  (hide-all-but (-1 1))
                                                  (("2"
                                                    (expand "/")
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "prime_ideal?")
        (("2" (assert)
          (("2" (split)
            (("1" (expand "integral_domain_w_one?")
              (("1" (flatten)
                (("1" (hide -2)
                  (("1" (expand "monad?")
                    (("1" (flatten)
                      (("1" (expand "member")
                        (("1" (expand "remove")
                          (("1" (flatten)
                            (("1" (hide -2 -3 -4 -5 -6 -8 2)
                              (("1"
                                (decompose-equality -1)
                                (("1"
                                  (inst -1 "one")
                                  (("1"
                                    (iff)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (lemma "self_coset")
                                        (("1"
                                          (inst -1 "P!1" "R!1" "one")
                                          (("1"
                                            (expand "ideal?")
                                            (("1"
                                              (expand "left_ideal?")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (hide-all-but
                                                   (-1 -2 -5 1))
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp)
              (("2" (expand "subset?")
                (("2" (skosimp*)
                  (("2" (expand "member")
                    (("2" (inst -1 "x!1*x!2")
                      (("2" (expand "sum")
                        (("2" (prop)
                          (("1" (expand "integral_domain_w_one?")
                            (("1" (expand "integral_domain?")
                              (("1"
                                (flatten)
                                (("1"
                                  (hide -4 -6)
                                  (("1"
                                    (expand "nz_closed?")
                                    (("1"
                                      (expand "star_closed?")
                                      (("1"
                                        (inst
                                         -4
                                         "+[T,+](x!1,P!1)"
                                         "+[T,+](x!2,P!1)")
                                        (("1"
                                          (expand "member")
                                          (("1"
                                            (expand "remove")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (lemma
                                                 "product_charac")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "R!1"
                                                   "P!1"
                                                   "x!1"
                                                   "x!2")
                                                  (("1"
                                                    (replaces -1)
                                                    (("1"
                                                      (lemma
                                                       "self_coset")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "P!1"
                                                         "R!1"
                                                         "x!1*x!2")
                                                        (("1"
                                                          (case
                                                           "subring?(P!1, R!1)")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             (-8 1))
                                                            (("2"
                                                              (expand
                                                               "ideal?")
                                                              (("2"
                                                                (expand
                                                                 "left_ideal?")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (typepred "B!1")
                                                    (("2"
                                                      (expand "ideal?")
                                                      (("2"
                                                        (expand
                                                         "left_ideal?")
                                                        (("2"
                                                          (expand
                                                           "subring?")
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (hide-all-but
                                                               (-1
                                                                -7
                                                                1))
                                                              (("2"
                                                                (expand
                                                                 "subset?")
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "x!2")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (typepred "A!1")
                                                    (("3"
                                                      (expand "ideal?")
                                                      (("3"
                                                        (expand
                                                         "left_ideal?")
                                                        (("3"
                                                          (expand
                                                           "subring?")
                                                          (("3"
                                                            (flatten)
                                                            (("3"
                                                              (hide-all-but
                                                               (-1
                                                                -6
                                                                1))
                                                              (("3"
                                                                (expand
                                                                 "subset?")
                                                                (("3"
                                                                  (inst
                                                                   -1
                                                                   "x!1")
                                                                  (("3"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (case "R!1(x!2)")
                                          (("1"
                                            (split)
                                            (("1"
                                              (rewrite
                                               "lcoset_iff_coset"
                                               :dir
                                               rl)
                                              (("1"
                                                (expand "left_coset?")
                                                (("1"
                                                  (hide-all-but (-1 1))
                                                  (("1"
                                                    (inst 1 "x!2")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "remove")
                                              (("2"
                                                (split)
                                                (("1"
                                                  (lemma "self_coset")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "P!1"
                                                     "R!1"
                                                     "x!2")
                                                    (("1"
                                                      (expand "ideal?")
                                                      (("1"
                                                        (expand
                                                         "left_ideal?")
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (hide-all-but
                                                             (-1
                                                              -2
                                                              -9
                                                              2))
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "member")
                                                  (("2"
                                                    (expand "restrict")
                                                    (("2"
                                                      (expand "/")
                                                      (("2"
                                                        (rewrite
                                                         "lcoset_iff_coset"
                                                         :dir
                                                         rl)
                                                        (("2"
                                                          (expand
                                                           "left_coset?")
                                                          (("2"
                                                            (hide-all-but
                                                             (-1 1))
                                                            (("2"
                                                              (inst
                                                               1
                                                               "x!2")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (typepred "B!1")
                                            (("2"
                                              (expand "ideal?")
                                              (("2"
                                                (expand "left_ideal?")
                                                (("2"
                                                  (expand "subring?")
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (hide-all-but
                                                       (-1 -7 1))
                                                      (("2"
                                                        (expand
                                                         "subset?")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "x!2")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (case
                                           "R!1(x!1)"
                                           "subring?(P!1,R!1)")
                                          (("1"
                                            (split)
                                            (("1"
                                              (rewrite
                                               "lcoset_iff_coset"
                                               :dir
                                               rl)
                                              (("1"
                                                (expand "left_coset?")
                                                (("1"
                                                  (hide-all-but (-2 1))
                                                  (("1"
                                                    (inst 1 "x!1")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "remove")
                                              (("2"
                                                (split)
                                                (("1"
                                                  (lemma "self_coset")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "P!1"
                                                     "R!1"
                                                     "x!1")
                                                    (("1"
                                                      (hide-all-but
                                                       (-1 -2 1 2))
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "member")
                                                  (("2"
                                                    (expand "restrict")
                                                    (("2"
                                                      (expand "/")
                                                      (("2"
                                                        (rewrite
                                                         "lcoset_iff_coset"
                                                         :dir
                                                         rl)
                                                        (("2"
                                                          (expand
                                                           "left_coset?")
                                                          (("2"
                                                            (hide-all-but
                                                             (-2 1))
                                                            (("2"
                                                              (inst
                                                               1
                                                               "x!1")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (-7 1))
                                            (("2"
                                              (expand "ideal?")
                                              (("2"
                                                (expand "left_ideal?")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (typepred "A!1")
                                            (("3"
                                              (expand "ideal?")
                                              (("3"
                                                (expand "left_ideal?")
                                                (("3"
                                                  (expand "subring?")
                                                  (("3"
                                                    (flatten)
                                                    (("3"
                                                      (hide-all-but
                                                       (-1 -6 1))
                                                      (("3"
                                                        (expand
                                                         "subset?")
                                                        (("3"
                                                          (inst
                                                           -1
                                                           "x!1")
                                                          (("3"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but (-1 -2 1))
                            (("2" (inst 1 "x!1" "x!2") nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((zero formal-const-decl "T" ring_with_one_prime_ideal nil)
    (* formal-const-decl "[T, T -> T]" ring_with_one_prime_ideal nil)
    (+ formal-const-decl "[T, T -> T]" ring_with_one_prime_ideal nil)
    (T formal-nonempty-type-decl nil ring_with_one_prime_ideal nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (one formal-const-decl "T" ring_with_one_prime_ideal nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (commutative_quotient_ring formula-decl nil quotient_rings nil)
    (remove const-decl "set" sets nil)
    (restrict const-decl "R" restrict nil)
    (prime_ideal? const-decl "bool" ring_prime_ideal_def nil)
    (prime_ideal type-eq-decl nil ring_prime_ideal_def nil)
    (prime_ideal_prod_closed formula-decl nil ring_prime_ideal nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (coset? const-decl "bool" cosets_def nil)
    (coset type-eq-decl nil cosets_def nil)
    (setof type-eq-decl nil defined_types nil)
    (member const-decl "bool" sets nil)
    (left_coset? const-decl "bool" cosets_def nil)
    (lcoset_iff_coset formula-decl nil ring_cosets_lemmas nil)
    (one_diff_zero_coset formula-decl nil quotient_rings_with_one nil)
    (quotient_ring_with_one formula-decl nil quotient_rings_with_one
     nil)
    (identity? const-decl "bool" operator_defs nil)
    (integral_domain_w_one? const-decl "bool"
     integral_domain_with_one_def nil)
    (TRUE const-decl "bool" booleans nil)
    (product_charac formula-decl nil quotient_rings nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (sum const-decl "set[T]" cosets_def nil)
    (subset? const-decl "bool" sets nil)
    (left_ideal? const-decl "bool" ring_ideal_def nil)
    (self_coset formula-decl nil ring_cosets_lemmas nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   nil)))

