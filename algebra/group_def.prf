(group_def
 (abelian_group?_TCC1 0
  (abelian_group?_TCC1-2 "" 3790093323
   ("" (expand "group?")
    (("" (expand "monoid?")
      (("" (expand "monad?")
        (("" (expand "star_closed?")
          (("" (expand "member") (("" (skosimp*) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((monoid? const-decl "bool" monoid_def nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (member const-decl "bool" sets nil)
    (monad? const-decl "bool" monad_def nil)
    (group? const-decl "bool" group_def nil))
   shostak
   (abelian_group? subtype
    "restrict[[group_def.T, group_def.T], [(group_def.S), (group_def.S)], group_def.T].restrict(group_def.*)"
    "[[(group_def.S), (group_def.S)] -> (group_def.S)]"))
  (abelian_group?_TCC1-1 nil 3301142328
   ("" (expand "group?")
    (("" (expand "monoid?")
      (("" (expand "monad?")
        (("" (expand "groupoid?")
          (("" (expand "star_closed?")
            (("" (expand "member") (("" (skosimp*) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((monoid? const-decl "bool" monoid_def nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (member const-decl "bool" sets nil)
    (monad? const-decl "bool" monad_def nil)
    (group? const-decl "bool" group_def nil))
   shostak
   (abelian_group? subtype
    "restrict[[group_def.T, group_def.T], [(group_def.S), (group_def.S)], group_def.T].restrict(group_def.*)"
    "[[(group_def.S), (group_def.S)] -> (group_def.S)]")))
 (finite_abelian_group?_TCC1 0
  (finite_abelian_group?_TCC1-2 "" 3790093323
   ("" (expand "finite_group?")
    (("" (expand "group?")
      (("" (expand "monoid?")
        (("" (expand "monad?")
          (("" (expand "star_closed?")
            (("" (expand "member") (("" (skosimp*) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((group? const-decl "bool" group_def nil)
    (monad? const-decl "bool" monad_def nil)
    (member const-decl "bool" sets nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (monoid? const-decl "bool" monoid_def nil)
    (finite_group? const-decl "bool" group_def nil))
   shostak
   (finite_abelian_group? subtype
    "restrict[[group_def.T, group_def.T], [(group_def.S), (group_def.S)], group_def.T].restrict(group_def.*)"
    "[[(group_def.S), (group_def.S)] -> (group_def.S)]"))
  (finite_abelian_group?_TCC1-1 nil 3301142328
   ("" (expand "finite_group?")
    (("" (expand "group?")
      (("" (expand "monoid?")
        (("" (expand "monad?")
          (("" (expand "groupoid?")
            (("" (expand "star_closed?")
              (("" (expand "member") (("" (skosimp*) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((group? const-decl "bool" group_def nil)
    (monad? const-decl "bool" monad_def nil)
    (member const-decl "bool" sets nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (monoid? const-decl "bool" monoid_def nil)
    (finite_group? const-decl "bool" group_def nil))
   shostak
   (finite_abelian_group? subtype
    "restrict[[group_def.T, group_def.T], [(group_def.S), (group_def.S)], group_def.T].restrict(group_def.*)"
    "[[(group_def.S), (group_def.S)] -> (group_def.S)]")))
 (finite_group_surj 0
  (finite_group_surj-1 nil 3407003514
   ("" (skosimp*)
    (("" (expand "finite_group?")
      (("" (assert)
        (("" (lemma "is_finite_surj[T]")
          (("" (inst?)
            (("" (flatten)
              (("" (hide -2)
                (("" (assert) (("" (inst + "N!1" "f!1") nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_group? const-decl "bool" group_def nil)
    (T formal-nonempty-type-decl nil group_def nil)
    (is_finite_surj formula-decl nil finite_sets nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak)))

