%%
%% Authors:	
%% 		Thaynara Arielly de Lima
%% 		Universidade Federal de Goiás - Brasil
%%
%%  		Andréia Borges Avelar da Silva
%%		Universidade de Brasília - Brasil
%%			
%%		André Luiz Galdino
%%		Universidade Federal de Catalão - Brasil
%%
%%		Mauricio Ayala-Rincón
%%		Universidade de Brasília - Brasil
%%----------------------------------------------------------------------------
%%
%%	Formalization of properties about sequences of ideals
%%
%%	Last version: June 25, 2020
%%
%%----------------------------------------------------------------------------

product_finseq_sets_ring[T:Type+,+,*:[T,T->T],zero,one:T]: THEORY

BEGIN

    ASSUMING IMPORTING ring_with_one_def[T,+,*,zero,one]
    
	fullset_is_ring_with_one: ASSUMPTION ring_with_one?(fullset[T])
	
    ENDASSUMING
  

IMPORTING structures@seq2set,
	  cartesian_product_quot_ring[T,+,*,zero],
	  sigma_R_below,
	  ring_with_one[T,+,*,zero,one]

            R: VAR ring[T,+,*,zero]
  fs, fs1,fs2: VAR finseq[T]
       fsA, y: VAR finseq[set[T]]
         A, B: VAR set[T]
	    x: VAR T
      n, m, j: VAR nat
   
%-------------------------------------------------



   product_fs_rec(fs)(i: below[length(fs)]): RECURSIVE T = 
        IF i = 0 THEN seq(fs)(0)
        ELSE seq(fs)(i) * product_fs_rec(fs)(i - 1)
        ENDIF MEASURE i

   product_fs(fs): T = IF length(fs) = 0 THEN one
                       ELSE product_fs_rec(fs)(number_fields.-(length(fs),1))
                       ENDIF

   product_of_sets(fsA): set[T] =
        {y: T | EXISTS (n: posnat, fsc: finseq[finseq[T]]):
                length(fsc) = n
                AND 
                (FORALL (i: below(n)): member(fsc(i), cartesian_product_n[T](fsA)))
                AND
                y = R_sigma_below[T,+,*,zero,n](0, n - 1,(LAMBDA (k: below(n)): product_fs(fsc`seq(k))))}
		
 %----------------------------------------------------------------------------------------

  product_fs_emptyseq: LEMMA product_fs(empty_seq) = one

  product_fs_1:  LEMMA product_fs( #(x) ) = x

  product_fs_rec_caret: LEMMA
                      n < length(fs) AND m < length(fs) AND n <= m
                         IMPLIES
  			  product_fs_rec(fs)(n) = product_fs_rec(fs ^ (0, m))(n)

  product_fs_rec_mult: LEMMA n < length(fs1 o fs2) IMPLIES
                   product_fs_rec(fs1 o fs2)(n) = 
                          IF n < length(fs1) THEN
                             product_fs_rec(fs1)(n)
                          ELSIF length(fs1) = 0 THEN
                             product_fs_rec(fs2)(n)
                          ELSE
                             product_fs_rec(fs2)(n-length(fs1))
			     * product_fs_rec(fs1)(length(fs1)-1) 
                          ENDIF
 
  product_fs_split: LEMMA
    FORALL (fs: finseq[T] | length(fs) > 1):
       product_fs(fs) = seq(fs)(length(fs) - 1) * product_fs(fs ^ (0, length(fs) - 2))

  Product_fs_o: LEMMA 
     product_fs(fs1 o fs2) = product_fs(fs2) * product_fs(fs1)

  Product_fs_o_split: LEMMA 
     FORALL (j: below[length(fs)] | j /= 0):
       product_fs(fs) = product_fs(fs ^ (j+1, length(fs) - 1)) * fs(j) * product_fs(fs ^ (0, j-1))
                                        
  product_fs_rec_in_ring: LEMMA
         (FORALL (i: below[length(fs)]): member(fs(i), R))
           IMPLIES
            (FORALL (n: below[length(fs)]): member(product_fs_rec(fs)(n), R))

  product_fs_rec_in_each: LEMMA
     FORALL (fsA: fsI(R) | length(fsA) /= 0, i: below[length(fsA)],
	     fsx: (cartesian_product_n[T](fsA))):
  	                    member(product_fs_rec(fsx)(length(fsA)-1), fsA(i))

  Intersection_of_ideals_is_ideal: LEMMA 
     FORALL (fsA: fsI(R) | length(fsA) /= 0):
         ideal?(Intersection(seq2set(fsA)), R)

  product_of_ideals_subset_of_each: LEMMA
     FORALL (fsA: fsI(R), i: below[length(fsA)]): subset?(product_of_sets(fsA), fsA(i))

  product_of_ideals_subset_intersection: LEMMA 
     FORALL (fsA: fsI(R)):
         subset?(product_of_sets(fsA), Intersection(seq2set(fsA)))

  cartesian_product_fs_representative: LEMMA
     FORALL (fsA: fsI(R), y: (cartesian_product_n[set[T]](fsQ(R)(fsA)))):
         EXISTS (r: finseq[(R)] | length(r) = length(fsA)):
	   FORALL (i: below[length(y)]): y(i) = r(i) + fsA(i)
 
END product_finseq_sets_ring
