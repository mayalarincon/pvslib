(ring_ideal
 (fullset_is_ring 0
  (fullset_is_ring-1 nil 3725292198 ("" (postpone) nil nil) nil
   shostak))
 (IMP_ring_basic_properties_TCC1 0
  (IMP_ring_basic_properties_TCC1-1 nil 3846255750
   ("" (lemma "fullset_is_ring") (("" (propax) nil nil)) nil)
   ((fullset_is_ring formula-decl nil ring_ideal nil)) nil
   (IMP_ring_basic_properties assuming
    "ring_basic_properties[ring_ideal.T, ring_ideal.+, ring_ideal.*, ring_ideal.zero].ring_basic_properties"
    "fullset_is_ring: ASSUMPTION ring_def[ring_basic_properties.T, ring_basic_properties.+, ring_basic_properties.*, ring_basic_properties.zero].ring?(sets[ring_basic_properties.T].fullset)")))
 (left_ideal_equiv 0
  (left_ideal_equiv-1 nil 3720365692
   ("" (skosimp)
    (("" (split)
      (("1" (flatten)
        (("1" (expand "left_ideal?")
          (("1" (flatten)
            (("1" (lemma "subring_equiv")
              (("1" (inst -1 "R!1" "I!1")
                (("1" (assert)
                  (("1" (flatten)
                    (("1" (assert)
                      (("1" (skosimp)
                        (("1" (inst -3 "x!1" "y!1")
                          (("1" (flatten)
                            (("1" (assert)
                              (("1"
                                (expand "left_swallow?")
                                (("1"
                                  (inst -6 "r!1" "x!1")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (expand "left_ideal?")
          (("2" (split 1)
            (("1" (lemma "subring_equiv")
              (("1" (inst -1 "R!1" "I!1")
                (("1" (prop)
                  (("1" (skosimp)
                    (("1" (split)
                      (("1" (inst -3 "x!1" "y!1" "y!1")
                        (("1" (assert) nil nil)
                         ("2" (typepred "y!1")
                          (("2" (expand "subset?")
                            (("2" (inst -3 "y!1")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (inst -3 "y!1" "x!1" "x!1")
                        (("1" (assert) nil nil)
                         ("2" (typepred "x!1")
                          (("2" (expand "subset?")
                            (("2" (inst -3 "x!1")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "left_swallow?")
              (("2" (skosimp)
                (("2" (inst -3 "x!1" "x!1" "r!1")
                  (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((left_ideal? const-decl "bool" ring_ideal_def nil)
    (zero formal-const-decl "T" ring_ideal nil)
    (* formal-const-decl "[T, T -> T]" ring_ideal nil)
    (+ formal-const-decl "[T, T -> T]" ring_ideal nil)
    (T formal-nonempty-type-decl nil ring_ideal nil)
    (subring_equiv formula-decl nil ring_basic_properties nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (left_swallow? const-decl "bool" ring_ideal_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (ring? const-decl "bool" ring_def nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (negate_is_right_inv formula-decl nil ring nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (subset? const-decl "bool" sets nil) nil nil nil nil)
   shostak))
 (right_ideal_equiv 0
  (right_ideal_equiv-1 nil 3720367273
   ("" (skosimp)
    (("" (split)
      (("1" (flatten)
        (("1" (expand "right_ideal?")
          (("1" (flatten)
            (("1" (lemma "subring_equiv")
              (("1" (inst -1 "R!1" "I!1")
                (("1" (assert)
                  (("1" (flatten)
                    (("1" (assert)
                      (("1" (skosimp)
                        (("1" (inst -3 "x!1" "y!1")
                          (("1" (flatten)
                            (("1" (assert)
                              (("1"
                                (expand "right_swallow?")
                                (("1"
                                  (inst -6 "r!1" "x!1")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (expand "right_ideal?")
          (("2" (split)
            (("1" (lemma "subring_equiv")
              (("1" (inst -1 "R!1" "I!1")
                (("1" (prop)
                  (("1" (skosimp)
                    (("1" (inst -3 "x!1" "y!1" "y!1")
                      (("1" (typepred "y!1")
                        (("1" (expand "subset?")
                          (("1" (inst -3 "y!1")
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "right_swallow?")
              (("2" (skosimp)
                (("2" (inst -3 "x!1" "x!1" "r!1")
                  (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((right_ideal? const-decl "bool" ring_ideal_def nil)
    (zero formal-const-decl "T" ring_ideal nil)
    (* formal-const-decl "[T, T -> T]" ring_ideal nil)
    (+ formal-const-decl "[T, T -> T]" ring_ideal nil)
    (T formal-nonempty-type-decl nil ring_ideal nil)
    (subring_equiv formula-decl nil ring_basic_properties nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (right_swallow? const-decl "bool" ring_ideal_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (ring? const-decl "bool" ring_def nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (negate_is_right_inv formula-decl nil ring nil) nil nil nil
    (subset? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   shostak))
 (ideal_equiv 0
  (ideal_equiv-1 nil 3747065634
   ("" (skosimp)
    (("" (lemma "right_ideal_equiv")
      (("" (lemma "left_ideal_equiv")
        (("" (inst -2 "I!1" "R!1")
          (("" (inst -1 "I!1" "R!1")
            (("" (expand "ideal?")
              (("" (prop)
                (("1" (hide-all-but (-6 -10 1))
                  (("1" (skosimp)
                    (("1" (inst -1 "x!1" "y!1" "r!1")
                      (("1" (inst -2 "x!1" "y!1" "r!1")
                        (("1" (flatten) (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but (-3 2))
                  (("2" (skosimp)
                    (("2" (inst -1 "x!1" "y!1" "r!1")
                      (("2" (flatten) (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("3" (hide-all-but (-3 2))
                  (("3" (skosimp)
                    (("3" (inst -1 "x!1" "y!1" "r!1")
                      (("3" (flatten) (("3" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("4" (hide-all-but (-3 2))
                  (("4" (skosimp)
                    (("4" (inst -1 "x!1" "y!1" "r!1")
                      (("4" (flatten) (("4" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("5" (hide-all-but (-3 2))
                  (("5" (skosimp)
                    (("5" (inst -1 "x!1" "y!1" "r!1")
                      (("5" (flatten) (("5" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((right_ideal_equiv formula-decl nil ring_ideal nil)
    (T formal-nonempty-type-decl nil ring_ideal nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" ring_ideal nil)
    (* formal-const-decl "[T, T -> T]" ring_ideal nil)
    (zero formal-const-decl "T" ring_ideal nil)
    (ring? const-decl "bool" ring_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (member const-decl "bool" sets nil)
    (left_ideal_equiv formula-decl nil ring_ideal nil))
   shostak))
 (self_ideal 0
  (self_ideal-1 nil 3777885551
   ("" (skosimp)
    (("" (rewrite "ideal_equiv")
      (("" (case "subring?(R!1,R!1)")
        (("1" (rewrite "subring_equiv")
          (("1" (flatten)
            (("1" (assert)
              (("1" (skosimp)
                (("1" (hide -1 -2)
                  (("1" (split)
                    (("1" (inst -1 "x!1" "y!1")
                      (("1" (assert) nil nil)) nil)
                     ("2" (inst -1 "x!1" "r!1")
                      (("2" (assert) nil nil)) nil)
                     ("3" (inst -1 "r!1" "x!1")
                      (("3" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (expand "subring?")
            (("2" (expand "subset?") (("2" (skosimp) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ideal_equiv formula-decl nil ring_ideal nil)
    (T formal-nonempty-type-decl nil ring_ideal nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" ring_ideal nil)
    (* formal-const-decl "[T, T -> T]" ring_ideal nil)
    (zero formal-const-decl "T" ring_ideal nil)
    (ring? const-decl "bool" ring_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (subring_equiv formula-decl nil ring_basic_properties nil)
    (subring? const-decl "bool" ring_def nil))
   shostak))
 (zero_ideal 0
  (zero_ideal-1 nil 3782143562
   ("" (skeep)
    (("" (rewrite "ideal_equiv")
      (("" (split)
        (("1" (expand "nonempty?")
          (("1" (expand "empty?")
            (("1" (inst -1 "zero")
              (("1" (expand "member")
                (("1" (expand "singleton") (("1" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "subset?")
          (("2" (skeep)
            (("2" (expand "member")
              (("2" (expand "singleton")
                (("2" (replaces -1)
                  (("2" (lemma "zero_is_member_R")
                    (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (skeep)
          (("3" (expand "singleton")
            (("3" (typepred "x" "y")
              (("3" (expand "singleton")
                (("3" (replaces -1)
                  (("3" (replaces -1) (("3" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ideal_equiv formula-decl nil ring_ideal nil)
    (T formal-nonempty-type-decl nil ring_ideal nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (zero formal-const-decl "T" ring_ideal nil)
    (+ formal-const-decl "[T, T -> T]" ring_ideal nil)
    (* formal-const-decl "[T, T -> T]" ring_ideal nil)
    (ring? const-decl "bool" ring_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (member const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (negate_zero formula-decl nil ring nil)
    (plus_zero formula-decl nil ring nil)
    (zero_times formula-decl nil ring nil)
    (times_zero formula-decl nil ring nil)
    (subset? const-decl "bool" sets nil)
    (TRUE const-decl "bool" booleans nil)
    (zero_is_member_R formula-decl nil ring_basic_properties nil)
    (nonempty? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil))
   shostak))
 (ideal_transitive_TCC1 0
  (ideal_transitive_TCC1-1 nil 3749914196 ("" (subtype-tcc) nil nil)
   ((ring nonempty-type-eq-decl nil ring nil)
    (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (zero formal-const-decl "T" ring_ideal nil)
    (* formal-const-decl "[T, T -> T]" ring_ideal nil)
    (+ formal-const-decl "[T, T -> T]" ring_ideal nil)
    (T formal-nonempty-type-decl nil ring_ideal nil)
    (plus_zero formula-decl nil ring nil)
    (restrict const-decl "R" restrict nil)
    (zero_plus formula-decl nil ring nil)
    (identity? const-decl "bool" operator_defs nil)
    (monad? const-decl "bool" monad_def nil)
    (associative? const-decl "bool" operator_defs nil)
    (monoid? const-decl "bool" monoid_def nil)
    (inv_exists? const-decl "bool" group_def nil)
    (group? const-decl "bool" group_def nil)
    (commutative? const-decl "bool" operator_defs nil)
    (abelian_group? const-decl "bool" group_def nil)
    (left_distributive? const-decl "bool" operator_defs_more nil)
    (right_distributive? const-decl "bool" operator_defs_more nil)
    (ring? const-decl "bool" ring_def nil)
    (subring? const-decl "bool" ring_def nil)
    (left_swallow? const-decl "bool" ring_ideal_def nil)
    (left_ideal? const-decl "bool" ring_ideal_def nil)
    (right_swallow? const-decl "bool" ring_ideal_def nil)
    (right_ideal? const-decl "bool" ring_ideal_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil))
   nil
   (ideal_transitive subtype "ring_ideal.H"
    "(ring_def[ring_ideal.T, ring_ideal.+, ring_ideal.*, ring_ideal.zero].ring?)")))
 (ideal_transitive 0
  (ideal_transitive-1 nil 3749914204
   ("" (skosimp)
    (("" (rewrite "ideal_equiv" 1)
      (("" (rewrite "ideal_equiv" -2)
        (("" (flatten)
          (("" (assert)
            (("" (hide -2 -3 -5)
              (("" (skosimp)
                (("" (inst -2 "x!1" "y!1" "r!1")
                  (("" (hide 2)
                    (("" (expand "subring?")
                      (("" (flatten)
                        (("" (hide -2)
                          (("" (expand "subset?")
                            (("" (inst -1 "r!1")
                              (("" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ideal_equiv formula-decl nil ring_ideal nil)
    (T formal-nonempty-type-decl nil ring_ideal nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" ring_ideal nil)
    (* formal-const-decl "[T, T -> T]" ring_ideal nil)
    (zero formal-const-decl "T" ring_ideal nil)
    (ring? const-decl "bool" ring_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil) nil nil nil
    (subring? const-decl "bool" ring_def nil)
    (subset? const-decl "bool" sets nil))
   shostak))
 (intersection_subring_ideal_TCC1 0
  (intersection_subring_ideal_TCC1-1 nil 3750672161
   ("" (subtype-tcc) nil nil)
   ((ring nonempty-type-eq-decl nil ring nil)
    (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (zero formal-const-decl "T" ring_ideal nil)
    (* formal-const-decl "[T, T -> T]" ring_ideal nil)
    (+ formal-const-decl "[T, T -> T]" ring_ideal nil)
    (T formal-nonempty-type-decl nil ring_ideal nil)
    (plus_zero formula-decl nil ring nil)
    (restrict const-decl "R" restrict nil)
    (zero_plus formula-decl nil ring nil)
    (identity? const-decl "bool" operator_defs nil)
    (monad? const-decl "bool" monad_def nil)
    (associative? const-decl "bool" operator_defs nil)
    (monoid? const-decl "bool" monoid_def nil)
    (inv_exists? const-decl "bool" group_def nil)
    (group? const-decl "bool" group_def nil)
    (commutative? const-decl "bool" operator_defs nil)
    (abelian_group? const-decl "bool" group_def nil)
    (left_distributive? const-decl "bool" operator_defs_more nil)
    (right_distributive? const-decl "bool" operator_defs_more nil)
    (ring? const-decl "bool" ring_def nil)
    (subring? const-decl "bool" ring_def nil)
    (left_swallow? const-decl "bool" ring_ideal_def nil)
    (left_ideal? const-decl "bool" ring_ideal_def nil)
    (right_swallow? const-decl "bool" ring_ideal_def nil)
    (right_ideal? const-decl "bool" ring_ideal_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil))
   nil
   (intersection_subring_ideal subtype "ring_ideal.H"
    "(ring_def[ring_ideal.T, ring_ideal.+, ring_ideal.*, ring_ideal.zero].ring?)")))
 (intersection_subring_ideal 0
  (intersection_subring_ideal-1 nil 3750672162
   ("" (skosimp)
    (("" (copy -1)
      (("" (copy -3)
        (("" (expand "ideal?" -1)
          (("" (expand "left_ideal?")
            (("" (expand "subring?" (-1 -2))
              (("" (flatten)
                (("" (hide -1 -3 -4 -5)
                  (("" (rewrite "subring_equiv")
                    (("" (rewrite "ideal_equiv")
                      (("" (rewrite "ideal_equiv")
                        (("" (flatten)
                          (("" (split)
                            (("1" (hide-all-but (-1 -2 1))
                              (("1"
                                (expand "nonempty?")
                                (("1"
                                  (expand "empty?")
                                  (("1"
                                    (inst -1 "zero")
                                    (("1"
                                      (expand "member")
                                      (("1"
                                        (expand "intersection")
                                        (("1"
                                          (rewrite "zero_is_member_R")
                                          (("1"
                                            (rewrite
                                             "zero_is_member_R")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide -)
                              (("2"
                                (expand "subset?")
                                (("2"
                                  (skosimp)
                                  (("2"
                                    (expand "intersection")
                                    (("2"
                                      (expand "member")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (hide -1 -2 -3 -6 -7)
                              (("3"
                                (copy -2)
                                (("3"
                                  (skosimp)
                                  (("3"
                                    (typepred "x!1" "y!1" "r!1")
                                    (("3"
                                      (expand "intersection" (-1 -2))
                                      (("3"
                                        (flatten)
                                        (("3"
                                          (expand "subset?")
                                          (("3"
                                            (inst -7 "r!1")
                                            (("3"
                                              (assert)
                                              (("3"
                                                (inst
                                                 -9
                                                 "x!1"
                                                 "y!1"
                                                 "r!1")
                                                (("3"
                                                  (inst -8 "x!1" "y!1")
                                                  (("3"
                                                    (inst-cp
                                                     -6
                                                     "x!1"
                                                     "r!1")
                                                    (("3"
                                                      (inst
                                                       -6
                                                       "r!1"
                                                       "x!1")
                                                      (("3"
                                                        (flatten)
                                                        (("3"
                                                          (expand
                                                           "intersection")
                                                          (("3"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ideal? const-decl "bool" ring_ideal_def nil)
    (subring? const-decl "bool" ring_def nil)
    (ideal_equiv formula-decl nil ring_ideal nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (subset? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (zero_is_member_R formula-decl nil ring_basic_properties nil)
    (nonempty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (zero formal-const-decl "T" ring_ideal nil)
    (* formal-const-decl "[T, T -> T]" ring_ideal nil)
    (+ formal-const-decl "[T, T -> T]" ring_ideal nil)
    (T formal-nonempty-type-decl nil ring_ideal nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (ring? const-decl "bool" ring_def nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (subring_equiv formula-decl nil ring_basic_properties nil)
    (left_ideal? const-decl "bool" ring_ideal_def nil))
   shostak))
 (r_prod_is_sum_closed 0
  (r_prod_is_sum_closed-1 nil 3808751911
   ("" (skosimp)
    (("" (typepred "x!1" "y!1")
      (("" (expand "+ ")
        (("" (skosimp)
          (("" (skosimp)
            (("" (inst 1 "h!1+h!2")
              (("1" (rewrite "left_distributive")
                (("1" (assert) nil nil)) nil)
               ("2" (lemma "R_sum_star_closed")
                (("2" (inst -1 "R!1" "h!1" "h!2")
                  (("2" (expand "member") (("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   (nil (ring nonempty-type-eq-decl nil ring nil)
    (ring? const-decl "bool" ring_def nil)
    (zero formal-const-decl "T" ring_ideal nil)
    (* formal-const-decl "[T, T -> T]" ring_ideal nil)
    (+ formal-const-decl "[T, T -> T]" ring_ideal nil)
    (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil ring_ideal nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil) nil nil nil
    (left_distributive formula-decl nil ring nil)
    (member const-decl "bool" sets nil)
    (R_sum_star_closed formula-decl nil ring_basic_properties nil))
   nil))
 (l_prod_is_sum_closed 0
  (l_prod_is_sum_closed-1 nil 3808751969
   ("" (skosimp)
    (("" (typepred "x!1" "y!1")
      (("" (expand "+ ")
        (("" (skosimp*)
          (("" (inst 1 "h!1+h!2")
            (("1" (rewrite "right_distributive")
              (("1" (assert) nil nil)) nil)
             ("2" (lemma "R_sum_star_closed")
              (("2" (inst -1 "R!1" "h!1" "h!2")
                (("2" (expand "member") (("2" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   (nil (ring nonempty-type-eq-decl nil ring nil)
    (ring? const-decl "bool" ring_def nil)
    (zero formal-const-decl "T" ring_ideal nil)
    (* formal-const-decl "[T, T -> T]" ring_ideal nil)
    (+ formal-const-decl "[T, T -> T]" ring_ideal nil)
    (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil ring_ideal nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (R_sum_star_closed formula-decl nil ring_basic_properties nil)
    (member const-decl "bool" sets nil)
    (right_distributive formula-decl nil ring nil) nil nil nil)
   nil))
 (inv_is_member_l_prod 0
  (inv_is_member_l_prod-1 nil 3808752058
   ("" (skosimp)
    (("" (typepred "x!1")
      (("" (expand "+ ")
        (("" (skosimp)
          (("" (inst 1 "inv(h!1)")
            (("1" (rewrite "times_negative") (("1" (assert) nil nil))
              nil)
             ("2" (lemma "inv_is_member_R")
              (("2" (inst -1 "R!1" "h!1")
                (("2" (expand "member") (("2" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   (nil (ring nonempty-type-eq-decl nil ring nil)
    (ring? const-decl "bool" ring_def nil)
    (zero formal-const-decl "T" ring_ideal nil)
    (* formal-const-decl "[T, T -> T]" ring_ideal nil)
    (+ formal-const-decl "[T, T -> T]" ring_ideal nil)
    (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil ring_ideal nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (inv_is_member_R formula-decl nil ring_basic_properties nil)
    (member const-decl "bool" sets nil)
    (times_negative formula-decl nil ring nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (inv const-decl "{y | x * y = one AND y * x = one}" group nil) nil)
   nil))
 (inv_is_member_r_prod 0
  (inv_is_member_r_prod-1 nil 3808752197
   ("" (skosimp)
    (("" (typepred "x!1")
      (("" (expand "+ ")
        (("" (skosimp)
          (("" (inst 1 "inv(h!1)")
            (("1" (rewrite "negative_times") (("1" (assert) nil nil))
              nil)
             ("2" (lemma "inv_is_member_R")
              (("2" (inst -1 "R!1" "h!1")
                (("2" (expand "member") (("2" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   (nil (ring nonempty-type-eq-decl nil ring nil)
    (ring? const-decl "bool" ring_def nil)
    (zero formal-const-decl "T" ring_ideal nil)
    (* formal-const-decl "[T, T -> T]" ring_ideal nil)
    (+ formal-const-decl "[T, T -> T]" ring_ideal nil)
    (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil ring_ideal nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (inv_is_member_R formula-decl nil ring_basic_properties nil)
    (member const-decl "bool" sets nil)
    (negative_times formula-decl nil ring nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (inv const-decl "{y | x * y = one AND y * x = one}" group nil) nil)
   nil))
 (l_prod_is_r_ideal 0
  (l_prod_is_r_ideal-1 nil 3808752288
   ("" (skosimp)
    (("" (rewrite "right_ideal_equiv")
      (("" (split)
        (("1" (expand "nonempty?")
          (("1" (expand "empty?")
            (("1" (inst -1 "a!1*a!1")
              (("1" (expand "member")
                (("1" (expand "+ ") (("1" (inst 1 "a!1") nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "subset?")
          (("2" (skosimp)
            (("2" (expand "member")
              (("2" (expand "+ ")
                (("2" (skosimp)
                  (("2" (typepred "a!1")
                    (("2" (typepred "h!1")
                      (("2" (lemma R_prod_star_closed)
                        (("2" (inst -1 "R!1" "a!1" "h!1")
                          (("2" (expand "member")
                            (("2" (replaces -4 1) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (skosimp)
          (("3" (split)
            (("1" (typepred "x!1" "y!1")
              (("1" (lemma inv_is_member_l_prod)
                (("1" (inst -1 "R!1" "a!1" "y!1")
                  (("1" (lemma l_prod_is_sum_closed)
                    (("1" (inst -1 "R!1" "a!1" "x!1" "inv(y!1)")
                      (("1" (assert)
                        (("1" (lemma inv_is_member_R)
                          (("1" (inst -1 "R!1" "y!1")
                            (("1" (expand "member")
                              (("1"
                                (expand "+ ")
                                (("1"
                                  (skosimp -3)
                                  (("1"
                                    (typepred "a!1" "h!1")
                                    (("1"
                                      (lemma R_prod_star_closed)
                                      (("1"
                                        (inst -1 "R!1" "a!1" "h!1")
                                        (("1"
                                          (expand "member")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "+ ")
                        (("2" (skosimp -2)
                          (("2" (typepred "a!1" "h!1")
                            (("2" (lemma R_prod_star_closed)
                              (("2"
                                (inst -1 "R!1" "a!1" "h!1")
                                (("2"
                                  (expand "member")
                                  (("2"
                                    (replace -5 -1 rl)
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "+ ")
                    (("2" (skosimp -2)
                      (("2" (lemma R_prod_star_closed)
                        (("2" (inst -1 "R!1" "a!1" "h!1")
                          (("2" (expand "member")
                            (("2" (replace -3 -1 rl)
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "+ ")
              (("2" (typepred "x!1")
                (("2" (expand "+ ")
                  (("2" (skosimp)
                    (("2" (lemma times_associative)
                      (("2" (inst -1 "a!1" "h!1" "r!1")
                        (("2" (replace -2 -1 rl)
                          (("2" (inst 1 "h!1*r!1")
                            (("2" (typepred "h!1" "r!1")
                              (("2"
                                (lemma R_prod_star_closed)
                                (("2"
                                  (inst -1 "R!1" "h!1" "r!1")
                                  (("2"
                                    (expand "member")
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((right_ideal_equiv formula-decl nil ring_ideal nil)
    (T formal-nonempty-type-decl nil ring_ideal nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (* formal-const-decl "[T, T -> T]" ring_ideal nil) nil
    (+ formal-const-decl "[T, T -> T]" ring_ideal nil)
    (zero formal-const-decl "T" ring_ideal nil)
    (ring? const-decl "bool" ring_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (times_associative formula-decl nil ring nil) nil nil nil nil nil
    (inv const-decl "{y | x * y = one AND y * x = one}" group nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (inv_is_member_R formula-decl nil ring_basic_properties nil)
    (l_prod_is_sum_closed formula-decl nil ring_ideal nil)
    (inv_is_member_l_prod formula-decl nil ring_ideal nil)
    (subset? const-decl "bool" sets nil)
    (R_prod_star_closed formula-decl nil ring_basic_properties nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nonempty? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil))
   nil))
 (r_prod_is_l_ideal 0
  (r_prod_is_l_ideal-1 nil 3808752392
   ("" (skosimp)
    (("" (rewrite "left_ideal_equiv")
      (("" (split)
        (("1" (expand "nonempty?")
          (("1" (expand "empty?")
            (("1" (inst -1 "a!1*a!1")
              (("1" (expand "member")
                (("1" (expand "+ ") (("1" (inst 1 "a!1") nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "subset?")
          (("2" (skosimp)
            (("2" (expand "member")
              (("2" (expand "+ ")
                (("2" (skosimp)
                  (("2" (typepred "a!1")
                    (("2" (typepred "h!1")
                      (("2" (lemma R_prod_star_closed)
                        (("2" (inst -1 "R!1" "h!1" "a!1")
                          (("2" (expand "member")
                            (("2" (replaces -4 1) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (skosimp)
          (("3" (split)
            (("1" (typepred "x!1" "y!1")
              (("1" (lemma inv_is_member_r_prod)
                (("1" (inst -1 "R!1" "a!1" "y!1")
                  (("1" (lemma r_prod_is_sum_closed)
                    (("1" (inst -1 "R!1" "a!1" "x!1" "inv(y!1)")
                      (("1" (assert)
                        (("1" (lemma inv_is_member_R)
                          (("1" (inst -1 "R!1" "y!1")
                            (("1" (expand "member")
                              (("1"
                                (expand "+ ")
                                (("1"
                                  (skosimp -3)
                                  (("1"
                                    (typepred "h!1" "a!1")
                                    (("1"
                                      (lemma R_prod_star_closed)
                                      (("1"
                                        (inst -1 "R!1" "h!1" "a!1")
                                        (("1"
                                          (expand "member")
                                          (("1"
                                            (replace -6 -1 rl)
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "+ ")
                        (("2" (skosimp -2)
                          (("2" (typepred "a!1" "h!1")
                            (("2" (lemma R_prod_star_closed)
                              (("2"
                                (inst -1 "R!1" "h!1" "a!1")
                                (("2"
                                  (expand "member")
                                  (("2"
                                    (replace -5 -1 rl)
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "+ ")
                    (("2" (skosimp -2)
                      (("2" (lemma R_prod_star_closed)
                        (("2" (inst -1 "R!1" "h!1" "a!1")
                          (("2" (expand "member")
                            (("2" (replace -3 -1 rl)
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "+ ")
              (("2" (typepred "x!1")
                (("2" (expand "+ ")
                  (("2" (skosimp)
                    (("2" (lemma times_associative)
                      (("2" (inst -1 "r!1" "h!1" "a!1")
                        (("2" (replace -2 -1 rl)
                          (("2" (inst 1 "r!1*h!1")
                            (("1" (replaces -1 1) nil nil)
                             ("2" (typepred "h!1" "r!1")
                              (("2"
                                (lemma R_prod_star_closed)
                                (("2"
                                  (inst -1 "R!1" "r!1" "h!1")
                                  (("2"
                                    (expand "member")
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((left_ideal_equiv formula-decl nil ring_ideal nil)
    (T formal-nonempty-type-decl nil ring_ideal nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (* formal-const-decl "[T, T -> T]" ring_ideal nil) nil
    (+ formal-const-decl "[T, T -> T]" ring_ideal nil)
    (zero formal-const-decl "T" ring_ideal nil)
    (ring? const-decl "bool" ring_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (times_associative formula-decl nil ring nil) nil nil nil nil nil
    (inv const-decl "{y | x * y = one AND y * x = one}" group nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (inv_is_member_R formula-decl nil ring_basic_properties nil)
    (r_prod_is_sum_closed formula-decl nil ring_ideal nil)
    (inv_is_member_r_prod formula-decl nil ring_ideal nil)
    (subset? const-decl "bool" sets nil)
    (R_prod_star_closed formula-decl nil ring_basic_properties nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nonempty? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil))
   nil))
 (ideal_iunion_ideal 0
  (ideal_iunion_ideal-1 nil 3845644869
   ("" (skeep)
    (("" (rewrite "ideal_equiv")
      (("" (split)
        (("1" (expand "nonempty?")
          (("1" (expand "empty?")
            (("1" (inst -1 "zero")
              (("1" (expand "member")
                (("1" (expand "IUnion")
                  (("1" (inst 1 "0")
                    (("1" (inst -1 "0")
                      (("1" (hide -2)
                        (("1" (expand "ideal?")
                          (("1" (expand "left_ideal?")
                            (("1" (expand "subring?")
                              (("1"
                                (lemma "zero_is_member_R")
                                (("1"
                                  (inst -1 "seq(0)")
                                  (("1" (assert) nil nil)
                                   ("2" (flatten) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "subset?")
          (("2" (skeep)
            (("2" (expand "member")
              (("2" (expand "IUnion")
                (("2" (skeep)
                  (("2" (inst -2 "i")
                    (("2" (hide -3)
                      (("2" (expand "ideal?")
                        (("2" (expand "left_ideal?")
                          (("2" (expand "subring?")
                            (("2" (flatten)
                              (("2"
                                (hide -3 -4 -5)
                                (("2"
                                  (expand "subset?")
                                  (("2"
                                    (inst -2 "x")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (skeep)
          (("3" (split)
            (("1" (expand "IUnion")
              (("1" (typepred "x" "y")
                (("1" (expand "IUnion")
                  (("1" (skeep*)
                    (("1" (case "i<i!1")
                      (("1" (inst -5 "i" "i!1")
                        (("1" (assert)
                          (("1" (expand "subset?")
                            (("1" (inst -5 "x")
                              (("1"
                                (assert)
                                (("1"
                                  (inst 1 "i!1")
                                  (("1"
                                    (lemma "R_sum_star_closed")
                                    (("1"
                                      (inst -1 "seq(i!1)" "x" "inv(y)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst -4 "i!1")
                                          (("1"
                                            (expand "ideal?")
                                            (("1"
                                              (expand "left_ideal?")
                                              (("1"
                                                (expand "subring?")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (hide-all-but
                                                     (-3 -5 1))
                                                    (("1"
                                                      (lemma
                                                       "inv_is_member_R")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "seq(i!1)"
                                                         "y")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (inst -4 "i!1")
                                        (("2"
                                          (expand "ideal?")
                                          (("2"
                                            (expand "left_ideal?")
                                            (("2"
                                              (expand "subring?")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (inst -4 "i!1" "i")
                        (("2" (assert)
                          (("2" (prop)
                            (("1" (expand "subset?")
                              (("1"
                                (inst -4 "i")
                                (("1"
                                  (expand "ideal?")
                                  (("1"
                                    (expand "left_ideal?")
                                    (("1"
                                      (expand "subring?")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (inst -1 "y")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst 2 "i")
                                              (("1"
                                                (hide -3 -4 -6 -7)
                                                (("1"
                                                  (lemma
                                                   "R_sum_star_closed")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "seq(i)"
                                                     "x"
                                                     "inv(y)")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (lemma
                                                         "inv_is_member_R")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "seq(i)"
                                                           "y")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (case-replace "i!1 = i")
                              (("1"
                                (hide -1 1 2)
                                (("1"
                                  (inst -3 "i")
                                  (("1"
                                    (expand "ideal?")
                                    (("1"
                                      (expand "left_ideal?")
                                      (("1"
                                        (expand "subring?")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (hide -3 -5 -6)
                                            (("1"
                                              (inst 1 "i")
                                              (("1"
                                                (lemma
                                                 "R_sum_star_closed")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "seq(i)"
                                                   "x"
                                                   "inv(y)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (lemma
                                                       "inv_is_member_R")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "seq(i)"
                                                         "y")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "IUnion")
              (("2" (typepred "x" "r")
                (("2" (expand "IUnion")
                  (("2" (skeep)
                    (("2" (inst -3 "i")
                      (("2" (hide -4)
                        (("2" (inst 1 "i")
                          (("2" (expand "ideal?")
                            (("2" (expand "right_ideal?")
                              (("2"
                                (expand "right_swallow?")
                                (("2"
                                  (flatten)
                                  (("2"
                                    (hide -3 -4)
                                    (("2"
                                      (inst -3 "r" "x")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (typepred "x" "r")
              (("3" (expand "IUnion")
                (("3" (skeep)
                  (("3" (inst -3 "i")
                    (("3" (hide -4)
                      (("3" (inst 1 "i")
                        (("3" (expand "ideal?")
                          (("3" (expand "left_ideal?")
                            (("3" (expand "left_swallow?")
                              (("3"
                                (flatten)
                                (("3"
                                  (hide -3 -5)
                                  (("3"
                                    (inst -3 "r" "x")
                                    (("3" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ideal_equiv formula-decl nil ring_ideal nil)
    (T formal-nonempty-type-decl nil ring_ideal nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IUnion const-decl "set[T]" indexed_sets nil)
    (sequence type-eq-decl nil sequences nil)
    (+ formal-const-decl "[T, T -> T]" ring_ideal nil)
    (* formal-const-decl "[T, T -> T]" ring_ideal nil)
    (zero formal-const-decl "T" ring_ideal nil)
    (ring? const-decl "bool" ring_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (left_swallow? const-decl "bool" ring_ideal_def nil) nil
    (right_ideal? const-decl "bool" ring_ideal_def nil) nil nil
    (right_swallow? const-decl "bool" ring_ideal_def nil)
    (< const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    nil (inv const-decl "{y | x * y = one AND y * x = one}" group nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (inv_is_member_R formula-decl nil ring_basic_properties nil)
    (R_sum_star_closed formula-decl nil ring_basic_properties nil) nil
    (TRUE const-decl "bool" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (subset? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (subring? const-decl "bool" ring_def nil) nil
    (zero_is_member_R formula-decl nil ring_basic_properties nil)
    (left_ideal? const-decl "bool" ring_ideal_def nil)
    (empty? const-decl "bool" sets nil))
   shostak))
 (chain_ideal_union_ideal 0
  (chain_ideal_union_ideal-1 nil 3846255759
   ("" (skeep)
    (("" (rewrite "ideal_equiv")
      (("" (split)
        (("1" (expand "nonempty?")
          (("1" (expand "empty?")
            (("1" (skeep)
              (("1" (expand "member")
                (("1" (inst -1 "zero")
                  (("1" (inst -2 "x")
                    (("1" (expand "ideal?")
                      (("1" (expand "left_ideal?")
                        (("1" (expand "subring?")
                          (("1" (flatten)
                            (("1" (hide -2 -4 -5)
                              (("1"
                                (lemma "zero_is_member_R")
                                (("1"
                                  (inst -1 "x")
                                  (("1"
                                    (expand "member")
                                    (("1"
                                      (hide -3)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "subset?")
          (("2" (skeep)
            (("2" (expand "member")
              (("2" (expand "Union")
                (("2" (skeep)
                  (("2" (inst -3 "a")
                    (("2" (expand "ideal?")
                      (("2" (expand "left_ideal?")
                        (("2" (expand "subring?")
                          (("2" (flatten)
                            (("2" (hide -4 -5 -6)
                              (("2"
                                (expand "subset?")
                                (("2"
                                  (inst -3 "x")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (skeep)
          (("3" (split)
            (("1" (typepred "x" "y")
              (("1" (expand "Union")
                (("1" (skeep*)
                  (("1" (typepred "A")
                    (("1" (expand "chain?")
                      (("1" (expand "total_order?")
                        (("1" (expand "dichotomous?")
                          (("1" (inst -1 "a" "a!1")
                            (("1" (expand "restrict")
                              (("1"
                                (split)
                                (("1"
                                  (inst 1 "a!1")
                                  (("1"
                                    (inst -5 "a!1")
                                    (("1"
                                      (rewrite "ideal_equiv")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (inst -7 "x" "y" "zero")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (lemma "zero_is_member_R")
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (expand "member")
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (expand "subset?")
                                            (("3"
                                              (inst -1 "x")
                                              (("3"
                                                (expand "member")
                                                (("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (inst 1 "a")
                                  (("2"
                                    (inst -5 "a")
                                    (("2"
                                      (rewrite "ideal_equiv")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (inst -7 "x" "y" "zero")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (lemma "zero_is_member_R")
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (expand "member")
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (expand "subset?")
                                            (("3"
                                              (inst -1 "y")
                                              (("3"
                                                (expand "member")
                                                (("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "Union")
              (("2" (typepred "x")
                (("2" (expand "Union")
                  (("2" (skeep)
                    (("2" (inst 1 "a")
                      (("2" (inst -3 "a")
                        (("2" (rewrite "ideal_equiv")
                          (("2" (flatten)
                            (("2" (inst -5 "x" "x" "r")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (expand "Union")
              (("3" (typepred "x")
                (("3" (expand "Union")
                  (("3" (skeep)
                    (("3" (inst 1 "a")
                      (("3" (inst -3 "a")
                        (("3" (rewrite "ideal_equiv")
                          (("3" (flatten)
                            (("3" (inst -5 "x" "x" "r")
                              (("3" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ideal_equiv formula-decl nil ring_ideal nil)
    (T formal-nonempty-type-decl nil ring_ideal nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (Union const-decl "set" sets nil)
    (subset? const-decl "bool" sets nil)
    (chain? const-decl "bool" chain orders)
    (chain nonempty-type-eq-decl nil chain orders)
    (+ formal-const-decl "[T, T -> T]" ring_ideal nil)
    (* formal-const-decl "[T, T -> T]" ring_ideal nil)
    (zero formal-const-decl "T" ring_ideal nil)
    (ring? const-decl "bool" ring_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (member const-decl "bool" sets nil) nil nil
    (negate_is_right_inv formula-decl nil ring nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (dichotomous? const-decl "bool" orders nil)
    (restrict const-decl "R" restrict nil) nil nil nil nil nil
    (zero_times formula-decl nil ring nil)
    (times_zero formula-decl nil ring nil)
    (total_order? const-decl "bool" orders nil)
    (partial_order_restrict application-judgement "(partial_order?[S])"
     restrict_order_props nil)
    (nonempty? const-decl "bool" sets nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (subring? const-decl "bool" ring_def nil)
    (zero_is_member_R formula-decl nil ring_basic_properties nil)
    (left_ideal? const-decl "bool" ring_ideal_def nil) nil nil
    (empty? const-decl "bool" sets nil))
   shostak)))

