(ring_characteristic_def
 (IMP_ring_basic_properties_TCC1 0
  (IMP_ring_basic_properties_TCC1-1 nil 3713782346
   ("" (rewrite "fullset_is_ring") nil nil)
   ((fullset_is_ring formula-decl nil ring_characteristic_def nil)) nil
   (IMP_ring_basic_properties assuming
    "ring_basic_properties[ring_characteristic_def.T, ring_characteristic_def.+, ring_characteristic_def.*, ring_characteristic_def.zero].ring_basic_properties"
    "fullset_is_ring: ASSUMPTION ring_def[ring_basic_properties.T, ring_basic_properties.+, ring_basic_properties.*, ring_basic_properties.zero].ring?(sets[ring_basic_properties.T].fullset)")))
 (charac_TCC1 0
  (charac_TCC1-1 nil 3703615055 ("" (subtype-tcc) nil nil)
   ((ring? const-decl "bool" ring_def nil)
    (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (zero formal-const-decl "T" ring_characteristic_def nil)
    (+ formal-const-decl "[T, T -> T]" ring_characteristic_def nil)
    (T formal-nonempty-type-decl nil ring_characteristic_def nil)
    (^ const-decl "T" group nil)
    (* formal-const-decl "[T, T -> T]" ring_characteristic_def nil)
    (times const-decl "T" ring_basic_properties nil)
    (N const-decl "set[posnat]" ring_characteristic_def nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil))
   nil
   (charac subtype
    "ring_characteristic_def.N(ring_characteristic_def.R)"
    "(sets[posnat].nonempty?)")))
 (times_char 0
  (times_char-1 nil 3709282040
   ("" (skosimp)
    (("" (expand "times")
      (("" (expand "^")
        (("" (lift-if)
          (("" (prop)
            (("1" (expand "power") (("1" (assert) nil nil)) nil)
             ("2" (expand "charac")
              (("2" (lift-if)
                (("2" (prop)
                  (("1" (expand "power") (("1" (propax) nil nil)) nil)
                   ("2" (name-replace "n1" "min(N(R!1))" :hide? nil)
                    (("2" (name-replace "N1" "N(R!1)" :hide? nil)
                      (("2" (copy -1)
                        (("2" (expand "N" -1)
                          (("2" (decompose-equality -1)
                            (("2" (inst -1 "n1")
                              (("2"
                                (iff)
                                (("2"
                                  (prop)
                                  (("1"
                                    (inst -1 "x!1")
                                    (("1"
                                      (expand "times")
                                      (("1"
                                        (expand "^")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((times const-decl "T" ring_basic_properties nil)
    (charac const-decl "nat" ring_characteristic_def nil)
    (N const-decl "set[posnat]" ring_characteristic_def nil) nil
    (zero formal-const-decl "T" ring_characteristic_def nil)
    (* formal-const-decl "[T, T -> T]" ring_characteristic_def nil)
    (+ formal-const-decl "[T, T -> T]" ring_characteristic_def nil)
    (T formal-nonempty-type-decl nil ring_characteristic_def nil)
    (min const-decl "{a | S(a) AND (FORALL x: S(x) IMPLIES a <= x)}"
         min_nat nil)
    (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil) nil
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    nil)
   shostak))
 (member_N_or_zero_TCC1 0
  (member_N_or_zero_TCC1-1 nil 3709302488 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (ring? const-decl "bool" ring_def nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (member const-decl "bool" sets nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (plus_zero formula-decl nil ring nil)
    (restrict const-decl "R" restrict nil)
    (zero_plus formula-decl nil ring nil)
    (identity? const-decl "bool" operator_defs nil)
    (monad? const-decl "bool" monad_def nil)
    (associative? const-decl "bool" operator_defs nil)
    (monoid? const-decl "bool" monoid_def nil)
    (inv_exists? const-decl "bool" group_def nil)
    (group? const-decl "bool" group_def nil)
    (commutative? const-decl "bool" operator_defs nil)
    (abelian_group? const-decl "bool" group_def nil)
    (left_distributive? const-decl "bool" operator_defs_more nil)
    (right_distributive? const-decl "bool" operator_defs_more nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (zero formal-const-decl "T" ring_characteristic_def nil)
    (+ formal-const-decl "[T, T -> T]" ring_characteristic_def nil)
    (T formal-nonempty-type-decl nil ring_characteristic_def nil)
    (^ const-decl "T" group nil)
    (* formal-const-decl "[T, T -> T]" ring_characteristic_def nil)
    (times const-decl "T" ring_basic_properties nil))
   nil
   (member_N_or_zero subtype "ring_characteristic_def.r" "posnat")))
 (member_N_or_zero 0
  (member_N_or_zero-1 nil 3709317940
   ("" (skosimp)
    (("" (expand "member")
      (("" (expand "N") (("" (propax) nil nil)) nil)) nil))
    nil)
   ((member const-decl "bool" sets nil)
    (N const-decl "set[posnat]" ring_characteristic_def nil))
   shostak))
 (multiple_char 0
  (multiple_char-1 nil 3709282464
   ("" (skosimp*)
    (("" (prop)
      (("1" (skosimp*)
        (("1" (replace -1 1)
          (("1" (hide -1)
            (("1" (rewrite "times_o" :dir rl)
              (("1" (rewrite "times_char")
                (("1" (rewrite "times_int_zero") nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (case "charac(R!1) = 0")
        (("1" (expand "charac" -1)
          (("1" (lift-if)
            (("1" (prop)
              (("1" (expand "empty?")
                (("1" (inst -1 "abs(k!1)")
                  (("1" (expand "member")
                    (("1" (expand "N")
                      (("1" (skosimp)
                        (("1" (expand "abs")
                          (("1" (lift-if)
                            (("1" (prop)
                              (("1"
                                (inst -2 "inv(x!1)")
                                (("1"
                                  (rewrite "inv_times_inv" -2 :dir rl)
                                  (("1"
                                    (lemma "inv_times_neg")
                                    (("1"
                                      (inst -1 "-k!1" "x!1")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma "inv_member")
                                  (("2"
                                    (inst -1 "R!1" "x!1")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (inst -1 "x!1") nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide -1)
                    (("2" (expand "abs")
                      (("2" (lift-if)
                        (("2" (ground)
                          (("2" (case-replace "k!1 = 0")
                            (("1" (inst 3 "0") (("1" (assert) nil nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "charac(R!1)")
                (("2" (expand "charac" -1) (("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (lemma "euclid_int")
          (("2" (inst -1 "charac(R!1)" "k!1")
            (("1" (skosimp)
              (("1" (copy -2)
                (("1" (case "EXISTS (y:T): member(y,R!1)")
                  (("1" (skosimp)
                    (("1" (inst -2 "y!1")
                      (("1" (replace -3 -2)
                        (("1" (rewrite "times_sum" :dir rl)
                          (("1" (rewrite "times_o" :dir rl)
                            (("1" (rewrite "times_char")
                              (("1"
                                (assert)
                                (("1"
                                  (lemma "member_N_or_zero")
                                  (("1"
                                    (inst -1 "R!1" "r!1")
                                    (("1"
                                      (prop)
                                      (("1"
                                        (replace -1 -4)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (inst 2 "q!1")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred "r!1")
                                        (("2"
                                          (expand "member")
                                          (("2"
                                            (expand "charac" -1)
                                            (("2"
                                              (lift-if)
                                              (("2"
                                                (prop)
                                                (("1"
                                                  (expand "empty?")
                                                  (("1"
                                                    (inst -1 "r!1")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred
                                                   " min(N(R!1))")
                                                  (("2"
                                                    (inst -3 "r!1")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (skosimp)
                                        (("3"
                                          (case-replace
                                           "r!1 = k!1 - charac(R!1)*q!1")
                                          (("1"
                                            (hide -1 -2 -3 -4)
                                            (("1"
                                              (lemma "times_sum")
                                              (("1"
                                                (inst
                                                 -1
                                                 " - charac(R!1) * q!1"
                                                 "x!1"
                                                 "k!1")
                                                (("1"
                                                  (inst -2 "x!1")
                                                  (("1"
                                                    (replaces -2)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (case-replace
                                                         "k!1 - charac(R!1) * q!1 = -charac(R!1) * q!1 + k!1")
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (replace
                                                             -1
                                                             1
                                                             rl)
                                                            (("1"
                                                              (hide -1)
                                                              (("1"
                                                                (rewrite
                                                                 "times_o"
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (lemma
                                                                   "inv_times_neg")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     " -charac(R!1)"
                                                                     "times(x!1, q!1)")
                                                                    (("1"
                                                                      (replaces
                                                                       -1)
                                                                      (("1"
                                                                        (case-replace
                                                                         "--charac(R!1) = charac(R!1)")
                                                                        (("1"
                                                                          (hide
                                                                           -1)
                                                                          (("1"
                                                                            (rewrite
                                                                             "times_char")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (lemma
                                                                               "times_member")
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "R!1"
                                                                                 "q!1"
                                                                                 "x!1")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but 1)
                                (("2"
                                  (lemma "times_member")
                                  (("2"
                                    (inst -1 "R!1" "q!1" "y!1")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil)
                   ("2" (hide-all-but 1)
                    (("2" (inst 1 "zero")
                      (("2" (expand "member")
                        (("2" (typepred "R!1")
                          (("2" (expand "ring?")
                            (("2" (expand "abelian_group?")
                              (("2"
                                (expand "group?")
                                (("2"
                                  (expand "monoid?")
                                  (("2"
                                    (expand "monad?")
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (hide-all-but (-2 1))
                                        (("2"
                                          (expand "member")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((times_o formula-decl nil ring_basic_properties nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil) nil
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (charac const-decl "nat" ring_characteristic_def nil)
    (T formal-nonempty-type-decl nil ring_characteristic_def nil)
    (+ formal-const-decl "[T, T -> T]" ring_characteristic_def nil)
    (* formal-const-decl "[T, T -> T]" ring_characteristic_def nil)
    (zero formal-const-decl "T" ring_characteristic_def nil)
    (times_int_zero formula-decl nil ring_basic_properties nil)
    (times_char formula-decl nil ring_characteristic_def nil)
    (euclid_int formula-decl nil euclidean_division nil) nil
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (< const-decl "bool" reals nil)
    (times_sum formula-decl nil ring_basic_properties nil)
    (times const-decl "T" ring_basic_properties nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (member_N_or_zero formula-decl nil ring_characteristic_def nil)
    (nonempty? const-decl "bool" sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{a | S(a) AND (FORALL x: S(x) IMPLIES a <= x)}"
         min_nat nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (times_member formula-decl nil ring_basic_properties nil) nil
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (TRUE const-decl "bool" booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil) nil
    nil nil nil
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    nil (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (N const-decl "set[posnat]" ring_characteristic_def nil) nil nil
    nil (inv_times_inv formula-decl nil ring_basic_properties nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (inv_times_neg formula-decl nil ring_basic_properties nil) nil nil
    nil (member const-decl "bool" sets nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (empty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   shostak))
 (char_1_zero_ring 0
  (char_1_zero_ring-1 nil 3709283267
   ("" (skosimp)
    (("" (prop)
      (("1" (expand "singleton")
        (("1" (decompose-equality)
          (("1" (iff)
            (("1" (prop)
              (("1" (lemma "times_char")
                (("1" (inst -1 "R!1" "x!1")
                  (("1" (replace -3 -1)
                    (("1" (expand "times")
                      (("1" (rewrite expt_1) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "R!1")
                (("2" (expand "ring?")
                  (("2" (expand "abelian_group?")
                    (("2" (expand "group?")
                      (("2" (expand "monoid?")
                        (("2" (expand "monad?")
                          (("2" (flatten)
                            (("2" (hide-all-but (-2 -11 1))
                              (("2"
                                (expand "member")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (case "member(1,N(R!1))")
        (("1" (expand "member")
          (("1" (expand "charac")
            (("1" (lift-if)
              (("1" (prop)
                (("1" (expand "empty?")
                  (("1" (inst -1 "1") (("1" (assert) nil nil)) nil))
                  nil)
                 ("2" (typepred "min(N(R!1))")
                  (("2" (inst -3 "1") (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "member")
          (("2" (expand "N")
            (("2" (skosimp)
              (("2" (expand "singleton")
                (("2" (decompose-equality -1)
                  (("2" (inst -1 "x!1")
                    (("2" (assert)
                      (("2" (replaces -1)
                        (("2" (rewrite "times_int_zero") nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((+ formal-const-decl "[T, T -> T]" ring_characteristic_def nil)
    (* formal-const-decl "[T, T -> T]" ring_characteristic_def nil)
    (zero formal-const-decl "T" ring_characteristic_def nil) nil
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-nonempty-type-decl nil ring_characteristic_def nil) nil
    nil (times const-decl "T" ring_basic_properties nil) nil
    (times_char formula-decl nil ring_characteristic_def nil) nil nil
    (member const-decl "bool" sets nil) nil nil
    (NOT const-decl "[bool -> bool]" booleans nil)
    (singleton const-decl "(singleton?)" sets nil)
    (times_int_zero formula-decl nil ring_basic_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (min const-decl "{a | S(a) AND (FORALL x: S(x) IMPLIES a <= x)}"
         min_nat nil)
    (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonempty? const-decl "bool" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty? const-decl "bool" sets nil)
    (charac const-decl "nat" ring_characteristic_def nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N const-decl "set[posnat]" ring_characteristic_def nil))
   shostak)))

