(quaternions_Hamilton
 (IMP_quaternions_TCC1 0
  (IMP_quaternions_TCC1-1 nil 3907332229 ("" (subtype-tcc) nil nil)
   ((fullset const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (remove const-decl "set" sets nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   nil
   (IMP_quaternions subtype "(number_fields.-)(1)"
    "(sets[real].remove(0, sets[real].fullset))")))
 (IMP_quaternions_TCC2 0
  (IMP_quaternions_TCC2-1 nil 3908358663
   ("" (expand "field?")
    (("" (prop)
      (("1" (expand "division_ring?")
        (("1" (prop)
          (("1" (expand "ring_with_one?")
            (("1" (prop)
              (("1" (expand "ring?")
                (("1" (prop)
                  (("1" (expand "abelian_group?")
                    (("1" (prop)
                      (("1" (expand "group?")
                        (("1" (prop)
                          (("1" (expand "monoid?")
                            (("1" (prop)
                              (("1"
                                (expand "monad?")
                                (("1"
                                  (prop)
                                  (("1"
                                    (expand "star_closed?")
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (expand "member")
                                        (("1"
                                          (expand "fullset")
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "member")
                                    (("2"
                                      (expand "fullset")
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (expand "identity?")
                                    (("3"
                                      (skeep)
                                      (("3"
                                        (expand "restrict")
                                        (("3" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "associative?")
                                (("2"
                                  (skeep)
                                  (("2"
                                    (expand "restrict")
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "inv_exists?")
                            (("2" (skeep)
                              (("2"
                                (inst 1 "-x")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (expand "fullset")
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "commutative?")
                        (("2" (skeep)
                          (("2" (expand "restrict")
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "star_closed?")
                    (("2" (skeep)
                      (("2" (expand "member")
                        (("2" (expand "fullset")
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("3" (expand "associative?")
                    (("3" (skeep)
                      (("3" (expand "restrict")
                        (("3" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("4" (expand "left_distributive?")
                    (("4" (skeep)
                      (("4" (expand "restrict")
                        (("4" (propax) nil nil)) nil))
                      nil))
                    nil)
                   ("5" (expand "right_distributive?")
                    (("5" (skeep)
                      (("5" (expand "restrict")
                        (("5" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "monoid?")
                (("2" (prop)
                  (("1" (expand "monad?")
                    (("1" (prop)
                      (("1" (expand "star_closed?")
                        (("1" (skeep)
                          (("1" (expand "member")
                            (("1" (expand "fullset")
                              (("1" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "member")
                        (("2" (expand "fullset")
                          (("2" (propax) nil nil)) nil))
                        nil)
                       ("3" (expand "identity?")
                        (("3" (skeep)
                          (("3" (expand "restrict")
                            (("3" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "associative?")
                    (("2" (skeep)
                      (("2" (expand "restrict")
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "group?")
            (("2" (prop)
              (("1" (expand "monoid?")
                (("1" (prop)
                  (("1" (expand "monad?")
                    (("1" (prop)
                      (("1" (expand "star_closed?")
                        (("1" (skeep)
                          (("1" (typepred "x" "y")
                            (("1" (expand "remove")
                              (("1"
                                (expand "member")
                                (("1"
                                  (expand "fullset")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "member")
                        (("2" (expand "remove")
                          (("2" (expand "member")
                            (("2" (expand "fullset")
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("3" (expand "identity?")
                        (("3" (skeep)
                          (("3" (expand "restrict")
                            (("3" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "associative?")
                    (("2" (skeep)
                      (("2" (expand "restrict")
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "inv_exists?")
                (("2" (skeep)
                  (("2" (inst 1 "1/x")
                    (("1" (assert) nil nil)
                     ("2" (typepred "x")
                      (("2" (expand "remove")
                        (("2" (expand "member")
                          (("2" (expand "fullset")
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("3" (typepred "x")
                      (("3" (expand "remove") (("3" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "commutative?")
        (("2" (skeep)
          (("2" (expand "restrict") (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((fullset const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (restrict const-decl "R" restrict nil)
    (identity? const-decl "bool" operator_defs nil)
    (monad? const-decl "bool" monad_def nil)
    (associative? const-decl "bool" operator_defs nil)
    (monoid? const-decl "bool" monoid_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (x skolem-const-decl "(fullset[real])" quaternions_Hamilton nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (inv_exists? const-decl "bool" group_def nil)
    (group? const-decl "bool" group_def nil)
    (commutative? const-decl "bool" operator_defs nil)
    (abelian_group? const-decl "bool" group_def nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (left_distributive? const-decl "bool" operator_defs_more nil)
    (right_distributive? const-decl "bool" operator_defs_more nil)
    (ring? const-decl "bool" ring_def nil)
    (ring_with_one? const-decl "bool" ring_with_one_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (remove const-decl "set" sets nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (x skolem-const-decl "(remove(0, fullset[real]))"
     quaternions_Hamilton nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (division_ring? const-decl "bool" division_ring_def nil)
    (field? const-decl "bool" field_def nil))
   nil
   (IMP_quaternions assuming
    "quaternions[real, restrict[[numfield, numfield], [real, real], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [real, real], numfield].restrict(number_fields.*), 0, 1, (number_fields.-)(1), (number_fields.-)(1)].quaternions"
    "fullset_is_field: ASSUMPTION field_def[quaternions.T, quaternions.+, quaternions.*, quaternions.zero, quaternions.one].field?(sets[quaternions.T].fullset)")))
 (conversion_quot_TCC1 0
  (conversion_quot_TCC1-1 nil 3907949116 ("" (subtype-tcc) nil nil)
   ((nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (restrict const-decl "R" restrict nil)
    (negate_nz_T_is_nz_T application-judgement
     "nz_T[real, restrict[[numfield, numfield], [real, real], numfield](+),
     restrict[[numfield, numfield], [real, real], numfield](*), 0]"
     quaternions_Hamilton nil))
   nil
   (conversion_quot subtype
    "restrict[[real, real], [nz_T[real, restrict[[numfield, numfield], [real, real], numfield](+), restrict[[numfield, numfield], [real, real], numfield](*), 0], nz_T[real, restrict[[numfield, numfield], [real, real], numfield](+), restrict[[numfield, numfield], [real, real], numfield](*), 0]], real].restrict(restrict[[numfield, numfield], [real, real], numfield].restrict(number_fields.*))"
    "[[nz_T[real, restrict[[numfield, numfield], [real, real], numfield](+), restrict[[numfield, numfield], [real, real], numfield](*), 0], nz_T[real, restrict[[numfield, numfield], [real, real], numfield](+), restrict[[numfield, numfield], [real, real], numfield](*), 0]] -> nz_T[real, restrict[[numfield, numfield], [real, real], numfield](+), restrict[[numfield, numfield], [real, real], numfield](*), 0]]")))
 (conversion_quot 0
  (conversion_quot-1 nil 3907335582
   ("" (skeep)
    (("" (case "FORALL(nz: nzreal): 1/nz = number_fields./(1,nz)")
      (("1" (inst?) (("1" (assert) nil nil)) nil)
       ("2" (hide 2) (("2" (skeep) (("2" (grind) nil nil)) nil)) nil)
       ("3" (hide 2) (("3" (skeep) (("3" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (inv const-decl "{y | x * y = one AND y * x = one}" group nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (nz_T type-eq-decl nil ring_nz_closed_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (left_identity formula-decl nil monad nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (negate_nz_T_is_nz_T application-judgement
     "nz_T[real, restrict[[numfield, numfield], [real, real], numfield](+),
     restrict[[numfield, numfield], [real, real], numfield](*), 0]"
     quaternions_Hamilton nil))
   shostak))
 (quat_is_Real_p_Vector_part 0
  (quat_is_Real_p_Vector_part-1 nil 3907335628
   ("" (skeep)
    (("" (decompose-equality 1)
      (("1" (expand "Vector_part") (("1" (propax) nil nil)) nil)
       ("2" (expand "Real_part") (("2" (propax) nil nil)) nil)
       ("3" (expand "Vector_part") (("3" (propax) nil nil)) nil)
       ("4" (expand "Vector_part") (("4" (propax) nil nil)) nil))
      nil))
    nil)
   ((Real_part const-decl "real" quaternions_Hamilton nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (Vector_part const-decl "Vect3" quaternions_Hamilton nil)
    (quat type-eq-decl nil quaternions_def nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (decompose_eq_Real_Vector_part 0
  (decompose_eq_Real_Vector_part-1 nil 3907335714
   ("" (skeep)
    (("" (expand "Real_part")
      (("" (expand "Vector_part")
        (("" (grind) (("" (decompose-equality) nil nil)) nil)) nil))
      nil))
    nil)
   ((Real_part const-decl "real" quaternions_Hamilton nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (quat type-eq-decl nil quaternions_def nil)
    (Vector_part const-decl "Vect3" quaternions_Hamilton nil))
   shostak))
 (Vector_part_scalar 0
  (Vector_part_scalar-1 nil 3907334540
   ("" (skeep) (("" (grind) nil nil)) nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (negate_nz_T_is_nz_T application-judgement
     "nz_T[real, restrict[[numfield, numfield], [real, real], numfield](+),
     restrict[[numfield, numfield], [real, real], numfield](*), 0]"
     quaternions_Hamilton nil)
    (* const-decl "Vector" vectors_3D vectors)
    (Vector_part const-decl "Vect3" quaternions_Hamilton nil)
    (* const-decl "quat" quaternions_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil))
   shostak))
 (q_prod_Real_Vector_part 0
  (q_prod_Real_Vector_part-1 nil 3907335803
   ("" (skeep)
    (("" (lemma "q_prod_charac")
      (("" (inst?)
        (("" (rewrite* "mult_neg")
          (("" (case-replace "inv(-1) = 1" :hide? T)
            (("1" (rewrite* "neg_mult")
              (("1" (rewrite* "one_times")
                (("1"
                  (case-replace "inv(p`z * q`y) = -(p`z * q`y)" :hide?
                   T)
                  (("1" (replaces -1)
                    (("1" (split)
                      (("1" (expand "Real_part")
                        (("1" (expand "Vector_part")
                          (("1" (expand "*")
                            (("1" (rewrite "neg_one_times")
                              (("1" (rewrite* "add_neg") nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "Vector_part")
                        (("2" (expand "Real_part")
                          (("2" (expand "*")
                            (("2" (expand "cross")
                              (("2"
                                (expand "+")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide (- 2)) (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (hide (- 2)) (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((- const-decl "[numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (q_prod_charac formula-decl nil quaternions nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (negate_nz_T_is_nz_T application-judgement
     "nz_T[real, restrict[[numfield, numfield], [real, real], numfield](+),
     restrict[[numfield, numfield], [real, real], numfield](*), 0]"
     quaternions_Hamilton nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (mult_neg formula-decl nil extra_tegies nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (inv const-decl "{y | x * y = one AND y * x = one}" group nil)
    (TRUE const-decl "bool" booleans nil)
    (left_identity formula-decl nil monad nil)
    (neg_mult formula-decl nil extra_tegies nil)
    (Vector_part const-decl "Vect3" quaternions_Hamilton nil)
    (neg_one_times formula-decl nil extra_tegies nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (add_neg formula-decl nil extra_tegies nil)
    (* const-decl "real" vectors_3D vectors)
    (Real_part const-decl "real" quaternions_Hamilton nil)
    (cross const-decl "Vector" cross_3D vectors)
    (+ const-decl "Vector" vectors_3D vectors)
    (* const-decl "Vector" vectors_3D vectors)
    (one_times formula-decl nil ring_with_one nil)
    (quat type-eq-decl nil quaternions_def nil))
   shostak))
 (conjugate_Real_vector_part 0
  (conjugate_Real_vector_part-1 nil 3907336732
   ("" (skeep)
    (("" (split)
      (("1" (expand* "conjugate" "Real_part") nil nil)
       ("2" (expand* "conjugate" "Vector_part")
        (("2" (decompose-equality 1)
          (("1" (grind) nil nil) ("2" (grind) nil nil)
           ("3" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((Real_part const-decl "real" quaternions_Hamilton nil)
    (conjugate const-decl "quat" quaternions_def nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (inv const-decl "{y | x * y = one AND y * x = one}" group nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (quat type-eq-decl nil quaternions_def nil)
    (Vector type-eq-decl nil vectors_3D vectors)
    (- const-decl "Vector" vectors_3D vectors)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (Vector_part const-decl "Vect3" quaternions_Hamilton nil))
   shostak))
 (T_q_Real_charac 0
  (T_q_Real_charac-1 nil 3907338389
   ("" (skeep)
    (("" (expand "T_q")
      (("" (lemma "q_prod_Real_Vector_part")
        (("" (inst-cp -1 "q * a" "conjugate(q)")
          (("" (flatten)
            (("" (hide -2)
              (("" (replaces -2)
                (("" (inst?)
                  (("" (flatten)
                    (("" (replaces -1)
                      (("" (replaces -1)
                        (("" (lemma "conjugate_Real_vector_part")
                          (("" (inst?)
                            (("" (flatten)
                              ((""
                                (replaces -1)
                                ((""
                                  (replaces -1)
                                  ((""
                                    (expand "Real_part")
                                    ((""
                                      (typepred "a")
                                      ((""
                                        (expand "pure_quat")
                                        ((""
                                          (replaces -1)
                                          ((""
                                            (assert)
                                            ((""
                                              (rewrite "neg_one_times")
                                              ((""
                                                (rewrite "scal_neg")
                                                ((""
                                                  (rewrite
                                                   "extra_tegies.neg_neg")
                                                  ((""
                                                    (rewrite
                                                     "scal_add_right")
                                                    ((""
                                                      (lemma
                                                       "cross_anticomm")
                                                      ((""
                                                        (inst-cp
                                                         -1
                                                         "q`x * Vector_part(a) + cross(Vector_part(q), Vector_part(a))"
                                                         "-Vector_part(q)")
                                                        ((""
                                                          (replaces -2)
                                                          ((""
                                                            (rewrite
                                                             "cross_dist")
                                                            ((""
                                                              (rewrite
                                                               "neg_distr_add")
                                                              ((""
                                                                (inst
                                                                 -1
                                                                 "-Vector_part(q)"
                                                                 "cross(Vector_part(q), Vector_part(a))")
                                                                ((""
                                                                  (replaces
                                                                   -1)
                                                                  ((""
                                                                    (rewrite
                                                                     "cross_cross")
                                                                    ((""
                                                                      (rewrite
                                                                       "neg_distr_sub")
                                                                      ((""
                                                                        (lemma
                                                                         "vectors_3D.scal_neg_1")
                                                                        ((""
                                                                          (inst
                                                                           -1
                                                                           "cross(-Vector_part(q), q`x * Vector_part(a))")
                                                                          ((""
                                                                            (replace
                                                                             -1
                                                                             1
                                                                             rl)
                                                                            ((""
                                                                              (hide
                                                                               -)
                                                                              ((""
                                                                                (lemma
                                                                                 "cross_scal_left")
                                                                                ((""
                                                                                  (inst
                                                                                   -1
                                                                                   "-1"
                                                                                   "-Vector_part(q)"
                                                                                   "q`x * Vector_part(a)")
                                                                                  ((""
                                                                                    (replace
                                                                                     -1
                                                                                     1
                                                                                     rl)
                                                                                    ((""
                                                                                      (hide
                                                                                       -)
                                                                                      ((""
                                                                                        (rewrite
                                                                                         "scal_neg_1")
                                                                                        ((""
                                                                                          (lemma
                                                                                           "cross_scal_right")
                                                                                          ((""
                                                                                            (inst
                                                                                             -1
                                                                                             "q`x"
                                                                                             "Vector_part(q)"
                                                                                             "Vector_part(a)")
                                                                                            ((""
                                                                                              (replaces
                                                                                               -1)
                                                                                              ((""
                                                                                                (rewrite*
                                                                                                 "dot_neg_right")
                                                                                                ((""
                                                                                                  (lemma
                                                                                                   "vectors_3D.add_neg_sub")
                                                                                                  ((""
                                                                                                    (inst-cp
                                                                                                     -1
                                                                                                     "-(Vector_part(a) * Vector_part(q)) * Vector_part(q) -
             -(Vector_part(q) * Vector_part(q)) * Vector_part(a)"
                                                                                                     "q`x * cross(Vector_part(q), Vector_part(a))")
                                                                                                    ((""
                                                                                                      (replace
                                                                                                       -2
                                                                                                       1
                                                                                                       rl)
                                                                                                      ((""
                                                                                                        (hide
                                                                                                         -2)
                                                                                                        ((""
                                                                                                          (rewrite
                                                                                                           "neg_distr_sub")
                                                                                                          ((""
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "-(Vector_part(a) * Vector_part(q)) * Vector_part(q)"
                                                                                                             "-(Vector_part(q) * Vector_part(q)) * Vector_part(a)")
                                                                                                            ((""
                                                                                                              (replace
                                                                                                               -1
                                                                                                               1
                                                                                                               rl)
                                                                                                              ((""
                                                                                                                (hide
                                                                                                                 -1)
                                                                                                                ((""
                                                                                                                  (lemma
                                                                                                                   "vectors_3D.scal_neg_1")
                                                                                                                  ((""
                                                                                                                    (inst?)
                                                                                                                    ((""
                                                                                                                      (replace
                                                                                                                       -1
                                                                                                                       1
                                                                                                                       rl)
                                                                                                                      ((""
                                                                                                                        (hide
                                                                                                                         -)
                                                                                                                        ((""
                                                                                                                          (rewrite
                                                                                                                           "scal_assoc")
                                                                                                                          ((""
                                                                                                                            (rewrite
                                                                                                                             "neg_one_times")
                                                                                                                            ((""
                                                                                                                              (rewrite
                                                                                                                               "extra_tegies.neg_neg")
                                                                                                                              ((""
                                                                                                                                (rewrite
                                                                                                                                 "scal_sub_left")
                                                                                                                                ((""
                                                                                                                                  (expand
                                                                                                                                   "norm")
                                                                                                                                  ((""
                                                                                                                                    (case-replace
                                                                                                                                     "sq(sqrt(sqv(Vector_part(q)))) * Vector_part(a) = sqv(Vector_part(q)) * Vector_part(a)"
                                                                                                                                     :hide?
                                                                                                                                     T)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "sqv")
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "sq")
                                                                                                                                        (("1"
                                                                                                                                          (lemma
                                                                                                                                           "vectors_3D.add_comm")
                                                                                                                                          (("1"
                                                                                                                                            (inst
                                                                                                                                             -1
                                                                                                                                             "Vector_part(q) * Vector_part(a) * Vector_part(q)"
                                                                                                                                             "((q`x * q`x) * Vector_part(a) +
             q`x * cross(Vector_part(q), Vector_part(a)))")
                                                                                                                                            (("1"
                                                                                                                                              (replaces
                                                                                                                                               -1)
                                                                                                                                              (("1"
                                                                                                                                                (lemma
                                                                                                                                                 "vectors_3D.add_assoc")
                                                                                                                                                (("1"
                                                                                                                                                  (inst
                                                                                                                                                   -1
                                                                                                                                                   "(q`x * q`x) * Vector_part(a)"
                                                                                                                                                   "q`x * cross(Vector_part(q), Vector_part(a))"
                                                                                                                                                   "Vector_part(q) * Vector_part(a) * Vector_part(q)")
                                                                                                                                                  (("1"
                                                                                                                                                    (replace
                                                                                                                                                     -1
                                                                                                                                                     1
                                                                                                                                                     rl)
                                                                                                                                                    (("1"
                                                                                                                                                      (hide
                                                                                                                                                       -1)
                                                                                                                                                      (("1"
                                                                                                                                                        (lemma
                                                                                                                                                         "vectors_3D.add_neg_sub")
                                                                                                                                                        (("1"
                                                                                                                                                          (inst?)
                                                                                                                                                          (("1"
                                                                                                                                                            (replace
                                                                                                                                                             -1
                                                                                                                                                             1
                                                                                                                                                             rl)
                                                                                                                                                            (("1"
                                                                                                                                                              (hide
                                                                                                                                                               -1)
                                                                                                                                                              (("1"
                                                                                                                                                                (lemma
                                                                                                                                                                 "vectors_3D.add_assoc")
                                                                                                                                                                (("1"
                                                                                                                                                                  (inst-cp
                                                                                                                                                                   -1
                                                                                                                                                                   "q`x * q`x * Vector_part(a)"
                                                                                                                                                                   "-(Vector_part(q) * Vector_part(q) * Vector_part(a))"
                                                                                                                                                                   "(2 * (Vector_part(q) * Vector_part(a))) * Vector_part(q)")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (replace
                                                                                                                                                                     -2
                                                                                                                                                                     1
                                                                                                                                                                     rl)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (hide
                                                                                                                                                                       -2)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (inst-cp
                                                                                                                                                                         -1
                                                                                                                                                                         "q`x * q`x * Vector_part(a)"
                                                                                                                                                                         "(-(Vector_part(q) * Vector_part(q) * Vector_part(a)) +
              (2 * (Vector_part(q) * Vector_part(a))) * Vector_part(q))"
                                                                                                                                                                         "(2 * q`x) * cross(Vector_part(q), Vector_part(a))")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (replace
                                                                                                                                                                           -2
                                                                                                                                                                           1
                                                                                                                                                                           rl)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (hide
                                                                                                                                                                             -2)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (inst-cp
                                                                                                                                                                               -1
                                                                                                                                                                               "(q`x * q`x) * Vector_part(a)"
                                                                                                                                                                               "(q`x * cross(Vector_part(q), Vector_part(a)) +
             Vector_part(q) * Vector_part(a) * Vector_part(q))"
                                                                                                                                                                               "(q`x * cross(Vector_part(q), Vector_part(a)) +
             (-(Vector_part(q) * Vector_part(q)) * Vector_part(a) +
               (Vector_part(a) * Vector_part(q)) * Vector_part(q)))")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (replace
                                                                                                                                                                                 -2
                                                                                                                                                                                 1
                                                                                                                                                                                 rl)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (hide
                                                                                                                                                                                   -2)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (case-replace
                                                                                                                                                                                     "((q`x * cross(Vector_part(q), Vector_part(a)) +
              Vector_part(q) * Vector_part(a) * Vector_part(q))
             +
             (q`x * cross(Vector_part(q), Vector_part(a)) +
               (-(Vector_part(q) * Vector_part(q)) * Vector_part(a) +
                 (Vector_part(a) * Vector_part(q)) * Vector_part(q)))) = ((-(Vector_part(q) * Vector_part(q) * Vector_part(a)) +
               (2 * (Vector_part(q) * Vector_part(a))) * Vector_part(q))
              + (2 * q`x) * cross(Vector_part(q), Vector_part(a)))")
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (hide
                                                                                                                                                                                       2)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (lemma
                                                                                                                                                                                         "vectors_3D.add_comm")
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (inst-cp
                                                                                                                                                                                           -1
                                                                                                                                                                                           "q`x * cross(Vector_part(q), Vector_part(a))"
                                                                                                                                                                                           "Vector_part(q) * Vector_part(a) * Vector_part(q)")
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (replaces
                                                                                                                                                                                             -2)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (inst-cp
                                                                                                                                                                                               -2
                                                                                                                                                                                               "Vector_part(q) * Vector_part(a) * Vector_part(q) +
            q`x * cross(Vector_part(q), Vector_part(a))"
                                                                                                                                                                                               "q`x * cross(Vector_part(q), Vector_part(a))"
                                                                                                                                                                                               "-(Vector_part(q) * Vector_part(q)) * Vector_part(a) +
                (Vector_part(a) * Vector_part(q)) * Vector_part(q)")
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (replaces
                                                                                                                                                                                                 -3)
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (inst-cp
                                                                                                                                                                                                   -2
                                                                                                                                                                                                   "Vector_part(q) * Vector_part(a) * Vector_part(q)"
                                                                                                                                                                                                   "q`x * cross(Vector_part(q), Vector_part(a))"
                                                                                                                                                                                                   "q`x * cross(Vector_part(q), Vector_part(a))")
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (replace
                                                                                                                                                                                                     -3
                                                                                                                                                                                                     1
                                                                                                                                                                                                     rl)
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (hide
                                                                                                                                                                                                       -3)
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (lemma
                                                                                                                                                                                                         "vectors_3D.scal_add_left")
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (inst?)
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (replace
                                                                                                                                                                                                             -1
                                                                                                                                                                                                             1
                                                                                                                                                                                                             rl)
                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                              (hide
                                                                                                                                                                                                               -1)
                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                (case-replace
                                                                                                                                                                                                                 "q`x + q`x = 2 * q`x"
                                                                                                                                                                                                                 :hide?
                                                                                                                                                                                                                 T)
                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                  (inst-cp
                                                                                                                                                                                                                   -1
                                                                                                                                                                                                                   "Vector_part(q) * Vector_part(a) * Vector_part(q) +
             2 * q`x * cross(Vector_part(q), Vector_part(a))"
                                                                                                                                                                                                                   "(-(Vector_part(q) * Vector_part(q)) * Vector_part(a) +
               (Vector_part(a) * Vector_part(q)) * Vector_part(q))")
                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                    (replaces
                                                                                                                                                                                                                     -2)
                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                      (inst-cp
                                                                                                                                                                                                                       -2
                                                                                                                                                                                                                       "(-(Vector_part(q) * Vector_part(q)) * Vector_part(a) +
              (Vector_part(a) * Vector_part(q)) * Vector_part(q))"
                                                                                                                                                                                                                       "Vector_part(q) * Vector_part(a) * Vector_part(q)"
                                                                                                                                                                                                                       "2 * q`x * cross(Vector_part(q), Vector_part(a))")
                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                        (replaces
                                                                                                                                                                                                                         -3)
                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                          (inst-cp
                                                                                                                                                                                                                           -2
                                                                                                                                                                                                                           "-(Vector_part(q) * Vector_part(q)) * Vector_part(a)"
                                                                                                                                                                                                                           "(Vector_part(a) * Vector_part(q)) * Vector_part(q)"
                                                                                                                                                                                                                           "Vector_part(q) * Vector_part(a) * Vector_part(q)")
                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                            (replace
                                                                                                                                                                                                                             -3
                                                                                                                                                                                                                             1
                                                                                                                                                                                                                             rl)
                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                              (hide
                                                                                                                                                                                                                               -3)
                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                (lemma
                                                                                                                                                                                                                                 "vectors_3D.dot_comm")
                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                  (inst
                                                                                                                                                                                                                                   -1
                                                                                                                                                                                                                                   "Vector_part(a)"
                                                                                                                                                                                                                                   "Vector_part(q)")
                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                    (replaces
                                                                                                                                                                                                                                     -1)
                                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                                      (lemma
                                                                                                                                                                                                                                       "vectors_3D.scal_add_left")
                                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                                        (inst
                                                                                                                                                                                                                                         -1
                                                                                                                                                                                                                                         "Vector_part(q) * Vector_part(a)"
                                                                                                                                                                                                                                         "Vector_part(q) * Vector_part(a)"
                                                                                                                                                                                                                                         "Vector_part(q)")
                                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                                          (replace
                                                                                                                                                                                                                                           -1
                                                                                                                                                                                                                                           1
                                                                                                                                                                                                                                           rl)
                                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                                            (hide
                                                                                                                                                                                                                                             -1)
                                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                                              (case-replace
                                                                                                                                                                                                                                               "Vector_part(q) * Vector_part(a) + Vector_part(q) * Vector_part(a) = 2 * (Vector_part(q) * Vector_part(a))"
                                                                                                                                                                                                                                               :hide?
                                                                                                                                                                                                                                               T)
                                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                                (case-replace
                                                                                                                                                                                                                                                 "-(Vector_part(q) * Vector_part(q)) * Vector_part(a) +
               2 * (Vector_part(q) * Vector_part(a)) * Vector_part(q) = (-(Vector_part(q) * Vector_part(q) * Vector_part(a)) +
                  2 * (Vector_part(q) * Vector_part(a)) * Vector_part(q))")
                                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                                  (hide
                                                                                                                                                                                                                                                   (-
                                                                                                                                                                                                                                                    2))
                                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                                    (case-replace
                                                                                                                                                                                                                                                     "-(Vector_part(q) * Vector_part(q)) * Vector_part(a) = -(Vector_part(q) * Vector_part(q) * Vector_part(a))")
                                                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                                                      (hide
                                                                                                                                                                                                                                                       2)
                                                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                                                        (lemma
                                                                                                                                                                                                                                                         "vectors_3D.scal_neg_1")
                                                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                                                          (inst?)
                                                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                                                            (replace
                                                                                                                                                                                                                                                             -1
                                                                                                                                                                                                                                                             1
                                                                                                                                                                                                                                                             rl)
                                                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                                                              (hide
                                                                                                                                                                                                                                                               -)
                                                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                                                (lemma
                                                                                                                                                                                                                                                                 "vectors_3D. scal_assoc")
                                                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                                                  (inst?)
                                                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                                                    (replaces
                                                                                                                                                                                                                                                                     -1)
                                                                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                                                                                      nil
                                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                nil)
                                                                                                                                                                                                                                               ("2"
                                                                                                                                                                                                                                                (hide
                                                                                                                                                                                                                                                 (-
                                                                                                                                                                                                                                                  2))
                                                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                                                  nil
                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil)
                                                                                                                                                                                                                 ("2"
                                                                                                                                                                                                                  (hide
                                                                                                                                                                                                                   (-
                                                                                                                                                                                                                    2))
                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                                    nil
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (hide
                                                                                                                                       2)
                                                                                                                                      (("2"
                                                                                                                                        (lemma
                                                                                                                                         "sq_sqrt")
                                                                                                                                        (("2"
                                                                                                                                          (inst?)
                                                                                                                                          (("2"
                                                                                                                                            (prop)
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "sq")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (hide
                                                                                                                                               2)
                                                                                                                                              (("2"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((T_q const-decl "(pure_quat)" quaternions nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (quat type-eq-decl nil quaternions_def nil)
    (* const-decl "[quat, quat -> quat]" quaternions_def nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (pure_quat const-decl "set[quat]" quaternions_def nil)
    (conjugate const-decl "quat" quaternions_def nil)
    (conjugate_Real_vector_part formula-decl nil quaternions_Hamilton
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Vector_part const-decl "Vect3" quaternions_Hamilton nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (* const-decl "real" vectors_3D vectors)
    (Vector type-eq-decl nil vectors_3D vectors)
    (neg_one_times formula-decl nil extra_tegies nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (neg_neg formula-decl nil extra_tegies nil)
    (cross_anticomm formula-decl nil cross_3D vectors)
    (neg_distr_add formula-decl nil vectors_3D vectors)
    (neg_distr_sub formula-decl nil vectors_3D vectors)
    (cross_scal_right formula-decl nil cross_3D vectors)
    (add_neg_sub formula-decl nil vectors_3D vectors)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sq const-decl "nonneg_real" sq reals)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (sqrt_sqv_sq formula-decl nil vectors_3D vectors)
    (sq_sqrt formula-decl nil sqrt reals)
    (add_comm formula-decl nil vectors_3D vectors)
    (dot_comm formula-decl nil vectors_3D vectors)
    (scal_add_left formula-decl nil vectors_3D vectors)
    (add_assoc formula-decl nil vectors_3D vectors)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (sqv const-decl "nnreal" vectors_3D vectors)
    (scal_sub_left formula-decl nil vectors_3D vectors)
    (sq const-decl "T" ring nil) (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (norm const-decl "nnreal" vectors_3D vectors)
    (- const-decl "Vector" vectors_3D vectors)
    (dot_neg_right formula-decl nil vectors_3D vectors)
    (neg_neg formula-decl nil vectors_3D vectors)
    (cross_scal_left formula-decl nil cross_3D vectors)
    (scal_neg_1 formula-decl nil vectors_3D vectors)
    (cross_cross formula-decl nil cross_3D vectors)
    (cross_dist formula-decl nil cross_3D vectors)
    (+ const-decl "Vector" vectors_3D vectors)
    (- const-decl "Vector" vectors_3D vectors)
    (scal_assoc formula-decl nil vectors_3D vectors)
    (scal_add_right formula-decl nil vectors_3D vectors)
    (* const-decl "Vector" vectors_3D vectors)
    (cross const-decl "Vector" cross_3D vectors)
    (scal_neg formula-decl nil vectors_3D vectors)
    (add_zero_right formula-decl nil vectors_3D vectors)
    (scal_0 formula-decl nil vectors_3D vectors)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (negate_nz_T_is_nz_T application-judgement
     "nz_T[real, restrict[[numfield, numfield], [real, real], numfield](+),
     restrict[[numfield, numfield], [real, real], numfield](*), 0]"
     quaternions_Hamilton nil)
    (Real_part const-decl "real" quaternions_Hamilton nil)
    (TRUE const-decl "bool" booleans nil)
    (q_prod_Real_Vector_part formula-decl nil quaternions_Hamilton
     nil))
   shostak))
 (r_angle_TCC1 0
  (r_angle_TCC1-1 nil 3907332229
   ("" (skeep)
    (("" (typepred "a")
      (("" (expand* "pure_quat" "nzpure_quat" "Vector_part" "zero")
        (("" (expand "remove")
          (("" (flatten)
            (("" (hide -2)
              (("" (expand "zero_q")
                (("" (decompose-equality 1) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nzpure_quat const-decl "set[(pure_quat)]" quaternions_def nil)
    (pure_quat const-decl "set[quat]" quaternions_def nil)
    (set type-eq-decl nil sets nil)
    (quat type-eq-decl nil quaternions_def nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (remove const-decl "set" sets nil)
    (zero_q const-decl "quat" quaternions_def nil)
    (Vector_part const-decl "Vect3" quaternions_Hamilton nil)
    (zero const-decl "Vector" vectors_3D vectors))
   nil
   (r_angle subtype
    "quaternions_Hamilton.Vector_part(quaternions_Hamilton.a)"
    "Nz_vect3")))
 (r_angle_TCC2 0
  (r_angle_TCC2-1 nil 3907332229
   ("" (skeep)
    (("" (typepred "b")
      (("" (expand* "pure_quat" "nzpure_quat" "Vector_part" "zero")
        (("" (expand "remove")
          (("" (flatten)
            (("" (hide -2)
              (("" (expand "zero_q")
                (("" (decompose-equality 1) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nzpure_quat const-decl "set[(pure_quat)]" quaternions_def nil)
    (pure_quat const-decl "set[quat]" quaternions_def nil)
    (set type-eq-decl nil sets nil)
    (quat type-eq-decl nil quaternions_def nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (remove const-decl "set" sets nil)
    (zero_q const-decl "quat" quaternions_def nil)
    (Vector_part const-decl "Vect3" quaternions_Hamilton nil)
    (zero const-decl "Vector" vectors_3D vectors))
   nil
   (r_angle subtype
    "quaternions_Hamilton.Vector_part(quaternions_Hamilton.b)"
    "Nz_vect3")))
 (n_rot_axis_TCC1 0
  (n_rot_axis_TCC1-1 nil 3907332229
   ("" (skeep)
    (("" (typepred "b")
      (("" (hide -1)
        (("" (expand "linearly_independent?")
          (("" (rewrite "lin_indep_cross")
            (("1" (hide -1)
              (("1" (expand "linearly_dependent?")
                (("1" (inst 2 "0" "1") (("1" (assert) nil nil)) nil))
                nil))
              nil)
             ("2" (hide -1)
              (("2" (expand "linearly_dependent?")
                (("2" (inst 2 "1" "0") (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Vector_part const-decl "Vect3" quaternions_Hamilton nil)
    (linearly_independent? const-decl "bool" cross_3D vectors)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (pure_quat const-decl "set[quat]" quaternions_def nil)
    (set type-eq-decl nil sets nil)
    (quat type-eq-decl nil quaternions_def nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (add_zero_right formula-decl nil vectors_3D vectors)
    (add_zero_left formula-decl nil vectors_3D vectors)
    (scal_1 formula-decl nil vectors_3D vectors)
    (scal_0 formula-decl nil vectors_3D vectors)
    (linearly_dependent? const-decl "bool" cross_3D vectors)
    (Nz_vect3 type-eq-decl nil vectors_3D vectors)
    (zero const-decl "Vector" vectors_3D vectors)
    (/= const-decl "boolean" notequal nil)
    (Vector type-eq-decl nil vectors_3D vectors)
    (lin_indep_cross formula-decl nil cross_3D vectors))
   nil
   (n_rot_axis subtype
    "cross_3D.cross(quaternions_Hamilton.Vector_part(quaternions_Hamilton.a), quaternions_Hamilton.Vector_part(quaternions_Hamilton.b))"
    "Nz_vector")))
 (rot_quat_TCC1 0
  (rot_quat_TCC1-1 nil 3907332229
   ("" (skeep)
    (("" (expand "nzpure_quat")
      (("" (expand "remove")
        (("" (expand "member")
          (("" (expand "fullset")
            (("" (prop)
              (("" (typepred "b")
                (("" (expand "linearly_independent?")
                  (("" (expand "linearly_dependent?")
                    (("" (inst 1 "1" "0")
                      (("" (assert)
                        (("" (hide -1)
                          (("" (expand* "zero_q" "Vector_part" "zero")
                            (("" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nzpure_quat const-decl "set[(pure_quat)]" quaternions_def nil)
    (member const-decl "bool" sets nil)
    (zero_q const-decl "quat" quaternions_def nil)
    (zero const-decl "Vector" vectors_3D vectors)
    (add_zero_right formula-decl nil vectors_3D vectors)
    (scal_0 formula-decl nil vectors_3D vectors)
    (scal_1 formula-decl nil vectors_3D vectors)
    (linearly_dependent? const-decl "bool" cross_3D vectors)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (quat type-eq-decl nil quaternions_def nil)
    (set type-eq-decl nil sets nil)
    (pure_quat const-decl "set[quat]" quaternions_def nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (linearly_independent? const-decl "bool" cross_3D vectors)
    (Vector_part const-decl "Vect3" quaternions_Hamilton nil)
    (fullset const-decl "set" sets nil)
    (remove const-decl "set" sets nil))
   nil
   (rot_quat subtype "quaternions_Hamilton.a"
    "(quaternions_def[real, restrict[[numfield, numfield], [real, real], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [real, real], numfield].restrict(number_fields.*), 0, 1, (number_fields.-)(1), (number_fields.-)(1)].nzpure_quat)")))
 (rot_quat_TCC2 0
  (rot_quat_TCC2-1 nil 3907332229
   ("" (skeep)
    (("" (expand "nzpure_quat")
      (("" (expand "remove")
        (("" (expand "member")
          (("" (expand "fullset")
            (("" (prop)
              (("" (typepred "b")
                (("" (expand "linearly_independent?")
                  (("" (expand "linearly_dependent?")
                    (("" (inst 1 "0" "1")
                      (("" (assert)
                        (("" (hide -1)
                          (("" (expand* "zero_q" "Vector_part" "zero")
                            (("" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nzpure_quat const-decl "set[(pure_quat)]" quaternions_def nil)
    (member const-decl "bool" sets nil)
    (zero_q const-decl "quat" quaternions_def nil)
    (zero const-decl "Vector" vectors_3D vectors)
    (add_zero_left formula-decl nil vectors_3D vectors)
    (scal_1 formula-decl nil vectors_3D vectors)
    (scal_0 formula-decl nil vectors_3D vectors)
    (linearly_dependent? const-decl "bool" cross_3D vectors)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (quat type-eq-decl nil quaternions_def nil)
    (set type-eq-decl nil sets nil)
    (pure_quat const-decl "set[quat]" quaternions_def nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (linearly_independent? const-decl "bool" cross_3D vectors)
    (Vector_part const-decl "Vect3" quaternions_Hamilton nil)
    (fullset const-decl "set" sets nil)
    (remove const-decl "set" sets nil))
   nil
   (rot_quat subtype "quaternions_Hamilton.b"
    "(quaternions_def[real, restrict[[numfield, numfield], [real, real], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [real, real], numfield].restrict(number_fields.*), 0, 1, (number_fields.-)(1), (number_fields.-)(1)].nzpure_quat)")))
 (rot_quat_TCC3 0
  (rot_quat_TCC3-1 nil 3907332229
   ("" (skeep)
    ((""
      (name-replace "c" "inv[nz_T[real,
                 restrict[[numfield, numfield], [real, real], numfield](+),
                 restrict[[numfield, numfield], [real, real], numfield](*),
                 0],
            restrict
                [[real, real],
                 [nz_T[real,
                       restrict
                           [[numfield, numfield], [real, real], numfield]
                           (+),
                       restrict
                           [[numfield, numfield], [real, real], numfield]
                           (*),
                       0],
                  nz_T[real,
                       restrict
                           [[numfield, numfield], [real, real], numfield]
                           (+),
                       restrict
                           [[numfield, numfield], [real, real], numfield]
                           (*),
                       0]],
                 real]
                (restrict[[numfield, numfield], [real, real], numfield]
                     (*)),
            1]
            (2)" :hide? T)
      (("1" (typepred "r_angle(a, b)")
        (("1" (prop)
          (("1" (hide -2)
            (("1" (lemma "both_sides_times_pos_ge1")
              (("1" (inst -1 "c" "r_angle(a, b)" "0")
                (("1" (assert) nil nil)
                 ("2" (hide (- 2))
                  (("2" (typepred "c")
                    (("2" (expand "restrict") (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide -1)
            (("2" (lemma "both_sides_times_pos_le1")
              (("2" (inst -1 "c" "r_angle(a, b)" "pi")
                (("1" (assert)
                  (("1" (hide -2)
                    (("1" (lemma "le_cut")
                      (("1" (inst -1 "r_angle(a, b) * c" "pi * c" "pi")
                        (("1" (prop)
                          (("1" (hide (- 2))
                            (("1" (typepred "c")
                              (("1"
                                (expand "restrict")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide (- 2))
                  (("2" (typepred "c")
                    (("2" (expand "restrict") (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (expand "nzpure_quat")
            (("2" (expand "remove")
              (("2" (expand "member")
                (("2" (expand "fullset")
                  (("2" (typepred "b")
                    (("2" (expand "linearly_independent?")
                      (("2" (expand "linearly_dependent?")
                        (("2" (inst 1 "0" "1")
                          (("2" (assert)
                            (("2" (prop)
                              (("2"
                                (expand* "zero_q" "Vector_part" "zero")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (hide 2)
          (("3" (expand "nzpure_quat")
            (("3" (expand "remove")
              (("3" (expand "member")
                (("3" (expand "fullset")
                  (("3" (typepred "b")
                    (("3" (expand "linearly_independent?")
                      (("3" (expand "linearly_dependent?")
                        (("3" (inst 1 "1" "0")
                          (("3" (assert)
                            (("3" (prop)
                              (("3"
                                (expand* "zero_q" "Vector_part" "zero")
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (skeep)
          (("2" (expand "restrict")
            (("2" (typepred "x1`1" "x1`2")
              (("2" (prop)
                (("2" (lemma "times_is_zero")
                  (("2" (inst -1 "x1`1" "x1`2")
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (hide 2) (("3" (inst 1 "1") nil nil)) nil)
       ("4" (hide 2)
        (("4" (skeep)
          (("4" (typepred "x1`1" "x1`2") (("4" (grind) nil nil)) nil))
          nil))
        nil)
       ("5" (hide 2)
        (("5" (skeep)
          (("5" (expand "restrict") (("5" (propax) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (negate_nz_T_is_nz_T application-judgement
     "nz_T[real, restrict[[numfield, numfield], [real, real], numfield](+),
     restrict[[numfield, numfield], [real, real], numfield](*), 0]"
     quaternions_Hamilton nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nz_T type-eq-decl nil ring_nz_closed_def nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (inv const-decl "{y | x * y = one AND y * x = one}" group nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (c skolem-const-decl "{y |
   restrict[[numfield, numfield], [real, real], numfield](*)(2, y) = 1 AND
    restrict[[numfield, numfield], [real, real], numfield](*)(y, 2) = 1}"
       quaternions_Hamilton nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (both_sides_times_pos_ge1 formula-decl nil real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (quat type-eq-decl nil quaternions_def nil)
    (set type-eq-decl nil sets nil)
    (pure_quat const-decl "set[quat]" quaternions_def nil)
    (nzpure_quat const-decl "set[(pure_quat)]" quaternions_def nil)
    (nnreal type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (< const-decl "bool" reals nil)
    (cos const-decl "real" sincos_def trig)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (nnreal_le_pi nonempty-type-eq-decl nil trig_types trig)
    (r_angle const-decl "nnreal_le_pi" quaternions_Hamilton nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (linearly_independent? const-decl "bool" cross_3D vectors)
    (Vector_part const-decl "Vect3" quaternions_Hamilton nil)
    (times_is_zero formula-decl nil ring_nz_closed nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (rot_quat subtype
    "(number_fields./(quaternions_Hamilton.r_angle(quaternions_Hamilton.a, quaternions_Hamilton.b), 2))"
    "nnreal_le_pi")))
 (conj_quat_eq 0
  (conj_quat_eq-1 nil 3907387329
   ("" (skeep)
    (("" (expand "conjugate")
      (("" (expand "conjugate_")
        (("" (assert)
          (("" (assert)
            (("" (assert) (("" (assert) (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((conjugate const-decl "quat" quaternions_def nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (conjugate_ const-decl "quat" quaternions_Hamilton nil))
   shostak))
 (mult_QH_eq 0
  (mult_QH_eq-1 nil 3907387478
   ("" (skeep)
    (("" (decompose-equality)
      (("1" (lemma "q_prod_charac")
        (("1" (inst?)
          (("1" (replaces -1)
            (("1" (expand "mult_QH") (("1" (assert) nil nil)) nil))
            nil))
          nil))
        nil)
       ("2" (lemma "q_prod_charac")
        (("2" (inst?)
          (("2" (replaces -1)
            (("2" (expand "mult_QH") (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil)
       ("3" (lemma "q_prod_charac")
        (("3" (inst?)
          (("3" (replaces -1)
            (("3" (expand "mult_QH") (("3" (assert) nil nil)) nil))
            nil))
          nil))
        nil)
       ("4" (lemma "q_prod_charac")
        (("4" (inst?)
          (("4" (replaces -1)
            (("4" (expand "mult_QH") (("4" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (mult_QH const-decl "quat" quaternions_Hamilton nil)
    (* const-decl "[quat, quat -> quat]" quaternions_def nil)
    (quat type-eq-decl nil quaternions_def nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (negate_nz_T_is_nz_T application-judgement
     "nz_T[real, restrict[[numfield, numfield], [real, real], numfield](+),
     restrict[[numfield, numfield], [real, real], numfield](*), 0]"
     quaternions_Hamilton nil)
    (TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (q_prod_charac formula-decl nil quaternions nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil))
   shostak))
 (T_q__TCC1 0
  (T_q__TCC1-1 nil 3907387295
   ("" (skeep)
    ((""
      (case-replace
       "mult_QH(mult_QH(q, v), conjugate_(q)) = T_q(q)(v)")
      (("1" (typepred "T_q(q)(v)")
        (("1" (propax) nil nil)
         ("2" (hide (-1 2)) (("2" (grind) nil nil)) nil))
        nil)
       ("2" (hide 2)
        (("2" (expand "T_q")
          (("2" (rewrite* "mult_QH_eq")
            (("2" (rewrite "conj_quat_eq") nil nil)) nil))
          nil))
        nil)
       ("3" (hide 2) (("3" (grind) nil nil)) nil))
      nil))
    nil)
   ((remove const-decl "set" sets nil)
    (fullset const-decl "set" sets nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (quat type-eq-decl nil quaternions_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (mult_QH const-decl "quat" quaternions_Hamilton nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (pure_quat const-decl "set[quat]" quaternions_def nil)
    (conjugate_ const-decl "quat" quaternions_Hamilton nil)
    (T_q const-decl "(pure_quat)" quaternions nil)
    (member const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (conj_quat_eq formula-decl nil quaternions_Hamilton nil)
    (TRUE const-decl "bool" booleans nil)
    (conjugate const-decl "quat" quaternions_def nil)
    (mult_QH_eq formula-decl nil quaternions_Hamilton nil))
   nil
   (T_q_ subtype
    "quaternions_Hamilton.mult_QH(quaternions_Hamilton.mult_QH(quaternions_Hamilton.q, quaternions_Hamilton.v), quaternions_Hamilton.conjugate_(quaternions_Hamilton.q))"
    "(quaternions_def[real, restrict[[numfield, numfield], [real, real], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [real, real], numfield].restrict(number_fields.*), 0, 1, (number_fields.-)(1), (number_fields.-)(1)].pure_quat)")))
 (T_q_eq 0
  (T_q_eq-1 nil 3907387767
   ("" (skeep)
    (("" (expand "T_q")
      (("" (expand "T_q_")
        (("" (rewrite "conj_quat_eq")
          (("" (rewrite* "mult_QH_eq") nil nil)) nil))
        nil))
      nil))
    nil)
   ((T_q const-decl "(pure_quat)" quaternions nil)
    (conj_quat_eq formula-decl nil quaternions_Hamilton nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (quat type-eq-decl nil quaternions_def nil)
    (mult_QH const-decl "quat" quaternions_Hamilton nil)
    (conjugate_ const-decl "quat" quaternions_Hamilton nil)
    (pure_quat const-decl "set[quat]" quaternions_def nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (mult_QH_eq formula-decl nil quaternions_Hamilton nil)
    (T_q_ const-decl "(pure_quat)" quaternions_Hamilton nil))
   shostak))
 (Quat_Rot_Aux0 0
  (Quat_Rot_Aux0-1 nil 3907338520
   ("" (skeep)
    (("" (expand "rot_quat")
      (("" (decompose-equality)
        (("1" (expand "Vector_part")
          (("1" (expand "*") (("1" (propax) nil nil)) nil)) nil)
         ("2" (expand "Vector_part")
          (("2" (expand "*") (("2" (propax) nil nil)) nil)) nil)
         ("3" (expand "Vector_part")
          (("3" (expand "*") (("3" (propax) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((rot_quat const-decl "quat" quaternions_Hamilton nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (* const-decl "Vector" vectors_3D vectors)
    (Vector type-eq-decl nil vectors_3D vectors)
    (n_rot_axis const-decl "Vect3" quaternions_Hamilton nil)
    (sin const-decl "real" sincos_def trig)
    (linearly_independent? const-decl "bool" cross_3D vectors)
    (r_angle const-decl "nnreal_le_pi" quaternions_Hamilton nil)
    (nnreal_le_pi nonempty-type-eq-decl nil trig_types trig)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (nzpure_quat const-decl "set[(pure_quat)]" quaternions_def nil)
    (pure_quat const-decl "set[quat]" quaternions_def nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (cos const-decl "real" sincos_def trig)
    (Vector_part const-decl "Vect3" quaternions_Hamilton nil)
    (quat type-eq-decl nil quaternions_def nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (negate_nz_T_is_nz_T application-judgement
     "nz_T[real, restrict[[numfield, numfield], [real, real], numfield](+),
     restrict[[numfield, numfield], [real, real], numfield](*), 0]"
     quaternions_Hamilton nil))
   shostak))
 (Quat_Rot_Aux1 0
  (Quat_Rot_Aux1-1 nil 3907338568
   ("" (skeep)
    (("" (rewrite "Quat_Rot_Aux0")
      (("" (expand "n_rot_axis")
        (("" (expand "^")
          (("" (lemma "orth_cross")
            (("" (inst?)
              (("" (rewrite "dot_scal_left")
                (("" (replaces -1) (("" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Quat_Rot_Aux0 formula-decl nil quaternions_Hamilton nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (quat type-eq-decl nil quaternions_def nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (pure_quat const-decl "set[quat]" quaternions_def nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (linearly_independent? const-decl "bool" cross_3D vectors)
    (Vector_part const-decl "Vect3" quaternions_Hamilton nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (^ const-decl "Normalized" vectors_3D vectors)
    (TRUE const-decl "bool" booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (negate_nz_T_is_nz_T application-judgement
     "nz_T[real, restrict[[numfield, numfield], [real, real], numfield](+),
     restrict[[numfield, numfield], [real, real], numfield](*), 0]"
     quaternions_Hamilton nil)
    (cross const-decl "Vector" cross_3D vectors)
    (norm const-decl "nnreal" vectors_3D vectors)
    (* const-decl "Vector" vectors_3D vectors)
    (Vector type-eq-decl nil vectors_3D vectors)
    (r_angle const-decl "nnreal_le_pi" quaternions_Hamilton nil)
    (nnreal_le_pi nonempty-type-eq-decl nil trig_types trig)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (cos const-decl "real" sincos_def trig)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (nzpure_quat const-decl "set[(pure_quat)]" quaternions_def nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (sin const-decl "real" sincos_def trig)
    (dot_scal_left formula-decl nil vectors_3D vectors)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (orth_cross formula-decl nil vectors_3D_extra nil)
    (n_rot_axis const-decl "Vect3" quaternions_Hamilton nil))
   shostak))
 (Quat_Rot_Aux2 0
  (Quat_Rot_Aux2-1 nil 3907338621
   ("" (skeep)
    (("" (beta)
      ((""
        (case-replace
         "sq(rot_quat(a, b)`x) - sq(norm(Vector_part(rot_quat(a, b)))) = cos(r_angle(a, b))")
        (("" (hide 2)
          (("" (expand "Vector_part")
            (("" (expand "rot_quat")
              ((""
                (case-replace "(# x
                        := sin((number_fields./(r_angle(a, b), 2))) *
                            n_rot_axis(a, b)`x,
                      y
                        := sin((number_fields./(r_angle(a, b), 2))) *
                            n_rot_axis(a, b)`y,
                      z
                        := sin((number_fields./(r_angle(a, b), 2))) *
                            n_rot_axis(a, b)`z #) = sin((number_fields./(r_angle(a, b), 2))) * (n_rot_axis(a, b)`x, n_rot_axis(a, b)`y, n_rot_axis(a, b)`z)"
                 :hide? T)
                (("1" (rewrite "vectors_3D.norm_scal")
                  (("1" (lemma "vectors_3D.norm_normalize")
                    (("1"
                      (inst -1 "cross(Vector_part(a), Vector_part(b))")
                      (("1"
                        (case-replace "(# x := n_rot_axis(a, b)`x,
                                       y := n_rot_axis(a, b)`y,
                                       z := n_rot_axis(a, b)`z #) = ^(cross(Vector_part(a), Vector_part(b)))"
                         :hide? T)
                        (("1" (replaces -1)
                          (("1" (assert)
                            (("1"
                              (case-replace
                               "sq(abs(sin((number_fields./(r_angle(a, b), 2))))) = sq(sin((number_fields./(r_angle(a, b), 2))))"
                               :hide? T)
                              (("1"
                                (expand "sq")
                                (("1"
                                  (lemma "cos_2a")
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (replace -1 1 rl)
                                      (("1"
                                        (hide -)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (expand "abs")
                                  (("2"
                                    (lift-if)
                                    (("2"
                                      (prop)
                                      (("2"
                                        (hide 1)
                                        (("2"
                                          (case
                                           "(number_fields./(r_angle(a, b), 2)) >=0 AND (number_fields./(r_angle(a, b), 2)) <= (number_fields./(pi, 2))")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (lemma
                                               "sin_pos_0tohalfpi")
                                              (("1"
                                                (inst?)
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (hide -2)
                                                  (("2"
                                                    (case-replace
                                                     "(number_fields./(r_angle(a, b), 2)) = 0"
                                                     :hide?
                                                     T)
                                                    (("1"
                                                      (hide (-1 1))
                                                      (("1"
                                                        (lemma
                                                         "sin_eq_0")
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -)
                                            (("2"
                                              (typepred
                                               "r_angle(a, b)")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (expand
                                                   "nzpure_quat")
                                                  (("2"
                                                    (expand "remove")
                                                    (("2"
                                                      (expand "member")
                                                      (("2"
                                                        (expand
                                                         "fullset")
                                                        (("2"
                                                          (prop)
                                                          (("2"
                                                            (typepred
                                                             "b")
                                                            (("2"
                                                              (expand*
                                                               "pure_quat"
                                                               "linearly_independent?"
                                                               "linearly_dependent?")
                                                              (("2"
                                                                (inst
                                                                 1
                                                                 "0"
                                                                 "1")
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (hide 2)
                                                (("3"
                                                  (expand
                                                   "nzpure_quat")
                                                  (("3"
                                                    (expand "remove")
                                                    (("3"
                                                      (expand "member")
                                                      (("3"
                                                        (expand
                                                         "fullset")
                                                        (("3"
                                                          (prop)
                                                          (("3"
                                                            (typepred
                                                             "a"
                                                             "b")
                                                            (("3"
                                                              (hide -2)
                                                              (("3"
                                                                (expand*
                                                                 "pure_quat"
                                                                 "linearly_independent?"
                                                                 "linearly_dependent?")
                                                                (("3"
                                                                  (inst
                                                                   1
                                                                   "1"
                                                                   "0")
                                                                  (("3"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide (- 2))
                          (("2" (expand "n_rot_axis")
                            (("2" (decompose-equality 1) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (prop)
                          (("2" (typepred "b")
                            (("2" (hide -1)
                              (("2"
                                (expand "linearly_independent?")
                                (("2"
                                  (lemma "lin_indep_cross")
                                  (("2"
                                    (inst?)
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (hide -1)
                                      (("2"
                                        (prop)
                                        (("2"
                                          (expand
                                           "linearly_dependent?")
                                          (("2"
                                            (inst 1 "0" "1")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (hide -1)
                                      (("3"
                                        (prop)
                                        (("3"
                                          (expand
                                           "linearly_dependent?")
                                          (("3"
                                            (inst 1 "1" "0")
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (expand "*") (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sin_range application-judgement "real_abs_le1" sincos trig)
    (norm_scal formula-decl nil vectors_3D vectors)
    (negate_nz_T_is_nz_T application-judgement
     "nz_T[real, restrict[[numfield, numfield], [real, real], numfield](+),
     restrict[[numfield, numfield], [real, real], numfield](*), 0]"
     quaternions_Hamilton nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (cross const-decl "Vector" cross_3D vectors)
    (a skolem-const-decl "(pure_quat)" quaternions_Hamilton nil)
    (b skolem-const-decl
     "{b: (pure_quat) | linearly_independent?(Vector_part(a), Vector_part(b))}"
     quaternions_Hamilton nil)
    (zero const-decl "Vector" vectors_3D vectors)
    (Nz_vector type-eq-decl nil vectors_3D vectors)
    (nz_norm_gt_0 application-judgement "posreal" vectors_3D vectors)
    (TRUE const-decl "bool" booleans nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (cos_2a formula-decl nil trig_basic trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (sin_pos_0tohalfpi formula-decl nil sincos trig)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (zero_times formula-decl nil ring nil)
    (sin_eq_0 formula-decl nil sincos trig)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil)
    (linearly_dependent? const-decl "bool" cross_3D vectors)
    (zero_q const-decl "quat" quaternions_def nil)
    (+ const-decl "Vector" vectors_3D vectors)
    (left_identity formula-decl nil monad nil)
    (fullset const-decl "set" sets nil)
    (remove const-decl "set" sets nil)
    (Normalized type-eq-decl nil vectors_3D vectors)
    (^ const-decl "Normalized" vectors_3D vectors)
    (lin_indep_cross formula-decl nil cross_3D vectors)
    (add_zero_right formula-decl nil vectors_3D vectors)
    (scal_0 formula-decl nil vectors_3D vectors)
    (scal_1 formula-decl nil vectors_3D vectors)
    (add_zero_left formula-decl nil vectors_3D vectors)
    (Nz_vect3 type-eq-decl nil vectors_3D vectors)
    (norm_normalize formula-decl nil vectors_3D vectors)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (sin const-decl "real" sincos_def trig)
    (n_rot_axis const-decl "Vect3" quaternions_Hamilton nil)
    (* const-decl "Vector" vectors_3D vectors)
    (r_angle const-decl "nnreal_le_pi" quaternions_Hamilton nil)
    (nnreal_le_pi nonempty-type-eq-decl nil trig_types trig)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (nzpure_quat const-decl "set[(pure_quat)]" quaternions_def nil)
    (cos const-decl "real" sincos_def trig)
    (norm const-decl "nnreal" vectors_3D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (Vector type-eq-decl nil vectors_3D vectors)
    (rot_quat const-decl "quat" quaternions_Hamilton nil)
    (Vector_part const-decl "Vect3" quaternions_Hamilton nil)
    (linearly_independent? const-decl "bool" cross_3D vectors)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (pure_quat const-decl "set[quat]" quaternions_def nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (quat type-eq-decl nil quaternions_def nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (sq const-decl "T" ring nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (Quat_Rot_Aux3 0
  (Quat_Rot_Aux3-1 nil 3907338826
   ("" (skeep)
    (("" (assert)
      (("" (rewrite "Quat_Rot_Aux0")
        (("" (rewrite "cross_scal_left")
          (("" (expand "n_rot_axis")
            (("" (expand "^")
              (("" (rewrite "cross_scal_left")
                (("" (rewrite "cross_cross")
                  (("" (expand "rot_quat")
                    (("" (lemma "sin_2a")
                      ((""
                        (inst -1
                         "number_fields./(1, 2) * r_angle(a, b)")
                        (("" (assert)
                          ((""
                            (case-replace
                             "cos(1/2 * r_angle(a, b)) * sin(1/2 * r_angle(a, b)) = sin(1/2 * r_angle(a, b)) * cos(1/2 * r_angle(a, b))")
                            (("1" (rewrite "conversion_quot")
                              (("1"
                                (replace -1 1)
                                (("1"
                                  (hide -1)
                                  (("1"
                                    (lemma "associative_mult")
                                    (("1"
                                      (inst
                                       -1
                                       "sin(1/2 * r_angle(a, b))"
                                       "cos(1/2 * r_angle(a, b))"
                                       "(1 / norm(cross(Vector_part(a), Vector_part(b))))")
                                      (("1"
                                        (rewrite* "conversion_quot")
                                        (("1"
                                          (replace -1 1)
                                          (("1"
                                            (lemma "associative_mult")
                                            (("1"
                                              (hide -2)
                                              (("1"
                                                (inst
                                                 -1
                                                 "2"
                                                 "(sin(1/2 * r_angle(a, b)) * cos(1/2 * r_angle(a, b)))"
                                                 "(number_fields./(1, norm(cross(Vector_part(a), Vector_part(b)))))")
                                                (("1"
                                                  (rewrite
                                                   "conversion_quot")
                                                  (("1"
                                                    (replace -1 1)
                                                    (("1"
                                                      (hide -1)
                                                      (("1"
                                                        (replace
                                                         -1
                                                         1
                                                         rl)
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (lemma
                                                             "LI_implies_nzvector")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "Vector_part(a)"
                                                               "Vector_part(b)")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (rewrite
                                                                   "norm_cross_charac_")
                                                                  (("1"
                                                                    (expand
                                                                     "r_angle")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (case-replace
                                                                         "sin(angle_between(Vector_part(a), Vector_part(b))) * ((number_fields./ (1, norm(Vector_part(a)) * norm(Vector_part(b)) * sin(angle_between(Vector_part(a), Vector_part(b)))))) = number_fields./ (1, norm(Vector_part(a)) * norm(Vector_part(b)))")
                                                                        (("1"
                                                                          (hide
                                                                           -)
                                                                          (("1"
                                                                            (case-replace
                                                                             "norm(Vector_part(b)) = norm(Vector_part(a))")
                                                                            (("1"
                                                                              (rewrite
                                                                               "sqv_rew")
                                                                              (("1"
                                                                                (lemma
                                                                                 "angle_nnreal_le_pi_exists")
                                                                                (("1"
                                                                                  (inst?)
                                                                                  (("1"
                                                                                    (skeep)
                                                                                    (("1"
                                                                                      (beta)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -2
                                                                                         -1)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1
                                                                                           1
                                                                                           rl)
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "scal_sub_right")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (case-replace
                                                                                                 "((number_fields./(1, norm(Vector_part(a)) * norm(Vector_part(a)))) * (cos(ab) * norm(Vector_part(a)) * norm(Vector_part(a)))) = cos(ab)")
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "vectors_3D.sq_norm")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "Vector_part(a)")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "sq"
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (replaces
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (case-replace
                                                                                                             "ab = angle_between(Vector_part(a), Vector_part(b))")
                                                                                                            (("1"
                                                                                                              (typepred
                                                                                                               "ab")
                                                                                                              (("1"
                                                                                                                (hide
                                                                                                                 -3
                                                                                                                 -5
                                                                                                                 2)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "angle_between")
                                                                                                                  (("1"
                                                                                                                    (case-replace
                                                                                                                     "cos(ab) = Vector_part(a) * Vector_part(b) / (norm(Vector_part(a)) * norm(Vector_part(b)))")
                                                                                                                    (("1"
                                                                                                                      (rewrite
                                                                                                                       "conversion_quot")
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -1
                                                                                                                         1
                                                                                                                         rl)
                                                                                                                        (("1"
                                                                                                                          (rewrite
                                                                                                                           "acos_cos")
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (hide-all-but
                                                                                                                       (-3
                                                                                                                        1))
                                                                                                                      (("2"
                                                                                                                        (rewrite
                                                                                                                         "conversion_quot")
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (rewrite
                                                                                                                             "dot_comm")
                                                                                                                            (("2"
                                                                                                                              (reveal
                                                                                                                               -4)
                                                                                                                              (("2"
                                                                                                                                (replaces
                                                                                                                                 -1)
                                                                                                                                (("2"
                                                                                                                                  (lemma
                                                                                                                                   "both_sides_times1")
                                                                                                                                  (("2"
                                                                                                                                    (inst
                                                                                                                                     -1
                                                                                                                                     "number_fields./(1, (norm(Vector_part(a)) * norm(Vector_part(a))))"
                                                                                                                                     "cos(ab) * (norm(Vector_part(a)) * norm(Vector_part(a)))"
                                                                                                                                     " Vector_part(b) * Vector_part(a)")
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("3"
                                                                                                                      (skeep)
                                                                                                                      (("3"
                                                                                                                        (expand
                                                                                                                         "restrict")
                                                                                                                        (("3"
                                                                                                                          (hide-all-but
                                                                                                                           -1)
                                                                                                                          (("3"
                                                                                                                            (grind)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide-all-but
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (rewrite
                                                                                                     "times_div2")
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               2)
                                                                              (("2"
                                                                                (typepred
                                                                                 "a"
                                                                                 "b")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           2)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (hide
                                                                           2)
                                                                          (("3"
                                                                            (prop)
                                                                            (("3"
                                                                              (lemma
                                                                               "vectors_3D.norm_eq_0")
                                                                              (("3"
                                                                                (inst-cp
                                                                                 -1
                                                                                 "Vector_part(a)")
                                                                                (("3"
                                                                                  (inst
                                                                                   -1
                                                                                   "Vector_part(b)")
                                                                                  (("3"
                                                                                    (prop)
                                                                                    (("3"
                                                                                      (hide-all-but
                                                                                       (-1
                                                                                        2
                                                                                        4))
                                                                                      (("3"
                                                                                        (rewrite
                                                                                         "zero_times3")
                                                                                        (("3"
                                                                                          (prop)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide -1 2)
                                                  (("2"
                                                    (skeep)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide -1 2)
                                        (("2"
                                          (skeep)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide (- 2))
                              (("2"
                                (rewrite "conversion_quot")
                                (("2" (assert) nil nil))
                                nil))
                              nil)
                             ("3" (hide (- 2))
                              (("3"
                                (skeep)
                                (("3" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cos_range application-judgement "real_abs_le1" sincos trig)
    (real_times_real_is_real application-judgement "real" reals nil)
    (negate_nz_T_is_nz_T application-judgement
     "nz_T[real, restrict[[numfield, numfield], [real, real], numfield](+),
     restrict[[numfield, numfield], [real, real], numfield](*), 0]"
     quaternions_Hamilton nil)
    (cross_scal_left formula-decl nil cross_3D vectors)
    (sin const-decl "real" sincos_def trig)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nzpure_quat const-decl "set[(pure_quat)]" quaternions_def nil)
    (<= const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (< const-decl "bool" reals nil)
    (cos const-decl "real" sincos_def trig)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (nnreal_le_pi nonempty-type-eq-decl nil trig_types trig)
    (r_angle const-decl "nnreal_le_pi" quaternions_Hamilton nil)
    (n_rot_axis const-decl "Vect3" quaternions_Hamilton nil)
    (^ const-decl "Normalized" vectors_3D vectors)
    (cross_cross formula-decl nil cross_3D vectors)
    (sin_2a formula-decl nil trig_basic trig)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (scal_assoc formula-decl nil vectors_3D vectors)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (conversion_quot formula-decl nil quaternions_Hamilton nil)
    (norm_cross_charac_ formula-decl nil vectors_3D_extra nil)
    (zero const-decl "Vector" vectors_3D vectors)
    (Nz_vect3 type-eq-decl nil vectors_3D vectors)
    (angle_between_nnreal_le_pi application-judgement "nnreal_le_pi"
     vectors_3D_extra nil)
    (norm_eq_0 formula-decl nil vectors_3D vectors)
    (zero_times3 formula-decl nil real_props nil)
    (sqv_rew formula-decl nil vectors_3D vectors)
    (times_div2 formula-decl nil real_props nil)
    (left_identity formula-decl nil monad nil)
    (sq_norm formula-decl nil vectors_3D vectors)
    (sq const-decl "nonneg_real" sq reals)
    (scal_1 formula-decl nil vectors_3D vectors)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (dot_comm formula-decl nil vectors_3D vectors)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (acos_cos formula-decl nil trig_inverses trig)
    (* const-decl "real" vectors_3D vectors)
    (sqv const-decl "nnreal" vectors_3D vectors)
    (* const-decl "Vector" vectors_3D vectors)
    (scal_sub_right formula-decl nil vectors_3D vectors)
    (angle_nnreal_le_pi_exists formula-decl nil vectors_3D_extra nil)
    (angle_between const-decl "real" vectors_3D_cos vectors)
    (LI_implies_nzvector formula-decl nil vectors_3D_extra nil)
    (TRUE const-decl "bool" booleans nil)
    (associative_mult formula-decl nil number_fields nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nz_T type-eq-decl nil ring_nz_closed_def nil)
    (inv const-decl "{y | x * y = one AND y * x = one}" group nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (rot_quat const-decl "quat" quaternions_Hamilton nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (cross const-decl "Vector" cross_3D vectors)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (norm const-decl "nnreal" vectors_3D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (Vector type-eq-decl nil vectors_3D vectors)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Vector_part const-decl "Vect3" quaternions_Hamilton nil)
    (linearly_independent? const-decl "bool" cross_3D vectors)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (pure_quat const-decl "set[quat]" quaternions_def nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (quat type-eq-decl nil quaternions_def nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Quat_Rot_Aux0 formula-decl nil quaternions_Hamilton nil))
   shostak))
 (Quaternions_Rotation 0
  (Quaternions_Rotation-1 nil 3907335344
   ("" (skeep)
    (("" (assert)
      (("" (lemma "decompose_eq_Real_Vector_part")
        (("" (inst -1 "b" "T_q(rot_quat(a, b))(a)")
          (("1" (assert)
            (("1" (prop)
              (("1" (hide 2)
                (("1" (typepred "b" "T_q(rot_quat(a, b))(a)")
                  (("1" (expand "pure_quat")
                    (("1" (expand "Real_part") (("1" (assert) nil nil))
                      nil))
                    nil)
                   ("2" (expand "remove")
                    (("2" (expand "member")
                      (("2" (expand "fullset") (("2" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (lemma "T_q_Real_charac")
                  (("2" (inst -1 "rot_quat(a,b)" "a")
                    (("2"
                      (case-replace
                       "(2 * (Vector_part(rot_quat(a, b)) * Vector_part(a))) = 0")
                      (("1" (assert)
                        (("1" (lemma "Quat_Rot_Aux2")
                          (("1" (inst -1 "a" "b")
                            (("1" (beta)
                              (("1"
                                (replace -1 -3)
                                (("1"
                                  (lemma "Quat_Rot_Aux3")
                                  (("1"
                                    (inst -1 "a" "b")
                                    (("1"
                                      (beta)
                                      (("1"
                                        (replace -1 -4)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (replace -4 1)
                                            (("1"
                                              (hide -)
                                              (("1"
                                                (lemma
                                                 "vectors_3D.add_neg_sub")
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (replace -1 1 rl)
                                                    (("1"
                                                      (hide -)
                                                      (("1"
                                                        (rewrite
                                                         "vectors_3D.add_comm_assoc_right")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide - 2)
                        (("2" (rewrite "Quat_Rot_Aux1")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "remove")
            (("2" (expand "member")
              (("2" (expand "fullset") (("2" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (fullset const-decl "set" sets nil)
    (remove const-decl "set" sets nil) (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (quat type-eq-decl nil quaternions_def nil)
    (pure_quat const-decl "set[quat]" quaternions_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vector type-eq-decl nil vectors_3D vectors)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (norm const-decl "nnreal" vectors_3D vectors)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (Vector_part const-decl "Vect3" quaternions_Hamilton nil)
    (linearly_independent? const-decl "bool" cross_3D vectors)
    (T_q const-decl "(pure_quat)" quaternions nil)
    (rot_quat const-decl "quat" quaternions_Hamilton nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Real_part const-decl "real" quaternions_Hamilton nil)
    (member const-decl "bool" sets nil)
    (T_q_Real_charac formula-decl nil quaternions_Hamilton nil)
    (* const-decl "real" vectors_3D vectors)
    (Quat_Rot_Aux2 formula-decl nil quaternions_Hamilton nil)
    (Quat_Rot_Aux3 formula-decl nil quaternions_Hamilton nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (r_angle const-decl "nnreal_le_pi" quaternions_Hamilton nil)
    (nnreal_le_pi nonempty-type-eq-decl nil trig_types trig)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (<= const-decl "bool" reals nil)
    (nzpure_quat const-decl "set[(pure_quat)]" quaternions_def nil)
    (cos const-decl "real" sincos_def trig)
    (* const-decl "Vector" vectors_3D vectors)
    (add_comm_assoc_right formula-decl nil vectors_3D vectors)
    (- const-decl "Vector" vectors_3D vectors)
    (neg_add_right formula-decl nil vectors_3D vectors)
    (add_neg_sub formula-decl nil vectors_3D vectors)
    (add_zero_right formula-decl nil vectors_3D vectors)
    (scal_0 formula-decl nil vectors_3D vectors)
    (negate_nz_T_is_nz_T application-judgement
     "nz_T[real, restrict[[numfield, numfield], [real, real], numfield](+),
     restrict[[numfield, numfield], [real, real], numfield](*), 0]"
     quaternions_Hamilton nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (Quat_Rot_Aux1 formula-decl nil quaternions_Hamilton nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (decompose_eq_Real_Vector_part formula-decl nil
     quaternions_Hamilton nil))
   shostak))
 (Quaternions_Rotation_Deform_TCC1 0
  (Quaternions_Rotation_Deform_TCC1-1 nil 3907332229
   ("" (skeep)
    (("" (rewrite "norm_eq_0")
      (("" (lemma "LI_implies_nzvector")
        (("" (inst -1 "Vector_part(a)" "Vector_part(b)")
          (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((norm_eq_0 formula-decl nil vectors_3D vectors)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil vectors_3D vectors)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (quat type-eq-decl nil quaternions_def nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (Vector_part const-decl "Vect3" quaternions_Hamilton nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (pure_quat const-decl "set[quat]" quaternions_def nil)
    (linearly_independent? const-decl "bool" cross_3D vectors)
    (LI_implies_nzvector formula-decl nil vectors_3D_extra nil))
   nil
   (Quaternions_Rotation_Deform subtype
    "vectors_3D.norm(quaternions_Hamilton.Vector_part(quaternions_Hamilton.a))"
    "nznum")))
 (Quaternions_Rotation_Deform_TCC2 0
  (Quaternions_Rotation_Deform_TCC2-1 nil 3907332229
   ("" (skeep)
    (("" (lemma "pos_div_ge")
      (("" (inst?) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((pos_div_ge formula-decl nil real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (linearly_independent? const-decl "bool" cross_3D vectors)
    (pure_quat const-decl "set[quat]" quaternions_def nil)
    (set type-eq-decl nil sets nil)
    (Vector_part const-decl "Vect3" quaternions_Hamilton nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (quat type-eq-decl nil quaternions_def nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (norm const-decl "nnreal" vectors_3D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Vector type-eq-decl nil vectors_3D vectors)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (Quaternions_Rotation_Deform subtype
    "(number_fields./(vectors_3D.norm(quaternions_Hamilton.Vector_part(quaternions_Hamilton.b)), vectors_3D.norm(quaternions_Hamilton.Vector_part(quaternions_Hamilton.a))))"
    "nonneg_real")))
 (Quaternions_Rotation_Deform_TCC3 0
  (Quaternions_Rotation_Deform_TCC3-1 nil 3907332571
   ("" (skeep)
    (("" (rewrite "norm_eq_0")
      (("" (lemma "LI_implies_nzvector")
        (("" (inst -1 "Vector_part(a)" "Vector_part(b)")
          (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((norm_eq_0 formula-decl nil vectors_3D vectors)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil vectors_3D vectors)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (quat type-eq-decl nil quaternions_def nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (Vector_part const-decl "Vect3" quaternions_Hamilton nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (pure_quat const-decl "set[quat]" quaternions_def nil)
    (linearly_independent? const-decl "bool" cross_3D vectors)
    (LI_implies_nzvector formula-decl nil vectors_3D_extra nil))
   nil
   (Quaternions_Rotation_Deform subtype
    "vectors_3D.norm(quaternions_Hamilton.Vector_part(quaternions_Hamilton.b))"
    "nznum")))
 (Quaternions_Rotation_Deform_TCC4 0
  (Quaternions_Rotation_Deform_TCC4-1 nil 3907332571
   ("" (skeep)
    (("" (typepred "b")
      (("" (prop)
        (("1" (hide -2)
          (("1" (expand "pure_quat")
            (("1" (expand "*")
              (("1" (replaces -1) (("1" (assert) nil nil)) nil)) nil))
            nil))
          nil)
         ("2" (expand "linearly_independent?")
          (("2" (expand "linearly_dependent?")
            (("2" (skeep)
              (("2" (rewrite "Vector_part_scalar")
                (("2" (rewrite "scal_assoc")
                  (("2"
                    (inst 1 "k1"
                     "k2 * (number_fields./(norm(Vector_part(a)), norm(Vector_part(b))))")
                    (("2" (prop)
                      (("2" (hide (-1 -3 -4))
                        (("2" (lemma "zero_times4")
                          (("2" (inst?)
                            (("2" (replaces -2)
                              (("2"
                                (assert)
                                (("2"
                                  (lemma "div_eq_zero")
                                  (("2"
                                    (inst
                                     -1
                                     "norm(Vector_part(b))"
                                     "norm(Vector_part(a))")
                                    (("2"
                                      (prop)
                                      (("1"
                                        (hide (-1 -3))
                                        (("1"
                                          (rewrite "norm_eq_0")
                                          (("1"
                                            (lemma
                                             "LI_implies_nzvector")
                                            (("1"
                                              (inst
                                               -1
                                               "Vector_part(a)"
                                               "Vector_part(b)")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Vector_part const-decl "Vect3" quaternions_Hamilton nil)
    (linearly_independent? const-decl "bool" cross_3D vectors)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (pure_quat const-decl "set[quat]" quaternions_def nil)
    (set type-eq-decl nil sets nil)
    (quat type-eq-decl nil quaternions_def nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (scal_assoc formula-decl nil vectors_3D vectors)
    (negate_nz_T_is_nz_T application-judgement
     "nz_T[real, restrict[[numfield, numfield], [real, real], numfield](+),
     restrict[[numfield, numfield], [real, real], numfield](*), 0]"
     quaternions_Hamilton nil)
    (zero_times4 formula-decl nil extra_real_props nil)
    (div_eq_zero formula-decl nil division_ring nil)
    (norm_eq_0 formula-decl nil vectors_3D vectors)
    (LI_implies_nzvector formula-decl nil vectors_3D_extra nil)
    (nz_T type-eq-decl nil ring_nz_closed_def nil)
    (norm const-decl "nnreal" vectors_3D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (Vector type-eq-decl nil vectors_3D vectors)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (Vector_part_scalar formula-decl nil quaternions_Hamilton nil)
    (linearly_dependent? const-decl "bool" cross_3D vectors)
    (* const-decl "quat" quaternions_def nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil
   (Quaternions_Rotation_Deform subtype
    "quaternions_def[real, restrict[[numfield, numfield], [real, real], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [real, real], numfield].restrict(number_fields.*), 0, 1, (number_fields.-)(1), (number_fields.-)(1)].*((number_fields./(vectors_3D.norm(quaternions_Hamilton.Vector_part(quaternions_Hamilton.a)), vectors_3D.norm(quaternions_Hamilton.Vector_part(quaternions_Hamilton.b)))), quaternions_Hamilton.b)"
    "{b: (quaternions_def[real, restrict[[numfield, numfield], [real, real], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [real, real], numfield].restrict(number_fields.*), 0, 1, (number_fields.-)(1), (number_fields.-)(1)].pure_quat) | cross_3D.linearly_independent?(quaternions_Hamilton.Vector_part(quaternions_Hamilton.a), quaternions_Hamilton.Vector_part(b))}")))
 (Quaternions_Rotation_Deform 0
  (Quaternions_Rotation_Deform-1 nil 3907332573
   ("" (skeep)
    (("" (beta)
      (("" (expand "T_q")
        (("" (rewrite "conj_product_quat_scalar")
          (("1" (lemma "one_sc_times")
            (("1" (lemma "one_sc_times")
              (("1" (inst -1 "a")
                (("1" (replace -1 1 RL)
                  (("1" (rewrite* "sc_quat")
                    (("1" (replace -1 1)
                      (("1" (hide -1)
                        (("1" (lemma "Quaternions_Rotation")
                          (("1"
                            (inst -1 "a" "(number_fields./
                                          (norm(Vector_part(a)),
                                           norm(Vector_part(b))))
                                      * b")
                            (("1" (beta)
                              (("1"
                                (expand "T_q")
                                (("1"
                                  (replace -1 1 RL)
                                  (("1"
                                    (hide -)
                                    (("1"
                                      (rewrite "sqrt_def")
                                      (("1"
                                        (rewrite "sc_assoc")
                                        (("1"
                                          (case-replace
                                           "((number_fields./(norm(Vector_part(b)), norm(Vector_part(a)))) *
                         (number_fields./(norm(Vector_part(a)), norm(Vector_part(b))))) = 1"
                                           :hide?
                                           T)
                                          (("1"
                                            (lemma "one_sc_times")
                                            (("1"
                                              (inst -1 "b")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (rewrite "pos_div_ge")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide (- 2))
                              (("2"
                                (lemma "LI_implies_nzvector")
                                (("2"
                                  (inst
                                   -1
                                   "Vector_part(a)"
                                   "Vector_part(b)")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (prop)
                                      (("1"
                                        (rewrite "Vector_part_scalar")
                                        (("1"
                                          (lemma
                                           "vectors_3D.norm_scal")
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (replace -1 1)
                                              (("1"
                                                (hide -)
                                                (("1"
                                                  (expand "abs")
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (hide 1)
                                                        (("1"
                                                          (case
                                                           "number_fields./
                                                                (norm(Vector_part(b)), norm(Vector_part(a))) > 0")
                                                          (("1"
                                                            (rewrite
                                                             "neg_div_lt")
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (hide -)
                                                            (("2"
                                                              (rewrite
                                                               "pos_div_gt")
                                                              (("2"
                                                                (lemma
                                                                 "vectors_3D.norm_eq_0")
                                                                (("2"
                                                                  (inst-cp
                                                                   -1
                                                                   "Vector_part(b)")
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "Vector_part(a)")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 1)
                                                        (("2"
                                                          (lemma
                                                           "div_div1")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "norm(Vector_part(b))"
                                                             "norm(Vector_part(a))"
                                                             "1")
                                                            (("1"
                                                              (rewrite
                                                               "conversion_quot")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (lemma
                                                                 "vectors_3D.norm_eq_0")
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (name-replace
                                         "scal"
                                         "number_fields./
                                                                          (1,
                                                                           (number_fields./
                                                                                (norm(Vector_part(b)),
                                                                                 norm(Vector_part(a)))))")
                                        (("1"
                                          (typepred "b")
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (expand
                                               "linearly_independent?")
                                              (("1"
                                                (expand
                                                 "linearly_dependent?")
                                                (("1"
                                                  (skeep)
                                                  (("1"
                                                    (rewrite
                                                     "Vector_part_scalar")
                                                    (("1"
                                                      (inst
                                                       1
                                                       "k1"
                                                       "k2 * scal")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (hide -2)
                                                          (("1"
                                                            (split)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (prop)
                                            (("2"
                                              (lemma "div_eq_zero")
                                              (("2"
                                                (inst
                                                 -1
                                                 "norm(Vector_part(a))"
                                                 "norm(Vector_part(b))")
                                                (("2"
                                                  (prop)
                                                  (("1"
                                                    (hide (-1 -3))
                                                    (("1"
                                                      (rewrite
                                                       "norm_eq_0")
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (hide 2)
                                          (("3"
                                            (prop)
                                            (("3"
                                              (rewrite "norm_eq_0")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2) (("2" (rewrite "pos_div_ge") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((T_q const-decl "(pure_quat)" quaternions nil)
    (one_sc_times formula-decl nil quaternions nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (sc_quat formula-decl nil quaternions nil)
    (* const-decl "[quat, quat -> quat]" quaternions_def nil)
    (conjugate const-decl "quat" quaternions_def nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (a skolem-const-decl "(pure_quat)" quaternions_Hamilton nil)
    (b skolem-const-decl
     "{b: (pure_quat) | linearly_independent?(Vector_part(a), Vector_part(b))}"
     quaternions_Hamilton nil)
    (pos_div_ge formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (sc_assoc formula-decl nil quaternions_def nil)
    (negate_nz_T_is_nz_T application-judgement
     "nz_T[real, restrict[[numfield, numfield], [real, real], numfield](+),
     restrict[[numfield, numfield], [real, real], numfield](*), 0]"
     quaternions_Hamilton nil)
    (sqrt_def formula-decl nil sqrt reals)
    (LI_implies_nzvector formula-decl nil vectors_3D_extra nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (linearly_dependent? const-decl "bool" cross_3D vectors)
    (scal_assoc formula-decl nil vectors_3D vectors)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (div_eq_zero formula-decl nil division_ring nil)
    (Vector_part_scalar formula-decl nil quaternions_Hamilton nil)
    (nz_T type-eq-decl nil ring_nz_closed_def nil)
    (left_identity formula-decl nil monad nil)
    (conversion_quot formula-decl nil quaternions_Hamilton nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (div_div1 formula-decl nil division_ring nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (norm_eq_0 formula-decl nil vectors_3D vectors)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pos_div_gt formula-decl nil real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (neg_div_lt formula-decl nil real_props nil)
    (> const-decl "bool" reals nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (norm_scal formula-decl nil vectors_3D vectors)
    (Quaternions_Rotation formula-decl nil quaternions_Hamilton nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (* const-decl "quat" quaternions_def nil)
    (rot_quat const-decl "quat" quaternions_Hamilton nil)
    (linearly_independent? const-decl "bool" cross_3D vectors)
    (pure_quat const-decl "set[quat]" quaternions_def nil)
    (set type-eq-decl nil sets nil)
    (Vector_part const-decl "Vect3" quaternions_Hamilton nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (quat type-eq-decl nil quaternions_def nil)
    (norm const-decl "nnreal" vectors_3D vectors)
    (Vector type-eq-decl nil vectors_3D vectors)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (conj_product_quat_scalar formula-decl nil quaternions nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak)))

