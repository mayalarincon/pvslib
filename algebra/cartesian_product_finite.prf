(cartesian_product_finite
 (cartesian_product_n_TCC1 0
  (cartesian_product_n_TCC1-1 nil 3763074006 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-nonempty-type-decl nil cartesian_product_finite nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil naturalnumbers nil))
   nil
   (cartesian_product_n subtype "cartesian_product_finite.i"
    "below[length(fsA)]")))
 (cartesian_product_one_disjoint 0
  (cartesian_product_one_disjoint-1 nil 3811085403
   ("" (skosimp)
    (("" (case "a!1 = x!1")
      (("1" (hide 2) (("1" (assert) nil nil)) nil)
       ("2" (hide 2)
        (("2" (expand "disjoint?")
          (("2" (expand "empty?")
            (("2" (skosimp)
              (("2" (expand "member")
                (("2" (expand "intersection")
                  (("2" (flatten)
                    (("2" (expand "member")
                      (("2" (expand "cartesian_product_one")
                        (("2" (skosimp*)
                          (("2" (hide (-1 -3))
                            (("2" (replaces -1)
                              (("2"
                                (expand "add_first")
                                (("2"
                                  (expand "insert?")
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (decompose-equality -2)
                                      (("2"
                                        (inst -1 0)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-nonempty-type-decl nil cartesian_product_finite nil)
    (disjoint? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (insert? const-decl "finseq" seq_extras structures)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    nil (add_first const-decl "finseq" seq_extras structures)
    (cartesian_product_one const-decl "set[finseq[T]]"
     cartesian_product_finite nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil))
   shostak))
 (cartesian_product_one_emptyset 0
  (cartesian_product_one_emptyset-1 nil 3782678605
   ("" (skosimp)
    (("" (decompose-equality 1)
      (("" (iff)
        (("" (prop)
          (("1" (expand "cartesian_product_one")
            (("1" (skosimp) (("1" (grind) nil nil)) nil)) nil)
           ("2" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   (nil nil
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (cartesian_product_one const-decl "set[finseq[T]]"
     cartesian_product_finite nil)
    (emptyset const-decl "set" sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-nonempty-type-decl nil cartesian_product_finite nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (empty? const-decl "bool" sets nil)
    (add_first const-decl "finseq" seq_extras structures)
    (insert? const-decl "finseq" seq_extras structures)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (member const-decl "bool" sets nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (cartesian_product_set_emptyset 0
  (cartesian_product_set_emptyset-1 nil 3782680848
   ("" (skosimp)
    (("" (decompose-equality 1)
      (("" (iff)
        (("" (prop)
          (("1" (expand "cartesian_product_set")
            (("1" (expand "Union")
              (("1" (skosimp)
                (("1" (typepred "a!1")
                  (("1" (skosimp)
                    (("1" (expand "empty?") (("1" (inst?) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "cartesian_product_set")
            (("2" (expand "Union")
              (("2" (skosimp)
                (("2" (typepred "a!1")
                  (("2" (skosimp)
                    (("2" (replaces -2)
                      (("2" (expand "cartesian_product_one")
                        (("2" (skosimp)
                          (("2" (expand "empty?")
                            (("2" (inst?) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (expand "emptyset") (("3" (propax) nil nil)) nil)
           ("4" (expand "emptyset") (("4" (propax) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   (nil nil
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (cartesian_product_set const-decl "set[finseq[T]]"
     cartesian_product_finite nil)
    (emptyset const-decl "set" sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-nonempty-type-decl nil cartesian_product_finite nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Union const-decl "set" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cartesian_product_one const-decl "set[finseq[T]]"
     cartesian_product_finite nil)
    (empty? const-decl "bool" sets nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (cartesian_product_n_emptyset 0
  (cartesian_product_n_emptyset-1 nil 3782681358
   ("" (skosimp*)
    (("" (expand "finseq_appl")
      (("" (decompose-equality 1)
        (("" (iff)
          (("" (prop)
            (("1" (expand "cartesian_product_n")
              (("1" (assert)
                (("1" (expand "finseq_appl")
                  (("1" (flatten)
                    (("1" (inst?)
                      (("1" (expand "empty?")
                        (("1" (inst?)
                          (("1" (typepred "i!1")
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "emptyset") (("2" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    nil nil (below type-eq-decl nil naturalnumbers nil) nil
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-nonempty-type-decl nil cartesian_product_finite nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (boolean nonempty-type-decl nil booleans nil)
    (emptyset const-decl "set" sets nil)
    (cartesian_product_n const-decl "set[finseq[T]]"
     cartesian_product_finite nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil) nil
    nil)
   shostak))
 (cartesian_product_n_add_is_union 0
  (cartesian_product_n_add_is_union-1 nil 3781740315
   ("" (skosimp)
    (("" (decompose-equality 2)
      (("" (iff)
        (("" (prop)
          (("1" (expand "cartesian_product_n" -1)
            (("1" (prop)
              (("1" (hide 1)
                (("1" (expand "add_first")
                  (("1" (expand "insert?") (("1" (assert) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "finseq_appl")
                (("2" (inst-cp -2 "0")
                  (("1" (expand "member")
                    (("1" (expand "add_first" (-3 1))
                      (("1" (expand "insert?")
                        (("1" (expand "cartesian_product_set")
                          (("1" (expand "Union")
                            (("1"
                              (inst 2
                               "cartesian_product_one(x!1`seq(0),cartesian_product_n(fsA!1))")
                              (("1"
                                (expand "cartesian_product_one")
                                (("1"
                                  (inst 2 "rest(x!1)")
                                  (("1"
                                    (split)
                                    (("1"
                                      (expand "member")
                                      (("1"
                                        (expand "cartesian_product_n")
                                        (("1"
                                          (prop)
                                          (("1"
                                            (hide -2)
                                            (("1"
                                              (expand "add_first")
                                              (("1"
                                                (expand "insert?")
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "finseq_appl")
                                            (("2"
                                              (skosimp)
                                              (("2"
                                                (expand "member")
                                                (("2"
                                                  (inst -2 "i!1 + 1")
                                                  (("1"
                                                    (expand
                                                     "add_first")
                                                    (("1"
                                                      (expand
                                                       "insert?")
                                                      (("1"
                                                        (expand
                                                         "finseq_appl")
                                                        (("1"
                                                          (lemma
                                                           "rest_pos[T]")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (prop)
                                                              (("1"
                                                                (expand
                                                                 "finseq_appl")
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     (-2
                                                                      -3
                                                                      2))
                                                                    (("2"
                                                                      (typepred
                                                                       "i!1")
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 (-3
                                                                  -4
                                                                  1))
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (typepred "i!1")
                                                    (("2"
                                                      (hide (-3 2))
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide (-2 -3))
                                      (("2"
                                        (lemma "seq_first_rest[T]")
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (expand "first")
                                            (("2"
                                              (expand "finseq_appl")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (hide 2)
                                                  (("2"
                                                    (expand
                                                     "add_first")
                                                    (("2"
                                                      (expand
                                                       "insert?")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (inst 1 "x!1`seq(0)")
                                (("2"
                                  (expand "member")
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 3)
                    (("2" (expand "add_first")
                      (("2" (expand "insert?") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "cartesian_product_set")
            (("2" (expand "Union")
              (("2" (skosimp)
                (("2" (typepred "a!1")
                  (("2" (expand "cartesian_product_n")
                    (("2" (prop)
                      (("1" (hide -2)
                        (("1" (expand "add_first")
                          (("1" (expand "insert?")
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (expand "finseq_appl")
                        (("2" (expand "add_first")
                          (("2" (expand "insert?")
                            (("2" (skosimp)
                              (("2"
                                (replaces -2)
                                (("2"
                                  (expand "cartesian_product_one")
                                  (("2"
                                    (skosimp)
                                    (("2"
                                      (expand "member")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (hide -3)
                                          (("2"
                                            (replaces -3)
                                            (("2"
                                              (expand "add_first")
                                              (("2"
                                                (expand "insert?")
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (expand "finseq_appl")
                        (("3" (skosimp)
                          (("3" (expand "member")
                            (("3" (skosimp)
                              (("3"
                                (replaces -2)
                                (("3"
                                  (expand "cartesian_product_one")
                                  (("3"
                                    (skosimp)
                                    (("3"
                                      (expand "member")
                                      (("3"
                                        (flatten)
                                        (("3"
                                          (expand "add_first" 1)
                                          (("3"
                                            (expand "insert?")
                                            (("3"
                                              (prop)
                                              (("1"
                                                (replaces -1)
                                                (("1"
                                                  (replaces -4)
                                                  (("1"
                                                    (expand
                                                     "add_first")
                                                    (("1"
                                                      (expand
                                                       "insert?")
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "finseq_appl")
                                                (("2"
                                                  (inst -3 "i!1 - 1")
                                                  (("1"
                                                    (replaces -4)
                                                    (("1"
                                                      (expand
                                                       "add_first")
                                                      (("1"
                                                        (expand
                                                         "insert?")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "finseq_appl")
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide (-1 3))
                                                    (("2"
                                                      (typepred "i!1")
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (cartesian_product_n const-decl "set[finseq[T]]"
     cartesian_product_finite nil)
    (add_first const-decl "finseq" seq_extras structures)
    (cartesian_product_set const-decl "set[finseq[T]]"
     cartesian_product_finite nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-nonempty-type-decl nil cartesian_product_finite nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (insert? const-decl "finseq" seq_extras structures)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    nil (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cartesian_product_one const-decl "set[finseq[T]]"
     cartesian_product_finite nil)
    nil (rest const-decl "finseq" seq_extras structures)
    (first const-decl "T" seq_extras structures)
    (seq_first_rest formula-decl nil seq_extras structures)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^ const-decl "finseq" finite_sequences nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    nil (rest_pos formula-decl nil seq_extras structures)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (TRUE const-decl "bool" booleans nil) nil nil)
   shostak))
 (rest_card_fs 0
  (rest_card_fs-1 nil 3811104446
   ("" (skosimp)
    (("" (decompose-equality 2)
      (("1" (grind) nil nil)
       ("2" (decompose-equality 1)
        (("2" (expand "rest" 1 1)
          (("2" (lift-if)
            (("2" (prop)
              (("1" (grind) nil nil)
               ("2" (expand "^")
                (("2" (lift-if)
                  (("2" (prop)
                    (("1" (typepred "x!1")
                      (("1" (case "rest(card_fs(fsNS!1))`length =0")
                        (("1" (assert) nil nil)
                         ("2" (hide 2) (("2" (grind) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (typepred "x!1")
                      (("2" (hide 1) (("2" (grind) nil nil)) nil)) nil)
                     ("3" (expand "card_fs")
                      (("3" (expand "finseq_appl")
                        (("3" (expand "rest")
                          (("3" (expand "^")
                            (("3" (lift-if) (("3" (prop) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((rest const-decl "finseq" seq_extras structures)
    (T formal-nonempty-type-decl nil cartesian_product_finite nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (card_fs const-decl "finseq[nat]" cartesian_product_finite nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (^ const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (< const-decl "bool" reals nil))
   shostak))
 (add_card_fs_TCC1 0
  (add_card_fs_TCC1-1 nil 3811104444
   ("" (skosimp*) (("" (rewrite "emptyset_is_empty?") nil nil)) nil)
   ((finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set[T]"
     finite_sets_inductions finite_sets)
    (finite_emptyset name-judgement "finite_set[T]" seq_extras
     structures)
    (emptyset_is_empty? formula-decl nil sets_lemmas nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil cartesian_product_finite nil))
   nil
   (add_card_fs subtype "cartesian_product_finite.A"
    "non_empty_finite_set[T]")))
 (add_card_fs 0
  (add_card_fs-1 nil 3811104480
   ("" (skosimp)
    (("" (decompose-equality 2) (("" (grind) nil nil)) nil)) nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (card_fs const-decl "finseq[nat]" cartesian_product_finite nil)
    (add_first const-decl "finseq" seq_extras structures)
    (insert? const-decl "finseq" seq_extras structures)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (is_finite const-decl "bool" finite_sets nil)
    (injective? const-decl "bool" functions nil)
    (T formal-nonempty-type-decl nil cartesian_product_finite nil)
    (boolean nonempty-type-decl nil booleans nil)
    (emptyset const-decl "set" sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil) nil
    nil)
   shostak))
 (cartesian_product_one_finite 0
  (cartesian_product_one_finite-1 nil 3811085042
   ("" (skosimp)
    (("" (lemma "surjection_from_finite_set[finseq[T],finseq[T]]")
      (("" (inst -1 "B!1" "cartesian_product_one(x!1, B!1)")
        (("" (assert)
          (("" (hide 2)
            (("" (inst 1 "(LAMBDA (y:(B!1)): add_first(x!1,y))")
              (("1" (expand "surjective?")
                (("1" (skosimp)
                  (("1" (typepred "y!1")
                    (("1" (expand "cartesian_product_one")
                      (("1" (skosimp)
                        (("1" (inst?)
                          (("1" (assert) nil nil)
                           ("2" (expand "member")
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skosimp)
                (("2" (expand "cartesian_product_one")
                  (("2" (typepred "y!1")
                    (("2" (inst?)
                      (("2" (expand "member") (("2" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finseq type-eq-decl nil finite_sequences nil)
    (T formal-nonempty-type-decl nil cartesian_product_finite nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (surjection_from_finite_set formula-decl nil finite_sets_eq
     finite_sets)
    nil (add_first const-decl "finseq" seq_extras structures) nil
    (member const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (surjective? const-decl "bool" functions nil)
    (cartesian_product_one const-decl "set[finseq[T]]"
     cartesian_product_finite nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil) nil)
   shostak))
 (cartesian_product_one_card_TCC1 0
  (cartesian_product_one_card_TCC1-1 nil 3811085512
   ("" (skosimp)
    (("" (lemma "cartesian_product_one_finite")
      (("" (inst?) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((cartesian_product_one_finite formula-decl nil
     cartesian_product_finite nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-nonempty-type-decl nil cartesian_product_finite nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   nil
   (cartesian_product_one_card subtype
    "cartesian_product_finite.cartesian_product_one(cartesian_product_finite.x, cartesian_product_finite.B)"
    "finite_set[finseq[T]]")))
 (cartesian_product_one_card 0
  (cartesian_product_one_card-1 nil 3811085514
   ("" (skosimp)
    (("" (case "B!1 = emptyset")
      (("1" (lemma "cartesian_product_one_emptyset")
        (("1" (inst?)
          (("1" (assert)
            (("1" (hide 2)
              (("1" (replaces -1)
                (("1" (expand "empty?")
                  (("1" (skosimp)
                    (("1" (expand "member")
                      (("1" (expand "emptyset")
                        (("1" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (lemma "card_eq_bij[finseq[T],finseq[T]]")
        (("2" (inst?)
          (("2" (assert)
            (("2" (hide 3)
              (("2"
                (inst 1
                 "(LAMBDA (y:(cartesian_product_one(x!1, B!1))): rest(y))")
                (("1" (expand "bijective?")
                  (("1" (prop)
                    (("1" (expand "injective?")
                      (("1" (skosimp)
                        (("1" (typepred "x1!1" "x2!1")
                          (("1" (expand "cartesian_product_one")
                            (("1" (skosimp*)
                              (("1"
                                (hide (-1 -3))
                                (("1"
                                  (replaces -1)
                                  (("1"
                                    (replaces -1)
                                    (("1"
                                      (rewrite "rest_add_first")
                                      (("1"
                                        (rewrite "rest_add_first")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "surjective?")
                      (("2" (skosimp)
                        (("2" (inst 1 "add_first(x!1, y!1)")
                          (("1" (rewrite "rest_add_first") nil nil)
                           ("2" (typepred "y!1")
                            (("2" (expand "cartesian_product_one")
                              (("2"
                                (inst?)
                                (("2"
                                  (expand "member")
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skosimp)
                  (("2" (typepred "y!1")
                    (("2" (expand "cartesian_product_one")
                      (("2" (skosimp)
                        (("2" (expand "member")
                          (("2" (replaces -2)
                            (("2" (rewrite "rest_add_first") nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((emptyset const-decl "set" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-nonempty-type-decl nil cartesian_product_finite nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (TRUE const-decl "bool" booleans nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil) nil
    nil
    (cartesian_product_one_emptyset formula-decl nil
     cartesian_product_finite nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (cartesian_product_one const-decl "set[finseq[T]]"
     cartesian_product_finite nil)
    (bijective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (add_first const-decl "finseq" seq_extras structures) nil
    (injective? const-decl "bool" functions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (rest_add_first formula-decl nil seq_extras structures)
    (rest const-decl "finseq" seq_extras structures) nil nil
    (card_eq_bij formula-decl nil finite_sets_card_eq finite_sets))
   shostak))
 (cartesian_product_set_finite_aux 0
  (cartesian_product_set_finite_aux-1 nil 3811090937
   ("" (skosimp)
    (("" (lemma "surjection_from_finite_set[T,set[finseq[T]]]")
      ((""
        (inst -1 "A!1" "{C |
                           EXISTS x:
                             member(x, A!1) AND C = cartesian_product_one(x, B!1)}")
        (("" (assert)
          (("" (hide 2)
            ((""
              (inst 1
               "(LAMBDA (x:(A!1)): cartesian_product_one(x,B!1))")
              (("1" (expand "surjective?")
                (("1" (skosimp)
                  (("1" (typepred "y!1")
                    (("1" (skosimp)
                      (("1" (inst?)
                        (("1" (assert) nil nil)
                         ("2" (expand "member")
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skosimp)
                (("2" (inst?)
                  (("2" (typepred "x!1") (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-nonempty-type-decl nil cartesian_product_finite nil)
    (surjection_from_finite_set formula-decl nil finite_sets_eq
     finite_sets)
    nil nil (NOT const-decl "[bool -> bool]" booleans nil)
    (surjective? const-decl "bool" functions nil)
    (cartesian_product_one const-decl "set[finseq[T]]"
     cartesian_product_finite nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (member const-decl "bool" sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil) nil
    (is_finite const-decl "bool" finite_sets nil))
   shostak))
 (cartesian_product_set_finite 0
  (cartesian_product_set_finite-1 nil 3811086611
   ("" (skosimp)
    (("" (case "empty?(A!1)")
      (("1" (lemma "cartesian_product_set_emptyset")
        (("1" (inst?)
          (("1" (assert)
            (("1" (replaces -1)
              (("1" (hide -)
                (("1" (rewrite "finite_emptyset") nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (case "empty?(B!1)")
        (("1" (lemma "cartesian_product_set_emptyset")
          (("1" (inst?)
            (("1" (assert)
              (("1" (replaces -1)
                (("1" (hide (- 1))
                  (("1" (rewrite "finite_emptyset") nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (lemma "Union_finite[finseq[T]]")
          (("2" (expand "cartesian_product_set")
            (("2" (inst?)
              (("2" (assert)
                (("2" (hide 4)
                  (("2" (prop)
                    (("1" (lemma "cartesian_product_set_finite_aux")
                      (("1" (inst -1 "A!1" "B!1")
                        (("1" (assert) nil nil)) nil))
                      nil)
                     ("2" (expand "every")
                      (("2" (skosimp)
                        (("2" (typepred "x!1")
                          (("2" (skosimp)
                            (("2"
                              (lemma "cartesian_product_one_finite")
                              (("2"
                                (inst?)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((empty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-nonempty-type-decl nil cartesian_product_finite nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (TRUE const-decl "bool" booleans nil)
    (finite_emptyset judgement-tcc nil finite_sets nil)
    (cartesian_product_set_emptyset formula-decl nil
     cartesian_product_finite nil)
    (Union_finite formula-decl nil finite_sets_of_sets nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cartesian_product_one const-decl "set[finseq[T]]"
     cartesian_product_finite nil)
    nil (NOT const-decl "[bool -> bool]" booleans nil)
    (cartesian_product_one_finite formula-decl nil
     cartesian_product_finite nil)
    (cartesian_product_set_finite_aux formula-decl nil
     cartesian_product_finite nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (cartesian_product_set const-decl "set[finseq[T]]"
     cartesian_product_finite nil))
   shostak))
 (cartesian_product_set_partition 0
  (cartesian_product_set_partition-1 nil 3811089638
   ("" (skosimp)
    (("" (expand "finite_partition?")
      (("" (prop)
        (("1" (expand "partition?")
          (("1" (skosimp)
            (("1" (typepred "a!1" "b!1")
              (("1" (skosimp*)
                (("1" (replaces -2)
                  (("1" (replaces -3)
                    (("1" (lemma "cartesian_product_one_disjoint")
                      (("1" (inst?) (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (lemma "cartesian_product_set_finite_aux")
          (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)
         ("3" (expand "every")
          (("3" (skosimp)
            (("3" (typepred "x!1")
              (("3" (skosimp)
                (("3" (replaces -2)
                  (("3" (lemma "cartesian_product_one_finite")
                    (("3" (inst?) (("3" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_partition? const-decl "bool" lagrange_scaf nil) nil
    (cartesian_product_one_finite formula-decl nil
     cartesian_product_finite nil)
    (cartesian_product_set_finite_aux formula-decl nil
     cartesian_product_finite nil)
    (partition? const-decl "bool" lagrange_scaf nil)
    (cartesian_product_one const-decl "set[finseq[T]]"
     cartesian_product_finite nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil cartesian_product_finite nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (cartesian_product_one_disjoint formula-decl nil
     cartesian_product_finite nil))
   shostak))
 (cartesian_product_set_card_aux_TCC1 0
  (cartesian_product_set_card_aux_TCC1-1 nil 3811101755
   ("" (skosimp*)
    (("" (lemma "cartesian_product_set_finite_aux")
      (("" (inst?) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((cartesian_product_set_finite_aux formula-decl nil
     cartesian_product_finite nil)
    (member const-decl "bool" sets nil)
    (finite_emptyset name-judgement "finite_set[T]" seq_extras
     structures)
    (finite_emptyset name-judgement "finite_set[T]"
     finite_sets_inductions finite_sets)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-nonempty-type-decl nil cartesian_product_finite nil))
   nil
   (cartesian_product_set_card_aux subtype
    "{C | EXISTS x: booleans.AND(sets[cartesian_product_finite.T].member(cartesian_product_finite.x, cartesian_product_finite.A), cartesian_product_finite.C = cartesian_product_finite.cartesian_product_one(cartesian_product_finite.x, cartesian_product_finite.B))}"
    "finite_set[set[finseq[T]]]")))
 (cartesian_product_set_card_aux 0
  (cartesian_product_set_card_aux-1 nil 3811101757
   ("" (skosimp)
    (("" (lemma "card_eq_bij[set[finseq[T]],T]")
      (("" (inst?)
        (("1" (assert)
          (("1" (hide 3)
            (("1"
              (inst 1 "(LAMBDA (C:({C |
                         EXISTS x:
                           member(x, A!1) AND
                            C = cartesian_product_one(x, B!1)})): choose(C)(0))")
              (("1" (expand "finseq_appl")
                (("1" (expand "bijective?")
                  (("1" (prop)
                    (("1" (expand "injective?")
                      (("1" (skosimp)
                        (("1"
                          (typepred "x1!1" "x2!1" "choose(x1!1)"
                           "choose(x2!1)")
                          (("1" (skosimp*)
                            (("1" (hide (-1 -3))
                              (("1"
                                (name-replace "D!1" "choose(x1!1)")
                                (("1"
                                  (name-replace "E!1" "choose(x2!1)")
                                  (("1"
                                    (replace -1 -3)
                                    (("1"
                                      (replace -2 -4)
                                      (("1"
                                        (expand
                                         "cartesian_product_one"
                                         (-3 -4))
                                        (("1"
                                          (skosimp*)
                                          (("1"
                                            (replaces -4)
                                            (("1"
                                              (replaces -5)
                                              (("1"
                                                (expand "add_first")
                                                (("1"
                                                  (expand "insert?")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "surjective?")
                      (("2" (skosimp)
                        (("2" (typepred "y!1")
                          (("2"
                            (inst 1 "cartesian_product_one(y!1,B!1)")
                            (("1"
                              (typepred
                               "choose(cartesian_product_one(y!1, B!1))")
                              (("1"
                                (name-replace
                                 "F!1"
                                 "choose(cartesian_product_one(y!1, B!1))")
                                (("1"
                                  (expand "cartesian_product_one")
                                  (("1"
                                    (skosimp)
                                    (("1"
                                      (replaces -2)
                                      (("1"
                                        (expand "add_first")
                                        (("1"
                                          (expand "insert?")
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (inst?) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skosimp)
                (("2" (expand "finseq_appl")
                  (("2" (typepred "choose[finseq[T]](C!1)" "C!1")
                    (("2" (skosimp)
                      (("2" (replaces -3)
                        (("2"
                          (name-replace "G!1"
                           "choose[finseq[T]](cartesian_product_one(x!1, B!1))")
                          (("2" (expand "cartesian_product_one")
                            (("2" (skosimp)
                              (("2"
                                (expand "member")
                                (("2"
                                  (replaces -2)
                                  (("2"
                                    (expand "add_first")
                                    (("2"
                                      (expand "insert?")
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (skosimp)
                (("3" (expand "nonempty?")
                  (("3" (typepred "C!1")
                    (("3" (skosimp)
                      (("3" (expand "member")
                        (("3" (rewrite "emptyset_is_empty?")
                          (("3" (replaces -2)
                            (("3" (lemma "nonempty_member[finseq[T]]")
                              (("3"
                                (inst -1 "B!1")
                                (("3"
                                  (prop)
                                  (("1"
                                    (skosimp)
                                    (("1"
                                      (expand "member")
                                      (("1"
                                        (decompose-equality -4)
                                        (("1"
                                          (expand
                                           "cartesian_product_one")
                                          (("1"
                                            (inst
                                             -1
                                             " add_first(x!1, x!2)")
                                            (("1"
                                              (expand "emptyset")
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (expand "member")
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "nonempty?")
                                    (("2"
                                      (rewrite "emptyset_is_empty?")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (skosimp*)
                (("4" (typepred "choose[finseq[T]](C!1)" "C!1")
                  (("4" (skosimp)
                    (("4" (replaces -3)
                      (("4"
                        (name-replace "H!1"
                         "choose[finseq[T]](cartesian_product_one(x!1, B!1))")
                        (("4" (expand "cartesian_product_one")
                          (("4" (skosimp)
                            (("4" (replaces -2)
                              (("4"
                                (expand "add_first")
                                (("4"
                                  (expand "insert?")
                                  (("4" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 3)
          (("2" (lemma "cartesian_product_set_finite_aux")
            (("2" (inst -1 "A!1" "B!1") (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-nonempty-type-decl nil cartesian_product_finite nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (card_eq_bij formula-decl nil finite_sets_card_eq finite_sets)
    (cartesian_product_set_finite_aux formula-decl nil
     cartesian_product_finite nil)
    nil nil
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (bijective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil) nil
    (injective? const-decl "bool" functions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (insert? const-decl "finseq" seq_extras structures)
    (add_first const-decl "finseq" seq_extras structures)
    (TRUE const-decl "bool" booleans nil)
    (emptyset_is_empty? formula-decl nil sets_lemmas nil)
    (nonempty_member formula-decl nil sets_lemmas nil)
    (emptyset const-decl "set" sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (member const-decl "bool" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cartesian_product_one const-decl "set[finseq[T]]"
     cartesian_product_finite nil)
    nil)
   shostak))
 (cartesian_product_set_card_TCC1 0
  (cartesian_product_set_card_TCC1-1 nil 3811101850
   ("" (skosimp*)
    (("" (expand "cartesian_product_set")
      (("" (lemma "Union_finite[finseq[T]]")
        (("" (inst?)
          (("" (assert)
            (("" (hide 3)
              (("" (prop)
                (("1" (lemma "cartesian_product_set_finite_aux")
                  (("1" (inst -1 "A!1" "B!1") (("1" (assert) nil nil))
                    nil))
                  nil)
                 ("2" (expand "every")
                  (("2" (skosimp)
                    (("2" (typepred "x!1")
                      (("2" (skosimp)
                        (("2" (lemma "cartesian_product_one_finite")
                          (("2" (inst?) (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cartesian_product_set const-decl "set[finseq[T]]"
     cartesian_product_finite nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cartesian_product_one const-decl "set[finseq[T]]"
     cartesian_product_finite nil)
    (every const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cartesian_product_one_finite formula-decl nil
     cartesian_product_finite nil)
    (cartesian_product_set_finite_aux formula-decl nil
     cartesian_product_finite nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set[T]"
     finite_sets_inductions finite_sets)
    (finite_emptyset name-judgement "finite_set[T]" seq_extras
     structures)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (Union_finite formula-decl nil finite_sets_of_sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-nonempty-type-decl nil cartesian_product_finite nil)
    (finseq type-eq-decl nil finite_sequences nil))
   nil
   (cartesian_product_set_card subtype
    "cartesian_product_finite.cartesian_product_set(cartesian_product_finite.A, cartesian_product_finite.B)"
    "finite_set[finseq[T]]")))
 (cartesian_product_set_card 0
  (cartesian_product_set_card-1 nil 3811101852
   ("" (skosimp)
    (("" (expand "cartesian_product_set")
      (("" (lemma "card_equal_partition")
        (("" (inst?)
          (("1" (assert)
            (("1" (hide 3)
              (("1" (split 1)
                (("1" (lemma "cartesian_product_set_card_aux")
                  (("1" (inst -1 "A!1" "B!1") (("1" (assert) nil nil))
                    nil))
                  nil)
                 ("2" (skosimp)
                  (("2" (typepred "A!2")
                    (("2" (skosimp)
                      (("2" (replaces -2)
                        (("2" (lemma "cartesian_product_one_card")
                          (("2" (inst?) (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (skosimp)
                  (("3" (typepred "A!2" "B!2")
                    (("3" (skosimp*)
                      (("3" (replaces -2)
                        (("3" (replaces -3)
                          (("3"
                            (lemma "cartesian_product_one_disjoint")
                            (("3" (inst?) (("3" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 3)
            (("2" (lemma "cartesian_product_set_partition")
              (("2" (inst -1 "A!1" "B!1") (("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cartesian_product_set const-decl "set[finseq[T]]"
     cartesian_product_finite nil)
    nil
    (cartesian_product_one const-decl "set[finseq[T]]"
     cartesian_product_finite nil)
    (= const-decl "[T, T -> boolean]" equalities nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (finite_partition? const-decl "bool" lagrange_scaf nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finite_partition type-eq-decl nil lagrange_scaf nil)
    (member const-decl "bool" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (cartesian_product_one_disjoint formula-decl nil
     cartesian_product_finite nil)
    (cartesian_product_one_card formula-decl nil
     cartesian_product_finite nil)
    (TRUE const-decl "bool" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cartesian_product_set_card_aux formula-decl nil
     cartesian_product_finite nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil) nil
    nil
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (cartesian_product_set_partition formula-decl nil
     cartesian_product_finite nil)
    (card_equal_partition formula-decl nil lagrange_scaf nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-nonempty-type-decl nil cartesian_product_finite nil)
    (finseq type-eq-decl nil finite_sequences nil))
   shostak))
 (cartesian_product_n_finite 0
  (cartesian_product_n_finite-1 nil 3811104566
   ("" (measure-induct+ "length(fsNS)" "fsNS")
    (("" (case "length(x!1) = 0")
      (("1" (hide -2)
        (("1" (expand "cartesian_product_n") (("1" (assert) nil nil))
          nil))
        nil)
       ("2" (case "length(x!1) = 1")
        (("1" (hide -2)
          (("1" (lemma "surjection_from_finite_set[T,finseq[T]]")
            (("1" (inst -1 "x!1`seq(0)" "cartesian_product_n(x!1)")
              (("1" (assert)
                (("1" (inst 1 "(LAMBDA (x:(x!1`seq(0))): seq1(x))")
                  (("1" (expand "surjective?")
                    (("1" (skosimp)
                      (("1" (typepred "y!1")
                        (("1" (hide 3)
                          (("1" (expand "cartesian_product_n")
                            (("1" (flatten)
                              (("1"
                                (expand "finseq_appl")
                                (("1"
                                  (inst -2 "0")
                                  (("1"
                                    (expand "member")
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (replaces -3)
                                        (("1"
                                          (decompose-equality 1)
                                          (("1"
                                            (expand "seq1")
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (decompose-equality 1)
                                            (("2"
                                              (typepred "x!2")
                                              (("2"
                                                (expand "seq1")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 3)
                    (("2" (skosimp)
                      (("2" (expand "cartesian_product_n")
                        (("2" (prop)
                          (("1" (expand "seq1")
                            (("1" (assert) nil nil)) nil)
                           ("2" (skosimp)
                            (("2" (expand "finseq_appl")
                              (("2"
                                (expand "member")
                                (("2"
                                  (expand "seq1")
                                  (("2"
                                    (typepred "x!2" "i!1")
                                    (("2"
                                      (expand "seq1")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil)
         ("2" (lemma "seq_first_rest[non_empty_finite_set[T]]")
          (("2" (inst?)
            (("2" (assert)
              (("2" (replace -1 3)
                (("2" (hide -1)
                  (("2" (lemma "cartesian_product_n_add_is_union")
                    (("2" (expand "first")
                      (("2" (expand "finseq_appl")
                        (("2" (inst -1 "x!1`seq(0)" "rest(x!1)")
                          (("2" (prop)
                            (("1"
                              (case-replace
                               "cartesian_product_n(add_first(x!1`seq(0), rest(x!1))) = cartesian_product_n(add_first[set[T]](x!1`seq(0), rest(x!1)))"
                               :hide? T)
                              (("1"
                                (replaces -1)
                                (("1"
                                  (expand "cartesian_product_set")
                                  (("1"
                                    (lemma
                                     "cartesian_product_set_partition")
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (prop)
                                        (("1"
                                          (hide -2)
                                          (("1"
                                            (expand
                                             "finite_partition?")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (lemma
                                                 "Union_finite[finseq[T]]")
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide (-1 4))
                                          (("2" (assert) nil nil))
                                          nil)
                                         ("3"
                                          (hide 4)
                                          (("3"
                                            (inst?)
                                            (("3"
                                              (assert)
                                              (("3"
                                                (hide 1)
                                                (("3" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide (-1 -2 2 3 4))
                                (("2" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (hide (-2 3)) (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil) nil
    nil (seq_first_rest formula-decl nil seq_extras structures)
    (first const-decl "T" seq_extras structures)
    (rest const-decl "finseq" seq_extras structures)
    (add_first const-decl "finseq" seq_extras structures)
    (cartesian_product_set const-decl "set[finseq[T]]"
     cartesian_product_finite nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^ const-decl "finseq" finite_sequences nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (cartesian_product_one const-decl "set[finseq[T]]"
     cartesian_product_finite nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (Union_finite formula-decl nil finite_sets_of_sets nil)
    (finite_partition? const-decl "bool" lagrange_scaf nil)
    (cartesian_product_set_partition formula-decl nil
     cartesian_product_finite nil)
    (insert? const-decl "finseq" seq_extras structures)
    (cartesian_product_n_add_is_union formula-decl nil
     cartesian_product_finite nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    nil (finite_sequence type-eq-decl nil finite_sequences nil)
    (> const-decl "bool" reals nil)
    (ne_seqs type-eq-decl nil seqs structures)
    (seq1 const-decl "ne_seqs" seqs structures) nil
    (below type-eq-decl nil naturalnumbers nil)
    (TRUE const-decl "bool" booleans nil)
    (member const-decl "bool" sets nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (surjective? const-decl "bool" functions nil)
    (surjection_from_finite_set formula-decl nil finite_sets_eq
     finite_sets)
    (cartesian_product_n const-decl "set[finseq[T]]"
     cartesian_product_finite nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-nonempty-type-decl nil cartesian_product_finite nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (cartesian_product_n_degenerated_TCC1 0
  (cartesian_product_n_degenerated_TCC1-1 nil 3811106801
   ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (cartesian_product_n_degenerated subtype "0"
    "below[length(fsNS)]")))
 (cartesian_product_n_degenerated 0
  (cartesian_product_n_degenerated-1 nil 3811106802
   ("" (skosimp)
    (("" (decompose-equality 1)
      (("" (iff)
        (("" (prop)
          (("1" (expand "cartesian_product_n")
            (("1" (expand "finseq_appl")
              (("1" (flatten)
                (("1" (inst -2 "0")
                  (("1" (expand "member")
                    (("1" (inst?)
                      (("1" (assert)
                        (("1" (decompose-equality 1)
                          (("1" (expand "seq1")
                            (("1" (assert) nil nil)) nil)
                           ("2" (decompose-equality 1)
                            (("2" (expand "seq1")
                              (("2"
                                (typepred "x!2")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "cartesian_product_n")
            (("2" (expand "finseq_appl")
              (("2" (prop)
                (("1" (skosimp)
                  (("1" (replaces -3) (("1" (grind) nil nil)) nil))
                  nil)
                 ("2" (skosimp)
                  (("2" (expand "member")
                    (("2" (skosimp)
                      (("2" (typepred "i!1") (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    nil (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil) (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (cartesian_product_n const-decl "set[finseq[T]]"
     cartesian_product_finite nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (> const-decl "bool" reals nil)
    (ne_seqs type-eq-decl nil seqs structures)
    (seq1 const-decl "ne_seqs" seqs structures)
    (boolean nonempty-type-decl nil booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-nonempty-type-decl nil cartesian_product_finite nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil) nil
    (below type-eq-decl nil naturalnumbers nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (cartesian_product_n_card_degenerated_TCC1 0
  (cartesian_product_n_card_degenerated_TCC1-1 nil 3811107040
   ("" (skosimp)
    (("" (lemma "cartesian_product_n_finite") (("" (inst?) nil nil))
      nil))
    nil)
   ((cartesian_product_n_finite formula-decl nil
     cartesian_product_finite nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-nonempty-type-decl nil cartesian_product_finite nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (finseq type-eq-decl nil finite_sequences nil))
   nil
   (cartesian_product_n_card_degenerated subtype
    "cartesian_product_finite.cartesian_product_n(cartesian_product_finite.fsNS)"
    "finite_set[finseq[T]]")))
 (cartesian_product_n_card_degenerated 0
  (cartesian_product_n_card_degenerated-1 nil 3811107042
   ("" (skosimp)
    (("" (expand "finseq_appl")
      (("" (lemma "card_eq_bij[T,finseq[T]]")
        (("" (inst -1 "fsNS!1`seq(0)" "cartesian_product_n(fsNS!1)")
          (("" (assert)
            (("" (inst 1 "(LAMBDA (x:(fsNS!1`seq(0))): seq1(x))")
              (("1" (expand "bijective?")
                (("1" (prop)
                  (("1" (expand "injective?")
                    (("1" (skosimp)
                      (("1" (hide 2)
                        (("1" (expand "seq1")
                          (("1" (decompose-equality -1)
                            (("1" (inst -1 "0") nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (expand "surjective?")
                      (("2" (skosimp)
                        (("2" (typepred "y!1")
                          (("2"
                            (lemma "cartesian_product_n_degenerated")
                            (("2" (inst?)
                              (("2"
                                (assert)
                                (("2"
                                  (replaces -1)
                                  (("2"
                                    (expand "finseq_appl")
                                    (("2"
                                      (skosimp)
                                      (("2"
                                        (inst?)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (skosimp)
                  (("2" (lemma "cartesian_product_n_degenerated")
                    (("2" (inst?)
                      (("2" (assert)
                        (("2" (replaces -1)
                          (("2" (expand "finseq_appl")
                            (("2" (typepred "x!1")
                              (("2" (inst?) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (cartesian_product_n const-decl "set[finseq[T]]"
     cartesian_product_finite nil)
    (seq1 const-decl "ne_seqs" seqs structures)
    (ne_seqs type-eq-decl nil seqs structures)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (finite_sequence type-eq-decl nil finite_sequences nil) nil
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (injective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (TRUE const-decl "bool" booleans nil) nil
    (member const-decl "bool" sets nil)
    (cartesian_product_n_degenerated formula-decl nil
     cartesian_product_finite nil)
    (bijective? const-decl "bool" functions nil)
    (card_eq_bij formula-decl nil finite_sets_card_eq finite_sets)
    (T formal-nonempty-type-decl nil cartesian_product_finite nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil))
   shostak))
 (cartesian_product_n_card_TCC1 0
  (cartesian_product_n_card_TCC1-1 nil 3811107601
   ("" (skosimp)
    (("" (lemma "cartesian_product_n_finite") (("" (inst?) nil nil))
      nil))
    nil)
   ((cartesian_product_n_finite formula-decl nil
     cartesian_product_finite nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-nonempty-type-decl nil cartesian_product_finite nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (finseq type-eq-decl nil finite_sequences nil))
   nil
   (cartesian_product_n_card subtype
    "cartesian_product_finite.cartesian_product_n(cartesian_product_finite.fsNS)"
    "finite_set[finseq[T]]")))
 (cartesian_product_n_card_TCC2 0
  (cartesian_product_n_card_TCC2-1 nil 3811107601
   ("" (skosimp*)
    (("" (expand "card_fs")
      (("" (expand "finseq_appl")
        (("" (typepred "fsNS!1`seq(x1!1)")
          (("" (lemma "empty_card[T]")
            (("" (inst?) (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((card_fs const-decl "finseq[nat]" cartesian_product_finite nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil cartesian_product_finite nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty_card formula-decl nil finite_sets nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   nil
   (cartesian_product_n_card subtype
    "cartesian_product_finite.card_fs(cartesian_product_finite.fsNS)"
    "finite_sequence[posnat]")))
 (cartesian_product_n_card 0
  (cartesian_product_n_card-1 nil 3811107645
   ("" (measure-induct+ "length(fsNS)" "fsNS")
    (("1" (case "length(x!1) = 1")
      (("1" (hide -2)
        (("1" (lemma "cartesian_product_n_card_degenerated")
          (("1" (inst?)
            (("1" (assert)
              (("1" (expand "finseq_appl")
                (("1" (replaces -1)
                  (("1" (expand "product")
                    (("1" (lift-if)
                      (("1" (prop)
                        (("1" (hide 1)
                          (("1" (expand "card_fs")
                            (("1" (propax) nil nil)) nil))
                          nil)
                         ("2" (expand "card_fs" 2 2)
                          (("2" (replaces -1)
                            (("2" (assert)
                              (("2"
                                (expand "product_rec")
                                (("2"
                                  (expand "card_fs")
                                  (("2"
                                    (expand "finseq_appl")
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (inst -1 "rest(x!1)")
        (("2" (prop)
          (("1" (lemma "seq_first_rest[non_empty_finite_set[T]]")
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -1 3)
                  (("1" (lemma "cartesian_product_n_add_is_union")
                    (("1" (expand "first")
                      (("1" (expand "finseq_appl")
                        (("1" (inst -1 "x!1`seq(0)" "rest(x!1)")
                          (("1" (assert)
                            (("1" (prop)
                              (("1"
                                (case-replace
                                 "cartesian_product_n(add_first(x!1`seq(0), rest(x!1))) = cartesian_product_n(add_first[set[T]](x!1`seq(0), rest(x!1)))"
                                 :hide?
                                 T)
                                (("1"
                                  (replaces -1)
                                  (("1"
                                    (lemma
                                     "cartesian_product_set_card")
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (prop)
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (lemma "add_card_fs")
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (replaces -1)
                                                  (("1"
                                                    (lemma
                                                     "add_first_is_o[nat]")
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (replaces -1)
                                                        (("1"
                                                          (replaces -2)
                                                          (("1"
                                                            (lemma
                                                             "product_mult")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "#(card(first(x!1)))"
                                                               "card_fs(rest(x!1))")
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (skosimp)
                                                                (("2"
                                                                  (hide
                                                                   (-1
                                                                    4))
                                                                  (("2"
                                                                    (typepred
                                                                     "x1!1")
                                                                    (("2"
                                                                      (expand
                                                                       "#")
                                                                      (("2"
                                                                        (expand
                                                                         "first")
                                                                        (("2"
                                                                          (expand
                                                                           "finseq_appl")
                                                                          (("2"
                                                                            (typepred
                                                                             "x!1`seq(0)")
                                                                            (("2"
                                                                              (lemma
                                                                               "nonempty_card[T]")
                                                                              (("2"
                                                                                (inst?)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "nonempty?")
                                                                                    (("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide (-3 3))
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (hide (- 4))
                                                  (("3"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("4"
                                                  (hide (-2 -3 +))
                                                  (("4"
                                                    (typepred
                                                     "x!1`seq(0)")
                                                    (("4"
                                                      (hide -1)
                                                      (("4"
                                                        (rewrite
                                                         "emptyset_is_empty?")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide (- 4))
                                          (("2" (assert) nil nil))
                                          nil)
                                         ("3"
                                          (hide (-2 4))
                                          (("3"
                                            (lemma
                                             "cartesian_product_n_finite")
                                            (("3" (inst?) nil nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (hide (-2 3))
                                          (("4"
                                            (replaces -1)
                                            (("4"
                                              (rewrite "card_emptyset")
                                              (("4"
                                                (lemma "product_ge")
                                                (("4"
                                                  (inst
                                                   -1
                                                   "card_fs(rest(x!1))"
                                                   "0")
                                                  (("1"
                                                    (replace -2 -1 rl)
                                                    (("1"
                                                      (hide -2)
                                                      (("1"
                                                        (expand
                                                         "card_fs")
                                                        (("1"
                                                          (expand
                                                           "finseq_appl")
                                                          (("1"
                                                            (expand
                                                             "rest")
                                                            (("1"
                                                              (expand
                                                               "^")
                                                              (("1"
                                                                (typepred
                                                                 "x!1`seq(1)")
                                                                (("1"
                                                                  (lemma
                                                                   "empty_card[T]")
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide -1)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide (-1 -2 -3 2 3 4))
                                  (("2" (grind) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (hide (-3 3))
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 3) (("2" (grind) nil nil)) nil)
           ("3" (hide 4) (("3" (grind) nil nil)) nil))
          nil))
        nil))
      nil)
     ("2" (hide 3)
      (("2" (skosimp)
        (("2" (expand "card_fs")
          (("2" (expand "finseq_appl")
            (("2" (typepred "fsNS!1`seq(x1!1)")
              (("2" (lemma "empty_card[T]")
                (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 3)
      (("3" (lemma "cartesian_product_n_finite")
        (("3" (inst?) nil nil)) nil))
      nil))
    nil)
   ((cartesian_product_n_card_degenerated formula-decl nil
     cartesian_product_finite nil)
    (TRUE const-decl "bool" booleans nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (product_rec def-decl "posnat" product_seq_scaf reals)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (first const-decl "T" seq_extras structures)
    (member const-decl "bool" sets nil)
    (card_emptyset formula-decl nil finite_sets nil)
    (below type-eq-decl nil naturalnumbers nil)
    (empty_card formula-decl nil finite_sets nil)
    (product_ge formula-decl nil product_seq reals)
    (cartesian_product_n_finite formula-decl nil
     cartesian_product_finite nil)
    (emptyset_is_empty? formula-decl nil sets_lemmas nil) nil nil
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (not_empty_seq type-eq-decl nil seq_extras structures) nil
    (|#| const-decl "finite_sequence[T]" set2seq structures)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (insert? const-decl "finseq" seq_extras structures)
    (O const-decl "finseq" finite_sequences nil)
    (^ const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nonempty_card formula-decl nil finite_sets nil)
    (nonempty? const-decl "bool" sets nil)
    (product_mult formula-decl nil product_seq reals)
    (add_first_is_o formula-decl nil seq_extras structures)
    (add_card_fs formula-decl nil cartesian_product_finite nil)
    (cartesian_product_set_card formula-decl nil
     cartesian_product_finite nil)
    (add_first const-decl "finseq" seq_extras structures)
    (cartesian_product_n_add_is_union formula-decl nil
     cartesian_product_finite nil)
    (seq_first_rest formula-decl nil seq_extras structures)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (rest const-decl "finseq" seq_extras structures)
    (product const-decl "posnat" product_seq reals)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (card_fs const-decl "finseq[nat]" cartesian_product_finite nil)
    (> const-decl "bool" reals nil)
    (cartesian_product_n const-decl "set[finseq[T]]"
     cartesian_product_finite nil)
    (/= const-decl "boolean" notequal nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-nonempty-type-decl nil cartesian_product_finite nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak)))

