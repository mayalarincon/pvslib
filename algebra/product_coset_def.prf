(product_coset_def
 (product_TCC1 0
  (product_TCC1-1 nil 3748942485 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (coset? const-decl "bool" cosets_def nil)
    (coset type-eq-decl nil cosets_def nil)
    (right_coset? const-decl "bool" cosets_def nil)
    (+ formal-const-decl "[T, T -> T]" product_coset_def nil)
    (T formal-nonempty-type-decl nil product_coset_def nil)
    (left_coset? const-decl "bool" cosets_def nil))
   nil
   (product subtype "product_coset_def.A"
    "cosets_def[product_coset_def.T, product_coset_def.+].left_coset(product_coset_def.R, product_coset_def.I)")))
 (product_TCC2 0
  (product_TCC2-1 nil 3748942485 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (coset? const-decl "bool" cosets_def nil)
    (coset type-eq-decl nil cosets_def nil)
    (right_coset? const-decl "bool" cosets_def nil)
    (+ formal-const-decl "[T, T -> T]" product_coset_def nil)
    (T formal-nonempty-type-decl nil product_coset_def nil)
    (left_coset? const-decl "bool" cosets_def nil))
   nil
   (product subtype "product_coset_def.B"
    "cosets_def[product_coset_def.T, product_coset_def.+].left_coset(product_coset_def.R, product_coset_def.I)"))))

