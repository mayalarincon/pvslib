(rel_prime_divides_power_properties
 (seq_power_TCC1 0
  (seq_power_TCC1-1 nil 3529776145 ("" (subtype-tcc) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (default const-decl "T" fseqs structures))
   nil
   (seq_power subtype
    "(LAMBDA (j: naturalnumbers.nat): IF reals.<(j, rel_prime_divides_power_properties.i) THEN rel_prime_divides_power_properties.p ELSE fseqs[posnat].default ENDIF)"
    "fseqs[posnat].barray(rel_prime_divides_power_properties.i)")))
 (only_power_p_TCC1 0
  (only_power_p_TCC1-1 nil 3530711428 ("" (subtype-tcc) nil nil) nil
   nil
   (only_power_p subtype "rel_prime_divides_power_properties.i"
    "{i: integers.int | booleans.OR(rel_prime_divides_power_properties.p /= 0, reals.>=(i, 0))}")))
 (divides_element 0
  (divides_element-1 nil 3529776160
   ("" (skosimp)
    (("" (expand "divides")
      (("" (skosimp*)
        (("" (inst 1 "x!2 - x!3")
          (("" (replaces -2) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   (nil (int_minus_int_is_int application-judgement "int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil))
   shostak))
 (divides_product 0
  (divides_product-2 "" 3790334676
   ("" (skosimp*)
    (("" (case "fs!1`length = 0")
      (("1" (grind) nil nil)
       ("2" (expand* "divides" "product")
        (("2" (typepred "j!1")
          (("2" (typepred "fs!1`length")
            (("2" (lemma "product_middle")
              (("2" (inst?)
                (("2" (inst -1 "j!1")
                  (("2" (assert)
                    (("2" (replaces -1)
                      (("2"
                        (inst 2
                         "product(0, j!1 - 1, fs!1`seq) * product(1 + j!1, length(fs!1) - 1, fs!1`seq)")
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((product const-decl "posnat" product_fseq_posnat reals) nil
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (T_low type-eq-decl nil product reals)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (T_high type-eq-decl nil product reals)
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    nil
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (product def-decl "real" product reals)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (product_middle formula-decl nil product reals)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (barray type-eq-decl nil fseqs structures)
    (fseq type-eq-decl nil fseqs structures))
   shostak)
  (divides_product-1 nil 3530718323
   ("" (skosimp*)
    (("" (case "fs!1`length = 0")
      (("1" (grind) nil nil)
       ("2" (expand* "divides" "product")
        (("2" (typepred "j!1")
          (("2" (typepred "fs!1`length")
            (("2" (lemma "product_middle")
              (("2" (inst?)
                (("2" (inst -1 "j!1")
                  (("2" (assert)
                    (("2" (replaces -1)
                      (("2"
                        (inst 2
                         "product(0, j!1 - 1, fs!1`seq) * product(1 + j!1, length(fs!1) - 1, fs!1`seq)")
                        (("1" (assert) nil nil) ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fseq type-eq-decl nil fseqs structures)
    (barray type-eq-decl nil fseqs structures)
    (product_middle formula-decl nil product reals)
    (product def-decl "real" product reals)
    (T_high type-eq-decl nil product reals)
    (T_low type-eq-decl nil product reals)
    (product const-decl "posnat" product_fseq_posnat reals))
   shostak))
 (product_power_TCC1 0
  (product_power_TCC1-1 nil 3529776145 ("" (subtype-tcc) nil nil) nil
   nil
   (product_power subtype "rel_prime_divides_power_properties.i"
    "{i: integers.int | booleans.OR(rel_prime_divides_power_properties.p /= 0, reals.>=(i, 0))}")))
 (product_power 0
  (product_power-1 nil 3529776213
   ("" (induct "i")
    (("1" (typepred "i!1") (("1" (propax) nil nil)) nil)
     ("2" (assert) nil nil)
     ("3" (skosimp*)
      (("3" (case-replace "j!1 = 0" :hide? T)
        (("1" (hide (-1 -2)) (("1" (grind) nil nil)) nil)
         ("2" (assert)
          (("2" (inst -1 "p!1")
            (("2" (rewrite "expt_plus")
              (("2" (rewrite "expt_x1")
                (("2"
                  (case-replace
                   "seq_power(p!1, 1 + j!1) = seq_power(p!1, j!1) o fseq1(p!1)"
                   :hide? T)
                  (("1" (lemma "product_fseq_concat1")
                    (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
                   ("2" (hide 3)
                    (("2" (decompose-equality 1)
                      (("1" (grind) nil nil)
                       ("2" (decompose-equality 1)
                        (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (barray type-eq-decl nil fseqs structures)
    (fseq type-eq-decl nil fseqs structures)
    (product const-decl "posnat" product_fseq_posnat reals)
    (seq_power const-decl "fseq" rel_prime_divides_power_properties
     nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (expt_plus formula-decl nil exponentiation nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (product_fseq_concat1 formula-decl nil product_fseq_posnat reals)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (O const-decl "fseq" fseqs structures)
    (fseq1 const-decl "fseq" fseqs structures)
    (expt_x1 formula-decl nil exponentiation nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    nil
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (product def-decl "real" product reals)
    (default const-decl "T" fseqs structures)
    (expt def-decl "real" exponentiation nil))
   shostak))
 (product_only_power_TCC1 0
  (product_only_power_TCC1-1 nil 3530711428 ("" (subtype-tcc) nil nil)
   ((^ const-decl "real" exponentiation nil)
    (only_power_p const-decl "bool" rel_prime_divides_power_properties
     nil))
   nil
   (product_only_power subtype "rel_prime_divides_power_properties.n"
    "{i: integers.int | booleans.OR(rel_prime_divides_power_properties.p /= 0, reals.>=(i, 0))}")))
 (product_only_power 0
  (product_only_power-1 nil 3530711533
   ("" (measure-induct+ "fs`length" "fs")
    (("" (skosimp*)
      (("" (case "x!1`length = 0")
        (("1" (hide (-2 -3))
          (("1" (inst 1 "0")
            (("1" (expand "product")
              (("1" (assert) (("1" (rewrite "expt_x0") nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (inst -1 "fseqs_ops_def[posnat,default].rest(x!1)")
          (("2" (inst -1 "p!1")
            (("2" (prop)
              (("1" (skosimp)
                (("1"
                  (case "x!1 = fseq1(x!1`seq(0)) o fseqs_ops_def[posnat, default].rest(x!1)")
                  (("1" (replace -1 2)
                    (("1" (expand "only_power_p")
                      (("1" (inst -3 "0")
                        (("1" (skosimp)
                          (("1" (inst 2 "n!1 + i!1")
                            (("1" (rewrite "product_fseq_concat")
                              (("1"
                                (hide -1)
                                (("1"
                                  (replaces -1)
                                  (("1"
                                    (replaces -1)
                                    (("1"
                                      (expand "product")
                                      (("1"
                                        (expand "fseq1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (rewrite "expt_plus")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide (-1 -2 3)) (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide (-1 -2 3))
                    (("2" (decompose-equality 1)
                      (("1" (grind) nil nil)
                       ("2"
                        (lemma
                         "fseqs_ops_def[posnat, default].add_first_rest")
                        (("2" (inst?)
                          (("2" (replace -1 1 rl)
                            (("2" (hide -1)
                              (("2"
                                (decompose-equality 1)
                                (("2"
                                  (expand*
                                   "add"
                                   "first"
                                   "fseq1"
                                   "rest"
                                   "o"
                                   "^")
                                  (("2"
                                    (lift-if)
                                    (("2"
                                      (lift-if)
                                      (("2"
                                        (lift-if)
                                        (("2"
                                          (lift-if)
                                          (("2"
                                            (lift-if)
                                            (("2"
                                              (lift-if)
                                              (("2"
                                                (lift-if)
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (lift-if)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 3)
                (("2" (expand "only_power_p")
                  (("2" (skosimp)
                    (("2" (inst -1 "j!1 + 1")
                      (("1" (skosimp)
                        (("1" (inst 1 "i!1")
                          (("1"
                            (case-replace
                             "fseqs_ops_def[posnat, default].rest(x!1)`seq(j!1) = x!1`seq(j!1 + 1)")
                            (("1" (hide (-1 2))
                              (("1"
                                (expand "rest")
                                (("1"
                                  (expand "^")
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (prop)
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (typepred "j!1")
                                        (("2" (grind) nil nil))
                                        nil)
                                       ("3"
                                        (typepred "j!1")
                                        (("3"
                                          (expand "rest")
                                          (("3"
                                            (expand "^")
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (typepred "j!1")
                          (("2" (expand "rest") (("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide (-1 3)) (("3" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_exp application-judgement "posint" exponentiation nil)
    (expt_x0 formula-decl nil exponentiation nil)
    (^ const-decl "fseq" fseqs_def structures)
    (empty_seq const-decl "fsq" fseqs_def structures)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (ne_fseq type-eq-decl nil fseqs_def structures) nil
    (insert const-decl "fseq" fseqs_ops_def structures)
    (add const-decl "fseq" fseqs_ops_def structures)
    (first const-decl "T" fseqs_ops_def structures)
    (add_first_rest formula-decl nil fseqs_ops_def structures)
    (product_fseq_concat formula-decl nil product_fseq_posnat reals)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (TRUE const-decl "bool" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    nil (product_eq_arg formula-decl nil product reals)
    (expt_plus formula-decl nil exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (below type-eq-decl nil naturalnumbers nil) nil
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fseq1 const-decl "fseq" fseqs structures)
    (O const-decl "fseq" fseqs structures)
    (NOT const-decl "[bool -> bool]" booleans nil) nil
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (default const-decl "T" fseqs structures)
    (barray type-eq-decl nil fseqs_def structures)
    (fseq type-eq-decl nil fseqs_def structures)
    (rest const-decl "fseq" fseqs_ops_def structures)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (product const-decl "posnat" product_fseq_posnat reals)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (only_power_p const-decl "bool" rel_prime_divides_power_properties
     nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (fseq type-eq-decl nil fseqs structures)
    (barray type-eq-decl nil fseqs structures)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (divides_power 0
  (divides_power-1 nil 3530367448
   ("" (skosimp)
    (("" (expand "divides")
      (("" (case-replace "i!1 = 1" :hide? T)
        (("1" (inst 1 "1") (("1" (grind) nil nil)) nil)
         ("2" (inst 2 "p!1 ^ (i!1 - 1)")
          (("1" (lemma "expt_plus")
            (("1" (inst -1 "1" "i!1 - 1" "p!1") (("1" (grind) nil nil))
              nil))
            nil)
           ("2" (typepred "p!1" "i!1") (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   (nil (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (int_minus_int_is_int application-judgement "int" integers nil) nil
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil) nil
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (expt_plus formula-decl nil exponentiation nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   shostak))
 (divides_prime_power_TCC1 0
  (divides_prime_power_TCC1-1 nil 3529776145 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)
    (divides const-decl "bool" divides nil)
    (prime? const-decl "bool" primes ints))
   nil
   (divides_prime_power subtype "rel_prime_divides_power_properties.j"
    "{i: integers.int | booleans.OR(rel_prime_divides_power_properties.p /= 0, reals.>=(i, 0))}")))
 (divides_prime_power_TCC2 0
  (divides_prime_power_TCC2-1 nil 3529776145 ("" (subtype-tcc) nil nil)
   ((^ const-decl "real" exponentiation nil)
    (divides const-decl "bool" divides nil)
    (/= const-decl "boolean" notequal nil)
    (prime? const-decl "bool" primes ints))
   nil
   (divides_prime_power subtype "rel_prime_divides_power_properties.i"
    "{i: integers.int | booleans.OR(rel_prime_divides_power_properties.p /= 0, reals.>=(i, 0))}")))
 (divides_prime_power 0
  (divides_prime_power-1 nil 3529776240
   ("" (skosimp*)
    (("" (case "j!1=0")
      (("1" (replaces -1)
        (("1" (inst 1 "0")
          (("1" (rewrite "expt_x0")
            (("1" (rewrite "one_div_one") (("1" (assert) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "divides")
        (("2" (skosimp)
          (("2" (lemma "prime_factors")
            (("2" (copy -1)
              (("2" (inst -1 "q!1")
                (("2" (inst -2 "x!1")
                  (("1" (skosimp*)
                    (("1" (lemma "product_power")
                      (("1" (inst?)
                        (("1" (copy -7)
                          (("1" (replace -2 -1)
                            (("1" (replace -3 -1)
                              (("1"
                                (replace -5 -1)
                                (("1"
                                  (lemma "product_fseq_concat")
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (replace -1 -2 rl)
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (lemma "product_sort")
                                          (("1"
                                            (inst -1 "fs!1 o fs!2")
                                            (("1"
                                              (replace -1 -2 rl)
                                              (("1"
                                                (hide -1)
                                                (("1"
                                                  (lemma
                                                   "Fundamental_Theorem_Arithmetic")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "seq_power(p!1, j!1)"
                                                     "sort(fs!1 o fs!2)"
                                                     "product(seq_power(p!1, j!1))")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (case
                                                           "length(fs!1) = 0")
                                                          (("1"
                                                            (hide-all-but
                                                             (-1 -5 2))
                                                            (("1"
                                                              (expand
                                                               "product")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (inst
                                                                   1
                                                                   "0")
                                                                  (("1"
                                                                    (rewrite
                                                                     "expt_x0")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (case
                                                             "fs!1 = seq_power(p!1,length(fs!1))")
                                                            (("1"
                                                              (replace
                                                               -1
                                                               -5)
                                                              (("1"
                                                                (hide-all-but
                                                                 (-2
                                                                  -5
                                                                  1
                                                                  3))
                                                                (("1"
                                                                  (lemma
                                                                   "product_power")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "length(fs!1)"
                                                                     "p!1")
                                                                    (("1"
                                                                      (replace
                                                                       -1
                                                                       -3
                                                                       rl)
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (hide
                                                                             (-1
                                                                              -3))
                                                                            (("1"
                                                                              (case
                                                                               "length(seq_power(p!1, j!1)) = length(sort(fs!1 o fs!2))")
                                                                              (("1"
                                                                                (hide
                                                                                 -2)
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (replaces
                                                                                 -1)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               (-1 1))
                                                              (("2"
                                                                (decompose-equality
                                                                 1)
                                                                (("1"
                                                                  (hide
                                                                   -1)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (decompose-equality
                                                                   1)
                                                                  (("2"
                                                                    (case
                                                                     "x!2 >= fs!1`length")
                                                                    (("1"
                                                                      (hide
                                                                       -2)
                                                                      (("1"
                                                                        (typepred
                                                                         "fs!1`seq")
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (lemma
                                                                       "sort_fseq_in?")
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "fs!1 o fs!2"
                                                                         "fs!1`seq(x!2)")
                                                                        (("2"
                                                                          (prop)
                                                                          (("1"
                                                                            (expand
                                                                             "in?")
                                                                            (("1"
                                                                              (skosimp*)
                                                                              (("1"
                                                                                (replace
                                                                                 -3
                                                                                 -2
                                                                                 rl)
                                                                                (("1"
                                                                                  (replace
                                                                                   -2
                                                                                   2)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "seq_power"
                                                                                     2)
                                                                                    (("1"
                                                                                      (lift-if)
                                                                                      (("1"
                                                                                        (lift-if)
                                                                                        (("1"
                                                                                          (lift-if)
                                                                                          (("1"
                                                                                            (prop)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (typepred
                                                                                               "ii!2")
                                                                                              (("2"
                                                                                                (replace
                                                                                                 -5
                                                                                                 -1
                                                                                                 rl)
                                                                                                (("2"
                                                                                                  (hide-all-but
                                                                                                   (-1
                                                                                                    2))
                                                                                                  (("2"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             (1
                                                                              4))
                                                                            (("2"
                                                                              (expand
                                                                               "in?")
                                                                              (("2"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (expand
                                                                                   "o"
                                                                                   1)
                                                                                  (("1"
                                                                                    (lift-if)
                                                                                    (("1"
                                                                                      (prop)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   -)
                                                                                  (("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (-7 1))
                                                          (("2"
                                                            (expand
                                                             "ordered_list_of_primes?")
                                                            (("2"
                                                              (prop)
                                                              (("1"
                                                                (expand
                                                                 "list_of_primes?")
                                                                (("1"
                                                                  (skosimp)
                                                                  (("1"
                                                                    (expand
                                                                     "seq_power")
                                                                    (("1"
                                                                      (prop)
                                                                      (("1"
                                                                        (typepred
                                                                         "i!1")
                                                                        (("1"
                                                                          (hide
                                                                           (-2
                                                                            2))
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "non_decreasing?")
                                                                (("2"
                                                                  (skosimp*)
                                                                  (("2"
                                                                    (expand
                                                                     "seq_power")
                                                                    (("2"
                                                                      (lift-if)
                                                                      (("2"
                                                                        (lift-if)
                                                                        (("2"
                                                                          (lift-if)
                                                                          (("2"
                                                                            (prop)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (typepred
                                                                               "j!2")
                                                                              (("2"
                                                                                (hide
                                                                                 (-4
                                                                                  2))
                                                                                (("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (typepred
                                                                               "i!1")
                                                                              (("3"
                                                                                (hide
                                                                                 (-3
                                                                                  1))
                                                                                (("3"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("4"
                                                                              (typepred
                                                                               "i!1")
                                                                              (("4"
                                                                                (hide
                                                                                 (-3
                                                                                  2))
                                                                                (("4"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (hide
                                                           (-1
                                                            -2
                                                            -3
                                                            -5
                                                            -8
                                                            3))
                                                          (("3"
                                                            (expand
                                                             "ordered_list_of_primes?")
                                                            (("3"
                                                              (prop)
                                                              (("1"
                                                                (hide
                                                                 (-2
                                                                  -4
                                                                  -5
                                                                  2))
                                                                (("1"
                                                                  (expand
                                                                   "list_of_primes?")
                                                                  (("1"
                                                                    (skosimp)
                                                                    (("1"
                                                                      (lemma
                                                                       "sort_fseq_in")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "fs!1 o fs!2"
                                                                         "i!1")
                                                                        (("1"
                                                                          (expand
                                                                           "in?")
                                                                          (("1"
                                                                            (skosimp)
                                                                            (("1"
                                                                              (replaces
                                                                               -1)
                                                                              (("1"
                                                                                (expand
                                                                                 "o")
                                                                                (("1"
                                                                                  (prop)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -2
                                                                                     "ii!1")
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (inst
                                                                                     -3
                                                                                     "ii!1 - fs!1`length")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("3"
                                                                                    (typepred
                                                                                     "ii!1")
                                                                                    (("3"
                                                                                      (expand
                                                                                       "o")
                                                                                      (("3"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (typepred
                                                                           "i!1")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (typepred
                                                                 "sort(fs!1 o fs!2)")
                                                                (("2"
                                                                  (hide-all-but
                                                                   (-2
                                                                    1))
                                                                  (("2"
                                                                    (expand*
                                                                     "increasing?"
                                                                     "non_decreasing?")
                                                                    (("2"
                                                                      (skosimp)
                                                                      (("2"
                                                                        (typepred
                                                                         "j!2")
                                                                        (("2"
                                                                          (inst?)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide (-1 -2 3))
                    (("2" (typepred "p!1 ^ j!1")
                      (("2" (replaces -2)
                        (("2" (typepred "q!1")
                          (("2" (lemma "pos_times_gt")
                            (("2" (inst?) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   (nil (prime_factors formula-decl nil prime_factorization numbers)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (product_power formula-decl nil rel_prime_divides_power_properties
     nil)
    nil (fseq type-eq-decl nil fseqs structures)
    (barray type-eq-decl nil fseqs structures)
    (O const-decl "fseq" fseqs structures)
    (total_order_restrict application-judgement "(total_order?[S])"
     restrict_order_props nil)
    (product const-decl "posnat" product_fseq_posnat reals)
    (sort const-decl
          "{ss: fseq | permutation?[T, <=](s, ss) AND increasing?(ss)}"
      sort_fseq structures)
    (increasing? const-decl "bool" sort_fseq structures)
    (permutation? const-decl "bool" permutations_fseq structures)
    (<= const-decl "bool" reals nil)
    (restrict const-decl "R" restrict nil)
    (fsq type-eq-decl nil fsq structures)
    (seq_power const-decl "fseq" rel_prime_divides_power_properties
     nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil) nil nil
    (sort_fseq_in formula-decl nil sort_fseq structures)
    (non_decreasing? const-decl "bool" product_perm_lems numbers)
    (list_of_primes? const-decl "bool" prime_factorization numbers)
    (ordered_list_of_primes? const-decl "bool" prime_factorization
     numbers)
    (sort_fseq_in? formula-decl nil sort_fseq structures)
    (int_minus_int_is_int application-judgement "int" integers nil) nil
    nil nil (in? const-decl "bool" fsq structures)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (sort_length formula-decl nil sort_fseq structures)
    (default const-decl "T" fseqs structures)
    (posint_exp application-judgement "posint" exponentiation nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (Fundamental_Theorem_Arithmetic formula-decl nil
     unique_factorization numbers)
    (product_sort formula-decl nil product_perm_lems numbers)
    (product_fseq_concat formula-decl nil product_fseq_posnat reals)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (pos_times_gt formula-decl nil real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (expt_x0 formula-decl nil exponentiation nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (one_div_one formula-decl nil divides nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   shostak))
 (gcd_1_TCC1 0
  (gcd_1_TCC1-1 nil 3529776145 ("" (subtype-tcc) nil nil) nil nil
   (gcd_1 subtype "1"
    "{jj: integers.int | booleans.=>(rel_prime_divides_power_properties.m = 0, jj /= 0)}")))
 (gcd_1 0
  (gcd_1-1 nil 3529776343
   ("" (skosimp)
    (("" (lemma "rel_prime_lem")
      (("" (inst -1 "m!1" "1")
        (("" (assert)
          (("" (expand "rel_prime")
            (("" (hide 2)
              (("" (inst 1 "m!1 + 1" "-1") (("" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((rel_prime_lem formula-decl nil gcd ints)
    (int_times_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (rel_prime const-decl "bool" gcd ints)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (gcd_1_nd_TCC1 0
  (gcd_1_nd_TCC1-1 nil 3531211631 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)
    (divides const-decl "bool" divides nil)
    (prime? const-decl "bool" primes ints))
   nil
   (gcd_1_nd subtype "rel_prime_divides_power_properties.p"
    "{jj: integers.int | booleans.=>(rel_prime_divides_power_properties.m = 0, jj /= 0)}")))
 (gcd_1_nd 0
  (gcd_1_nd-1 nil 3531211673
   ("" (skosimp*)
    (("" (expand "gcd")
      (("" (rewrite "max_def")
        (("1" (expand "maximum?")
          (("1" (flatten)
            (("1" (inst -4 "p!1")
              (("1" (assert)
                (("1" (rewrite "divides_reflexive")
                  (("1" (lemma "prime_gt_1")
                    (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (prop)
          (("1" (expand* "nonempty?" "empty?" "member")
            (("1" (inst -1 "p!1")
              (("1" (assert)
                (("1" (rewrite "divides_reflexive") nil nil)) nil))
              nil))
            nil)
           ("2" (inst?)
            (("2" (skosimp)
              (("2" (typepred "y!1")
                (("2" (hide-all-but (-3 -4 1))
                  (("2" (expand "prime?")
                    (("2" (flatten)
                      (("2" (inst?)
                        (("2" (prop)
                          (("1" (hide -2) (("1" (assert) nil nil)) nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((gcd const-decl "{k: posnat | divides(k, i) AND divides(k, j)}" gcd
         ints)
    (max_def formula-decl nil max_bounded_posnat ints)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (prime_gt_1 formula-decl nil primes ints)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (divides_reflexive formula-decl nil divides nil)
    (maximum? const-decl "bool" max_bounded_posnat ints)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (prime? const-decl "bool" primes ints)
    (NOT const-decl "[bool -> bool]" booleans nil))
   shostak))
 (gcd_1_ndp 0
  (gcd_1_ndp-1 nil 3531473201
   ("" (skosimp*)
    (("" (lemma "gcd_1_nd")
      (("" (inst -1 "m!1" "p!1")
        (("" (assert)
          (("" (prop)
            (("1" (expand "divides")
              (("1" (skosimp)
                (("1" (replaces -1)
                  (("1" (replaces -3)
                    (("1" (inst 1 "x!2 * y!1") (("1" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "divides")
              (("2" (skosimp)
                (("2" (replaces -1)
                  (("2" (replaces -3)
                    (("2" (inst 1 "x!1 * x!2") (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((gcd_1_nd formula-decl nil rel_prime_divides_power_properties nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (TRUE const-decl "bool" booleans nil) nil
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (gcd_1_gcd_1_TCC1 0
  (gcd_1_gcd_1_TCC1-1 nil 3531473746 ("" (subtype-tcc) nil nil)
   ((divides const-decl "bool" divides nil)
    (gcd const-decl "{k: posnat | divides(k, i) AND divides(k, j)}" gcd
         nil)
    (/= const-decl "boolean" notequal nil)
    (prime? const-decl "bool" primes ints))
   nil
   (gcd_1_gcd_1 subtype "rel_prime_divides_power_properties.p"
    "{jj: integers.int | booleans.=>(rel_prime_divides_power_properties.x = 0, jj /= 0)}")))
 (gcd_1_gcd_1_TCC2 0
  (gcd_1_gcd_1_TCC2-1 nil 3531473746 ("" (subtype-tcc) nil nil)
   ((divides const-decl "bool" divides nil)
    (gcd const-decl "{k: posnat | divides(k, i) AND divides(k, j)}" gcd
         nil)
    (/= const-decl "boolean" notequal nil)
    (prime? const-decl "bool" primes ints))
   nil
   (gcd_1_gcd_1 subtype "rel_prime_divides_power_properties.p"
    "{jj: integers.int | booleans.=>(rel_prime_divides_power_properties.y = 0, jj /= 0)}")))
 (gcd_1_gcd_1 0
  (gcd_1_gcd_1-1 nil 3531473752
   ("" (skosimp*)
    (("" (lemma "gcd_1_ndp")
      (("" (inst -1 "m!1" "p!1" "x!1" "y!1")
        (("" (assert)
          (("" (flatten)
            (("" (lemma "gcd_is_1")
              (("" (inst-cp -1 "x!1" "p!1")
                (("" (inst -1 "y!1" "p!1") (("" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((gcd_1_ndp formula-decl nil rel_prime_divides_power_properties nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (gcd_is_1 formula-decl nil eq_mod numbers)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak)))

