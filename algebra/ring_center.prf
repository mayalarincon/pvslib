(ring_center
 (IMP_ring_basic_properties_TCC1 0
  (IMP_ring_basic_properties_TCC1-1 nil 3808759749
   ("" (rewrite "fullset_is_ring") nil nil)
   ((fullset_is_ring formula-decl nil ring_center nil)) nil
   (IMP_ring_basic_properties assuming
    "ring_basic_properties[ring_center.T, ring_center.+, ring_center.*, ring_center.zero].ring_basic_properties"
    "fullset_is_ring: ASSUMPTION ring_def[ring_basic_properties.T, ring_basic_properties.+, ring_basic_properties.*, ring_basic_properties.zero].ring?(sets[ring_basic_properties.T].fullset)")))
 (center_subring 0
  (center_subring-1 nil 3806395995
   ("" (skosimp)
    (("" (rewrite "subring_equiv")
      (("" (split)
        (("1" (expand "nonempty?")
          (("1" (expand "empty?")
            (("1" (expand "member")
              (("1" (inst -1 "zero")
                (("1" (expand "center")
                  (("1" (expand "extend")
                    (("1" (prop)
                      (("1" (skosimp)
                        (("1" (rewrite "zero_times")
                          (("1" (rewrite "times_zero") nil nil)) nil))
                        nil)
                       ("2" (lemma zero_is_member_R)
                        (("2" (expand "member")
                          (("2" (inst -1 "S!1") nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "subset?")
          (("2" (skosimp)
            (("2" (expand "member")
              (("2" (expand "center")
                (("2" (expand "extend") (("2" (prop) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (skosimp)
          (("3" (split)
            (("1" (typepred "x!1" "y!1")
              (("1" (expand "center")
                (("1" (expand "extend")
                  (("1" (prop)
                    (("1" (skosimp)
                      (("1" (inst -3 "inv(x!2)")
                        (("1" (inst -5 "x!2")
                          (("1" (lemma right_distributive)
                            (("1" (rewrite negative_times)
                              (("1"
                                (rewrite "times_negative" :dir rl)
                                (("1"
                                  (lemma times_negative)
                                  (("1"
                                    (inst -1 "y!1" "x!2")
                                    (("1"
                                      (replaces -1 -5)
                                      (("1"
                                        (rewrite
                                         "negative_times"
                                         :dir
                                         rl)
                                        (("1"
                                          (inst
                                           -1
                                           "x!2"
                                           "x!1"
                                           "inv(y!1)")
                                          (("1"
                                            (replaces -4 -1)
                                            (("1"
                                              (replaces -5 -1)
                                              (("1"
                                                (rewrite
                                                 left_distributive)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (lemma inv_is_member_R)
                          (("2" (inst -1 "S!1" "x!2")
                            (("2" (typepred "x!2")
                              (("2"
                                (expand "member")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma R_sum_star_closed)
                      (("2" (inst -1 "S!1" "x!1" "inv(y!1)")
                        (("2" (lemma inv_is_member_R)
                          (("2" (inst -1 "S!1" "y!1")
                            (("2" (expand "member")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (typepred "x!1" "y!1")
              (("2" (expand "center")
                (("2" (expand "extend")
                  (("2" (prop)
                    (("1" (skosimp)
                      (("1" (lemma times_associative)
                        (("1" (inst -1 "x!2" x!1 " y!1")
                          (("1" (inst -6 "x!2")
                            (("1" (replaces -6 -1)
                              (("1"
                                (lemma times_associative)
                                (("1"
                                  (inst -1 "x!1" x!2 " y!1")
                                  (("1"
                                    (replaces -1 -2)
                                    (("1"
                                      (inst -4 "x!2")
                                      (("1"
                                        (replaces -4 -1)
                                        (("1"
                                          (lemma times_associative)
                                          (("1"
                                            (inst -1 "x!1" y!1 " x!2")
                                            (("1"
                                              (replace -1 -2 rl)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma R_prod_star_closed)
                      (("2" (inst -1 "S!1" "x!1" "y!1")
                        (("2" (expand "member")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subring_equiv formula-decl nil ring_basic_properties nil)
    (ring? const-decl "bool" ring_def nil)
    (center const-decl "set[T]" center_def nil)
    (R_prod_star_closed formula-decl nil ring_basic_properties nil)
    (times_associative formula-decl nil ring nil)
    (R_sum_star_closed formula-decl nil ring_basic_properties nil)
    (inv_is_member_R formula-decl nil ring_basic_properties nil)
    (negative_times formula-decl nil ring nil)
    (left_distributive formula-decl nil ring nil)
    (times_negative formula-decl nil ring nil)
    (right_distributive formula-decl nil ring nil)
    (inv const-decl "{y | x * y = one AND y * x = one}" group nil)
    (zero_times formula-decl nil ring nil)
    (times_zero formula-decl nil ring nil)
    (zero_is_member_R formula-decl nil ring_basic_properties nil))
   shostak))
 (commutative_ring_equal_center 0
  (commutative_ring_equal_center-1 nil 3808759790
   ("" (skosimp)
    (("" (decompose-equality)
      (("" (iff)
        (("" (prop)
          (("1" (lemma "center_subset")
            (("1" (inst -1 "S!1")
              (("1" (expand "subset?")
                (("1" (inst -1 "x!1")
                  (("1" (expand "member") (("1" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (rewrite "center_def")
            (("2" (assert)
              (("2" (skosimp)
                (("2" (expand "commutative_ring?")
                  (("2" (flatten)
                    (("2" (expand "commutative?")
                      (("2" (inst -3 "y!1" "x!1")
                        (("2" (expand "restrict")
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (* formal-const-decl "[T, T -> T]" ring_center nil)
    (center const-decl "set[T]" center_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-nonempty-type-decl nil ring_center nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (center_subset formula-decl nil center_def nil)
    (commutative_ring? const-decl "bool" ring_def nil)
    (commutative? const-decl "bool" operator_defs nil)
    (restrict const-decl "R" restrict nil)
    (center_def formula-decl nil center_def nil))
   shostak)))

