%%
%% Authors:	
%% 		Thaynara Arielly de Lima
%% 		Universidade Federal de Goiás - Brasil
%%
%%              Andréia Borges Avelar da Silva
%%		Universidade de Brasília - Brasil
%%			
%%		André Luiz Galdino
%%		Universidade Federal de Catalão - Brasil
%%
%%		Mauricio Ayala-Rincón
%%		Universidade de Brasília - Brasil
%%
%%----------------------------------------------------------------------------
%%
%%	
%%	Last version: November 07, 2023
%%
%%----------------------------------------------------------------------------


ring_euclidean_algorithm[T:Type+, +,*:[T,T->T], zero, one:T]: THEORY

BEGIN

    ASSUMING IMPORTING ring_with_one_def[T,+,*,zero,one]
    
	 fullset_is_ring_with_one: ASSUMPTION ring_with_one?(fullset[T])

    ENDASSUMING

    IMPORTING euclidean_domain[T,+,*,zero,one],
              ring_gcd_def[T,+,*,zero]
              
euclidean_gcd_algorithm(R : (euclidean_domain?[T,+,*,zero,one]), 
                        (phi: [(difference(R, singleton(zero))) -> nat] | euclidean_pair?(R, phi)),
                        (f_phi: [(R) , (remove(zero,R)) -> [(R),(R)]] | euclidean_f_phi?(R,phi)(f_phi)))
                        ( a: (R), b: (remove(zero,R)) ) : RECURSIVE (remove(zero,R)) =
  IF  a = zero THEN b 
  ELSIF  phi(a) >= phi(b) THEN 
      LET rem = (f_phi(a,b))`2 IN 
        IF rem = zero THEN b 
        ELSE euclidean_gcd_algorithm(R,phi,f_phi)(b,rem)
        ENDIF             
  ELSE  euclidean_gcd_algorithm(R,phi,f_phi)(b,a)
  ENDIF
MEASURE lex2(phi(b), IF a = zero THEN 0 ELSE phi(a) ENDIF)

Euclid_theorem : LEMMA
  FORALL(R:(euclidean_domain?[T,+,*,zero,one]), 
        (phi: [(difference(R, singleton(zero))) -> nat] | euclidean_pair?(R, phi)),
        (f_phi: [(R) , (remove(zero,R)) -> [(R),(R)]] | euclidean_f_phi?(R,phi)(f_phi)),
                         a: (R), b: (remove(zero,R)), g : (remove(zero,R))) :
           gcd?(R)({x : (R) | x = a OR x = b}, g) IFF 
           gcd?(R)({x : (R) | x = (f_phi(a,b))`2 OR x = b}, g) 

euclidean_gcd_alg_correctness : THEOREM 
  FORALL(R:(euclidean_domain?[T,+,*,zero,one]), 
         (phi: [(difference(R, singleton(zero))) -> nat] | euclidean_pair?(R, phi)),
         (f_phi: [(R) , (remove(zero,R)) -> [(R),(R)]] | euclidean_f_phi?(R,phi)(f_phi)),
                         a: (R), b: (remove(zero,R)) ) :
      gcd?(R)({x : (R) | x = a OR x = b}, euclidean_gcd_algorithm(R,phi,f_phi)(a,b))
  
END ring_euclidean_algorithm
