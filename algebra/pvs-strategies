
(defun s_perm_update (num perm)
  (if   (null perm)  
        perm
        (cons (if  (< (car perm) num) 
                    (+ (car perm) 1)
                    (car perm)              
               )
               (s_perm_update num (cdr perm))   
        )
  )
)

(defstep s_times_permute  (perm) 
    ;; where perm is a given permutation. For instance, (4 1 3 2) 
    (if (not (null perm)) 
        (let  ((index (car (reverse perm)))
               (up_perm   (cdr (reverse perm)))
               (new_perm (s_perm_update index (reverse up_perm)))
               (numeral (if (= index 7)  
                            "seventh"
                            (if (= index 6) 
                                "sixth"
                                (if (= index 5)
                                    "fifth"
                                    (if (= index 4)
                                        "fourth"
                                        (if (= index 3) 
                                            "third"
                                            "none"))))))
               (times_heading_num (format nil "times_heading_~a" numeral)))
           (then (if (= index 1) 
                     ()
                     (if (= index 2)
                         (rewrite times_commutative)
                         (rewrite times_heading_num))
                  )
                  (lisp (write index))
                  (lisp (write `up_perm))
                  (lisp (write `new_perm))       
                  (s_times_permute new_perm) 
           )          
        )
        ()
    )
 "" 
 ""
)

(defstep s_plus_permute  (perm) 
    ;; where perm is a given permutation. For instance, (4 1 3 2) 
    (if (not (null perm)) 
        (let  ((index (car (reverse perm)))
               (up_perm   (cdr (reverse perm)))
               (new_perm (s_perm_update index (reverse up_perm)))
               (numeral (if (= index 7)  
                            "seventh"
                            (if (= index 6) 
                                "sixth"
                                (if (= index 5)
                                    "fifth"
                                    (if (= index 4)
                                        "fourth"
                                        (if (= index 3) 
                                            "third"
                                            "none"))))))
               (plus_heading_num (format nil "plus_heading_~a" numeral)))
           (then (if (= index 1) 
                     ()
                     (if (= index 2)
                         (rewrite plus_commutative)
                         (rewrite plus_heading_num))
                  )  
                  (s_plus_permute new_perm) 
           )          
        )
        ()
    )
 "" 
 ""
)





(defstep s_tccl ()
  (then
    (repeat (then 
              (repeat (rewrite cancel_left)) 
              (rewrite times_commutative)(

   ))))
""
""
)

(defstep s_fact_dist (opa opb &optional (dir_ds "left") (opd lr))   
            ;; where the parameters opa/b are either plus or times
   (then
    (let    
     ((opa_assoc (format nil "~a_associative" opa))
      (dir_dist (format nil "~a_distributive" dir_ds))
      (opb_neg (format nil "~a_negative" opb))
      (neg_opb (format nil "negative_~a" opb))) 
     (if (string= opa "plus") 
         (then (rewrite*  dir_dist)
               (rewrite*  opa_assoc :dir opd)
               (rewrite* opb_neg)
               (rewrite* neg_opb)
               (rewrite* negate_negate)
         )
         (then (rewrite*  dir_dist)
               (rewrite*  opa_assoc :dir opd)
               (rewrite* opb_neg)
               (rewrite* neg_opb)
               (rewrite* negate_negate))
     )
    )
   )
   ""
   ""
)

(defstep  s_ldtnntnn ()
  (then  
      (repeat (rewrite left_distributive))
      (repeat (rewrite times_negative))
      (repeat (rewrite negative_times))
      (repeat (rewrite negate_negate))
  )
  ""
  ""
  )   
(defstep s_rld  ()
  (then 
    (repeat (rewrite left_distributive)))
    ""
    ""
)
(defstep s_rrd  ()
  (then 
    (repeat (rewrite right_distributive)))
    ""
    ""
  )
(defstep s_rnt  ()
  (then
   (repeat (rewrite negative_times))
  )
  ""
  "" 
)
(defstep s_rtn  ()
  (then
   (repeat (rewrite times_negative))
  )
  ""
  "" 
)
(defstep s_rnn ()
 (then
   (repeat (rewrite negate_negate))
  )
  ""
  "" 
)
(defstep s_rrntrtnrnn  ()
  (then
   (repeat 
    (then 
      (repeat (rewrite negative_times))
      (repeat (rewrite times_negative))
      (repeat (rewrite negate_negate))    
    )
   )
  )
  ""
  "" 
)
(defstep s_rrntrnnrtn  ()
  (then
   (repeat 
    (then 
      (repeat (rewrite negative_times))
      (repeat (rewrite negate_negate))  
      (repeat (rewrite times_negative))  
    )
   )
  )
  ""
  "" 
)
(defstep s_rrnnrntrtn  ()
  (then
   (repeat 
    (then 
      (repeat (rewrite negate_negate))    
      (repeat (rewrite negative_times))
      (repeat (rewrite times_negative))
    )
   )
  )
  ""
  "" 
)

