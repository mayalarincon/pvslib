%%
%% Authors:	
%% 		Thaynara Arielly de Lima
%% 		Universidade Federal de Goiás - Brasil
%%
%%  		Andréia Borges Avelar da Silva
%%		Universidade de Brasília - Brasil
%%			
%%		André Luiz Galdino
%%		Universidade Federal de Catalão - Brasil
%%
%%		Mauricio Ayala-Rincón
%%		Universidade de Brasília - Brasil
%%---------------------------------------------------------------------------------------
%%
%%	Specification of cartesian product for a sequence of sets
%%	and formalization of some properties.
%%
%%	Last version: October 07, 2020
%%
%%---------------------------------------------------------------------------------------

cartesian_product_finite[T: TYPE+]: THEORY

  BEGIN
  
    IMPORTING finite_sets_of_sets,
	      lagrange_scaf[finseq[T]],
	      structures@seqs[T],
	      reals@product_seq,
	      structures@seq_extras,
	      finite_sets@finite_sets_eq,
	      finite_sets@finite_sets_card_eq

           a, x: VAR T
	      A: VAR set[T]
           B, C: VAR set[finseq[T]]
  fsx, fsy, fsz: VAR finseq[T]
	    fsA: VAR finseq[set[T]]
	   fsNS: VAR finseq[non_empty_finite_set[T]]
	   
%%---------------------------------------------------------------------------------------


 cartesian_product_one(x,B): set[finseq[T]] = 
      {fsx | EXISTS fsy: member(fsy,B) AND fsx = add_first[T](x,fsy)}
      

  cartesian_product_set(A,B): set[finseq[T]] =
      Union({C | EXISTS x: member(x,A) AND C = cartesian_product_one(x,B)})


  cartesian_product_n(fsA): set[finseq[T]] =
      IF length(fsA) = 0 THEN emptyset
       ELSE {fsz | length(fsz) = length(fsA) AND
                   FORALL (i: below(length(fsz))): member(fsz(i), fsA(i))}
      ENDIF

  card_fs(fsNS): finseq[nat] =
        (# length := length(fsNS),
              seq := (LAMBDA (i:below[length(fsNS)]): card(fsNS(i))) #)

%%---------------------------------------------------------------------------------------

  cartesian_product_one_disjoint: LEMMA
     cartesian_product_one(a,B) = cartesian_product_one(x,B)   OR
     disjoint?(cartesian_product_one(a,B),cartesian_product_one(x,B))
		    
  cartesian_product_one_emptyset: LEMMA
       empty?(B) IMPLIES cartesian_product_one(x,B) = emptyset

  cartesian_product_set_emptyset: LEMMA
      empty?(A) OR empty?(B) IMPLIES cartesian_product_set(A,B) = emptyset

  cartesian_product_n_emptyset: LEMMA
      (EXISTS (i: below(length(fsA))): empty?(fsA(i)))
        IMPLIES
	  cartesian_product_n(fsA) = emptyset

  cartesian_product_n_add_is_union: LEMMA
      length(fsA) /= 0
        IMPLIES
          cartesian_product_n(add_first[set[T]](A, fsA)) =
                       cartesian_product_set(A, cartesian_product_n(fsA))
		       

%%----------------------------- Results for finite sets ---------------------------------

  rest_card_fs: LEMMA length(fsNS) /= 0 IMPLIES
                             rest(card_fs(fsNS)) = card_fs(rest(fsNS))

  add_card_fs: LEMMA
     length(fsNS) /= 0 AND is_finite(A) AND A /= emptyset
       IMPLIES
         card_fs(add_first[non_empty_finite_set[T]](A, fsNS)) =
                                                   add_first[nat](card(A), card_fs(fsNS))
					     

  cartesian_product_one_finite: LEMMA 
     is_finite(B) IMPLIES is_finite(cartesian_product_one(x,B))

  cartesian_product_one_card: LEMMA
     is_finite(B) IMPLIES card(cartesian_product_one(x,B)) = card(B)

  cartesian_product_set_finite_aux: LEMMA
    (is_finite(A) AND is_finite(B))
      IMPLIES
        is_finite({C | EXISTS x: member(x,A) AND C = cartesian_product_one(x,B)})

  cartesian_product_set_finite: LEMMA
    (is_finite(A) AND is_finite(B)) IMPLIES is_finite(cartesian_product_set(A,B))

  cartesian_product_set_partition: LEMMA 
    (is_finite(A) AND is_finite(B))
      IMPLIES
        finite_partition?({C | EXISTS x: member(x,A) AND C = cartesian_product_one(x,B)})

  cartesian_product_set_card_aux: LEMMA
    (is_finite(A) AND is_finite(B) AND B /= emptyset)
      IMPLIES
        card({C | EXISTS x: member(x,A) AND C = cartesian_product_one(x,B)}) = card(A)

  cartesian_product_set_card: LEMMA
    (is_finite(A) AND is_finite(B) AND B /= emptyset)
      IMPLIES
        card(cartesian_product_set(A,B)) = card(A)*card(B)

  cartesian_product_n_finite: LEMMA is_finite(cartesian_product_n(fsNS)) 

  cartesian_product_n_degenerated: LEMMA
    length(fsNS) = 1
      IMPLIES 
        cartesian_product_n(fsNS) = {fsx | EXISTS x: member(x,fsNS(0)) AND fsx = seq1(x)}
	
  cartesian_product_n_card_degenerated: LEMMA
    length(fsNS) = 1
      IMPLIES
        card(cartesian_product_n(fsNS)) = card(fsNS(0))

  cartesian_product_n_card: LEMMA 
    length(fsNS) /= 0
      IMPLIES
        card(cartesian_product_n(fsNS)) = product(card_fs(fsNS))

 END cartesian_product_finite

