(op_finseq_monoid
 (IMP_monoid_TCC1 0
  (IMP_monoid_TCC1-1 nil 3884351573
   ("" (rewrite "fullset_is_monoid") nil nil)
   ((fullset_is_monoid formula-decl nil op_finseq nil)) nil
   (IMP_monoid assuming
    "monoid[op_finseq.T, op_finseq.*, op_finseq.one].monoid"
    "fullset_is_monoid: ASSUMPTION monoid_def[monoid.T, monoid.*, monoid.one].monoid?(sets[monoid.T].fullset)")))
 (op_fseq_singleton 0
  (op_fseq_singleton-1 nil 3839583770
   ("" (skeep) (("" (grind) nil nil)) nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}"
     real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (right_identity formula-decl nil monad nil)
    (op_fseq def-decl "T" op_finseq_def nil)
    (* formal-const-decl "[T, T -> T]" op_finseq nil)
    (one formal-const-decl "T" op_finseq nil)
    (^ const-decl "finseq" finite_sequences nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (|#| const-decl "finite_sequence[T]" set2seq structures)
    (T formal-nonempty-type-decl nil op_finseq nil))
   shostak))
 (op_fseq_composition 0
  (op_fseq_composition-1 nil 3839582105
   ("" (measure-induct "length(fs1)" "fs1")
    (("" (skeep*)
      (("" (case "x = empty_seq")
        (("1" (replaces -1)
          (("1" (rewrite "empty_o_seq")
            (("1" (hide -1) (("1" (grind) nil nil)) nil)) nil))
          nil)
         ("2" (expand "op_fseq" 2 1)
          (("2" (lift-if)
            (("2" (prop)
              (("1" (hide -2 2) (("1" (grind) nil nil)) nil)
               ("2" (expand "o" 2 1)
                (("2" (assert)
                  (("2" (rewrite "empty_0")
                    (("2" (lift-if)
                      (("2" (prop)
                        (("1"
                          (case "(x o fs2) ^ (1, length(x o fs2) - 1) = x^(1,length(x)-1) o fs2")
                          (("1" (replaces -1)
                            (("1" (inst -2 "x ^ (1, length(x) - 1)")
                              (("1"
                                (assert)
                                (("1"
                                  (prop)
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (replaces -1)
                                      (("1"
                                        (expand "op_fseq" 1 3)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (lemma "fullset_is_monoid")
                                            (("1"
                                              (expand "monoid?")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (hide -1)
                                                  (("1"
                                                    (expand
                                                     "associative?")
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "op_fseq(x ^ (1, length(x) - 1))"
                                                         "op_fseq(fs2)")
                                                        (("1"
                                                          (expand
                                                           "restrict")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "fullset")
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (expand
                                                           "fullset")
                                                          (("3"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "fullset")
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 2 3)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2 3)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide -2 2 3)
                            (("2" (decompose-equality)
                              (("1" (grind) nil nil)
                               ("2"
                                (decompose-equality)
                                (("2"
                                  (expand "o" 1 3)
                                  (("2"
                                    (lift-if)
                                    (("2"
                                      (prop)
                                      (("1" (grind) nil nil)
                                       ("2"
                                        (typepred "x!1")
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide -2 2 3) (("3" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (hide-all-but (1 4))
                          (("2" (rewrite "empty_0" :dir rl)
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (right_identity formula-decl nil monad nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (^ const-decl "finseq" finite_sequences nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (x skolem-const-decl "finseq[T]" op_finseq nil)
    (monoid? const-decl "bool" monoid_def nil)
    (set type-eq-decl nil sets nil) (fullset const-decl "set" sets nil)
    (restrict const-decl "R" restrict nil)
    (fs2 skolem-const-decl "finseq[T]" op_finseq nil)
    (associative? const-decl "bool" operator_defs nil)
    (fullset_is_monoid formula-decl nil op_finseq nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty_0 formula-decl nil seq_extras structures)
    (left_identity formula-decl nil monad nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (empty_o_seq formula-decl nil seq_extras structures)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (* formal-const-decl "[T, T -> T]" op_finseq nil)
    (one formal-const-decl "T" op_finseq nil)
    (op_fseq def-decl "T" op_finseq_def nil)
    (O const-decl "finseq" finite_sequences nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-nonempty-type-decl nil op_finseq nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (op_subfseq_closed 0
  (op_subfseq_closed-1 nil 3840810338
   ("" (skolem 1 (S fs _ _))
    (("" (measure-induct+ "abs(j-i)" (i j))
      (("" (case-replace "x!1 = x!2")
        (("1" (hide -)
          (("1" (expand "^")
            (("1" (expand "op_fseq")
              (("1" (grind)
                (("1" (typepred fs (x!2))
                  (("1" (grind)
                    (("1" (typepred "fs(x!2)")
                      (("1" (expand "finseq_appl")
                        (("1" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (case "x!1 > x!2")
          (("1" (hide -2)
            (("1" (grind)
              (("1" (typepred S)
                (("1" (expand "monad?")
                  (("1" (flatten)
                    (("1" (expand "member") (("1" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (inst -1 x!1+1 x!2)
            (("1" (expand op_fseq 3)
              (("1" (assert)
                (("1" (split 3)
                  (("1" (split)
                    (("1" (flatten)
                      (("1" (typepred S)
                        (("1" (expand "monad?")
                          (("1" (flatten)
                            (("1" (expand "member")
                              (("1" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2) (("2" (grind) nil nil)) nil))
                    nil)
                   ("2" (prop)
                    (("1"
                      (case "fs ^ (1 + x!1, x!2) = fs ^ (x!1, x!2) ^ (1, length(fs ^ (x!1, x!2)) - 1)")
                      (("1" (replace -1 2 rl)
                        (("1" (typepred S)
                          (("1" (expand "monad?")
                            (("1" (flatten)
                              (("1"
                                (hide -2 -3)
                                (("1"
                                  (expand "star_closed?")
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (expand "member")
                                      (("1" (propax) nil nil))
                                      nil)
                                     ("2"
                                      (hide-all-but (1 4 5))
                                      (("2"
                                        (grind)
                                        (("2"
                                          (typepred "fs(x!1)")
                                          (("2"
                                            (expand "finseq_appl")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (decompose-equality)
                        (("1" (hide -1 2 3) (("1" (grind) nil nil))
                          nil)
                         ("2" (decompose-equality)
                          (("2" (hide -1 2 3) (("2" (grind) nil nil))
                            nil))
                          nil))
                        nil)
                       ("3" (hide -1 3) (("3" (grind) nil nil)) nil))
                      nil)
                     ("2" (hide 2 3) (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 4) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-nonempty-type-decl nil op_finseq nil)
    (set type-eq-decl nil sets nil)
    (* formal-const-decl "[T, T -> T]" op_finseq nil)
    (one formal-const-decl "T" op_finseq nil)
    (monad? const-decl "bool" monad_def nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (^ const-decl "finseq" finite_sequences nil)
    (op_fseq def-decl "T" op_finseq_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil) (member const-decl "bool" sets nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (x!2 skolem-const-decl "below[length(fs)]" op_finseq nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (x!1 skolem-const-decl "below[length(fs)]" op_finseq nil)
    (fs skolem-const-decl "finseq[(S)]" op_finseq nil)
    (S skolem-const-decl "(monad?)" op_finseq nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}"
     real_defs nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (right_identity formula-decl nil monad nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (op_fseq_closed 0
  (op_fseq_closed-1 nil 3840205115
   ("" (lemma op_subfseq_closed)
    (("" (skeep)
      (("" (case "length(fs) = 0")
        (("1" (hide -2)
          (("1" (expand "op_fseq")
            (("1" (assert)
              (("1" (typepred S)
                (("1" (expand "monad?")
                  (("1" (expand "member") (("1" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (inst -1 "S" "fs" "0" "length(fs)-1")
          (("1" (case " fs ^ (0, length(fs) - 1) = fs")
            (("1" (assert) nil nil)
             ("2" (hide-all-but (1 2))
              (("2" (decompose-equality)
                (("1" (grind) nil nil)
                 ("2" (decompose-equality) (("2" (grind) nil nil))
                  nil))
                nil))
              nil)
             ("3" (hide -1 -2) (("3" (grind) nil nil)) nil))
            nil)
           ("2" (hide 3) (("2" (assert) nil nil)) nil)
           ("3" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (fs skolem-const-decl "finseq[(S)]" op_finseq nil)
    (S skolem-const-decl "(monad?)" op_finseq nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (^ const-decl "finseq" finite_sequences nil)
    (member const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (op_fseq def-decl "T" op_finseq_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-nonempty-type-decl nil op_finseq nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (* formal-const-decl "[T, T -> T]" op_finseq nil)
    (one formal-const-decl "T" op_finseq nil)
    (monad? const-decl "bool" monad_def nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (op_subfseq_closed formula-decl nil op_finseq nil))
   shostak))
 (op_fseq_split_TCC1 0
  (op_fseq_split_TCC1-1 nil 3855169136 ("" (subtype-tcc) nil nil) nil
   nil
   (op_fseq_split subtype "(number_fields.-)(op_finseq.i, 1)" "nat")))
 (op_fseq_split_TCC2 0
  (op_fseq_split_TCC2-1 nil 3855169136 ("" (subtype-tcc) nil nil) nil
   nil
   (op_fseq_split subtype "(number_fields.-)(length(op_finseq.fs), 1)"
    "nat")))
 (op_fseq_split 0
  (op_fseq_split-1 nil 3855169219
   ("" (skosimp*)
    (("" (expand "finseq_appl")
      (("" (case-replace "i!1 = length(fs!1) - 1" :hide? t)
        (("1" (assert)
          (("1" (expand "^" 1 2)
            (("1" (expand "op_fseq" 1 3)
              (("1" (lift-if)
                (("1" (prop)
                  (("1" (assert)
                    (("1" (lemma "caret_o_caret")
                      (("1"
                        (inst -1 "length(fs!1) - 2" "length(fs!1) - 1"
                         "fs!1")
                        (("1" (assert)
                          (("1"
                            (case-replace
                             "fs!1 ^ (0, length(fs!1) - 1) = fs!1"
                             :hide? t)
                            (("1"
                              (name-replace "RLS"
                               "op_fseq(fs!1 ^ (0, length(fs!1) - 2)) * fs!1`seq(length(fs!1) - 1)")
                              (("1"
                                (replaces -1)
                                (("1"
                                  (expand "RLS")
                                  (("1"
                                    (rewrite op_fseq_composition)
                                    (("1"
                                      (case-replace
                                       "fs!1 ^ (length(fs!1) - 1, length(fs!1) - 1) = #(fs!1`seq(length(fs!1) - 1))"
                                       :hide?
                                       t)
                                      (("1"
                                        (rewrite op_fseq_singleton)
                                        nil
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (decompose-equality 1)
                                          (("1" (grind) nil nil)
                                           ("2"
                                            (decompose-equality 1)
                                            (("2"
                                              (typepred "x!1")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide (- 2))
                              (("2"
                                (decompose-equality 1)
                                (("1"
                                  (expand "^")
                                  (("1"
                                    (expand "min")
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (decompose-equality 1)
                                  (("2"
                                    (expand "^")
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (lemma "caret_o")
          (("2" (inst -1 "i!1 - 1" "fs!1")
            (("2" (assert)
              (("2" (lemma "add_first_is_o")
                (("2"
                  (inst -1 "fs!1 ^ (1 + i!1, length(fs!1) - 1)"
                   "fs!1`seq(i!1)")
                  (("2"
                    (case-replace
                     "add_first(fs!1`seq(i!1), fs!1 ^ (1 + i!1, length(fs!1) - 1)) = fs!1 ^ (i!1, length(fs!1) - 1)"
                     :hide? t)
                    (("1" (replaces -1)
                      (("1" (name-replace "FS!1" "fs!1 ^ (0, i!1 - 1)")
                        (("1" (name-replace "FS!2" " fs!1`seq(i!1)")
                          (("1"
                            (name-replace "FS!3"
                             "fs!1 ^ (1 + i!1, length(fs!1) - 1)")
                            (("1" (replace -1 2)
                              (("1"
                                (hide -)
                                (("1"
                                  (rewrite op_fseq_composition)
                                  (("1"
                                    (rewrite op_fseq_composition)
                                    (("1"
                                      (rewrite op_fseq_singleton)
                                      (("1"
                                        (typepred "S!1")
                                        (("1"
                                          (expand "monoid?")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand "associative?")
                                              (("1"
                                                (expand "restrict")
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (hide 3)
                                                    (("2"
                                                      (expand "FS!3")
                                                      (("2"
                                                        (lemma
                                                         "op_subfseq_closed")
                                                        (("2"
                                                          (inst?)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (hide 3)
                                                    (("3"
                                                      (expand "FS!1")
                                                      (("3"
                                                        (lemma
                                                         "op_subfseq_closed")
                                                        (("3"
                                                          (inst?)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide (- 3))
                      (("2" (decompose-equality 1)
                        (("1" (grind) nil nil)
                         ("2" (decompose-equality 1)
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (caret_o formula-decl nil seq_extras structures)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (insert? const-decl "finseq" seq_extras structures)
    (O const-decl "finseq" finite_sequences nil)
    (associative? const-decl "bool" operator_defs nil)
    (S!1 skolem-const-decl "(monoid?)" op_finseq nil)
    (FS!1 skolem-const-decl "finseq[T]" op_finseq nil)
    (FS!3 skolem-const-decl "finseq[T]" op_finseq nil)
    (monad? const-decl "bool" monad_def nil)
    (op_subfseq_closed formula-decl nil op_finseq nil)
    (restrict const-decl "R" restrict nil)
    (add_first const-decl "finseq" seq_extras structures)
    (add_first_is_o formula-decl nil seq_extras structures)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (op_fseq def-decl "T" op_finseq_def nil)
    (caret_o_caret formula-decl nil seq_extras structures)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (RLS skolem-const-decl "T" op_finseq nil)
    (|#| const-decl "finite_sequence[T]" set2seq structures)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (op_fseq_singleton formula-decl nil op_finseq nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (op_fseq_composition formula-decl nil op_finseq nil)
    (TRUE const-decl "bool" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (right_identity formula-decl nil monad nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (^ const-decl "finseq" finite_sequences nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (monoid? const-decl "bool" monoid_def nil)
    (one formal-const-decl "T" op_finseq nil)
    (* formal-const-decl "[T, T -> T]" op_finseq nil)
    (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil op_finseq nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (op_fseq_split_commute_TCC1 0
  (op_fseq_split_commute_TCC1-1 nil 3855172382
   ("" (subtype-tcc) nil nil) nil nil
   (op_fseq_split_commute subtype "(number_fields.-)(op_finseq.i, 1)"
    "nat")))
 (op_fseq_split_commute_TCC2 0
  (op_fseq_split_commute_TCC2-1 nil 3855172382
   ("" (subtype-tcc) nil nil) nil nil
   (op_fseq_split_commute subtype
    "(number_fields.-)(length(op_finseq.fs), 1)" "nat")))
 (op_fseq_split_commute 0
  (op_fseq_split_commute-1 nil 3855172385
   ("" (skosimp)
    (("" (expand "finseq_appl")
      (("" (rewrite op_fseq_composition)
        (("" (lemma op_fseq_split)
          (("" (inst?)
            (("" (expand "finseq_appl")
              (("" (replaces -1)
                (("" (typepred "S!1")
                  (("" (expand "commutative_monoid?")
                    (("" (expand "monoid?")
                      (("" (flatten)
                        (("" (hide -1)
                          (("" (expand "associative?")
                            (("" (expand "commutative?")
                              ((""
                                (expand "restrict")
                                ((""
                                  (inst
                                   -2
                                   "op_fseq(fs!1 ^ (0, i!1 - 1))"
                                   "fs!1`seq(i!1)")
                                  (("1"
                                    (replaces -2)
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (hide 2)
                                        (("1"
                                          (lemma "op_fseq_closed")
                                          (("1"
                                            (inst
                                             -1
                                             "S!1"
                                             "^[T](fs!1, (1 + i!1, length(fs!1) - 1))")
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (skosimp)
                                                (("1"
                                                  (expand "^")
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (typepred
                                                       "i!1"
                                                       "x1!1")
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (typepred
                                                       "i!1"
                                                       "x1!1")
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (typepred
                                                       "fs!1`seq(1 + i!1 + x1!1)")
                                                      (("3"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (lemma "op_fseq_closed")
                                          (("2"
                                            (inst
                                             -1
                                             "S!1"
                                             "^[T](fs!1, (0, i!1 - 1))")
                                            (("2"
                                              (hide 2)
                                              (("2"
                                                (skosimp)
                                                (("2"
                                                  (expand "^")
                                                  (("2"
                                                    (typepred
                                                     "fs!1`seq(x1!1)")
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide (-1 2))
                                    (("2"
                                      (lemma "op_fseq_closed")
                                      (("2"
                                        (inst
                                         -1
                                         "S!1"
                                         "^[T](fs!1, (0, i!1 - 1))")
                                        (("2"
                                          (hide 2)
                                          (("2"
                                            (skosimp)
                                            (("2"
                                              (expand "^")
                                              (("2"
                                                (typepred
                                                 "fs!1`seq(x1!1)")
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (op_fseq_split formula-decl nil op_finseq nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (commutative? const-decl "bool" operator_defs nil)
    (S!1 skolem-const-decl "(commutative_monoid?)" op_finseq nil)
    (op_fseq def-decl "T" op_finseq_def nil)
    (fs!1 skolem-const-decl "finseq[(S!1)]" op_finseq nil)
    (i!1 skolem-const-decl "{i: below[length(fs!1)] | i /= 0}"
     op_finseq nil)
    (op_fseq_closed formula-decl nil op_finseq nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (monad? const-decl "bool" monad_def nil)
    (restrict const-decl "R" restrict nil)
    (associative? const-decl "bool" operator_defs nil)
    (TRUE const-decl "bool" booleans nil)
    (monoid? const-decl "bool" monoid_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (< const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (commutative_monoid? const-decl "bool" monoid_def nil)
    (one formal-const-decl "T" op_finseq nil)
    (* formal-const-decl "[T, T -> T]" op_finseq nil)
    (set type-eq-decl nil sets nil)
    (^ const-decl "finseq" finite_sequences nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-nonempty-type-decl nil op_finseq nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (op_fseq_composition formula-decl nil op_finseq nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (op_fseq_split_delete 0
  (op_fseq_split_delete-1 nil 3856625009
   ("" (skosimp)
    (("" (expand "finseq_appl")
      (("" (case-replace "i!1 = 0" :hide? T)
        (("1" (lemma "delete_rest")
          (("1" (inst?)
            (("1" (assert)
              (("1" (replaces -1)
                (("1" (expand "op_fseq" 1 1)
                  (("1"
                    (case-replace
                     "rest(fs!1) = fs!1 ^ (1, length(fs!1) - 1)")
                    (("1" (hide -1)
                      (("1" (typepred "S!1")
                        (("1" (expand "commutative_monoid?")
                          (("1" (flatten)
                            (("1" (expand "commutative?")
                              (("1"
                                (expand "restrict")
                                (("1"
                                  (inst?)
                                  (("1"
                                    (hide 2)
                                    (("1"
                                      (lemma "op_fseq_closed")
                                      (("1"
                                        (inst
                                         -1
                                         "S!1"
                                         "^(fs!1, (1, length(fs!1) - 1))")
                                        (("1"
                                          (hide 2)
                                          (("1"
                                            (skosimp)
                                            (("1"
                                              (typepred "x1!1")
                                              (("1"
                                                (expand "^")
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (grind)
                                                      nil
                                                      nil)
                                                     ("3"
                                                      (grind)
                                                      nil
                                                      nil)
                                                     ("4"
                                                      (grind)
                                                      nil
                                                      nil)
                                                     ("5"
                                                      (typepred
                                                       "fs!1`seq(1 + x1!1)")
                                                      (("5"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (decompose-equality 1)
                        (("1" (grind) nil nil)
                         ("2" (decompose-equality 1)
                          (("2" (expand "^")
                            (("2" (lift-if)
                              (("2"
                                (prop)
                                (("1"
                                  (lemma "length_rest_0")
                                  (("1"
                                    (inst?)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma "length_rest_0")
                                  (("2"
                                    (inst?)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (lemma "rest_pos")
                                  (("3"
                                    (inst?)
                                    (("3"
                                      (assert)
                                      (("3"
                                        (expand "finseq_appl")
                                        (("3"
                                          (inst?)
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (typepred "x!1")
                                            (("2"
                                              (hide (-2 4))
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (lemma "op_fseq_split_commute")
          (("2" (inst -1 "S!1" "fs!1" "i!1")
            (("1" (expand "finseq_appl")
              (("1" (replaces -1)
                (("1" (typepred "S!1")
                  (("1" (expand "commutative_monoid?")
                    (("1" (flatten)
                      (("1" (expand "commutative?")
                        (("1" (expand "restrict")
                          (("1" (inst?)
                            (("1" (replaces -2)
                              (("1"
                                (case-replace
                                 "fs!1 ^ (0, i!1 - 1) o fs!1 ^ (i!1 + 1, length(fs!1) - 1) = delete(fs!1, i!1)"
                                 :hide?
                                 T)
                                (("1"
                                  (hide (- 3))
                                  (("1"
                                    (decompose-equality 1)
                                    (("1"
                                      (expand "delete")
                                      (("1"
                                        (expand "o ")
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (decompose-equality 1)
                                      (("2"
                                        (expand "o ")
                                        (("2"
                                          (expand "delete")
                                          (("2"
                                            (lift-if)
                                            (("2"
                                              (lift-if)
                                              (("2"
                                                (lift-if)
                                                (("2"
                                                  (prop)
                                                  (("1"
                                                    (expand
                                                     "finseq_appl")
                                                    (("1"
                                                      (expand "^")
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand
                                                     "finseq_appl")
                                                    (("2"
                                                      (expand "^")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (expand
                                                     "finseq_appl")
                                                    (("3"
                                                      (expand "^")
                                                      (("3"
                                                        (lift-if)
                                                        (("3"
                                                          (prop)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (grind)
                                                            nil
                                                            nil)
                                                           ("3"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("4"
                                                    (expand
                                                     "finseq_appl")
                                                    (("4"
                                                      (expand "^")
                                                      (("4"
                                                        (lift-if)
                                                        (("4"
                                                          (prop)
                                                          (("1"
                                                            (typepred
                                                             "x!1")
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (typepred
                                                             "x!1")
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (typepred
                                                             "i!1")
                                                            (("3"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (hide 3)
                              (("2"
                                (lemma "op_fseq_closed")
                                (("2"
                                  (inst
                                   -1
                                   "S!1"
                                   "o[T] (^[T](fs!1, (0, i!1 - 1)), ^[T](fs!1, (1 + i!1, length(fs!1) - 1)))")
                                  (("1"
                                    (hide 2)
                                    (("1"
                                      (skosimp)
                                      (("1"
                                        (expand "o")
                                        (("1"
                                          (prop)
                                          (("1"
                                            (expand "^")
                                            (("1"
                                              (prop)
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (typepred
                                                 "fs!1`seq(x1!1)")
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "^")
                                            (("2"
                                              (lift-if)
                                              (("2"
                                                (lift-if)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (prop)
                                                    (("1"
                                                      (typepred "x1!1")
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (typepred "x1!1")
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (typepred
                                                       "fs!1`seq(1 - min(i!1, fs!1`length) + i!1 + x1!1)")
                                                      (("3"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (op_fseq_split_commute formula-decl nil op_finseq nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (monoid? const-decl "bool" monoid_def nil)
    (associative? const-decl "bool" operator_defs nil)
    (identity? const-decl "bool" operator_defs nil)
    (left_identity formula-decl nil monad nil)
    (right_identity formula-decl nil monad nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (member const-decl "bool" sets nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}"
     real_defs nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (delete const-decl "finseq" seq_extras structures)
    (O const-decl "finseq" finite_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (i!1 skolem-const-decl "below[length(fs!1)]" op_finseq nil)
    (delete_rest formula-decl nil seq_extras structures)
    (op_fseq def-decl "T" op_finseq_def nil)
    (rest_pos formula-decl nil seq_extras structures)
    (x!1 skolem-const-decl "below[rest(fs!1)`length]" op_finseq nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (length_rest_0 formula-decl nil seq_extras structures)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (commutative? const-decl "bool" operator_defs nil)
    (S!1 skolem-const-decl "(commutative_monoid?)" op_finseq nil)
    (fs!1 skolem-const-decl "finseq[(S!1)]" op_finseq nil)
    (op_fseq_closed formula-decl nil op_finseq nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (monad? const-decl "bool" monad_def nil)
    (restrict const-decl "R" restrict nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rest const-decl "finseq" seq_extras structures)
    (^ const-decl "finseq" finite_sequences nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (commutative_monoid? const-decl "bool" monoid_def nil)
    (one formal-const-decl "T" op_finseq nil)
    (* formal-const-decl "[T, T -> T]" op_finseq nil)
    (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil op_finseq nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (op_fseq_same_replace_first_TCC1 0
  (op_fseq_same_replace_first_TCC1-1 nil 3856625143
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil op_finseq nil)
    (set type-eq-decl nil sets nil)
    (* formal-const-decl "[T, T -> T]" op_finseq nil)
    (one formal-const-decl "T" op_finseq nil)
    (monoid? const-decl "bool" monoid_def nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (member const-decl "bool" sets nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (right_identity formula-decl nil monad nil)
    (restrict const-decl "R" restrict nil)
    (left_identity formula-decl nil monad nil)
    (identity? const-decl "bool" operator_defs nil)
    (monad? const-decl "bool" monad_def nil)
    (associative? const-decl "bool" operator_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (op_fseq_same_replace_first subtype "0" "below[length(fs)]")))
 (op_fseq_same_replace_first 0
  (op_fseq_same_replace_first-1 nil 3856625146
   ("" (skosimp)
    (("" (expand "finseq_appl")
      (("" (expand "op_fseq")
        (("" (lift-if)
          (("" (prop)
            (("1" (grind) nil nil)
             ("2" (lemma "nth_x")
              (("2" (expand "finseq_appl")
                (("2" (inst?)
                  (("2" (replaces -1)
                    (("2"
                      (case-replace
                       "replace(x!1 * fs!1`seq(0), fs!1, 0) ^ (1, length(replace(x!1 * fs!1`seq(0), fs!1, 0)) - 1) = fs!1 ^ (1, length(fs!1) - 1)"
                       :hide? T)
                      (("1" (typepred "S!1")
                        (("1" (expand "monoid?")
                          (("1" (flatten)
                            (("1" (hide -1)
                              (("1"
                                (expand "associative?")
                                (("1"
                                  (expand "restrict")
                                  (("1"
                                    (inst?)
                                    (("1" (replaces -1) nil nil)
                                     ("2"
                                      (hide 3)
                                      (("2"
                                        (lemma "op_fseq_closed")
                                        (("2"
                                          (inst
                                           -1
                                           "S!1"
                                           "^[T](fs!1, (1, length(fs!1) - 1))")
                                          (("1"
                                            (hide 2)
                                            (("1"
                                              (skosimp)
                                              (("1"
                                                (expand ^)
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (typepred "x1!1")
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (typepred "x1!1")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (typepred
                                                     "fs!1`seq(1 + x1!1)")
                                                    (("3"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "^")
                                            (("2"
                                              (prop)
                                              (("1"
                                                (expand "op_fseq")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "op_fseq")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("3" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 3)
                        (("2" (decompose-equality 1)
                          (("1" (grind) nil nil)
                           ("2" (decompose-equality 1)
                            (("2" (expand "^")
                              (("2"
                                (lift-if)
                                (("2"
                                  (lift-if)
                                  (("2"
                                    (lift-if)
                                    (("2"
                                      (prop)
                                      (("1" (grind) nil nil)
                                       ("2" (grind) nil nil)
                                       ("3" (grind) nil nil)
                                       ("4" (grind) nil nil)
                                       ("5"
                                        (expand "replace")
                                        (("5"
                                          (expand "finseq_appl")
                                          (("5" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (assert) nil nil) ("4" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (nth_x formula-decl nil seq_extras structures)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (* formal-const-decl "[T, T -> T]" op_finseq nil)
    (one formal-const-decl "T" op_finseq nil)
    (monoid? const-decl "bool" monoid_def nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (^ const-decl "finseq" finite_sequences nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (monad? const-decl "bool" monad_def nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (op_fseq_closed formula-decl nil op_finseq nil)
    (fs!1 skolem-const-decl "{fs: finseq[(S!1)] | length(fs) /= 0}"
     op_finseq nil)
    (S!1 skolem-const-decl "(monoid?)" op_finseq nil)
    (associative? const-decl "bool" operator_defs nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (x!1 skolem-const-decl "(S!1)" op_finseq nil)
    (TRUE const-decl "bool" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (replace const-decl "finseq" seq_extras structures)
    (T formal-nonempty-type-decl nil op_finseq nil)
    (op_fseq def-decl "T" op_finseq_def nil))
   shostak))
 (op_fseq_same_replace_last_TCC1 0
  (op_fseq_same_replace_last_TCC1-1 nil 3856625143
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil op_finseq nil)
    (set type-eq-decl nil sets nil)
    (* formal-const-decl "[T, T -> T]" op_finseq nil)
    (one formal-const-decl "T" op_finseq nil)
    (monoid? const-decl "bool" monoid_def nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (member const-decl "bool" sets nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (right_identity formula-decl nil monad nil)
    (restrict const-decl "R" restrict nil)
    (left_identity formula-decl nil monad nil)
    (identity? const-decl "bool" operator_defs nil)
    (monad? const-decl "bool" monad_def nil)
    (associative? const-decl "bool" operator_defs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (op_fseq_same_replace_last subtype
    "(number_fields.-)(length(op_finseq.fs), 1)" "below[length(fs)]")))
 (op_fseq_same_replace_last 0
  (op_fseq_same_replace_last-1 nil 3856625171
   ("" (skosimp)
    (("" (expand "finseq_appl")
      (("" (case-replace "length(fs!1) = 1")
        (("1" (assert)
          (("1" (expand "op_fseq")
            (("1" (expand "replace")
              (("1" (expand "^")
                (("1" (expand "op_fseq")
                  (("1" (lift-if)
                    (("1" (prop)
                      (("1" (assert) nil nil)
                       ("2" (hide 2) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (lemma "op_fseq_split")
          (("2" (inst-cp -1 "S!1" "fs!1" "length(fs!1) - 1")
            (("1" (expand "finseq_appl")
              (("1" (expand "^" -2 2)
                (("1" (expand "op_fseq" -2 3)
                  (("1" (lift-if)
                    (("1" (prop)
                      (("1" (assert)
                        (("1" (replace -2 2)
                          (("1" (hide -2)
                            (("1"
                              (inst -2 "S!1"
                               "replace(fs!1`seq(length(fs!1) - 1) * x!1, fs!1, length(fs!1) - 1)"
                               "length(fs!1) - 1")
                              (("1"
                                (expand "replace" -2 (3 4))
                                (("1"
                                  (expand "^" -2 2)
                                  (("1"
                                    (expand "op_fseq" -2 3)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (case-replace
                                         "replace(fs!1`seq(length(fs!1) - 1) * x!1, fs!1, length(fs!1) - 1) ^ (0, length(fs!1) - 2) = fs!1 ^ (0, length(fs!1) - 2)"
                                         :hide?
                                         T)
                                        (("1"
                                          (replaces -2)
                                          (("1"
                                            (typepred "S!1")
                                            (("1"
                                              (expand "monoid?")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (hide (-1 -3))
                                                  (("1"
                                                    (expand
                                                     "associative?")
                                                    (("1"
                                                      (expand
                                                       "restrict")
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (hide 3)
                                                          (("1"
                                                            (lemma
                                                             "op_fseq_closed")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "S!1"
                                                               "^[T](fs!1, (0, length(fs!1) - 2))")
                                                              (("1"
                                                                (hide
                                                                 2)
                                                                (("1"
                                                                  (skosimp)
                                                                  (("1"
                                                                    (expand
                                                                     ^)
                                                                    (("1"
                                                                      (typepred
                                                                       "fs!1`seq(x1!1)")
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide (-2 3))
                                          (("2"
                                            (decompose-equality 1)
                                            (("1" (grind) nil nil)
                                             ("2"
                                              (decompose-equality 1)
                                              (("2"
                                                (expand "^")
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (prop)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (typepred "x!2")
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 3)
                                (("2" (grind) nil nil))
                                nil)
                               ("3"
                                (skosimp)
                                (("3"
                                  (hide 3)
                                  (("3"
                                    (expand "replace")
                                    (("3"
                                      (prop)
                                      (("1"
                                        (expand "finseq_appl")
                                        (("1"
                                          (typepred "fs!1`seq(x1!1)")
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred "S!1")
                                        (("2"
                                          (expand "monoid?")
                                          (("2"
                                            (expand "monad?")
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (hide (-2 -3 -4))
                                                (("2"
                                                  (expand
                                                   "star_closed?")
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (expand "member")
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide (- 3)) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (op_fseq_split formula-decl nil op_finseq nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (x!1 skolem-const-decl "(S!1)" op_finseq nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (TRUE const-decl "bool" booleans nil)
    (restrict const-decl "R" restrict nil)
    (monad? const-decl "bool" monad_def nil)
    (op_fseq_closed formula-decl nil op_finseq nil)
    (associative? const-decl "bool" operator_defs nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (member const-decl "bool" sets nil) (< const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (S!1 skolem-const-decl "(monoid?)" op_finseq nil)
    (fs!1 skolem-const-decl "{fs: finseq[(S!1)] | length(fs) /= 0}"
     op_finseq nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (replace const-decl "finseq" seq_extras structures)
    (right_identity formula-decl nil monad nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (^ const-decl "finseq" finite_sequences nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (op_fseq def-decl "T" op_finseq_def nil)
    (/= const-decl "boolean" notequal nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (monoid? const-decl "bool" monoid_def nil)
    (one formal-const-decl "T" op_finseq nil)
    (* formal-const-decl "[T, T -> T]" op_finseq nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (T formal-nonempty-type-decl nil op_finseq nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (heading_fseq_TCC1 0
  (heading_fseq_TCC1-1 nil 3884348736 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-nonempty-type-decl nil op_finseq nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil))
   nil
   (heading_fseq subtype "(number_fields.-)(op_finseq.i, 1)"
    "below[fs`length]")))
 (heading_fseq_TCC2 0
  (heading_fseq_TCC2-1 nil 3884348736 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-nonempty-type-decl nil op_finseq nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil))
   nil (heading_fseq subtype "op_finseq.n" "below[fs`length]")))
 (times_heading_fseq 0
  (times_heading_fseq-1 nil 3884348785
   ("" (skeep)
    (("" (case "length(fs) = 0")
      (("1" (grind) nil nil)
       ("2" (case "n >= length(fs)")
        (("1" (grind) nil nil)
         ("2" (case "n=0")
          (("1" (grind) nil nil)
           ("2" (expand "heading_fseq")
            (("2" (lift-if)
              (("2" (prop)
                (("2" (hide 1)
                  (("2" (lemma "op_fseq_split_commute")
                    (("2" (expand "finseq_appl")
                      (("2" (inst?)
                        (("1" (replaces -1)
                          (("1" (lemma "op_fseq_composition")
                            (("1"
                              (inst -1 "#(fs`seq(n))"
                               "fs ^ (0, n - 1) o fs ^ (1 + n,
 length(fs) - 1)")
                              (("1"
                                (case-replace
                                 "op_fseq( #(fs`seq(n))) = fs`seq(n)")
                                (("1"
                                  (replace -2 1 rl)
                                  (("1"
                                    (hide -)
                                    (("1"
                                      (case
                                       "#(fs`seq(n)) o
               (fs ^ (0, n - 1) o fs ^ (1 + n, length(fs) - 1)) = (# length := length(fs),
                  seq
                    := LAMBDA (i: below[length(fs)]):
                        
 IF i > n THEN fs`seq(i)
                         ELSIF i > 0 THEN fs`seq(i - 1)
                         ELSE fs`seq(n)
      
                   ENDIF #)")
                                      (("1"
                                        (assert)
                                        (("1" (replaces -1) nil nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (decompose-equality)
                                          (("1" (grind) nil nil)
                                           ("2"
                                            (decompose-equality)
                                            (("1"
                                              (grind)
                                              (("1"
                                                (typepred "x!1")
                                                (("1" (grind) nil nil))
                                                nil)
                                               ("2"
                                                (typepred "x!1")
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (skeep)
                                              (("2" (grind) nil nil))
                                              nil)
                                             ("3" (grind) nil nil))
                                            nil)
                                           ("3" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (hide 2)
                                        (("3" (grind) nil nil))
                                        nil)
                                       ("4" (assert) nil nil)
                                       ("5" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide -1 2)
                                  (("2"
                                    (expand "op_fseq")
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil)
                               ("3" (assert) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finseq type-eq-decl nil finite_sequences nil)
    (commutative_monoid? const-decl "bool" monoid_def nil)
    (one formal-const-decl "T" op_finseq nil)
    (* formal-const-decl "[T, T -> T]" op_finseq nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (T formal-nonempty-type-decl nil op_finseq nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (heading_fseq const-decl "finseq[T]" op_finseq nil)
    (op_fseq def-decl "T" op_finseq_def nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (TRUE const-decl "bool" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (O const-decl "finseq" finite_sequences nil)
    (|#| const-decl "finite_sequence[T]" set2seq structures)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (right_identity formula-decl nil monad nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}"
     real_defs nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (> const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (op_fseq_composition formula-decl nil op_finseq nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (n skolem-const-decl "nat" op_finseq nil)
    (S skolem-const-decl "(commutative_monoid?)" op_finseq nil)
    (fs skolem-const-decl "finseq[(S)]" op_finseq nil)
    (/= const-decl "boolean" notequal nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (op_fseq_split_commute formula-decl nil op_finseq nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^ const-decl "finseq" finite_sequences nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil))
   shostak)))

