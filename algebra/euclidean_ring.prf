(euclidean_ring
 (IMP_ring_principal_ideal_TCC1 0
  (IMP_ring_principal_ideal_TCC1-1 nil 3858775756
   ("" (lemma "fullset_is_ring") (("" (propax) nil nil)) nil)
   ((fullset_is_ring formula-decl nil euclidean_ring nil)) nil
   (IMP_ring_principal_ideal assuming
    "ring_principal_ideal[euclidean_ring.T, euclidean_ring.+, euclidean_ring.*, euclidean_ring.zero].ring_principal_ideal"
    "fullset_is_ring: ASSUMPTION ring_def[ring_principal_ideal.T, ring_principal_ideal.+, ring_principal_ideal.*, ring_principal_ideal.zero].ring?(sets[ring_principal_ideal.T].fullset)")))
 (euclidean_ring_ideal_is_gen 0
  (euclidean_ring_ideal_is_gen-1 nil 3858351672
   ("" (skeep)
    (("" (typepred "R")
      (("" (expand "euclidean_ring?")
        (("" (expand "commutative_ring?")
          (("" (flatten)
            (("" (skeep)
              (("" (case "I!1 = singleton(zero)")
                (("1" (inst 1 "zero")
                  (("1" (decompose-equality)
                    (("1" (decompose-equality)
                      (("1" (iff)
                        (("1" (inst -1 "x!1")
                          (("1" (assert)
                            (("1" (iff)
                              (("1"
                                (prop)
                                (("1"
                                  (expand "singleton")
                                  (("1"
                                    (expand "+")
                                    (("1"
                                      (inst 1 "zero")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (lemma "zero_is_member_R")
                                        (("2"
                                          (inst -1 "R")
                                          (("2"
                                            (expand "member")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "singleton")
                                  (("2"
                                    (expand "+")
                                    (("2"
                                      (skeep)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "ideal?")
                    (("2" (expand "left_ideal?")
                      (("2" (expand "subring?")
                        (("2" (flatten)
                          (("2" (lemma "zero_is_member_R")
                            (("2" (inst -1 "I!1")
                              (("2"
                                (expand "member")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2"
                  (case "nonempty?({t: nat | EXISTS(x:(I!1) | x /= zero): t = phi(x) })")
                  (("1" (lemma "every_nonempty_set_has_least[nat]")
                    (("1"
                      (inst -1
                       "{t: nat | EXISTS (x: (I!1) | x /= zero): t = phi(x)}")
                      (("1" (expand "has_least?")
                        (("1" (skeep)
                          (("1" (expand "least?")
                            (("1" (flatten)
                              (("1"
                                (expand "lower_bound?")
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst 2 "x")
                                    (("1"
                                      (decompose-equality 2)
                                      (("1"
                                        (iff)
                                        (("1"
                                          (prop)
                                          (("1"
                                            (expand "+")
                                            (("1"
                                              (inst -7 "x!1" "x")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (hide -7)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (split)
                                                        (("1"
                                                          (replaces -1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (inst
                                                               1
                                                               "q")
                                                              (("1"
                                                                (expand
                                                                 "commutative?")
                                                                (("1"
                                                                  (inst
                                                                   -6
                                                                   "q"
                                                                   "x")
                                                                  (("1"
                                                                    (expand
                                                                     "restrict")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (typepred
                                                                     "x")
                                                                    (("2"
                                                                      (expand
                                                                       "ideal?")
                                                                      (("2"
                                                                        (expand
                                                                         "left_ideal?")
                                                                        (("2"
                                                                          (expand
                                                                           "subring?")
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (expand
                                                                               "subset?")
                                                                              (("2"
                                                                                (inst
                                                                                 -8
                                                                                 "x")
                                                                                (("2"
                                                                                  (expand
                                                                                   "member")
                                                                                  (("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (inst
                                                             -4
                                                             "phi(r)")
                                                            (("1"
                                                              (expand
                                                               "restrict")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (inst
                                                               1
                                                               "r")
                                                              (("2"
                                                                (split)
                                                                (("1"
                                                                  (typepred
                                                                   "r")
                                                                  (("1"
                                                                    (typepred
                                                                     "x")
                                                                    (("1"
                                                                      (hide-all-but
                                                                       (-1
                                                                        -3
                                                                        -5
                                                                        -8
                                                                        -10
                                                                        -11
                                                                        1))
                                                                      (("1"
                                                                        (case
                                                                         "r = x!1 + inv(q*x)")
                                                                        (("1"
                                                                          (expand
                                                                           "ideal?")
                                                                          (("1"
                                                                            (expand
                                                                             "left_ideal?")
                                                                            (("1"
                                                                              (expand
                                                                               "subring?")
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "R_sum_star_closed")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "I!1"
                                                                                     "x!1"
                                                                                     "inv(q*x)")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "inv_is_member_R")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "I!1"
                                                                                           "q*x")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (hide
                                                                                               2
                                                                                               3)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "left_swallow?")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -9
                                                                                                   "q"
                                                                                                   "x")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (lemma
                                                                           "cancel_right_plus")
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "x!1"
                                                                             "q*x +r"
                                                                             "inv(q*x)")
                                                                            (("2"
                                                                              (prop)
                                                                              (("2"
                                                                                (lemma
                                                                                 "plus_commutative")
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "q*x +r "
                                                                                   "inv(q*x)")
                                                                                  (("2"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       "plus_associative"
                                                                                       :dir
                                                                                       rl)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (typepred "x")
                                                (("2"
                                                  (expand "ideal?")
                                                  (("2"
                                                    (expand
                                                     "left_ideal?")
                                                    (("2"
                                                      (expand
                                                       "subring?")
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (expand
                                                           "subset?")
                                                          (("2"
                                                            (inst
                                                             -8
                                                             "x")
                                                            (("2"
                                                              (expand
                                                               "member")
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (expand "ideal?")
                                                (("3"
                                                  (expand
                                                   "left_ideal?")
                                                  (("3"
                                                    (expand "subring?")
                                                    (("3"
                                                      (flatten)
                                                      (("3"
                                                        (expand
                                                         "subset?")
                                                        (("3"
                                                          (inst
                                                           -7
                                                           "x!1")
                                                          (("3"
                                                            (expand
                                                             "member")
                                                            (("3"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "+")
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (expand "ideal?")
                                                (("2"
                                                  (expand
                                                   "right_ideal?")
                                                  (("2"
                                                    (expand
                                                     "right_swallow?")
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (inst
                                                         -10
                                                         "h"
                                                         "x")
                                                        (("2"
                                                          (expand
                                                           "member")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skeep)
                        (("2" (expand "difference")
                          (("2" (expand "member")
                            (("2" (assert)
                              (("2"
                                (split)
                                (("1"
                                  (typepred "x")
                                  (("1"
                                    (expand "ideal?")
                                    (("1"
                                      (expand "left_ideal?")
                                      (("1"
                                        (expand "subring?")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (expand "subset?")
                                            (("1"
                                              (inst -6 "x")
                                              (("1"
                                                (expand "member")
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (typepred "x")
                                  (("2"
                                    (expand "singleton")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (decompose-equality 2)
                    (("2" (expand "nonempty?")
                      (("2" (expand "empty?")
                        (("2" (iff 1)
                          (("2" (prop)
                            (("1" (expand "singleton")
                              (("1"
                                (inst -2 "phi(x!1)")
                                (("1"
                                  (expand "member")
                                  (("1"
                                    (inst 2 "x!1")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "difference")
                                  (("2"
                                    (expand "member")
                                    (("2"
                                      (split)
                                      (("1"
                                        (expand "ideal?")
                                        (("1"
                                          (expand "left_ideal?")
                                          (("1"
                                            (expand "subring?")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (expand "subset?")
                                                (("1"
                                                  (inst -5 "x!1")
                                                  (("1"
                                                    (expand "member")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "singleton")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "singleton")
                              (("2"
                                (replaces -1)
                                (("2"
                                  (expand "ideal?")
                                  (("2"
                                    (expand "left_ideal?")
                                    (("2"
                                      (expand "subring?")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (lemma "zero_is_member_R")
                                          (("2"
                                            (inst -1 "I!1")
                                            (("2"
                                              (expand "member")
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (skeep)
                    (("3" (expand "difference")
                      (("3" (expand "member")
                        (("3" (split)
                          (("1" (typepred "x")
                            (("1" (expand "ideal?")
                              (("1"
                                (expand "left_ideal?")
                                (("1"
                                  (expand "subring?")
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand "subset?")
                                      (("1"
                                        (inst -5 "x")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "singleton")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((euclidean_ring? const-decl "bool" euclidean_ring_def nil)
    (zero formal-const-decl "T" euclidean_ring nil)
    (* formal-const-decl "[T, T -> T]" euclidean_ring nil)
    (+ formal-const-decl "[T, T -> T]" euclidean_ring nil)
    (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil euclidean_ring nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (commutative_ring? const-decl "bool" ring_def nil)
    (difference const-decl "set" sets nil)
    (/= const-decl "boolean" notequal nil)
    (nonempty? const-decl "bool" sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil) nil nil nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cancel_right_plus formula-decl nil ring nil)
    (plus_associative formula-decl nil ring nil)
    (negate_is_left_inv formula-decl nil ring nil)
    (zero_plus formula-decl nil ring nil)
    (plus_commutative formula-decl nil ring nil)
    (R_sum_star_closed formula-decl nil ring_basic_properties nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (left_swallow? const-decl "bool" ring_ideal_def nil)
    (inv_is_member_R formula-decl nil ring_basic_properties nil)
    (inv const-decl "{y | x * y = one AND y * x = one}" group nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    nil (TRUE const-decl "bool" booleans nil)
    (restrict const-decl "R" restrict nil)
    (subset? const-decl "bool" sets nil)
    (commutative? const-decl "bool" operator_defs nil)
    (plus_zero formula-decl nil ring nil)
    (right_ideal? const-decl "bool" ring_ideal_def nil)
    (right_swallow? const-decl "bool" ring_ideal_def nil)
    (lower_bound? const-decl "bool" bounded_orders orders)
    (least? const-decl "bool" minmax_orders orders)
    (has_least? const-decl "bool" minmax_orders orders)
    (every_nonempty_set_has_least judgement-tcc nil bounded_nats
     orders)
    nil (empty? const-decl "bool" sets nil) nil nil
    (zero_times formula-decl nil ring nil) nil
    (times_zero formula-decl nil ring nil)
    (ring? const-decl "bool" ring_def nil)
    (member const-decl "bool" sets nil)
    (zero_is_member_R formula-decl nil ring_basic_properties nil)
    (left_ideal? const-decl "bool" ring_ideal_def nil)
    (subring? const-decl "bool" ring_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil))
   shostak))
 (euclidean_ring_is_principal_ideal 0
  (euclidean_ring_is_principal_ideal-1 nil 3858151160
   ("" (skeep)
    (("" (lemma "euclidean_ring_ideal_is_gen")
      (("" (expand "principal_ideal_ring?")
        (("" (typepred "R")
          (("" (expand "euclidean_ring?")
            (("" (expand "commutative_ring?")
              (("" (flatten)
                (("" (assert)
                  (("" (skeep)
                    (("" (inst -4 "I!1" "R")
                      (("" (assert)
                        (("" (hide -3)
                          (("" (skeep)
                            (("" (inst 1 "a")
                              (("1"
                                (decompose-equality 1)
                                (("1"
                                  (rewrite
                                   "comm_principal_ideal_charac")
                                  (("1"
                                    (iff)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (expand "extend")
                                        (("1"
                                          (prop)
                                          (("1"
                                            (expand
                                             "commutative_one_gen")
                                            (("1"
                                              (decompose-equality -5)
                                              (("1"
                                                (inst -1 "x!1")
                                                (("1"
                                                  (iff)
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (expand "+")
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (inst
                                                           1
                                                           "h"
                                                           "0")
                                                          (("1"
                                                            (expand
                                                             "times")
                                                            (("1"
                                                              (expand
                                                               "^")
                                                              (("1"
                                                                (expand
                                                                 "power")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "commutative?")
                                                                    (("1"
                                                                      (inst
                                                                       -6
                                                                       "h"
                                                                       "a")
                                                                      (("1"
                                                                        (expand
                                                                         "restrict")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (typepred
                                                                         "a")
                                                                        (("2"
                                                                          (expand
                                                                           "ideal?")
                                                                          (("2"
                                                                            (expand
                                                                             "left_ideal?")
                                                                            (("2"
                                                                              (expand
                                                                               "subring?")
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (expand
                                                                                   "subset?")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -7
                                                                                     "a")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "ideal?")
                                            (("2"
                                              (expand "left_ideal?")
                                              (("2"
                                                (expand "subring?")
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (expand "subset?")
                                                    (("2"
                                                      (inst -5 "x!1")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "extend")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (prop)
                                            (("2"
                                              (expand
                                               "commutative_one_gen")
                                              (("2"
                                                (skeep)
                                                (("2"
                                                  (typepred "a")
                                                  (("2"
                                                    (expand "ideal?")
                                                    (("2"
                                                      (expand
                                                       "left_ideal?")
                                                      (("2"
                                                        (expand
                                                         "subring?")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (lemma
                                                             "R_sum_star_closed")
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "I!1"
                                                               "r*a"
                                                               "times(a,n)")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (split)
                                                                  (("1"
                                                                    (expand
                                                                     "left_swallow?")
                                                                    (("1"
                                                                      (inst
                                                                       -9
                                                                       "r"
                                                                       "a")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (lemma
                                                                     "times_member")
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "I!1"
                                                                       "n"
                                                                       "a")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "ideal?")
                                (("2"
                                  (expand "left_ideal?")
                                  (("2"
                                    (expand "subring?")
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (expand "subset?")
                                        (("2"
                                          (inst -4 "a")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((euclidean_ring_ideal_is_gen formula-decl nil euclidean_ring nil)
    (euclidean_ring? const-decl "bool" euclidean_ring_def nil)
    (zero formal-const-decl "T" euclidean_ring nil)
    (* formal-const-decl "[T, T -> T]" euclidean_ring nil)
    (+ formal-const-decl "[T, T -> T]" euclidean_ring nil)
    (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil euclidean_ring nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (commutative_ring? const-decl "bool" ring_def nil) nil nil nil
    (comm_principal_ideal_charac formula-decl nil ring_principal_ideal
     nil)
    nil (= const-decl "[T, T -> boolean]" equalities nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (^ const-decl "T" group nil) (plus_zero formula-decl nil ring nil)
    (restrict const-decl "R" restrict nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (subring? const-decl "bool" ring_def nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (left_ideal? const-decl "bool" ring_ideal_def nil)
    (commutative? const-decl "bool" operator_defs nil)
    (power def-decl "T" monoid_def nil)
    (times const-decl "T" ring_basic_properties nil)
    (commutative_one_gen const-decl "set[(R)]" ring_one_generator nil)
    (extend const-decl "R" extend nil)
    (left_swallow? const-decl "bool" ring_ideal_def nil)
    (times_member formula-decl nil ring_basic_properties nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (R_sum_star_closed formula-decl nil ring_basic_properties nil)
    (ring? const-decl "bool" ring_def nil)
    (principal_ideal const-decl "set[T]" ring_principal_ideal_def nil)
    (principal_ideal_ring? const-decl "bool" ring_principal_ideal_def
     nil))
   shostak))
 (euclidean_ring_has_one 0
  (euclidean_ring_has_one-1 nil 3858153835
   ("" (skeep)
    (("" (lemma "euclidean_ring_ideal_is_gen")
      (("" (inst -1 "R" "R")
        (("" (rewrite "self_ideal")
          (("" (skeep)
            (("" (decompose-equality)
              (("" (inst-cp -1 "a")
                (("" (iff)
                  (("" (prop)
                    (("1" (expand "+")
                      (("1" (skeep)
                        (("1" (inst 1 "h")
                          (("1" (skeep)
                            (("1" (split)
                              (("1"
                                (typepred "R")
                                (("1"
                                  (expand "euclidean_ring?")
                                  (("1"
                                    (expand "commutative_ring?")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (expand "commutative?")
                                        (("1"
                                          (inst -2 "h" "x")
                                          (("1"
                                            (expand "restrict")
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (inst -3 "x")
                                (("2"
                                  (iff)
                                  (("2"
                                    (prop)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (replaces -2)
                                        (("1"
                                          (rewrite "times_associative")
                                          (("1"
                                            (typepred "R")
                                            (("1"
                                              (expand
                                               "euclidean_ring?")
                                              (("1"
                                                (expand
                                                 "commutative_ring?")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (expand
                                                     "commutative?")
                                                    (("1"
                                                      (inst
                                                       -2
                                                       "h!1"
                                                       "h")
                                                      (("1"
                                                        (expand
                                                         "restrict")
                                                        (("1"
                                                          (replaces -2)
                                                          (("1"
                                                            (rewrite
                                                             "times_associative"
                                                             :dir
                                                             rl)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (typepred "x")
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but 2)
                      (("2" (typepred "a") (("2" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((euclidean_ring_ideal_is_gen formula-decl nil euclidean_ring nil)
    (self_ideal formula-decl nil ring_ideal nil)
    (ring? const-decl "bool" ring_def nil)
    (ring nonempty-type-eq-decl nil ring nil) nil
    (= const-decl "[T, T -> boolean]" equalities nil)
    (restrict const-decl "R" restrict nil)
    (commutative? const-decl "bool" operator_defs nil)
    (commutative_ring? const-decl "bool" ring_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (times_associative formula-decl nil ring nil)
    (TRUE const-decl "bool" booleans nil)
    (euclidean_ring? const-decl "bool" euclidean_ring_def nil)
    (zero formal-const-decl "T" euclidean_ring nil)
    (* formal-const-decl "[T, T -> T]" euclidean_ring nil)
    (+ formal-const-decl "[T, T -> T]" euclidean_ring nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-nonempty-type-decl nil euclidean_ring nil))
   shostak)))

