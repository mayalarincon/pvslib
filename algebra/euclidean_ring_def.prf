(euclidean_ring_def
 (euclidean_ring?_TCC1 0
  (euclidean_ring?_TCC1-1 nil 3855755442
   ("" (skeep*)
    (("" (expand "difference")
      (("" (expand "member")
        (("" (expand "singleton")
          (("" (replaces -2)
            ((""
              (case "FORALL (x,y,z:(R)): (x + y) * z = (x * z) + (y * z)")
              (("1" (inst -1 "zero" "zero" "b")
                (("1" (case "FORALL (x:(R)): zero + x = x")
                  (("1" (inst?)
                    (("1" (replaces -1)
                      (("1"
                        (case "FORALL (x:(R)): x + x = x IMPLIES x = zero")
                        (("1" (inst -1 "zero * b")
                          (("1" (assert) nil nil)
                           ("2" (expand "commutative_ring?")
                            (("2" (expand "ring?")
                              (("2"
                                (expand "star_closed?")
                                (("2"
                                  (expand "abelian_group?")
                                  (("2"
                                    (expand "group?")
                                    (("2"
                                      (expand "monoid?")
                                      (("2"
                                        (expand "monad?")
                                        (("2"
                                          (expand "member")
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (hide-all-but (-3 -8 1))
                                              (("2"
                                                (typepred "b")
                                                (("2" (inst?) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide (-1 2))
                          (("2" (skosimp*)
                            (("2" (expand "commutative_ring?")
                              (("2"
                                (expand "ring?")
                                (("2"
                                  (expand "abelian_group?")
                                  (("2"
                                    (expand "group?")
                                    (("2"
                                      (expand "inv_exists?")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (hide (-4 -6 -7 -8 -9))
                                          (("2"
                                            (inst -3 "x!1")
                                            (("2"
                                              (skosimp)
                                              (("2"
                                                (case
                                                 "x!1 + x!1 + y!1 = x!1 + y!1")
                                                (("1"
                                                  (expand "monoid?")
                                                  (("1"
                                                    (expand
                                                     "associative?")
                                                    (("1"
                                                      (expand
                                                       "restrict")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (replaces
                                                             -4)
                                                            (("1"
                                                              (replaces
                                                               -4)
                                                              (("1"
                                                                (expand
                                                                 "monad?")
                                                                (("1"
                                                                  (expand
                                                                   "identity?")
                                                                  (("1"
                                                                    (expand
                                                                     "restrict")
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (replaces -1)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "commutative_ring?")
                      (("2" (expand "ring?")
                        (("2" (expand "abelian_group?")
                          (("2" (expand "group?")
                            (("2" (expand "monoid?")
                              (("2"
                                (expand "monad?")
                                (("2"
                                  (expand "member")
                                  (("2" (flatten) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skosimp)
                    (("2" (expand "commutative_ring?")
                      (("2" (expand "ring?")
                        (("2" (expand "abelian_group?")
                          (("2" (expand "group?")
                            (("2" (expand "monoid?")
                              (("2"
                                (expand "monad?")
                                (("2"
                                  (expand "identity?")
                                  (("2"
                                    (expand "restrict")
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (hide-all-but (-4 1))
                                        (("2"
                                          (inst?)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "commutative_ring?")
                  (("2" (expand "ring?")
                    (("2" (expand "abelian_group?")
                      (("2" (expand "group?")
                        (("2" (expand "monoid?")
                          (("2" (expand "monad?")
                            (("2" (expand "member")
                              (("2" (flatten) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skosimp)
                (("2" (expand "commutative_ring?")
                  (("2" (expand "ring?")
                    (("2" (flatten)
                      (("2" (hide-all-but (-4 1))
                        (("2" (expand "left_distributive?")
                          (("2" (expand "restrict")
                            (("2" (inst?) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((difference const-decl "set" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (+ formal-const-decl "[T, T -> T]" euclidean_ring_def nil)
    (* formal-const-decl "[T, T -> T]" euclidean_ring_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil euclidean_ring_def nil)
    (inv_exists? const-decl "bool" group_def nil)
    (restrict const-decl "R" restrict nil)
    (identity? const-decl "bool" operator_defs nil)
    (associative? const-decl "bool" operator_defs nil)
    (b skolem-const-decl "(R)" euclidean_ring_def nil)
    (ring? const-decl "bool" ring_def nil)
    (abelian_group? const-decl "bool" group_def nil)
    (monoid? const-decl "bool" monoid_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (monad? const-decl "bool" monad_def nil)
    (group? const-decl "bool" group_def nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (commutative_ring? const-decl "bool" ring_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (zero formal-const-decl "T" euclidean_ring_def nil)
    (R skolem-const-decl "set[T]" euclidean_ring_def nil)
    (left_distributive? const-decl "bool" operator_defs_more nil)
    (member const-decl "bool" sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (euclidean_ring? subtype "euclidean_ring_def.a"
    "(sets[euclidean_ring_def.T].difference(euclidean_ring_def.R, sets[euclidean_ring_def.T].singleton(euclidean_ring_def.zero)))")))
 (euclidean_ring?_TCC2 0
  (euclidean_ring?_TCC4-1 nil 3855755442 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (restrict const-decl "R" restrict nil)
    (identity? const-decl "bool" operator_defs nil)
    (monad? const-decl "bool" monad_def nil)
    (associative? const-decl "bool" operator_defs nil)
    (monoid? const-decl "bool" monoid_def nil)
    (inv_exists? const-decl "bool" group_def nil)
    (group? const-decl "bool" group_def nil)
    (commutative? const-decl "bool" operator_defs nil)
    (abelian_group? const-decl "bool" group_def nil)
    (left_distributive? const-decl "bool" operator_defs_more nil)
    (right_distributive? const-decl "bool" operator_defs_more nil)
    (zero formal-const-decl "T" euclidean_ring_def nil)
    (* formal-const-decl "[T, T -> T]" euclidean_ring_def nil)
    (+ formal-const-decl "[T, T -> T]" euclidean_ring_def nil)
    (T formal-nonempty-type-decl nil euclidean_ring_def nil)
    (ring? const-decl "bool" ring_def nil)
    (commutative_ring? const-decl "bool" ring_def nil)
    (/= const-decl "boolean" notequal nil)
    (singleton const-decl "(singleton?)" sets nil)
    (difference const-decl "set" sets nil))
   nil
   (euclidean_ring? subtype
    "euclidean_ring_def.*(euclidean_ring_def.a, euclidean_ring_def.b)"
    "(sets[euclidean_ring_def.T].difference(euclidean_ring_def.R, sets[euclidean_ring_def.T].singleton(euclidean_ring_def.zero)))")))
 (euclidean_ring?_TCC3 0
  (euclidean_ring?_TCC3-1 nil 3855755442 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (restrict const-decl "R" restrict nil)
    (identity? const-decl "bool" operator_defs nil)
    (monad? const-decl "bool" monad_def nil)
    (associative? const-decl "bool" operator_defs nil)
    (monoid? const-decl "bool" monoid_def nil)
    (inv_exists? const-decl "bool" group_def nil)
    (group? const-decl "bool" group_def nil)
    (commutative? const-decl "bool" operator_defs nil)
    (abelian_group? const-decl "bool" group_def nil)
    (left_distributive? const-decl "bool" operator_defs_more nil)
    (right_distributive? const-decl "bool" operator_defs_more nil)
    (zero formal-const-decl "T" euclidean_ring_def nil)
    (* formal-const-decl "[T, T -> T]" euclidean_ring_def nil)
    (+ formal-const-decl "[T, T -> T]" euclidean_ring_def nil)
    (T formal-nonempty-type-decl nil euclidean_ring_def nil)
    (ring? const-decl "bool" ring_def nil)
    (commutative_ring? const-decl "bool" ring_def nil)
    (/= const-decl "boolean" notequal nil)
    (singleton const-decl "(singleton?)" sets nil)
    (difference const-decl "set" sets nil))
   nil
   (euclidean_ring? subtype "euclidean_ring_def.r"
    "(sets[euclidean_ring_def.T].difference(euclidean_ring_def.R, sets[euclidean_ring_def.T].singleton(euclidean_ring_def.zero)))")))
 (euclidean_ring?_TCC4 0
  (euclidean_ring?_TCC2-1 nil 3855755442 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (restrict const-decl "R" restrict nil)
    (identity? const-decl "bool" operator_defs nil)
    (monad? const-decl "bool" monad_def nil)
    (associative? const-decl "bool" operator_defs nil)
    (monoid? const-decl "bool" monoid_def nil)
    (inv_exists? const-decl "bool" group_def nil)
    (group? const-decl "bool" group_def nil)
    (commutative? const-decl "bool" operator_defs nil)
    (abelian_group? const-decl "bool" group_def nil)
    (left_distributive? const-decl "bool" operator_defs_more nil)
    (right_distributive? const-decl "bool" operator_defs_more nil)
    (zero formal-const-decl "T" euclidean_ring_def nil)
    (* formal-const-decl "[T, T -> T]" euclidean_ring_def nil)
    (+ formal-const-decl "[T, T -> T]" euclidean_ring_def nil)
    (T formal-nonempty-type-decl nil euclidean_ring_def nil)
    (ring? const-decl "bool" ring_def nil)
    (commutative_ring? const-decl "bool" ring_def nil)
    (/= const-decl "boolean" notequal nil)
    (singleton const-decl "(singleton?)" sets nil)
    (difference const-decl "set" sets nil))
   nil
   (euclidean_ring? subtype "euclidean_ring_def.b"
    "(sets[euclidean_ring_def.T].difference(euclidean_ring_def.R, sets[euclidean_ring_def.T].singleton(euclidean_ring_def.zero)))")))
 (euclidean_pair?_TCC1 0
  (euclidean_pair?_TCC1-1 nil 3858764332
   ("" (skeep*)
    (("" (expand "difference")
      (("" (expand "member")
        (("" (expand "singleton")
          (("" (replaces -1)
            (("" (typepred "R")
              (("" (expand "euclidean_ring?")
                (("" (expand "commutative_ring?")
                  (("" (flatten)
                    (("" (hide -3)
                      ((""
                        (case "FORALL (x,y,z:(R)): (x + y) * z = (x * z) + (y * z)")
                        (("1" (inst -1 "zero" "zero" "b")
                          (("1" (case "FORALL (x:(R)): zero + x = x")
                            (("1" (inst?)
                              (("1"
                                (replaces -1)
                                (("1"
                                  (case
                                   "FORALL (x:(R)): x + x = x IMPLIES x = zero")
                                  (("1"
                                    (inst -1 "zero * b")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (expand "ring?")
                                      (("2"
                                        (expand "star_closed?")
                                        (("2"
                                          (expand "abelian_group?")
                                          (("2"
                                            (expand "group?")
                                            (("2"
                                              (expand "monoid?")
                                              (("2"
                                                (expand "monad?")
                                                (("2"
                                                  (expand "member")
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (hide-all-but
                                                       (-3 -8 1))
                                                      (("2"
                                                        (typepred "b")
                                                        (("2"
                                                          (inst?)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide (-1 2))
                                    (("2"
                                      (skosimp*)
                                      (("2"
                                        (expand "ring?")
                                        (("2"
                                          (expand "abelian_group?")
                                          (("2"
                                            (expand "group?")
                                            (("2"
                                              (expand "inv_exists?")
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (hide
                                                   (-4 -6 -7 -8 -9))
                                                  (("2"
                                                    (inst -3 "x!1")
                                                    (("2"
                                                      (skosimp)
                                                      (("2"
                                                        (case
                                                         "x!1 + x!1 + y!1 = x!1 + y!1")
                                                        (("1"
                                                          (expand
                                                           "monoid?")
                                                          (("1"
                                                            (expand
                                                             "associative?")
                                                            (("1"
                                                              (expand
                                                               "restrict")
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (replaces
                                                                     -4)
                                                                    (("1"
                                                                      (replaces
                                                                       -4)
                                                                      (("1"
                                                                        (expand
                                                                         "monad?")
                                                                        (("1"
                                                                          (expand
                                                                           "identity?")
                                                                          (("1"
                                                                            (expand
                                                                             "restrict")
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (replaces -1)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "ring?")
                                (("2"
                                  (expand "abelian_group?")
                                  (("2"
                                    (expand "group?")
                                    (("2"
                                      (expand "monoid?")
                                      (("2"
                                        (expand "monad?")
                                        (("2"
                                          (expand "member")
                                          (("2" (flatten) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skosimp)
                              (("2"
                                (expand "ring?")
                                (("2"
                                  (expand "abelian_group?")
                                  (("2"
                                    (expand "group?")
                                    (("2"
                                      (expand "monoid?")
                                      (("2"
                                        (expand "monad?")
                                        (("2"
                                          (expand "identity?")
                                          (("2"
                                            (expand "restrict")
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (hide-all-but (-4 1))
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "ring?")
                            (("2" (expand "abelian_group?")
                              (("2"
                                (expand "group?")
                                (("2"
                                  (expand "monoid?")
                                  (("2"
                                    (expand "monad?")
                                    (("2"
                                      (expand "member")
                                      (("2" (flatten) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skosimp)
                          (("2" (expand "ring?")
                            (("2" (flatten)
                              (("2"
                                (hide-all-but (-4 1))
                                (("2"
                                  (expand "left_distributive?")
                                  (("2"
                                    (expand "restrict")
                                    (("2" (inst?) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((difference const-decl "set" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (euclidean_ring? const-decl "bool" euclidean_ring_def nil)
    (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil euclidean_ring_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (commutative_ring? const-decl "bool" ring_def nil)
    (left_distributive? const-decl "bool" operator_defs_more nil)
    (R skolem-const-decl "(euclidean_ring?)" euclidean_ring_def nil)
    (zero formal-const-decl "T" euclidean_ring_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (ring? const-decl "bool" ring_def nil)
    (abelian_group? const-decl "bool" group_def nil)
    (monoid? const-decl "bool" monoid_def nil)
    (monad? const-decl "bool" monad_def nil)
    (group? const-decl "bool" group_def nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (b skolem-const-decl "(R)" euclidean_ring_def nil)
    (inv_exists? const-decl "bool" group_def nil)
    (restrict const-decl "R" restrict nil)
    (identity? const-decl "bool" operator_defs nil)
    (associative? const-decl "bool" operator_defs nil)
    (+ formal-const-decl "[T, T -> T]" euclidean_ring_def nil)
    (* formal-const-decl "[T, T -> T]" euclidean_ring_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (member const-decl "bool" sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (euclidean_pair? subtype "euclidean_ring_def.a"
    "(sets[euclidean_ring_def.T].difference(euclidean_ring_def.R, sets[euclidean_ring_def.T].singleton(euclidean_ring_def.zero)))")))
 (euclidean_pair?_TCC2 0
  (euclidean_pair?_TCC2-1 nil 3858764332 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil euclidean_ring_def nil)
    (set type-eq-decl nil sets nil)
    (euclidean_ring? const-decl "bool" euclidean_ring_def nil)
    (R!1 skolem-const-decl "(euclidean_ring?)" euclidean_ring_def nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (restrict const-decl "R" restrict nil)
    (identity? const-decl "bool" operator_defs nil)
    (monad? const-decl "bool" monad_def nil)
    (associative? const-decl "bool" operator_defs nil)
    (monoid? const-decl "bool" monoid_def nil)
    (inv_exists? const-decl "bool" group_def nil)
    (group? const-decl "bool" group_def nil)
    (commutative? const-decl "bool" operator_defs nil)
    (abelian_group? const-decl "bool" group_def nil)
    (left_distributive? const-decl "bool" operator_defs_more nil)
    (right_distributive? const-decl "bool" operator_defs_more nil)
    (zero formal-const-decl "T" euclidean_ring_def nil)
    (* formal-const-decl "[T, T -> T]" euclidean_ring_def nil)
    (+ formal-const-decl "[T, T -> T]" euclidean_ring_def nil)
    (ring? const-decl "bool" ring_def nil)
    (commutative_ring? const-decl "bool" ring_def nil)
    (/= const-decl "boolean" notequal nil)
    (member const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (difference const-decl "set" sets nil))
   nil
   (euclidean_pair? subtype
    "euclidean_ring_def.*(euclidean_ring_def.a, euclidean_ring_def.b)"
    "(sets[euclidean_ring_def.T].difference(euclidean_ring_def.R, sets[euclidean_ring_def.T].singleton(euclidean_ring_def.zero)))")))
 (euclidean_pair?_TCC3 0
  (euclidean_pair?_TCC3-1 nil 3858764332 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil euclidean_ring_def nil)
    (set type-eq-decl nil sets nil)
    (euclidean_ring? const-decl "bool" euclidean_ring_def nil)
    (/= const-decl "boolean" notequal nil)
    (member const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (difference const-decl "set" sets nil))
   nil
   (euclidean_pair? subtype "euclidean_ring_def.r"
    "(sets[euclidean_ring_def.T].difference(euclidean_ring_def.R, sets[euclidean_ring_def.T].singleton(euclidean_ring_def.zero)))")))
 (euclidean_pair?_TCC4 0
  (euclidean_pair?_TCC4-1 nil 3858764332 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil euclidean_ring_def nil)
    (set type-eq-decl nil sets nil)
    (euclidean_ring? const-decl "bool" euclidean_ring_def nil)
    (/= const-decl "boolean" notequal nil)
    (member const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (difference const-decl "set" sets nil))
   nil
   (euclidean_pair? subtype "euclidean_ring_def.b"
    "(sets[euclidean_ring_def.T].difference(euclidean_ring_def.R, sets[euclidean_ring_def.T].singleton(euclidean_ring_def.zero)))")))
 (euclidean_f_phi?_TCC1 0
  (euclidean_f_phi?_TCC1-1 nil 3859386786
   ("" (skeep)
    (("" (skeep)
      (("" (expand "difference")
        (("" (expand "member")
          (("" (expand "singleton") (("" (propax) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((member const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (difference const-decl "set" sets nil))
   nil
   (euclidean_f_phi? subtype "euclidean_ring_def.rem"
    "(sets[euclidean_ring_def.T].difference(euclidean_ring_def.R, sets[euclidean_ring_def.T].singleton(euclidean_ring_def.zero)))")))
 (euclidean_f_phi?_TCC2 0
  (euclidean_f_phi?_TCC2-1 nil 3859386786
   ("" (skeep*)
    (("" (expand "difference")
      (("" (typepred "b")
        (("" (expand "remove")
          (("" (assert)
            (("" (prop)
              (("" (expand "member")
                (("" (expand "singleton") (("" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((difference const-decl "set" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (member const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil euclidean_ring_def nil)
    (set type-eq-decl nil sets nil) (remove const-decl "set" sets nil)
    (zero formal-const-decl "T" euclidean_ring_def nil)
    (euclidean_ring? const-decl "bool" euclidean_ring_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (euclidean_f_phi? subtype "euclidean_ring_def.b"
    "(sets[euclidean_ring_def.T].difference(euclidean_ring_def.R, sets[euclidean_ring_def.T].singleton(euclidean_ring_def.zero)))"))))

