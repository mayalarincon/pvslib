(quotient_rings
 (IMP_ring_cosets_lemmas_TCC1 0
  (IMP_ring_cosets_lemmas_TCC1-1 nil 3793737437
   ("" (rewrite "fullset_is_ring") nil nil)
   ((fullset_is_ring formula-decl nil quotient_rings nil)) nil
   (IMP_ring_cosets_lemmas assuming
    "ring_cosets_lemmas[quotient_rings.T, quotient_rings.+, quotient_rings.*, quotient_rings.zero].ring_cosets_lemmas"
    "fullset_is_ring: ASSUMPTION ring_def[ring_cosets_lemmas.T, ring_cosets_lemmas.+, ring_cosets_lemmas.*, ring_cosets_lemmas.zero].ring?(sets[ring_cosets_lemmas.T].fullset)")))
 (add_charac_TCC1 0
  (add_charac_TCC1-1 nil 3742899827
   ("" (skosimp)
    (("" (rewrite "lcoset_iff_coset" :dir rl)
      (("" (expand "left_coset?") (("" (inst 1 "a!1") nil nil)) nil))
      nil))
    nil)
   ((lcoset_iff_coset formula-decl nil ring_cosets_lemmas nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (+ const-decl "set[T]" cosets_def nil)
    (ring? const-decl "bool" ring_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (T formal-nonempty-type-decl nil quotient_rings nil)
    (+ formal-const-decl "[T, T -> T]" quotient_rings nil)
    (* formal-const-decl "[T, T -> T]" quotient_rings nil)
    (zero formal-const-decl "T" quotient_rings nil)
    (left_coset? const-decl "bool" cosets_def nil))
   nil
   (add_charac subtype
    "(cosets_def[quotient_rings.T, quotient_rings.+].+)(quotient_rings.a, quotient_rings.I)"
    "cosets_def[quotient_rings.T, quotient_rings.+].coset(quotient_rings.R, quotient_rings.I)")))
 (add_charac_TCC2 0
  (add_charac_TCC2-1 nil 3742899827
   ("" (skosimp)
    (("" (rewrite "lcoset_iff_coset" :dir rl)
      (("" (expand "left_coset?") (("" (inst 1 "b!1") nil nil)) nil))
      nil))
    nil)
   ((lcoset_iff_coset formula-decl nil ring_cosets_lemmas nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (+ const-decl "set[T]" cosets_def nil)
    (ring? const-decl "bool" ring_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (T formal-nonempty-type-decl nil quotient_rings nil)
    (+ formal-const-decl "[T, T -> T]" quotient_rings nil)
    (* formal-const-decl "[T, T -> T]" quotient_rings nil)
    (zero formal-const-decl "T" quotient_rings nil)
    (left_coset? const-decl "bool" cosets_def nil))
   nil
   (add_charac subtype
    "(cosets_def[quotient_rings.T, quotient_rings.+].+)(quotient_rings.b, quotient_rings.I)"
    "cosets_def[quotient_rings.T, quotient_rings.+].coset(quotient_rings.R, quotient_rings.I)")))
 (add_charac 0
  (add_charac-1 nil 3742899836
   ("" (skosimp)
    (("" (expand "add")
      (("" (decompose-equality)
        (("" (iff)
          (("" (lemma "gen_is_any")
            (("" (inst-cp -1 "R!1" "I!1" "a!1+I!1" "a!1")
              (("1" (inst -1 "R!1" "I!1" "b!1+I!1" "b!1")
                (("1" (expand "+" -1 (1 3))
                  (("1" (decompose-equality -1)
                    (("1" (inst -1 " lc_gen(R!1, I!1)(b!1 + I!1)")
                      (("1" (iff -1)
                        (("1" (flatten)
                          (("1" (hide -1)
                            (("1" (split -1)
                              (("1"
                                (skosimp)
                                (("1"
                                  (replaces -1)
                                  (("1"
                                    (decompose-equality -1)
                                    (("1"
                                      (inst
                                       -1
                                       "lc_gen(R!1, I!1)(a!1 + I!1)")
                                      (("1"
                                        (iff -1)
                                        (("1"
                                          (expand "+" -1 (1 4))
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (split -1)
                                                (("1"
                                                  (skosimp)
                                                  (("1"
                                                    (replaces -1)
                                                    (("1"
                                                      (expand
                                                       "+"
                                                       1
                                                       (4 6))
                                                      (("1"
                                                        (rewrite
                                                         "plus_associative"
                                                         :dir
                                                         rl)
                                                        (("1"
                                                          (rewrite
                                                           "plus_associative")
                                                          (("1"
                                                            (rewrite
                                                             "plus_commutative")
                                                            (("1"
                                                              (rewrite
                                                               "plus_associative"
                                                               :dir
                                                               rl)
                                                              (("1"
                                                                (case
                                                                 "member(h!2+h!1,I!1)")
                                                                (("1"
                                                                  (prop)
                                                                  (("1"
                                                                    (skosimp)
                                                                    (("1"
                                                                      (inst
                                                                       1
                                                                       "h!2 + h!1 + h!3")
                                                                      (("1"
                                                                        (rewrite
                                                                         "plus_associative"
                                                                         :dir
                                                                         rl)
                                                                        (("1"
                                                                          (rewrite
                                                                           "plus_associative"
                                                                           :dir
                                                                           rl)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         -1)
                                                                        (("2"
                                                                          (typepred
                                                                           "I!1")
                                                                          (("2"
                                                                            (expand
                                                                             "ideal?")
                                                                            (("2"
                                                                              (expand
                                                                               "left_ideal?")
                                                                              (("2"
                                                                                (expand
                                                                                 "subring?")
                                                                                (("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (hide
                                                                                     -1
                                                                                     -3
                                                                                     -4)
                                                                                    (("2"
                                                                                      (lemma
                                                                                       "R_sum_star_closed")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -1
                                                                                         "I!1"
                                                                                         "h!2+h!1"
                                                                                         "h!3")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skosimp)
                                                                    (("2"
                                                                      (inst
                                                                       1
                                                                       "inv(h!2 + h!1) + h!3")
                                                                      (("1"
                                                                        (rewrite
                                                                         "plus_associative"
                                                                         :dir
                                                                         rl)
                                                                        (("1"
                                                                          (rewrite
                                                                           "plus_associative"
                                                                           1)
                                                                          (("1"
                                                                            (rewrite
                                                                             "plus_associative"
                                                                             1)
                                                                            (("1"
                                                                              (rewrite
                                                                               "plus_associative"
                                                                               1)
                                                                              (("1"
                                                                                (rewrite
                                                                                 "plus_associative"
                                                                                 1)
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "plus_associative"
                                                                                   1)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (lemma
                                                                         "R_sum_star_closed")
                                                                        (("2"
                                                                          (typepred
                                                                           "I!1")
                                                                          (("2"
                                                                            (expand
                                                                             "ideal?")
                                                                            (("2"
                                                                              (expand
                                                                               "left_ideal?")
                                                                              (("2"
                                                                                (expand
                                                                                 "subring?")
                                                                                (("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (hide
                                                                                     -1
                                                                                     -3
                                                                                     -4)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -2
                                                                                       "I!1"
                                                                                       "inv[T, +, zero](h!2 + h!1)"
                                                                                       "h!3")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (lemma
                                                                                           "inv_is_member_R")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -1
                                                                                             "I!1"
                                                                                             "h!2+h!1")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   2)
                                                                  (("2"
                                                                    (lemma
                                                                     "R_sum_star_closed")
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "I!1"
                                                                       "h!2"
                                                                       "h!1")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (typepred
                                                                         "I!1")
                                                                        (("2"
                                                                          (expand
                                                                           "ideal?")
                                                                          (("2"
                                                                            (expand
                                                                             "left_ideal?")
                                                                            (("2"
                                                                              (expand
                                                                               "subring?")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (inst 1 "zero")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (typepred "I!1")
                                                    (("2"
                                                      (expand "ideal?")
                                                      (("2"
                                                        (expand
                                                         "left_ideal?")
                                                        (("2"
                                                          (expand
                                                           "subring?")
                                                          (("2"
                                                            (expand
                                                             "ring?")
                                                            (("2"
                                                              (expand
                                                               "abelian_group?")
                                                              (("2"
                                                                (expand
                                                                 "group?")
                                                                (("2"
                                                                  (expand
                                                                   "monoid?")
                                                                  (("2"
                                                                    (expand
                                                                     "monad?")
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (inst 1 "zero")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (hide -1 2)
                                  (("2"
                                    (typepred "I!1")
                                    (("2"
                                      (expand "ideal?")
                                      (("2"
                                        (expand "left_ideal?")
                                        (("2"
                                          (expand "subring?")
                                          (("2"
                                            (expand "ring?")
                                            (("2"
                                              (expand "abelian_group?")
                                              (("2"
                                                (expand "group?")
                                                (("2"
                                                  (expand "monoid?")
                                                  (("2"
                                                    (expand "monad?")
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide -1 2)
                  (("2" (expand "+")
                    (("2" (inst 1 "zero")
                      (("1" (assert) nil nil)
                       ("2" (typepred "I!1")
                        (("2" (expand "ideal?")
                          (("2" (expand "left_ideal?")
                            (("2" (expand "subring?")
                              (("2"
                                (expand "ring?")
                                (("2"
                                  (expand "abelian_group?")
                                  (("2"
                                    (expand "group?")
                                    (("2"
                                      (expand "monoid?")
                                      (("2"
                                        (expand "monad?")
                                        (("2"
                                          (flatten)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (expand "+")
                  (("2" (inst 1 "zero")
                    (("1" (assert) nil nil)
                     ("2" (typepred "I!1")
                      (("2" (expand "ideal?")
                        (("2" (expand "left_ideal?")
                          (("2" (expand "subring?")
                            (("2" (expand "ring?")
                              (("2"
                                (expand "abelian_group?")
                                (("2"
                                  (expand "group?")
                                  (("2"
                                    (expand "monoid?")
                                    (("2"
                                      (expand "monad?")
                                      (("2"
                                        (flatten)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((add const-decl "set[T]" cosets_def nil)
    (abelian_group? const-decl "bool" group_def nil)
    (monoid? const-decl "bool" monoid_def nil)
    (monad? const-decl "bool" monad_def nil)
    (group? const-decl "bool" group_def nil)
    (left_ideal? const-decl "bool" ring_ideal_def nil)
    (R_sum_star_closed formula-decl nil ring_basic_properties nil)
    (subring? const-decl "bool" ring_def nil)
    (inv const-decl "{y | x * y = one AND y * x = one}" group nil)
    (plus_zero formula-decl nil ring nil)
    (negate_is_right_inv formula-decl nil ring nil)
    (inv_is_member_R formula-decl nil ring_basic_properties nil)
    (plus_commutative formula-decl nil ring nil)
    (plus_associative formula-decl nil ring nil)
    (gen_is_any formula-decl nil ring_cosets_lemmas nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (ring? const-decl "bool" ring_def nil)
    (lc_gen const-decl "T" cosets_def nil)
    (left_coset type-eq-decl nil cosets_def nil)
    (left_coset? const-decl "bool" cosets_def nil) nil)
   shostak))
 (add_is_coset 0
  (add_is_coset-1 nil 3743500189
   ("" (skosimp)
    (("" (name-replace "C!1" "add(R!1, I!1)(A!1, B!1)" :hide? nil)
      (("" (expand "add")
        (("" (inst 1 "lc_gen(R!1, I!1)(A!1) + lc_gen(R!1, I!1)(B!1)")
          (("1" (assert) nil nil)
           ("2" (hide -)
            (("2"
              (name-replace "genA" "lc_gen[T, +](R!1, I!1)(A!1)" :hide?
               nil)
              (("2"
                (name-replace "genB" "lc_gen[T, +](R!1, I!1)(B!1)"
                 :hide? nil)
                (("2" (expand "lc_gen")
                  (("2"
                    (typepred
                     "choose({a: T | R!1(a) AND B!1 = a + I!1})"
                     "choose({a: T | R!1(a) AND A!1 = a + I!1})")
                    (("1" (replace -5)
                      (("1" (replace -6)
                        (("1" (hide -2 -4 -5 -6)
                          (("1" (lemma "R_sum_star_closed")
                            (("1" (inst -1 "R!1" "genA" "genB")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide - 2)
                      (("2" (expand "nonempty?")
                        (("2" (expand "empty?")
                          (("2" (expand "member")
                            (("2" (typepred "A!1")
                              (("2"
                                (expand "coset?")
                                (("2"
                                  (expand "left_coset?")
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (skosimp)
                                      (("2"
                                        (inst -3 "a!1")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (hide - 2)
                      (("3" (expand "nonempty?")
                        (("3" (expand "empty?")
                          (("3" (typepred "B!1")
                            (("3" (expand "coset?")
                              (("3"
                                (expand "left_coset?")
                                (("3"
                                  (flatten)
                                  (("3"
                                    (skosimp)
                                    (("3"
                                      (inst -3 "a!1")
                                      (("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((coset? const-decl "bool" cosets_def nil)
    (coset type-eq-decl nil cosets_def nil)
    (add const-decl "set[T]" cosets_def nil)
    (ring? const-decl "bool" ring_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (lc_gen const-decl "T" cosets_def nil)
    (left_coset type-eq-decl nil cosets_def nil)
    (left_coset? const-decl "bool" cosets_def nil)
    (R_sum_star_closed formula-decl nil ring_basic_properties nil) nil)
   shostak))
 (coset_add 0
  (coset_add-1 nil 3748886497
   ("" (skosimp)
    (("" (lemma "lcoset_iff_coset")
      (("" (inst -1 "add(R!1, I!1)(A!1, B!1)" "I!1" "R!1")
        (("" (assert)
          (("" (hide 2)
            (("" (lemma "add_is_coset")
              (("" (inst -1 "R!1" "I!1" "A!1" "B!1")
                (("" (skosimp)
                  (("" (replaces -1)
                    (("" (expand "left_coset?")
                      (("" (inst 1 "a!1") nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((lcoset_iff_coset formula-decl nil ring_cosets_lemmas nil)
    (left_coset? const-decl "bool" cosets_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (ring? const-decl "bool" ring_def nil)
    (add const-decl "set[T]" cosets_def nil)
    (coset type-eq-decl nil cosets_def nil)
    (coset? const-decl "bool" cosets_def nil))
   shostak))
 (product_charac 0
  (product_charac-1 nil 3741003336
   ("" (skosimp)
    (("" (expand "product")
      (("" (expand "lproduct")
        (("" (decompose-equality)
          (("" (lemma "gen_is_any")
            (("" (inst-cp -1 "R!1" "I!1" "(a!1 + I!1)" "a!1")
              (("1" (decompose-equality -2)
                (("1" (inst -1 "lc_gen(R!1, I!1)((a!1 + I!1))")
                  (("1" (iff -1)
                    (("1" (prop)
                      (("1" (expand "+" -1 1)
                        (("1" (skosimp)
                          (("1" (replace -1 1)
                            (("1" (hide -1 -2)
                              (("1"
                                (inst -1 "R!1" "I!1" "b!1 + I!1" "b!1")
                                (("1"
                                  (decompose-equality -1)
                                  (("1"
                                    (inst
                                     -1
                                     "lc_gen(R!1, I!1)(b!1 + I!1)")
                                    (("1"
                                      (iff -1)
                                      (("1"
                                        (prop)
                                        (("1"
                                          (expand "+" -1 1)
                                          (("1"
                                            (skosimp)
                                            (("1"
                                              (replace -1 1)
                                              (("1"
                                                (hide -1 -2)
                                                (("1"
                                                  (expand "+")
                                                  (("1"
                                                    (rewrite
                                                     "left_distributive")
                                                    (("1"
                                                      (rewrite
                                                       "right_distributive")
                                                      (("1"
                                                        (rewrite
                                                         "right_distributive")
                                                        (("1"
                                                          (iff)
                                                          (("1"
                                                            (rewrite
                                                             "plus_associative"
                                                             1)
                                                            (("1"
                                                              (name-replace
                                                               "s"
                                                               "(a!1 * h!2) + ((h!1 * b!1) + (h!1 * h!2))"
                                                               :hide?
                                                               nil)
                                                              (("1"
                                                                (case
                                                                 "I!1(s)")
                                                                (("1"
                                                                  (prop)
                                                                  (("1"
                                                                    (skosimp)
                                                                    (("1"
                                                                      (inst
                                                                       1
                                                                       "s + h!3")
                                                                      (("1"
                                                                        (rewrite
                                                                         "plus_associative"
                                                                         1
                                                                         :dir
                                                                         rl)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (typepred
                                                                         "I!1")
                                                                        (("2"
                                                                          (expand
                                                                           "ideal?")
                                                                          (("2"
                                                                            (expand
                                                                             "left_ideal?")
                                                                            (("2"
                                                                              (expand
                                                                               "subring?")
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (hide
                                                                                   -1
                                                                                   -3
                                                                                   -4)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "R_sum_star_closed")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -1
                                                                                       "I!1"
                                                                                       "s"
                                                                                       "h!3")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skosimp)
                                                                    (("2"
                                                                      (inst
                                                                       1
                                                                       "inv(s)+h!3")
                                                                      (("1"
                                                                        (rewrite
                                                                         "plus_associative"
                                                                         1)
                                                                        (("1"
                                                                          (rewrite
                                                                           "plus_associative"
                                                                           1
                                                                           :dir
                                                                           rl)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (lemma
                                                                         "inv_is_member_R")
                                                                        (("2"
                                                                          (typepred
                                                                           "I!1")
                                                                          (("2"
                                                                            (expand
                                                                             "ideal?")
                                                                            (("2"
                                                                              (expand
                                                                               "left_ideal?")
                                                                              (("2"
                                                                                (expand
                                                                                 "subring?")
                                                                                (("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (hide
                                                                                     -1
                                                                                     -3
                                                                                     -4)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -2
                                                                                       "I!1"
                                                                                       "s")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (lemma
                                                                                           "R_sum_star_closed")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -1
                                                                                             "I!1"
                                                                                             "inv(s)"
                                                                                             "h!3
                   		 ")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   2)
                                                                  (("2"
                                                                    (case
                                                                     "I!1((a!1 * h!2)) AND I!1(((h!1 * b!1) + (h!1 * h!2)))")
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (typepred
                                                                         "I!1")
                                                                        (("1"
                                                                          (expand
                                                                           "ideal?")
                                                                          (("1"
                                                                            (expand
                                                                             "left_ideal?")
                                                                            (("1"
                                                                              (expand
                                                                               "subring?")
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (hide
                                                                                   -1
                                                                                   -3
                                                                                   -4)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "R_sum_star_closed")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "I!1"
                                                                                       "(a!1 * h!2)"
                                                                                       "((h!1 * b!1) + (h!1 * h!2))")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       2)
                                                                      (("2"
                                                                        (typepred
                                                                         "I!1")
                                                                        (("2"
                                                                          (expand
                                                                           "ideal?")
                                                                          (("2"
                                                                            (expand
                                                                             "left_ideal?")
                                                                            (("2"
                                                                              (expand
                                                                               "right_ideal?")
                                                                              (("2"
                                                                                (expand
                                                                                 "subring?")
                                                                                (("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (hide
                                                                                     -1
                                                                                     -4
                                                                                     -5)
                                                                                    (("2"
                                                                                      (split)
                                                                                      (("1"
                                                                                        (hide
                                                                                         -1
                                                                                         -3)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "left_swallow?")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             "a!1"
                                                                                             "h!2")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide
                                                                                         -2)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "right_swallow?")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -2
                                                                                             "b!1"
                                                                                             "h!1")
                                                                                            (("2"
                                                                                              (lemma
                                                                                               "R_sum_star_closed")
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "I!1"
                                                                                                 "h!1 * b!1"
                                                                                                 "h!1 * h!2
                 		 ")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (hide-all-but
                                                                                                     (-1
                                                                                                      1))
                                                                                                    (("2"
                                                                                                      (lemma
                                                                                                       "R_prod_star_closed")
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "I!1"
                                                                                                         "h!1"
                                                                                                         "h!2")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2 3)
                                          (("2"
                                            (expand "+" 1 2)
                                            (("2"
                                              (inst 1 "zero")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (typepred "I!1")
                                                (("2"
                                                  (expand "ideal?")
                                                  (("2"
                                                    (expand
                                                     "left_ideal?")
                                                    (("2"
                                                      (expand
                                                       "subring?")
                                                      (("2"
                                                        (expand
                                                         "ring?")
                                                        (("2"
                                                          (expand
                                                           "abelian_group?")
                                                          (("2"
                                                            (expand
                                                             "group?")
                                                            (("2"
                                                              (expand
                                                               "monoid?")
                                                              (("2"
                                                                (expand
                                                                 "monad?")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "+")
                                  (("2"
                                    (inst 1 "zero")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (typepred "I!1")
                                      (("2"
                                        (expand "ideal?")
                                        (("2"
                                          (expand "left_ideal?")
                                          (("2"
                                            (expand "subring?")
                                            (("2"
                                              (expand "ring?")
                                              (("2"
                                                (expand
                                                 "abelian_group?")
                                                (("2"
                                                  (expand "group?")
                                                  (("2"
                                                    (expand "monoid?")
                                                    (("2"
                                                      (expand "monad?")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but (1))
                        (("2" (expand "+" 1 2)
                          (("2" (inst 1 "zero")
                            (("1" (assert) nil nil)
                             ("2" (typepred "I!1")
                              (("2"
                                (expand "ideal?")
                                (("2"
                                  (expand "left_ideal?")
                                  (("2"
                                    (expand "subring?")
                                    (("2"
                                      (expand "ring?")
                                      (("2"
                                        (expand "abelian_group?")
                                        (("2"
                                          (expand "group?")
                                          (("2"
                                            (expand "monoid?")
                                            (("2"
                                              (expand "monad?")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "+")
                (("2" (hide 2)
                  (("2" (inst 1 "zero")
                    (("1" (assert) nil nil)
                     ("2" (typepred "I!1")
                      (("2" (expand "ideal?")
                        (("2" (expand "left_ideal?")
                          (("2" (expand "subring?")
                            (("2" (expand "ring?")
                              (("2"
                                (expand "abelian_group?")
                                (("2"
                                  (expand "group?")
                                  (("2"
                                    (expand "monoid?")
                                    (("2"
                                      (expand "monad?")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((product const-decl "set[T]" product_coset_def nil) nil
    (left_coset? const-decl "bool" cosets_def nil)
    (left_coset type-eq-decl nil cosets_def nil)
    (lc_gen const-decl "T" cosets_def nil)
    (ring? const-decl "bool" ring_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (plus_zero formula-decl nil ring nil)
    (abelian_group? const-decl "bool" group_def nil)
    (monoid? const-decl "bool" monoid_def nil)
    (monad? const-decl "bool" monad_def nil)
    (group? const-decl "bool" group_def nil)
    (right_distributive formula-decl nil ring nil)
    (right_ideal? const-decl "bool" ring_ideal_def nil)
    (left_swallow? const-decl "bool" ring_ideal_def nil)
    (right_swallow? const-decl "bool" ring_ideal_def nil)
    (R_prod_star_closed formula-decl nil ring_basic_properties nil)
    (subring? const-decl "bool" ring_def nil)
    (R_sum_star_closed formula-decl nil ring_basic_properties nil)
    (left_ideal? const-decl "bool" ring_ideal_def nil)
    (inv const-decl "{y | x * y = one AND y * x = one}" group nil)
    (zero_plus formula-decl nil ring nil)
    (negate_is_right_inv formula-decl nil ring nil)
    (inv_is_member_R formula-decl nil ring_basic_properties nil)
    (plus_associative formula-decl nil ring nil)
    (left_distributive formula-decl nil ring nil)
    (gen_is_any formula-decl nil ring_cosets_lemmas nil)
    (lproduct const-decl "set[T]" product_coset_def nil))
   shostak))
 (lprod_equal_rprod_TCC1 0
  (lprod_equal_rprod_TCC1-1 nil 3740759048
   ("" (skosimp)
    (("" (typepred "A!1")
      (("" (expand "coset?") (("" (flatten) nil nil)) nil)) nil))
    nil)
   ((coset type-eq-decl nil cosets_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (ring? const-decl "bool" ring_def nil)
    (zero formal-const-decl "T" quotient_rings nil)
    (* formal-const-decl "[T, T -> T]" quotient_rings nil)
    (coset? const-decl "bool" cosets_def nil)
    (+ formal-const-decl "[T, T -> T]" quotient_rings nil)
    (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil quotient_rings nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (lprod_equal_rprod subtype "quotient_rings.A"
    "cosets_def[quotient_rings.T, quotient_rings.+].left_coset(quotient_rings.R, quotient_rings.I)")))
 (lprod_equal_rprod_TCC2 0
  (lprod_equal_rprod_TCC2-1 nil 3740759048
   ("" (skosimp)
    (("" (typepred "B!1")
      (("" (expand "coset?") (("" (flatten) nil nil)) nil)) nil))
    nil)
   ((coset type-eq-decl nil cosets_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (ring? const-decl "bool" ring_def nil)
    (zero formal-const-decl "T" quotient_rings nil)
    (* formal-const-decl "[T, T -> T]" quotient_rings nil)
    (coset? const-decl "bool" cosets_def nil)
    (+ formal-const-decl "[T, T -> T]" quotient_rings nil)
    (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil quotient_rings nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (lprod_equal_rprod subtype "quotient_rings.B"
    "cosets_def[quotient_rings.T, quotient_rings.+].left_coset(quotient_rings.R, quotient_rings.I)")))
 (lprod_equal_rprod_TCC3 0
  (lprod_equal_rprod_TCC3-1 nil 3740759048
   ("" (skosimp)
    (("" (typepred "A!1")
      (("" (expand "coset?") (("" (flatten) nil nil)) nil)) nil))
    nil)
   ((coset type-eq-decl nil cosets_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (ring? const-decl "bool" ring_def nil)
    (zero formal-const-decl "T" quotient_rings nil)
    (* formal-const-decl "[T, T -> T]" quotient_rings nil)
    (coset? const-decl "bool" cosets_def nil)
    (+ formal-const-decl "[T, T -> T]" quotient_rings nil)
    (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil quotient_rings nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (lprod_equal_rprod subtype "quotient_rings.A"
    "cosets_def[quotient_rings.T, quotient_rings.+].right_coset(quotient_rings.R, quotient_rings.I)")))
 (lprod_equal_rprod_TCC4 0
  (lprod_equal_rprod_TCC4-2 nil 3794081098
   ("" (skosimp)
    (("" (typepred "B!1")
      (("" (expand "coset?") (("" (flatten) nil nil)) nil)) nil))
    nil)
   ((coset type-eq-decl nil cosets_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (ring? const-decl "bool" ring_def nil)
    (zero formal-const-decl "T" quotient_rings nil)
    (* formal-const-decl "[T, T -> T]" quotient_rings nil)
    (coset? const-decl "bool" cosets_def nil)
    (+ formal-const-decl "[T, T -> T]" quotient_rings nil)
    (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil quotient_rings nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (lprod_equal_rprod subtype "quotient_rings.B"
    "cosets_def[quotient_rings.T, quotient_rings.+].right_coset(quotient_rings.R, quotient_rings.I)"))
  (lprod_equal_rprod_TCC4-1 nil 3740759048
   ("" (skosimp)
    (("" (typepred "B!1")
      (("" (expand "coset?") (("" (flatten) nil nil)) nil)) nil))
    nil)
   ((coset type-eq-decl nil cosets_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (coset? const-decl "bool" cosets_def nil))
   nil
   (lprod_equal_rprod subtype "quotient_rings.B"
    "cosets_def[quotient_rings.T, quotient_rings.+].right_coset(quotient_rings.R, quotient_rings.I)")))
 (lprod_equal_rprod 0
  (lprod_equal_rprod-1 nil 3740764517
   ("" (skosimp)
    (("" (expand "lproduct")
      (("" (expand "rproduct")
        (("" (lemma "lcos_eq_rcos")
          ((""
            (inst -1 "I!1" "R!1"
             "(rc_gen(R!1, I!1)(A!1) * rc_gen(R!1, I!1)(B!1))")
            (("1" (expand "lcos")
              (("1" (expand "rcos")
                (("1" (replace -1 1 rl)
                  (("1" (hide -1)
                    (("1" (typepred "A!1" "B!1")
                      (("1" (expand "coset?")
                        (("1" (flatten)
                          (("1" (hide -2 -4)
                            (("1" (expand "left_coset?")
                              (("1"
                                (skosimp*)
                                (("1"
                                  (lemma "gen_is_any")
                                  (("1"
                                    (inst-cp
                                     -1
                                     "R!1"
                                     "I!1"
                                     "A!1"
                                     "a!1")
                                    (("1"
                                      (inst -1 "R!1" "I!1" "B!1" "a!2")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (hide -2 -4)
                                          (("1"
                                            (replace -3 -2)
                                            (("1"
                                              (replace -4 -1)
                                              (("1"
                                                (rewrite
                                                 "product_charac"
                                                 :dir
                                                 rl)
                                                (("1"
                                                  (rewrite
                                                   "product_charac"
                                                   :dir
                                                   rl)
                                                  (("1"
                                                    (replace -3)
                                                    (("1"
                                                      (replace -4)
                                                      (("1"
                                                        (replace
                                                         -1
                                                         1
                                                         rl)
                                                        (("1"
                                                          (replace
                                                           -2
                                                           1
                                                           rl)
                                                          (("1"
                                                            (lemma
                                                             "gen_is_any")
                                                            (("1"
                                                              (inst-cp
                                                               -1
                                                               "R!1"
                                                               "I!1"
                                                               "A!1"
                                                               "rc_gen(R!1, I!1)(a!1 + I!1)")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "R!1"
                                                                 "I!1"
                                                                 "B!1"
                                                                 "rc_gen(R!1, I!1)(a!2 + I!1)")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (replace
                                                                     -2
                                                                     1
                                                                     rl)
                                                                    (("1"
                                                                      (replace
                                                                       -4
                                                                       1
                                                                       rl)
                                                                      (("1"
                                                                        (replace
                                                                         -7
                                                                         1)
                                                                        (("1"
                                                                          (replace
                                                                           -8
                                                                           1)
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   2
                                                                   -1
                                                                   -3
                                                                   -4)
                                                                  (("2"
                                                                    (name-replace
                                                                     "rgB"
                                                                     "rc_gen[T, +](R!1, I!1)((+[T, +])(a!2, I!1))"
                                                                     :hide?
                                                                     nil)
                                                                    (("2"
                                                                      (expand
                                                                       "rc_gen")
                                                                      (("2"
                                                                        (typepred
                                                                         "choose({a: T | R!1(a) AND (+[T, +])(a!2, I!1) = I!1 + a})")
                                                                        (("1"
                                                                          (replace
                                                                           -3
                                                                           -1)
                                                                          (("1"
                                                                            (replace
                                                                             -3
                                                                             -2)
                                                                            (("1"
                                                                              (hide
                                                                               -3)
                                                                              (("1"
                                                                                (decompose-equality
                                                                                 -2)
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "rgB")
                                                                                  (("1"
                                                                                    (iff)
                                                                                    (("1"
                                                                                      (prop)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide-all-but
                                                                                         1)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "+")
                                                                                          (("2"
                                                                                            (inst
                                                                                             1
                                                                                             "zero")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (typepred
                                                                                               "I!1")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "ideal?")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "left_ideal?")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "subring?")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "ring?")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "abelian_group?")
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "group?")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "monoid?")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "monad?")
                                                                                                              (("2"
                                                                                                                (flatten)
                                                                                                                (("2"
                                                                                                                  (hide-all-but
                                                                                                                   (-3
                                                                                                                    1))
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "member")
                                                                                                                    (("2"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           1)
                                                                          (("2"
                                                                            (expand
                                                                             "nonempty?")
                                                                            (("2"
                                                                              (expand
                                                                               "empty?")
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "a!2")
                                                                                (("2"
                                                                                  (expand
                                                                                   "member")
                                                                                  (("2"
                                                                                    (decompose-equality)
                                                                                    (("2"
                                                                                      (iff)
                                                                                      (("2"
                                                                                        (prop)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "+")
                                                                                          (("1"
                                                                                            (skosimp)
                                                                                            (("1"
                                                                                              (inst
                                                                                               1
                                                                                               "h!1")
                                                                                              (("1"
                                                                                                (rewrite
                                                                                                 "plus_commutative")
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (expand
                                                                                           "+")
                                                                                          (("2"
                                                                                            (skosimp)
                                                                                            (("2"
                                                                                              (inst
                                                                                               1
                                                                                               "h!1")
                                                                                              (("2"
                                                                                                (rewrite
                                                                                                 "plus_commutative")
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (hide-all-but
                                                                   (-5
                                                                    1))
                                                                  (("3"
                                                                    (expand
                                                                     "left_coset?")
                                                                    (("3"
                                                                      (inst
                                                                       1
                                                                       "a!2")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 -1
                                                                 -4
                                                                 2)
                                                                (("2"
                                                                  (name-replace
                                                                   "rgA"
                                                                   "rc_gen[T, +](R!1, I!1)((+[T, +])(a!1, I!1))"
                                                                   :hide?
                                                                   nil)
                                                                  (("2"
                                                                    (expand
                                                                     "rc_gen")
                                                                    (("2"
                                                                      (typepred
                                                                       "choose({a: T | R!1(a) AND (+[T, +])(a!1, I!1) = I!1 + a})")
                                                                      (("1"
                                                                        (replace
                                                                         -3)
                                                                        (("1"
                                                                          (hide
                                                                           -3)
                                                                          (("1"
                                                                            (decompose-equality)
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "rgA")
                                                                              (("1"
                                                                                (iff)
                                                                                (("1"
                                                                                  (prop)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide-all-but
                                                                                     1)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "+")
                                                                                      (("2"
                                                                                        (inst
                                                                                         1
                                                                                         "zero")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (typepred
                                                                                           "I!1")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "ideal?")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "left_ideal?")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "subring?")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "ring?")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "abelian_group?")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "group?")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "monoid?")
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "monad?")
                                                                                                          (("2"
                                                                                                            (flatten)
                                                                                                            (("2"
                                                                                                              (hide-all-but
                                                                                                               (-3
                                                                                                                1))
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "member")
                                                                                                                (("2"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("2"
                                                                          (expand
                                                                           "nonempty?")
                                                                          (("2"
                                                                            (expand
                                                                             "empty?")
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "a!1")
                                                                              (("2"
                                                                                (expand
                                                                                 "member")
                                                                                (("2"
                                                                                  (decompose-equality)
                                                                                  (("2"
                                                                                    (iff)
                                                                                    (("2"
                                                                                      (prop)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "+")
                                                                                        (("1"
                                                                                          (skosimp)
                                                                                          (("1"
                                                                                            (inst
                                                                                             1
                                                                                             "h!1")
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "plus_commutative")
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         "+")
                                                                                        (("2"
                                                                                          (skosimp)
                                                                                          (("2"
                                                                                            (inst
                                                                                             1
                                                                                             "h!1")
                                                                                            (("2"
                                                                                              (rewrite
                                                                                               "plus_commutative")
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (hide-all-but
                                                                 (-3
                                                                  1))
                                                                (("3"
                                                                  (expand
                                                                   "left_coset?")
                                                                  (("3"
                                                                    (inst
                                                                     1
                                                                     "a!1")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (expand "rc_gen")
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (hide-all-but 1)
                                                    (("3"
                                                      (expand "rc_gen")
                                                      (("3"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (expand "lc_gen")
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (hide-all-but 1)
                                                  (("3"
                                                    (expand "lc_gen")
                                                    (("3"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but (-3 1))
                                        (("2"
                                          (replaces -1)
                                          (("2"
                                            (expand "+")
                                            (("2"
                                              (inst 1 "zero")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (typepred "I!1")
                                                (("2"
                                                  (expand "ideal?")
                                                  (("2"
                                                    (expand
                                                     "left_ideal?")
                                                    (("2"
                                                      (expand
                                                       "subring?")
                                                      (("2"
                                                        (expand
                                                         "ring?")
                                                        (("2"
                                                          (expand
                                                           "abelian_group?")
                                                          (("2"
                                                            (expand
                                                             "group?")
                                                            (("2"
                                                              (expand
                                                               "monoid?")
                                                              (("2"
                                                                (expand
                                                                 "monad?")
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (hide-all-but
                                                                     (-3
                                                                      1))
                                                                    (("2"
                                                                      (expand
                                                                       "member")
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but (-1 1))
                                      (("2"
                                        (replaces -1)
                                        (("2"
                                          (expand "+")
                                          (("2"
                                            (inst 1 "zero")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (typepred "I!1")
                                              (("2"
                                                (expand "ideal?")
                                                (("2"
                                                  (expand
                                                   "left_ideal?")
                                                  (("2"
                                                    (expand "subring?")
                                                    (("2"
                                                      (expand "ring?")
                                                      (("2"
                                                        (expand
                                                         "abelian_group?")
                                                        (("2"
                                                          (expand
                                                           "group?")
                                                          (("2"
                                                            (expand
                                                             "monoid?")
                                                            (("2"
                                                              (expand
                                                               "monad?")
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (hide-all-but
                                                                   (-3
                                                                    1))
                                                                  (("2"
                                                                    (expand
                                                                     "member")
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (expand "rc_gen")
                (("2"
                  (typepred "choose({a: T | R!1(a) AND A!1 = I!1 + a})"
                   "choose({a: T | R!1(a) AND B!1 = I!1 + a})")
                  (("1"
                    (name-replace "x"
                     "choose({a: T | R!1(a) AND A!1 = I!1 + a})")
                    (("1"
                      (name-replace "y"
                       "choose({a: T | R!1(a) AND B!1 = I!1 + a})")
                      (("1" (hide -2 -4)
                        (("1" (lemma "R_prod_star_closed")
                          (("1" (inst -1 "R!1" "x" "y")
                            (("1" (expand "member")
                              (("1" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (expand "nonempty?")
                      (("2" (expand "empty?")
                        (("2" (typepred "B!1")
                          (("2" (expand "coset?")
                            (("2" (expand "right_coset?")
                              (("2"
                                (flatten)
                                (("2"
                                  (skosimp)
                                  (("2"
                                    (inst -3 "a!1")
                                    (("2"
                                      (expand "member")
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (hide 2)
                    (("3" (expand "nonempty?")
                      (("3" (expand "empty?")
                        (("3" (typepred "A!1")
                          (("3" (expand "coset?")
                            (("3" (expand "right_coset?")
                              (("3"
                                (flatten)
                                (("3"
                                  (skosimp)
                                  (("3"
                                    (inst -3 "a!1")
                                    (("3"
                                      (expand "member")
                                      (("3" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((lproduct const-decl "set[T]" product_coset_def nil)
    (lcos_eq_rcos formula-decl nil ring_cosets_lemmas nil)
    (R_prod_star_closed formula-decl nil ring_basic_properties nil)
    (lcos const-decl "set[T]" cosets_def nil)
    (left_coset? const-decl "bool" cosets_def nil)
    (gen_is_any formula-decl nil ring_cosets_lemmas nil) nil
    (plus_commutative formula-decl nil ring nil)
    (left_ideal? const-decl "bool" ring_ideal_def nil)
    (group? const-decl "bool" group_def nil)
    (monad? const-decl "bool" monad_def nil)
    (monoid? const-decl "bool" monoid_def nil)
    (abelian_group? const-decl "bool" group_def nil)
    (subring? const-decl "bool" ring_def nil)
    (zero_plus formula-decl nil ring nil) nil
    (lc_gen const-decl "T" cosets_def nil)
    (plus_zero formula-decl nil ring nil)
    (left_coset type-eq-decl nil cosets_def nil)
    (rcos const-decl "set[T]" cosets_def nil)
    (ring? const-decl "bool" ring_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (right_coset? const-decl "bool" cosets_def nil)
    (right_coset type-eq-decl nil cosets_def nil)
    (rc_gen const-decl "T" cosets_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (coset? const-decl "bool" cosets_def nil)
    (coset type-eq-decl nil cosets_def nil)
    (rproduct const-decl "set[T]" product_coset_def nil))
   shostak))
 (product_is_coset 0
  (product_is_coset-1 nil 3741632134
   ("" (skosimp)
    (("" (typepred "A!1" "B!1")
      (("" (expand "coset?")
        (("" (expand "product")
          (("" (flatten)
            (("" (hide -2 -4)
              (("" (expand "left_coset?")
                (("" (skosimp*)
                  (("" (replaces -1)
                    (("" (replaces -1)
                      (("" (expand "lproduct")
                        ((""
                          (inst 1
                           "lc_gen(R!1, I!1)(a!1 + I!1) * lc_gen(R!1, I!1)(a!2 + I!1)")
                          (("1" (expand "lc_gen")
                            (("1"
                              (name-replace "ga1"
                               "choose({a: T | R!1(a) AND (+[T, +])(a!1, I!1) = a + I!1})"
                               :hide? nil)
                              (("1"
                                (name-replace
                                 "ga2"
                                 "choose({a: T | R!1(a) AND (+[T, +])(a!2, I!1) = a + I!1})"
                                 :hide?
                                 nil)
                                (("1"
                                  (typepred
                                   "choose({a: T | R!1(a) AND (+[T, +])(a!2, I!1) = a + I!1})"
                                   " choose({a: T | R!1(a) AND (+[T, +])(a!1, I!1) = a + I!1})")
                                  (("1"
                                    (replaces -5)
                                    (("1"
                                      (replaces -5)
                                      (("1"
                                        (hide -2 -4)
                                        (("1"
                                          (lemma "R_prod_star_closed")
                                          (("1"
                                            (inst -1 "R!1" "ga1" "ga2")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2"
                                      (expand "nonempty?")
                                      (("2"
                                        (expand "empty?")
                                        (("2"
                                          (inst -1 "a!1")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (hide-all-but 1)
                                    (("3"
                                      (expand "nonempty?")
                                      (("3"
                                        (expand "empty?")
                                        (("3"
                                          (inst -1 "a!2")
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2"
                                    (expand "nonempty?")
                                    (("2"
                                      (expand "empty?")
                                      (("2"
                                        (inst -1 "a!2")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but 1)
                                (("2"
                                  (expand "nonempty?")
                                  (("2"
                                    (expand "empty?")
                                    (("2"
                                      (inst -1 "a!1")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "left_coset?")
                            (("2" (inst 1 "a!2") nil nil)) nil)
                           ("3" (expand "left_coset?")
                            (("3" (inst 1 "a!1") nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((coset type-eq-decl nil cosets_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (ring? const-decl "bool" ring_def nil)
    (coset? const-decl "bool" cosets_def nil)
    (product const-decl "set[T]" product_coset_def nil) nil
    (lc_gen const-decl "T" cosets_def nil)
    (left_coset type-eq-decl nil cosets_def nil)
    (R_prod_star_closed formula-decl nil ring_basic_properties nil)
    (lproduct const-decl "set[T]" product_coset_def nil)
    (left_coset? const-decl "bool" cosets_def nil))
   shostak))
 (coset_product 0
  (coset_product-1 nil 3748886841
   ("" (skosimp)
    (("" (lemma "lcoset_iff_coset")
      (("" (inst -1 "product(R!1, I!1)(A!1, B!1)" "I!1" "R!1")
        (("" (assert)
          (("" (hide 2)
            (("" (lemma "product_is_coset")
              (("" (inst -1 "R!1" "I!1" "A!1" "B!1")
                (("" (skosimp)
                  (("" (replaces -1)
                    (("" (expand "left_coset?")
                      (("" (inst 1 "a!1") nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((lcoset_iff_coset formula-decl nil ring_cosets_lemmas nil)
    (left_coset? const-decl "bool" cosets_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (ring? const-decl "bool" ring_def nil)
    (product const-decl "set[T]" product_coset_def nil)
    (coset type-eq-decl nil cosets_def nil)
    (coset? const-decl "bool" cosets_def nil))
   shostak))
 (quotient_group_is_abelian_group_TCC1 0
  (quotient_group_is_abelian_group_TCC1-1 nil 3743435579
   ("" (skosimp)
    (("" (lemma "ideal_is_coset")
      (("" (inst -1 "R!1" "I!1") (("" (inst 1 "I!1") nil nil)) nil))
      nil))
    nil)
   ((zero formal-const-decl "T" quotient_rings nil)
    (* formal-const-decl "[T, T -> T]" quotient_rings nil)
    (+ formal-const-decl "[T, T -> T]" quotient_rings nil)
    (T formal-nonempty-type-decl nil quotient_rings nil)
    (ideal_is_coset formula-decl nil ring_cosets_lemmas nil)
    (coset? const-decl "bool" cosets_def nil)
    (coset type-eq-decl nil cosets_def nil)
    (I!1 skolem-const-decl "ideal[T, +, *, zero](R!1)" quotient_rings
     nil)
    (R!1 skolem-const-decl "ring[T, +, *, zero]" quotient_rings nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (ring? const-decl "bool" ring_def nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (quotient_group_is_abelian_group existence ""
    "cosets_def[quotient_rings.T, quotient_rings.+].coset(quotient_rings.R, quotient_rings.I)")))
 (quotient_group_is_abelian_group_TCC2 0
  (quotient_group_is_abelian_group_TCC2-1 nil 3743435579
   ("" (skosimp)
    (("" (lemma "coset_add")
      (("" (skosimp*)
        (("" (inst -1 "R!1" "I!1" "x1!1`1" "x1!1`2")
          (("" (expand "add") (("" (propax) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((coset_add formula-decl nil quotient_rings nil)
    (T formal-nonempty-type-decl nil quotient_rings nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" quotient_rings nil)
    (* formal-const-decl "[T, T -> T]" quotient_rings nil)
    (zero formal-const-decl "T" quotient_rings nil)
    (ring? const-decl "bool" ring_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (coset? const-decl "bool" cosets_def nil)
    (coset type-eq-decl nil cosets_def nil)
    (add const-decl "set[T]" cosets_def nil))
   nil
   (quotient_group_is_abelian_group subtype
    "cosets_def[quotient_rings.T, quotient_rings.+].add(quotient_rings.R, quotient_rings.I)"
    "[[cosets_def[quotient_rings.T, quotient_rings.+].coset(quotient_rings.R, quotient_rings.I), cosets_def[quotient_rings.T, quotient_rings.+].coset(quotient_rings.R, quotient_rings.I)] -> cosets_def[quotient_rings.T, quotient_rings.+].coset(quotient_rings.R, quotient_rings.I)]")))
 (quotient_group_is_abelian_group_TCC3 0
  (quotient_group_is_abelian_group_TCC3-1 nil 3743435579
   ("" (skosimp)
    (("" (lemma "ideal_is_coset") (("" (inst -1 "R!1" "I!1") nil nil))
      nil))
    nil)
   ((zero formal-const-decl "T" quotient_rings nil)
    (* formal-const-decl "[T, T -> T]" quotient_rings nil)
    (+ formal-const-decl "[T, T -> T]" quotient_rings nil)
    (T formal-nonempty-type-decl nil quotient_rings nil)
    (ideal_is_coset formula-decl nil ring_cosets_lemmas nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (ring? const-decl "bool" ring_def nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (quotient_group_is_abelian_group subtype "quotient_rings.I"
    "cosets_def[quotient_rings.T, quotient_rings.+].coset(quotient_rings.R, quotient_rings.I)")))
 (quotient_group_is_abelian_group 0
  (quotient_group_is_abelian_group-1 nil 3743435813
   ("" (skosimp)
    (("" (expand "abelian_group?")
      (("" (split)
        (("1" (expand "group?")
          (("1" (expand "monoid?")
            (("1" (expand "monad?")
              (("1" (split)
                (("1" (expand "star_closed?")
                  (("1" (skosimp)
                    (("1" (expand "member")
                      (("1" (expand "restrict")
                        (("1" (expand "/")
                          (("1" (lemma "add_is_coset")
                            (("1" (inst -1 "R!1" "I!1" "x!1" "y!1")
                              (("1"
                                (skosimp)
                                (("1"
                                  (replaces)
                                  (("1"
                                    (expand "coset?")
                                    (("1"
                                      (lemma "lcoset_iff_rcoset")
                                      (("1"
                                        (inst -1 "a!1+I!1" "I!1" "R!1")
                                        (("1"
                                          (case
                                           "left_coset?(R!1, I!1)(a!1 + I!1)")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (hide -1 2)
                                            (("2"
                                              (expand "left_coset?")
                                              (("2"
                                                (inst 1 "a!1")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "member")
                  (("2" (expand "restrict")
                    (("2" (expand "/")
                      (("2" (expand "coset?")
                        (("2" (lemma "lcoset_iff_rcoset")
                          (("2" (inst -1 "I!1" "I!1" "R!1")
                            (("2" (case "left_coset?(R!1, I!1)(I!1)")
                              (("1" (assert) nil nil)
                               ("2"
                                (hide -1 2)
                                (("2"
                                  (expand "left_coset?")
                                  (("2"
                                    (inst 1 "zero")
                                    (("1"
                                      (decompose-equality)
                                      (("1"
                                        (iff)
                                        (("1"
                                          (expand "+")
                                          (("1"
                                            (prop)
                                            (("1"
                                              (inst 1 "x!1")
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (skosimp)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (typepred "R!1")
                                      (("2"
                                        (expand "ring?")
                                        (("2"
                                          (expand "abelian_group?")
                                          (("2"
                                            (expand "group?")
                                            (("2"
                                              (expand "monoid?")
                                              (("2"
                                                (expand "monad?")
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (expand "identity?")
                  (("3" (skosimp)
                    (("3" (expand "restrict")
                      (("3" (lemma "add_charac")
                        (("3" (typepred "x!1")
                          (("3" (expand "coset?")
                            (("3" (expand "left_coset?")
                              (("3"
                                (flatten)
                                (("3"
                                  (hide -2 -3)
                                  (("3"
                                    (skosimp)
                                    (("3"
                                      (inst-cp
                                       -2
                                       "R!1"
                                       "I!1"
                                       "a!1"
                                       "zero")
                                      (("1"
                                        (inst
                                         -2
                                         "R!1"
                                         "I!1"
                                         "zero"
                                         "a!1")
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (case-replace
                                             "zero + I!1 = I!1")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (hide - 2)
                                              (("2"
                                                (decompose-equality)
                                                (("2"
                                                  (expand "+")
                                                  (("2"
                                                    (iff)
                                                    (("2"
                                                      (prop)
                                                      (("1"
                                                        (skosimp)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (inst 1 "x!2")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide - 2)
                                          (("2"
                                            (typepred "R!1")
                                            (("2"
                                              (expand "ring?")
                                              (("2"
                                                (expand
                                                 "abelian_group?")
                                                (("2"
                                                  (expand "group?")
                                                  (("2"
                                                    (expand "monoid?")
                                                    (("2"
                                                      (expand "monad?")
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide -1 2)
                                        (("2"
                                          (typepred "R!1")
                                          (("2"
                                            (expand "ring?")
                                            (("2"
                                              (expand "abelian_group?")
                                              (("2"
                                                (expand "group?")
                                                (("2"
                                                  (expand "monoid?")
                                                  (("2"
                                                    (expand "monad?")
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("4" (expand "associative?")
                  (("4" (skosimp)
                    (("4" (expand "restrict")
                      (("4" (typepred "x!1" "y!1" "z!1")
                        (("4" (expand "coset?")
                          (("4" (expand "left_coset?")
                            (("4" (flatten)
                              (("4"
                                (skosimp*)
                                (("4"
                                  (hide-all-but (-1 -4 -7 1))
                                  (("4"
                                    (replaces)
                                    (("4"
                                      (rewrite "add_charac")
                                      (("4"
                                        (rewrite "add_charac")
                                        (("1"
                                          (rewrite "add_charac")
                                          (("1"
                                            (rewrite "add_charac")
                                            (("1"
                                              (rewrite
                                               "plus_associative")
                                              nil
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (typepred
                                                 "R!1"
                                                 "a!2"
                                                 "a!3")
                                                (("2"
                                                  (lemma
                                                   "R_sum_star_closed")
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "R!1"
                                                     "a!2"
                                                     "a!3")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (typepred
                                             "R!1"
                                             "a!1"
                                             "a!2")
                                            (("2"
                                              (lemma
                                               "R_sum_star_closed")
                                              (("2"
                                                (inst
                                                 -1
                                                 "R!1"
                                                 "a!1"
                                                 "a!2")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (expand "inv_exists?")
                  (("5" (skosimp)
                    (("5" (typepred "x!1")
                      (("5" (expand "coset?")
                        (("5" (expand "left_coset?")
                          (("5" (flatten)
                            (("5" (hide -2 -3)
                              (("5"
                                (skosimp)
                                (("5"
                                  (replaces -1)
                                  (("5"
                                    (inst 1 "inv(a!1) + I!1")
                                    (("1"
                                      (rewrite "add_charac")
                                      (("1"
                                        (rewrite "add_charac")
                                        (("1"
                                          (rewrite "left_zero")
                                          nil
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (typepred "a!1")
                                            (("2"
                                              (lemma "inv_member")
                                              (("2"
                                                (inst -1 "R!1" "a!1")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (lemma "inv_member")
                                          (("2"
                                            (inst -1 "R!1" "a!1")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "restrict")
                                      (("2"
                                        (expand "/")
                                        (("2"
                                          (expand "coset?")
                                          (("2"
                                            (lemma "lcoset_iff_rcoset")
                                            (("2"
                                              (inst
                                               -1
                                               "(+[T, +])(inv[T, +, zero](a!1), I!1)"
                                               "I!1"
                                               "R!1")
                                              (("2"
                                                (case
                                                 "left_coset?(R!1, I!1)((+[T, +])(inv[T, +, zero](a!1), I!1))")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (hide - 2)
                                                  (("2"
                                                    (expand
                                                     "left_coset?")
                                                    (("2"
                                                      (inst
                                                       1
                                                       "inv(a!1)")
                                                      (("2"
                                                        (typepred
                                                         "a!1")
                                                        (("2"
                                                          (lemma
                                                           "inv_member")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "R!1"
                                                             "a!1")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "inv")
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "commutative?")
          (("2" (skosimp)
            (("2" (expand "restrict")
              (("2" (typepred "x!1" "y!1")
                (("2" (expand "coset?")
                  (("2" (expand "left_coset?")
                    (("2" (flatten)
                      (("2" (hide-all-but (-1 -4 1))
                        (("2" (skosimp*)
                          (("2" (replaces)
                            (("2" (rewrite "add_charac")
                              (("2"
                                (rewrite "add_charac")
                                (("2"
                                  (rewrite "plus_commutative")
                                  nil
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((abelian_group? const-decl "bool" group_def nil)
    (plus_commutative formula-decl nil ring nil)
    (group? const-decl "bool" group_def nil)
    (monad? const-decl "bool" monad_def nil)
    (inv_exists? const-decl "bool" group_def nil)
    (negate_is_right_inv formula-decl nil ring nil)
    (inv_member formula-decl nil group nil)
    (group nonempty-type-eq-decl nil group nil)
    (left_zero formula-decl nil ring_cosets_lemmas nil)
    (negate_is_left_inv formula-decl nil ring nil)
    (inv const-decl "{y | x * y = one AND y * x = one}" group nil)
    (R_sum_star_closed formula-decl nil ring_basic_properties nil)
    (plus_associative formula-decl nil ring nil)
    (plus_zero formula-decl nil ring nil)
    (zero_plus formula-decl nil ring nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (/ const-decl "setof[set[T]]" cosets_def nil)
    (ring? const-decl "bool" ring_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (coset? const-decl "bool" cosets_def nil)
    (coset type-eq-decl nil cosets_def nil)
    (lcoset_iff_rcoset formula-decl nil ring_cosets_lemmas nil)
    (left_coset? const-decl "bool" cosets_def nil) nil
    (monoid? const-decl "bool" monoid_def nil))
   shostak))
 (quotient_group_is_ring_TCC1 0
  (quotient_group_is_ring_TCC1-1 nil 3741634730
   ("" (skosimp*)
    (("" (lemma "coset_product")
      (("" (inst -1 "R!1" "I!1" "x1!1`1" "x1!1`2")
        (("" (expand "product") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((coset_product formula-decl nil quotient_rings nil)
    (product const-decl "set[T]" product_coset_def nil)
    (coset type-eq-decl nil cosets_def nil)
    (coset? const-decl "bool" cosets_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (ring? const-decl "bool" ring_def nil)
    (zero formal-const-decl "T" quotient_rings nil)
    (* formal-const-decl "[T, T -> T]" quotient_rings nil)
    (+ formal-const-decl "[T, T -> T]" quotient_rings nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-nonempty-type-decl nil quotient_rings nil))
   nil
   (quotient_group_is_ring subtype
    "product_coset_def[quotient_rings.T, quotient_rings.+, quotient_rings.*].product(quotient_rings.R, quotient_rings.I)"
    "[[cosets_def[quotient_rings.T, quotient_rings.+].coset(quotient_rings.R, quotient_rings.I), cosets_def[quotient_rings.T, quotient_rings.+].coset(quotient_rings.R, quotient_rings.I)] -> cosets_def[quotient_rings.T, quotient_rings.+].coset(quotient_rings.R, quotient_rings.I)]")))
 (quotient_group_is_ring 0
  (quotient_group_is_ring-1 nil 3741634840
   ("" (skosimp)
    (("" (expand "ring?")
      (("" (prop)
        (("1" (lemma "quotient_group_is_abelian_group")
          (("1" (inst -1 "R!1" "I!1") nil nil)) nil)
         ("2" (lemma "product_is_coset")
          (("2" (expand "star_closed?")
            (("2" (skosimp)
              (("2" (expand "member")
                (("2" (expand "restrict")
                  (("2" (inst -1 "R!1" "I!1" "x!1" "y!1")
                    (("2" (skosimp)
                      (("2" (expand "/")
                        (("2" (expand "coset?")
                          (("2" (lemma "lcoset_iff_rcoset")
                            (("2"
                              (inst -1 "product(R!1, I!1)(x!1, y!1)"
                               "I!1" "R!1")
                              (("2"
                                (flatten -1)
                                (("2"
                                  (case
                                   "left_coset?(R!1, I!1)(product(R!1, I!1)(x!1, y!1))")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (hide -1 -2 2)
                                    (("2"
                                      (expand "left_coset?")
                                      (("2" (inst 1 "a!1") nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (expand "associative?")
          (("3" (skosimp)
            (("3" (expand "restrict")
              (("3" (typepred "x!1" "y!1" "z!1")
                (("3" (hide -2 -4 -6)
                  (("3" (expand "coset?")
                    (("3" (expand "left_coset?")
                      (("3" (flatten)
                        (("3" (hide -2 -4 -6)
                          (("3" (skosimp*)
                            (("3" (replaces)
                              (("3"
                                (rewrite "product_charac")
                                (("3"
                                  (rewrite "product_charac")
                                  (("1"
                                    (rewrite "product_charac")
                                    (("1"
                                      (rewrite "product_charac")
                                      (("1"
                                        (rewrite "times_associative")
                                        nil
                                        nil)
                                       ("2"
                                        (lemma "R_prod_star_closed")
                                        (("2"
                                          (inst -1 "R!1" "a!2" "a!3")
                                          (("2"
                                            (expand "member")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (lemma "R_prod_star_closed")
                                    (("2"
                                      (inst -1 "R!1" "a!1" "a!2")
                                      (("2"
                                        (expand "member")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("4" (expand "left_distributive?")
          (("4" (skosimp)
            (("4" (expand "restrict")
              (("4" (typepred "x!1" "y!1" "z!1")
                (("4" (hide -2 -4 -6)
                  (("4" (expand "coset?")
                    (("4" (expand "left_coset?")
                      (("4" (flatten)
                        (("4" (hide -2 -4 -6)
                          (("4" (skosimp*)
                            (("4" (replaces)
                              (("4"
                                (rewrite "add_charac")
                                (("4"
                                  (rewrite "product_charac")
                                  (("1"
                                    (rewrite "product_charac")
                                    (("1"
                                      (rewrite "product_charac")
                                      (("1"
                                        (rewrite "add_charac")
                                        (("1"
                                          (rewrite "left_distributive")
                                          nil
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (typepred
                                             "R!1"
                                             "a!2"
                                             "a!3")
                                            (("2"
                                              (lemma
                                               "R_prod_star_closed")
                                              (("2"
                                                (inst
                                                 -1
                                                 "R!1"
                                                 "a!2"
                                                 "a!3")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (hide 2)
                                          (("3"
                                            (typepred
                                             "R!1"
                                             "a!1"
                                             "a!3")
                                            (("3"
                                              (lemma
                                               "R_prod_star_closed")
                                              (("3"
                                                (inst
                                                 -1
                                                 "R!1"
                                                 "a!1"
                                                 "a!3")
                                                (("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (typepred "R!1" "a!1" "a!2")
                                      (("2"
                                        (lemma "R_sum_star_closed")
                                        (("2"
                                          (inst -1 "R!1" "a!1" "a!2")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("5" (expand "right_distributive?")
          (("5" (skosimp)
            (("5" (expand "restrict")
              (("5" (typepred "x!1" "y!1" "z!1")
                (("5" (expand "coset?")
                  (("5" (expand "left_coset?")
                    (("5" (flatten)
                      (("5" (hide -2 -3 -5 -6 -8 -9)
                        (("5" (skosimp*)
                          (("5" (replaces)
                            (("5" (rewrite "add_charac")
                              (("5"
                                (rewrite "product_charac")
                                (("1"
                                  (rewrite "product_charac")
                                  (("1"
                                    (rewrite "product_charac")
                                    (("1"
                                      (rewrite "add_charac")
                                      (("1"
                                        (rewrite "right_distributive")
                                        nil
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (typepred "R!1" "a!1" "a!3")
                                          (("2"
                                            (lemma
                                             "R_prod_star_closed")
                                            (("2"
                                              (inst
                                               -1
                                               "R!1"
                                               "a!1"
                                               "a!3")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (typepred "R!1" "a!1" "a!3")
                                        (("3"
                                          (lemma "R_prod_star_closed")
                                          (("3"
                                            (inst -1 "R!1" "a!1" "a!2")
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (typepred "R!1" "a!2" "a!3")
                                  (("2"
                                    (lemma "R_sum_star_closed")
                                    (("2"
                                      (inst -1 "R!1" "a!2" "a!3")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ring? const-decl "bool" ring_def nil)
    (right_distributive? const-decl "bool" operator_defs_more nil)
    (right_distributive formula-decl nil ring nil)
    (left_distributive? const-decl "bool" operator_defs_more nil)
    (left_distributive formula-decl nil ring nil)
    (R_sum_star_closed formula-decl nil ring_basic_properties nil)
    (times_associative formula-decl nil ring nil)
    (R_prod_star_closed formula-decl nil ring_basic_properties nil)
    (product const-decl "set[T]" product_coset_def nil)
    (left_coset? const-decl "bool" cosets_def nil)
    (lcoset_iff_rcoset formula-decl nil ring_cosets_lemmas nil)
    (/ const-decl "setof[set[T]]" cosets_def nil)
    (coset type-eq-decl nil cosets_def nil)
    (coset? const-decl "bool" cosets_def nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ring nonempty-type-eq-decl nil ring nil))
   shostak))
 (fullset_quot_group_is_ring 0
  (fullset_quot_group_is_ring-1 nil 3758032761
   ("" (skosimp)
    (("" (lemma "quotient_group_is_ring")
      (("" (inst -1 "R!1" "I!1")
        (("" (expand "ring?")
          (("" (flatten)
            (("" (split)
              (("1" (hide-all-but (-1 1))
                (("1" (expand "abelian_group?")
                  (("1" (expand "group?")
                    (("1" (expand "monoid?")
                      (("1" (expand "monad?")
                        (("1" (flatten)
                          (("1" (split)
                            (("1" (hide-all-but (-1 1))
                              (("1"
                                (expand "star_closed?")
                                (("1"
                                  (skosimp)
                                  (("1"
                                    (inst?)
                                    (("1" (grind) nil nil)
                                     ("2"
                                      (expand "restrict")
                                      (("2"
                                        (expand "/")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (expand "restrict")
                                      (("3"
                                        (expand "/")
                                        (("3" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but (-2 1))
                              (("2" (grind) nil nil)) nil)
                             ("3" (hide-all-but (-3 1))
                              (("3"
                                (expand "identity?")
                                (("3"
                                  (skosimp)
                                  (("3"
                                    (inst -1 "x!1")
                                    (("1" (grind) nil nil)
                                     ("2"
                                      (expand "restrict")
                                      (("2"
                                        (expand "/")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("4" (hide-all-but (-4 1))
                              (("4"
                                (expand "associative?")
                                (("4"
                                  (skosimp)
                                  (("4"
                                    (inst -1 "x!1" "y!1" "z!1")
                                    (("1" (grind) nil nil)
                                     ("2"
                                      (expand "restrict")
                                      (("2"
                                        (expand "/")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (expand "restrict")
                                      (("3"
                                        (expand "/")
                                        (("3" (propax) nil nil))
                                        nil))
                                      nil)
                                     ("4"
                                      (expand "restrict")
                                      (("4"
                                        (expand "/")
                                        (("4" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("5" (hide-all-but (-5 1))
                              (("5"
                                (expand "inv_exists?")
                                (("5"
                                  (skosimp)
                                  (("5"
                                    (inst -1 "x!1")
                                    (("1"
                                      (skosimp)
                                      (("1"
                                        (inst 1 "y!1")
                                        (("1" (grind) nil nil)
                                         ("2"
                                          (expand "fullset")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "restrict")
                                      (("2"
                                        (expand "/")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("6" (hide-all-but (-6 1))
                              (("6"
                                (expand "commutative?")
                                (("6"
                                  (skosimp)
                                  (("6"
                                    (inst -1 "x!1" "y!1")
                                    (("1" (grind) nil nil)
                                     ("2"
                                      (expand "restrict")
                                      (("2"
                                        (expand "/")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (expand "restrict")
                                      (("3"
                                        (expand "/")
                                        (("3" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but (-2 1))
                (("2" (expand "star_closed?")
                  (("2" (skosimp)
                    (("2" (inst -1 "x!1" "y!1")
                      (("1" (grind) nil nil)
                       ("2" (expand "restrict")
                        (("2" (expand "/") (("2" (propax) nil nil))
                          nil))
                        nil)
                       ("3" (expand "restrict")
                        (("3" (expand "/") (("3" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide-all-but (-3 1))
                (("3" (expand "associative?")
                  (("3" (skosimp) (("3" (grind) nil nil)) nil)) nil))
                nil)
               ("4" (hide-all-but (-4 1))
                (("4" (expand "left_distributive?")
                  (("4" (skosimp)
                    (("4" (inst -1 "x!1" "y!1" "z!1")
                      (("1" (grind) nil nil)
                       ("2" (expand "restrict")
                        (("2" (expand "/") (("2" (propax) nil nil))
                          nil))
                        nil)
                       ("3" (expand "restrict")
                        (("3" (expand "/") (("3" (propax) nil nil))
                          nil))
                        nil)
                       ("4" (expand "restrict")
                        (("4" (expand "/") (("4" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("5" (hide-all-but (-5 1))
                (("5" (expand "right_distributive?")
                  (("5" (skosimp)
                    (("5" (inst -1 "x!1" "y!1" "z!1")
                      (("1" (grind) nil nil)
                       ("2" (expand "restrict")
                        (("2" (expand "/") (("2" (propax) nil nil))
                          nil))
                        nil)
                       ("3" (expand "restrict")
                        (("3" (expand "/") (("3" (propax) nil nil))
                          nil))
                        nil)
                       ("4" (expand "restrict")
                        (("4" (expand "/") (("4" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((abelian_group? const-decl "bool" group_def nil)
    (monoid? const-decl "bool" monoid_def nil)
    (inv_exists? const-decl "bool" group_def nil)
    (lc_gen const-decl "T" cosets_def nil)
    (add const-decl "set[T]" cosets_def nil)
    (coset? const-decl "bool" cosets_def nil)
    (coset type-eq-decl nil cosets_def nil)
    (/ const-decl "setof[set[T]]" cosets_def nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (monad? const-decl "bool" monad_def nil)
    (group? const-decl "bool" group_def nil)
    (product const-decl "set[T]" product_coset_def nil)
    (lproduct const-decl "set[T]" product_coset_def nil)
    (left_distributive? const-decl "bool" operator_defs_more nil)
    (right_distributive? const-decl "bool" operator_defs_more nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (ring? const-decl "bool" ring_def nil))
   shostak))
 (inv_charac_TCC1 0
  (inv_charac_TCC1-1 nil 3758645069
   ("" (skosimp)
    (("" (rewrite "lcoset_iff_coset" :dir rl)
      (("" (expand "left_coset?") (("" (inst 1 "a!1") nil nil)) nil))
      nil))
    nil)
   ((lcoset_iff_coset formula-decl nil ring_cosets_lemmas nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (+ const-decl "set[T]" cosets_def nil)
    (ring? const-decl "bool" ring_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (T formal-nonempty-type-decl nil quotient_rings nil)
    (+ formal-const-decl "[T, T -> T]" quotient_rings nil)
    (* formal-const-decl "[T, T -> T]" quotient_rings nil)
    (zero formal-const-decl "T" quotient_rings nil)
    (left_coset? const-decl "bool" cosets_def nil))
   nil
   (inv_charac subtype
    "(cosets_def[quotient_rings.T, quotient_rings.+].+)(quotient_rings.a, quotient_rings.I)"
    "cosets_def[quotient_rings.T, quotient_rings.+].coset(quotient_rings.R, quotient_rings.I)")))
 (inv_charac_TCC2 0
  (inv_charac_TCC2-1 nil 3758645069
   ("" (skosimp)
    (("" (lemma "fullset_quot_group_is_ring")
      (("" (inst -1 "R!1" "I!1")
        (("" (expand "ring?")
          (("" (expand "abelian_group?") (("" (flatten) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((fullset_quot_group_is_ring formula-decl nil quotient_rings nil)
    (abelian_group? const-decl "bool" group_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (ring? const-decl "bool" ring_def nil)
    (zero formal-const-decl "T" quotient_rings nil)
    (* formal-const-decl "[T, T -> T]" quotient_rings nil)
    (+ formal-const-decl "[T, T -> T]" quotient_rings nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-nonempty-type-decl nil quotient_rings nil))
   nil
   (inv_charac assuming
    "group[cosets_def[quotient_rings.T, quotient_rings.+].coset(quotient_rings.R, quotient_rings.I), cosets_def[quotient_rings.T, quotient_rings.+].add(quotient_rings.R, quotient_rings.I), quotient_rings.I].group"
    "fullset_is_group: ASSUMPTION group_def[group.T, group.*, group.one].group?(sets[group.T].fullset)")))
 (inv_charac 0
  (inv_charac-1 nil 3758645123
   ("" (skosimp)
    (("" (lemma "unique_inv[coset(R!1,I!1),add(R!1,I!1),I!1]")
      (("1" (inst -1 "a!1+I!1" "inv(a!1)+I!1")
        (("1" (assert)
          (("1" (hide 2)
            (("1" (split)
              (("1" (rewrite "add_charac")
                (("1" (rewrite "left_zero") nil nil)
                 ("2" (hide 2)
                  (("2" (typepred "R!1" "a!1")
                    (("2" (lemma "inv_is_member_R")
                      (("2" (inst -1 "R!1" "a!1")
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (rewrite "add_charac")
                (("1" (rewrite "left_zero") nil nil)
                 ("2" (hide 2)
                  (("2" (typepred "R!1" "a!1")
                    (("2" (lemma "inv_is_member_R")
                      (("2" (inst -1 "R!1" "a!1")
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (rewrite "lcoset_iff_coset" :dir rl)
            (("2" (expand "left_coset?")
              (("2" (inst 1 "inv(a!1)")
                (("2" (lemma "inv_is_member_R")
                  (("2" (inst -1 "R!1" "a!1") (("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2) (("2" (rewrite "ideal_is_coset") nil nil)) nil)
       ("3" (hide 2)
        (("3" (skeep)
          (("3" (lemma "coset_add")
            (("3" (inst -1 "R!1" "I!1" "x1`1" "x1`2")
              (("3" (assert) nil nil)) nil))
            nil))
          nil))
        nil)
       ("4" (hide 2)
        (("4" (inst 1 "I!1") (("4" (rewrite "ideal_is_coset") nil nil))
          nil))
        nil))
      nil))
    nil)
   ((add const-decl "set[T]" cosets_def nil)
    (coset type-eq-decl nil cosets_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (ring? const-decl "bool" ring_def nil)
    (coset? const-decl "bool" cosets_def nil)
    (unique_inv formula-decl nil group nil)
    (left_coset? const-decl "bool" cosets_def nil)
    (lcoset_iff_coset formula-decl nil ring_cosets_lemmas nil)
    (inv_is_member_R formula-decl nil ring_basic_properties nil)
    (left_zero formula-decl nil ring_cosets_lemmas nil)
    (negate_is_right_inv formula-decl nil ring nil)
    (negate_is_left_inv formula-decl nil ring nil) nil
    (inv const-decl "{y | x * y = one AND y * x = one}" group nil)
    (ideal_is_coset formula-decl nil ring_cosets_lemmas nil))
   shostak))
 (coset_subring_TCC1 0
  (coset_subring_TCC1-1 nil 3758461703
   ("" (skosimp) (("" (rewrite "quotient_group_is_ring") nil nil)) nil)
   ((quotient_group_is_ring formula-decl nil quotient_rings nil)
    (T formal-nonempty-type-decl nil quotient_rings nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" quotient_rings nil)
    (* formal-const-decl "[T, T -> T]" quotient_rings nil)
    (zero formal-const-decl "T" quotient_rings nil)
    (ring? const-decl "bool" ring_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil))
   nil
   (coset_subring subtype
    "restrict[set[T], cosets_def[quotient_rings.T, quotient_rings.+].coset(quotient_rings.R, quotient_rings.I), booleans.bool].restrict(cosets_def[quotient_rings.T, quotient_rings.+]./(quotient_rings.R, quotient_rings.I))"
    "(ring_def[cosets_def[quotient_rings.T, quotient_rings.+].coset(quotient_rings.R, quotient_rings.I), cosets_def[quotient_rings.T, quotient_rings.+].add(quotient_rings.R, quotient_rings.I), product_coset_def[quotient_rings.T, quotient_rings.+, quotient_rings.*].product(quotient_rings.R, quotient_rings.I), quotient_rings.I].ring?)")))
 (coset_subring_TCC2 0
  (coset_subring_TCC2-1 nil 3758461703
   ("" (skosimp*)
    (("" (lemma "ideal_is_coset")
      (("" (inst -1 "R!1" "I!1") (("" (inst 1 "I!1") nil nil)) nil))
      nil))
    nil)
   ((zero formal-const-decl "T" quotient_rings nil)
    (* formal-const-decl "[T, T -> T]" quotient_rings nil)
    (+ formal-const-decl "[T, T -> T]" quotient_rings nil)
    (T formal-nonempty-type-decl nil quotient_rings nil)
    (ideal_is_coset formula-decl nil ring_cosets_lemmas nil)
    (coset type-eq-decl nil cosets_def nil)
    (coset? const-decl "bool" cosets_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (ring? const-decl "bool" ring_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (I!1 skolem-const-decl "set[T]" quotient_rings nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (R!1 skolem-const-decl "ring[T, +, *, zero]" quotient_rings nil))
   nil
   (coset_subring existence ""
    "cosets_def[quotient_rings.T, quotient_rings.+].coset(quotient_rings.R, quotient_rings.I)")))
 (coset_subring_TCC3 0
  (coset_subring_TCC3-1 nil 3758461703
   ("" (skosimp*)
    (("" (lemma "coset_add")
      (("" (inst -1 "R!1" "I!1" "x1!1`1" "x1!1`2")
        (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((coset_add formula-decl nil quotient_rings nil)
    (coset type-eq-decl nil cosets_def nil)
    (coset? const-decl "bool" cosets_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (T formal-nonempty-type-decl nil quotient_rings nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" quotient_rings nil)
    (* formal-const-decl "[T, T -> T]" quotient_rings nil)
    (zero formal-const-decl "T" quotient_rings nil)
    (ring? const-decl "bool" ring_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (I!1 skolem-const-decl "set[T]" quotient_rings nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (R!1 skolem-const-decl "ring[T, +, *, zero]" quotient_rings nil))
   nil
   (coset_subring subtype
    "cosets_def[quotient_rings.T, quotient_rings.+].add(quotient_rings.R, quotient_rings.I)"
    "[[cosets_def[quotient_rings.T, quotient_rings.+].coset(quotient_rings.R, quotient_rings.I), cosets_def[quotient_rings.T, quotient_rings.+].coset(quotient_rings.R, quotient_rings.I)] -> cosets_def[quotient_rings.T, quotient_rings.+].coset(quotient_rings.R, quotient_rings.I)]")))
 (coset_subring_TCC4 0
  (coset_subring_TCC4-1 nil 3758461703
   ("" (skosimp*)
    (("" (lemma "coset_product")
      (("" (inst -1 "R!1" "I!1" "x1!1`1" "x1!1`2")
        (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((coset_product formula-decl nil quotient_rings nil)
    (coset type-eq-decl nil cosets_def nil)
    (coset? const-decl "bool" cosets_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (T formal-nonempty-type-decl nil quotient_rings nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" quotient_rings nil)
    (* formal-const-decl "[T, T -> T]" quotient_rings nil)
    (zero formal-const-decl "T" quotient_rings nil)
    (ring? const-decl "bool" ring_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (I!1 skolem-const-decl "set[T]" quotient_rings nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (R!1 skolem-const-decl "ring[T, +, *, zero]" quotient_rings nil))
   nil
   (coset_subring subtype
    "product_coset_def[quotient_rings.T, quotient_rings.+, quotient_rings.*].product(quotient_rings.R, quotient_rings.I)"
    "[[cosets_def[quotient_rings.T, quotient_rings.+].coset(quotient_rings.R, quotient_rings.I), cosets_def[quotient_rings.T, quotient_rings.+].coset(quotient_rings.R, quotient_rings.I)] -> cosets_def[quotient_rings.T, quotient_rings.+].coset(quotient_rings.R, quotient_rings.I)]")))
 (coset_subring_TCC5 0
  (coset_subring_TCC5-1 nil 3758461703
   ("" (skosimp) (("" (rewrite "ideal_is_coset") nil nil)) nil)
   ((ideal_is_coset formula-decl nil ring_cosets_lemmas nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (ring? const-decl "bool" ring_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (T formal-nonempty-type-decl nil quotient_rings nil)
    (+ formal-const-decl "[T, T -> T]" quotient_rings nil)
    (* formal-const-decl "[T, T -> T]" quotient_rings nil)
    (zero formal-const-decl "T" quotient_rings nil))
   nil
   (coset_subring subtype "quotient_rings.I"
    "cosets_def[quotient_rings.T, quotient_rings.+].coset(quotient_rings.R, quotient_rings.I)")))
 (coset_subring 0
  (coset_subring-1 nil 3758461710
   ("" (skosimp)
    (("" (rewrite "subring_equiv" 1)
      (("1" (split)
        (("1" (expand "nonempty?")
          (("1" (expand "empty?")
            (("1" (inst -1 "I!1")
              (("1" (expand "member")
                (("1" (expand "restrict")
                  (("1" (expand "/")
                    (("1" (rewrite "lcoset_iff_coset" :dir rl)
                      (("1" (expand "left_coset?")
                        (("1" (inst 1 "zero")
                          (("1" (rewrite "left_zero") nil nil)
                           ("2" (expand "subring?")
                            (("2" (flatten)
                              (("2"
                                (hide -1)
                                (("2"
                                  (lemma "zero_is_member_R")
                                  (("2"
                                    (inst -1 "S!1")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (rewrite "ideal_is_coset") nil nil))
              nil))
            nil))
          nil)
         ("2" (expand "subset?")
          (("2" (skosimp)
            (("2" (expand "member")
              (("2" (expand "restrict")
                (("2" (expand "/") (("2" (propax) nil nil)) nil)) nil))
              nil))
            nil))
          nil)
         ("3" (skosimp)
          (("3" (split)
            (("1" (expand "restrict")
              (("1" (expand "/")
                (("1" (rewrite "lcoset_iff_coset" :dir rl)
                  (("1" (expand "left_coset?")
                    (("1" (typepred "x!1" "y!1")
                      (("1" (hide -1 -3)
                        (("1" (expand "restrict")
                          (("1" (expand "/")
                            (("1" (expand "coset?")
                              (("1"
                                (flatten)
                                (("1"
                                  (hide -2 -4)
                                  (("1"
                                    (expand "left_coset?")
                                    (("1"
                                      (skosimp*)
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (rewrite "inv_charac")
                                            (("1"
                                              (inst 1 "a!1+inv(a!2)")
                                              (("1"
                                                (rewrite "add_charac")
                                                (("1"
                                                  (hide 2)
                                                  (("1"
                                                    (typepred "a!2")
                                                    (("1"
                                                      (expand
                                                       "subring?")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (hide -3)
                                                          (("1"
                                                            (expand
                                                             "subset?")
                                                            (("1"
                                                              (inst
                                                               -2
                                                               "a!2")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (lemma
                                                                   "inv_is_member_R")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "R!1"
                                                                     "a!2")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred "a!1")
                                                  (("2"
                                                    (hide -3 2)
                                                    (("2"
                                                      (expand
                                                       "subring?")
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (expand
                                                           "subset?")
                                                          (("2"
                                                            (inst?)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (rewrite
                                                 "subring_equiv")
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (hide -1 -2)
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (expand "subring?")
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (expand "subset?")
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (lemma "fullset_quot_group_is_ring")
                      (("2" (inst -1 "R!1" "I!1")
                        (("2" (expand "ring?")
                          (("2" (expand "abelian_group?")
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (hide 2)
                    (("3" (rewrite "ideal_is_coset") nil nil)) nil)
                   ("4" (hide 2)
                    (("4" (skosimp)
                      (("4" (lemma "coset_add")
                        (("4" (inst -1 "R!1" "I!1" "x1!1`1" "x1!1`2")
                          (("4" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("5" (hide 2)
                    (("5" (lemma "ideal_is_coset")
                      (("5" (inst -1 "R!1" "I!1")
                        (("5" (inst 1 "I!1") nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "restrict")
              (("2" (expand "/")
                (("2" (rewrite "lcoset_iff_coset" :dir rl)
                  (("2" (expand "left_coset?")
                    (("2" (typepred "x!1" "y!1")
                      (("2" (hide -1 -3)
                        (("2" (expand "restrict")
                          (("2" (expand "/")
                            (("2" (expand "coset?")
                              (("2"
                                (flatten)
                                (("2"
                                  (hide -2 -4)
                                  (("2"
                                    (expand "left_coset?")
                                    (("2"
                                      (skosimp*)
                                      (("2"
                                        (replaces -1)
                                        (("2"
                                          (replaces -1)
                                          (("2"
                                            (inst 1 "a!1*a!2")
                                            (("1"
                                              (rewrite
                                               "product_charac")
                                              (("1"
                                                (hide 2)
                                                (("1"
                                                  (expand "subring?")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (expand
                                                       "subset?")
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (expand "subring?")
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (expand
                                                       "subset?")
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "subring?")
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (hide -1)
                                                  (("2"
                                                    (lemma
                                                     "R_prod_star_closed")
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "S!1"
                                                       "a!1"
                                                       "a!2")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (rewrite "fullset_quot_group_is_ring") nil nil)) nil)
       ("3" (hide 2) (("3" (rewrite "ideal_is_coset") nil nil)) nil)
       ("4" (hide 2)
        (("4" (skosimp)
          (("4" (lemma "coset_product")
            (("4" (inst -1 "R!1" "I!1" "x1!1`1" "x1!1`2")
              (("4" (assert) nil nil)) nil))
            nil))
          nil))
        nil)
       ("5" (hide 2)
        (("5" (skosimp)
          (("5" (lemma "coset_add")
            (("5" (inst -1 "R!1" "I!1" "x1!1`1" "x1!1`2")
              (("5" (assert) nil nil)) nil))
            nil))
          nil))
        nil)
       ("6" (hide 2)
        (("6" (lemma "ideal_is_coset")
          (("6" (inst -1 "R!1" "I!1") (("6" (inst 1 "I!1") nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subring_equiv formula-decl nil ring_basic_properties nil)
    (/ const-decl "setof[set[T]]" cosets_def nil)
    (coset? const-decl "bool" cosets_def nil)
    (ring? const-decl "bool" ring_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (coset type-eq-decl nil cosets_def nil)
    (add const-decl "set[T]" cosets_def nil)
    (product const-decl "set[T]" product_coset_def nil)
    (R_prod_star_closed formula-decl nil ring_basic_properties nil)
    (group? const-decl "bool" group_def nil)
    (inv const-decl "{y | x * y = one AND y * x = one}" group nil)
    (inv_is_member_R formula-decl nil ring_basic_properties nil)
    (abelian_group? const-decl "bool" group_def nil)
    (lcoset_iff_coset formula-decl nil ring_cosets_lemmas nil)
    (left_zero formula-decl nil ring_cosets_lemmas nil)
    (zero_is_member_R formula-decl nil ring_basic_properties nil)
    (subring? const-decl "bool" ring_def nil)
    (left_coset? const-decl "bool" cosets_def nil)
    (ideal_is_coset formula-decl nil ring_cosets_lemmas nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil))
   shostak))
 (coset_ideal_TCC1 0
  (coset_ideal_TCC1-1 nil 3758638053
   ("" (skosimp) (("" (rewrite "quotient_group_is_ring") nil nil)) nil)
   ((quotient_group_is_ring formula-decl nil quotient_rings nil)
    (T formal-nonempty-type-decl nil quotient_rings nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" quotient_rings nil)
    (* formal-const-decl "[T, T -> T]" quotient_rings nil)
    (zero formal-const-decl "T" quotient_rings nil)
    (ring? const-decl "bool" ring_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil))
   nil
   (coset_ideal subtype
    "restrict[set[T], cosets_def[quotient_rings.T, quotient_rings.+].coset(quotient_rings.R, quotient_rings.I), booleans.bool].restrict(cosets_def[quotient_rings.T, quotient_rings.+]./(quotient_rings.R, quotient_rings.I))"
    "(ring_def[cosets_def[quotient_rings.T, quotient_rings.+].coset(quotient_rings.R, quotient_rings.I), cosets_def[quotient_rings.T, quotient_rings.+].add(quotient_rings.R, quotient_rings.I), product_coset_def[quotient_rings.T, quotient_rings.+, quotient_rings.*].product(quotient_rings.R, quotient_rings.I), quotient_rings.I].ring?)")))
 (coset_ideal_TCC2 0
  (coset_ideal_TCC3-1 nil 3758638053
   ("" (skosimp*)
    (("" (lemma "coset_add")
      (("" (inst -1 "R!1" "I!1" "x1!1`1" "x1!1`2")
        (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((coset_add formula-decl nil quotient_rings nil)
    (coset type-eq-decl nil cosets_def nil)
    (coset? const-decl "bool" cosets_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (T formal-nonempty-type-decl nil quotient_rings nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" quotient_rings nil)
    (* formal-const-decl "[T, T -> T]" quotient_rings nil)
    (zero formal-const-decl "T" quotient_rings nil)
    (ring? const-decl "bool" ring_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (I!1 skolem-const-decl "set[T]" quotient_rings nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (R!1 skolem-const-decl "ring[T, +, *, zero]" quotient_rings nil))
   nil
   (coset_ideal subtype
    "cosets_def[quotient_rings.T, quotient_rings.+].add(quotient_rings.R, quotient_rings.I)"
    "[[cosets_def[quotient_rings.T, quotient_rings.+].coset(quotient_rings.R, quotient_rings.I), cosets_def[quotient_rings.T, quotient_rings.+].coset(quotient_rings.R, quotient_rings.I)] -> cosets_def[quotient_rings.T, quotient_rings.+].coset(quotient_rings.R, quotient_rings.I)]")))
 (coset_ideal_TCC3 0
  (coset_ideal_TCC4-1 nil 3758638053
   ("" (skosimp*)
    (("" (lemma "coset_product")
      (("" (inst -1 "R!1" "I!1" "x1!1`1" "x1!1`2")
        (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((coset_product formula-decl nil quotient_rings nil)
    (coset type-eq-decl nil cosets_def nil)
    (coset? const-decl "bool" cosets_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (T formal-nonempty-type-decl nil quotient_rings nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" quotient_rings nil)
    (* formal-const-decl "[T, T -> T]" quotient_rings nil)
    (zero formal-const-decl "T" quotient_rings nil)
    (ring? const-decl "bool" ring_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (I!1 skolem-const-decl "set[T]" quotient_rings nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (R!1 skolem-const-decl "ring[T, +, *, zero]" quotient_rings nil))
   nil
   (coset_ideal subtype
    "product_coset_def[quotient_rings.T, quotient_rings.+, quotient_rings.*].product(quotient_rings.R, quotient_rings.I)"
    "[[cosets_def[quotient_rings.T, quotient_rings.+].coset(quotient_rings.R, quotient_rings.I), cosets_def[quotient_rings.T, quotient_rings.+].coset(quotient_rings.R, quotient_rings.I)] -> cosets_def[quotient_rings.T, quotient_rings.+].coset(quotient_rings.R, quotient_rings.I)]")))
 (coset_ideal_TCC4 0
  (coset_ideal_TCC5-1 nil 3758638053
   ("" (skosimp) (("" (rewrite "ideal_is_coset") nil nil)) nil)
   ((ideal_is_coset formula-decl nil ring_cosets_lemmas nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (ring? const-decl "bool" ring_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (T formal-nonempty-type-decl nil quotient_rings nil)
    (+ formal-const-decl "[T, T -> T]" quotient_rings nil)
    (* formal-const-decl "[T, T -> T]" quotient_rings nil)
    (zero formal-const-decl "T" quotient_rings nil))
   nil
   (coset_ideal subtype "quotient_rings.I"
    "cosets_def[quotient_rings.T, quotient_rings.+].coset(quotient_rings.R, quotient_rings.I)")))
 (coset_ideal 0
  (coset_ideal-2 nil 3758650741
   ("" (skosimp)
    (("" (rewrite "ideal_equiv" 1)
      (("1" (split)
        (("1" (expand "nonempty?")
          (("1" (expand "empty?")
            (("1" (inst -1 "I!1")
              (("1" (expand "member")
                (("1" (expand "restrict")
                  (("1" (expand "/")
                    (("1" (rewrite "lcoset_iff_coset" :dir rl)
                      (("1" (expand "left_coset?")
                        (("1" (inst 1 "zero")
                          (("1" (rewrite "left_zero") nil nil)
                           ("2" (expand "ideal?")
                            (("2" (expand "left_ideal?")
                              (("2"
                                (expand "subring?")
                                (("2"
                                  (flatten)
                                  (("2"
                                    (hide -1 -3 -4)
                                    (("2"
                                      (lemma "zero_is_member_R")
                                      (("2"
                                        (inst -1 "S!1")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (rewrite "ideal_is_coset") nil nil))
              nil))
            nil))
          nil)
         ("2" (expand "subset?")
          (("2" (skosimp)
            (("2" (expand "member")
              (("2" (expand "restrict")
                (("2" (expand "/") (("2" (propax) nil nil)) nil)) nil))
              nil))
            nil))
          nil)
         ("3" (skosimp)
          (("3" (split)
            (("1" (expand "restrict")
              (("1" (typepred "x!1" "y!1")
                (("1" (hide -1 -3)
                  (("1" (expand "restrict")
                    (("1" (expand "/")
                      (("1" (rewrite "lcoset_iff_coset" 1 :dir rl)
                        (("1" (expand "coset?")
                          (("1" (flatten)
                            (("1" (hide -2 -4)
                              (("1"
                                (expand "left_coset?")
                                (("1"
                                  (skosimp*)
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (replace -2)
                                      (("1"
                                        (lemma "add_charac")
                                        (("1"
                                          (lemma "inv_charac")
                                          (("1"
                                            (inst -1 "R!1" "I!1" "a!2")
                                            (("1"
                                              (replaces -1)
                                              (("1"
                                                (inst 1 "a!1+inv(a!2)")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "R!1"
                                                   "I!1"
                                                   "a!1"
                                                   "inv(a!2)")
                                                  (("1"
                                                    (hide 2)
                                                    (("1"
                                                      (typepred "a!2")
                                                      (("1"
                                                        (expand
                                                         "ideal?"
                                                         -4)
                                                        (("1"
                                                          (expand
                                                           "left_ideal?")
                                                          (("1"
                                                            (expand
                                                             "subring?")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (hide-all-but
                                                                 (-1
                                                                  -4
                                                                  1))
                                                                (("1"
                                                                  (expand
                                                                   "subset?")
                                                                  (("1"
                                                                    (inst
                                                                     -2
                                                                     "a!2")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (lemma
                                                                         "inv_is_member_R")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "R!1"
                                                                           "a!2")
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (typepred "a!1")
                                                    (("2"
                                                      (hide-all-but
                                                       (-1 -4 1))
                                                      (("2"
                                                        (expand
                                                         "ideal?")
                                                        (("2"
                                                          (expand
                                                           "left_ideal?")
                                                          (("2"
                                                            (expand
                                                             "subring?")
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (hide
                                                                 -3
                                                                 -4
                                                                 -5)
                                                                (("2"
                                                                  (expand
                                                                   "subset?")
                                                                  (("2"
                                                                    (inst
                                                                     -2
                                                                     "a!1")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "ideal?")
                                                  (("2"
                                                    (expand
                                                     "left_ideal?")
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (hide-all-but
                                                         (-4 1))
                                                        (("2"
                                                          (rewrite
                                                           "subring_equiv")
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (hide
                                                               -1
                                                               -2)
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "a!1"
                                                                 "a!2")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred "a!2")
                                              (("2"
                                                (hide-all-but
                                                 (-1 -5 1))
                                                (("2"
                                                  (expand "ideal?")
                                                  (("2"
                                                    (expand
                                                     "left_ideal?")
                                                    (("2"
                                                      (expand
                                                       "subring?")
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (hide
                                                           -3
                                                           -4
                                                           -5)
                                                          (("2"
                                                            (expand
                                                             "subset?")
                                                            (("2"
                                                              (inst
                                                               -2
                                                               "a!2")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide -1 -2 2)
                          (("2" (lemma "fullset_quot_group_is_ring")
                            (("2" (inst -1 "R!1" "I!1")
                              (("2"
                                (expand "ring?")
                                (("2"
                                  (flatten)
                                  (("2"
                                    (hide-all-but (-1 1))
                                    (("2"
                                      (expand "abelian_group?")
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (rewrite "ideal_is_coset") nil nil)
                         ("4" (hide -1 -2 2)
                          (("4" (skosimp)
                            (("4" (lemma "coset_add")
                              (("4"
                                (inst -1 "R!1" "I!1" "x1!1`1" "x1!1`2")
                                (("4" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("5" (hide 2)
                          (("5" (inst 1 "I!1")
                            (("5" (rewrite "ideal_is_coset") nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "restrict")
              (("2" (typepred "x!1" "r!1")
                (("2" (hide -1 -4)
                  (("2" (expand "restrict")
                    (("2" (expand "coset?")
                      (("2" (flatten)
                        (("2" (hide -3)
                          (("2" (expand "left_coset?")
                            (("2" (expand "/")
                              (("2"
                                (rewrite "lcoset_iff_coset" 1 :dir rl)
                                (("2"
                                  (expand "coset?")
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (hide -2)
                                      (("2"
                                        (expand "left_coset?")
                                        (("2"
                                          (skosimp*)
                                          (("2"
                                            (replaces -1)
                                            (("2"
                                              (replaces -1)
                                              (("2"
                                                (inst 1 "a!1*a!2")
                                                (("1"
                                                  (rewrite
                                                   "product_charac")
                                                  (("1"
                                                    (hide 2)
                                                    (("1"
                                                      (typepred "a!1")
                                                      (("1"
                                                        (expand
                                                         "ideal?")
                                                        (("1"
                                                          (expand
                                                           "left_ideal?")
                                                          (("1"
                                                            (expand
                                                             "subring?")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (hide-all-but
                                                                 (-1
                                                                  -2
                                                                  1))
                                                                (("1"
                                                                  (expand
                                                                   "subset?")
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide -2 -3)
                                                  (("2"
                                                    (typepred
                                                     "a!1"
                                                     "a!2")
                                                    (("2"
                                                      (expand "ideal?")
                                                      (("2"
                                                        (expand
                                                         "right_ideal?")
                                                        (("2"
                                                          (expand
                                                           "right_swallow?")
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (hide
                                                               -3
                                                               -4)
                                                              (("2"
                                                                (inst
                                                                 -3
                                                                 "a!2"
                                                                 "a!1")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (expand "restrict")
              (("3" (expand "/")
                (("3" (rewrite "lcoset_iff_coset" :dir rl)
                  (("3" (expand "left_coset?")
                    (("3" (typepred "r!1" "x!1")
                      (("3" (hide -2 -3)
                        (("3" (expand "restrict")
                          (("3" (expand "/")
                            (("3" (expand "coset?")
                              (("3"
                                (flatten)
                                (("3"
                                  (hide -2 -4)
                                  (("3"
                                    (expand "left_coset?")
                                    (("3"
                                      (skosimp*)
                                      (("3"
                                        (replaces -1)
                                        (("3"
                                          (replaces -1)
                                          (("3"
                                            (inst 1 "a!1*a!2")
                                            (("1"
                                              (rewrite
                                               "product_charac")
                                              (("1"
                                                (typepred "a!2")
                                                (("1"
                                                  (expand "ideal?")
                                                  (("1"
                                                    (expand
                                                     "left_ideal?")
                                                    (("1"
                                                      (expand
                                                       "subring?")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (hide-all-but
                                                           (-1 -2 1))
                                                          (("1"
                                                            (expand
                                                             "subset?")
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred "a!1" "a!2")
                                              (("2"
                                                (hide -4 -5)
                                                (("2"
                                                  (expand "ideal?")
                                                  (("2"
                                                    (expand
                                                     "left_ideal?")
                                                    (("2"
                                                      (expand
                                                       "left_swallow?")
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (hide -3 -5)
                                                          (("2"
                                                            (inst
                                                             -3
                                                             "a!1"
                                                             "a!2")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (rewrite "fullset_quot_group_is_ring") nil nil)) nil)
       ("3" (hide 2) (("3" (rewrite "ideal_is_coset") nil nil)) nil)
       ("4" (hide 2)
        (("4" (skosimp)
          (("4" (lemma "coset_product")
            (("4" (inst -1 "R!1" "I!1" "x1!1`1" "x1!1`2")
              (("4" (assert) nil nil)) nil))
            nil))
          nil))
        nil)
       ("5" (hide 2)
        (("5" (skosimp)
          (("5" (lemma "coset_add")
            (("5" (inst -1 "R!1" "I!1" "x1!1`1" "x1!1`2")
              (("5" (assert) nil nil)) nil))
            nil))
          nil))
        nil)
       ("6" (hide 2)
        (("6" (inst 1 "I!1") (("6" (rewrite "ideal_is_coset") nil nil))
          nil))
        nil))
      nil))
    nil)
   ((ideal_equiv formula-decl nil ring_ideal nil)
    (/ const-decl "setof[set[T]]" cosets_def nil)
    (coset? const-decl "bool" cosets_def nil)
    (ring? const-decl "bool" ring_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (coset type-eq-decl nil cosets_def nil)
    (add const-decl "set[T]" cosets_def nil)
    (product const-decl "set[T]" product_coset_def nil)
    (left_swallow? const-decl "bool" ring_ideal_def nil)
    (right_swallow? const-decl "bool" ring_ideal_def nil)
    (right_ideal? const-decl "bool" ring_ideal_def nil)
    (abelian_group? const-decl "bool" group_def nil)
    (subring_equiv formula-decl nil ring_basic_properties nil)
    (inv_is_member_R formula-decl nil ring_basic_properties nil)
    (inv const-decl "{y | x * y = one AND y * x = one}" group nil)
    (group? const-decl "bool" group_def nil)
    (lcoset_iff_coset formula-decl nil ring_cosets_lemmas nil)
    (left_zero formula-decl nil ring_cosets_lemmas nil)
    (left_ideal? const-decl "bool" ring_ideal_def nil)
    (zero_is_member_R formula-decl nil ring_basic_properties nil)
    (subring? const-decl "bool" ring_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (left_coset? const-decl "bool" cosets_def nil)
    (ideal_is_coset formula-decl nil ring_cosets_lemmas nil)
    (ideal type-eq-decl nil ring_ideal_def nil))
   nil)
  (coset_ideal-1 nil 3758638066
   ("" (skosimp)
    (("" (rewrite "ideal_equiv" 1)
      (("1" (split)
        (("1" (expand "nonempty?")
          (("1" (expand "empty?")
            (("1" (inst -1 "I!1")
              (("1" (expand "member")
                (("1" (expand "restrict")
                  (("1" (expand "/")
                    (("1" (rewrite "lcoset_iff_coset" :dir rl)
                      (("1" (expand "left_coset?")
                        (("1" (inst 1 "zero")
                          (("1" (rewrite "left_zero") nil nil)
                           ("2" (expand "ideal?")
                            (("2" (expand "left_ideal?")
                              (("2"
                                (expand "subring?")
                                (("2"
                                  (flatten)
                                  (("2"
                                    (hide -1 -3 -4)
                                    (("2"
                                      (lemma "zero_is_member_R")
                                      (("2"
                                        (inst -1 "S!1")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (rewrite "ideal_is_coset") nil nil))
              nil))
            nil))
          nil)
         ("2" (expand "subset?")
          (("2" (skosimp)
            (("2" (expand "member")
              (("2" (expand "restrict")
                (("2" (expand "/") (("2" (propax) nil nil)) nil)) nil))
              nil))
            nil))
          nil)
         ("3" (skosimp)
          (("3" (split)
            (("1" (expand "restrict")
              (("1" (typepred "x!1" "y!1")
                (("1" (hide -1 -3)
                  (("1" (expand "restrict")
                    (("1" (expand "/")
                      (("1" (rewrite "lcoset_iff_coset" 1 :dir rl)
                        (("1" (expand "coset?")
                          (("1" (flatten)
                            (("1" (hide -2 -4)
                              (("1"
                                (expand "left_coset?")
                                (("1"
                                  (skosimp*)
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (replace -2)
                                      (("1"
                                        (lemma "add_charac")
                                        (("1"
                                          (lemma "inv_charac")
                                          (("1"
                                            (inst -1 "R!1" "I!1" "a!2")
                                            (("1"
                                              (replaces -1)
                                              (("1"
                                                (inst 1 "a!1+inv(a!2)")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "R!1"
                                                   "I!1"
                                                   "a!1"
                                                   "inv(a!2)")
                                                  (("1"
                                                    (hide 2)
                                                    (("1"
                                                      (typepred "a!2")
                                                      (("1"
                                                        (expand
                                                         "ideal?"
                                                         -4)
                                                        (("1"
                                                          (expand
                                                           "left_ideal?")
                                                          (("1"
                                                            (expand
                                                             "subring?")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (hide-all-but
                                                                 (-1
                                                                  -4
                                                                  1))
                                                                (("1"
                                                                  (expand
                                                                   "subset?")
                                                                  (("1"
                                                                    (inst
                                                                     -2
                                                                     "a!2")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (lemma
                                                                         "inv_is_member_R")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "R!1"
                                                                           "a!2")
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (typepred "a!1")
                                                    (("2"
                                                      (hide-all-but
                                                       (-1 -4 1))
                                                      (("2"
                                                        (expand
                                                         "ideal?")
                                                        (("2"
                                                          (expand
                                                           "left_ideal?")
                                                          (("2"
                                                            (expand
                                                             "subring?")
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (hide
                                                                 -3
                                                                 -4
                                                                 -5)
                                                                (("2"
                                                                  (expand
                                                                   "subset?")
                                                                  (("2"
                                                                    (inst
                                                                     -2
                                                                     "a!1")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "ideal?")
                                                  (("2"
                                                    (expand
                                                     "left_ideal?")
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (hide-all-but
                                                         (-4 1))
                                                        (("2"
                                                          (rewrite
                                                           "subring_equiv")
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (hide
                                                               -1
                                                               -2)
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "a!1"
                                                                 "a!2")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred "a!2")
                                              (("2"
                                                (hide-all-but
                                                 (-1 -5 1))
                                                (("2"
                                                  (expand "ideal?")
                                                  (("2"
                                                    (expand
                                                     "left_ideal?")
                                                    (("2"
                                                      (expand
                                                       "subring?")
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (hide
                                                           -3
                                                           -4
                                                           -5)
                                                          (("2"
                                                            (expand
                                                             "subset?")
                                                            (("2"
                                                              (inst
                                                               -2
                                                               "a!2")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (inst 1 "I!1")
                            (("2" (rewrite "ideal_is_coset") nil nil))
                            nil))
                          nil)
                         ("3" (hide -1 -2 2)
                          (("3" (lemma "fullset_quot_group_is_ring")
                            (("3" (inst -1 "R!1" "I!1")
                              (("3"
                                (expand "ring?")
                                (("3"
                                  (flatten)
                                  (("3"
                                    (hide-all-but (-1 1))
                                    (("3"
                                      (expand "abelian_group?")
                                      (("3" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("4" (hide -1 -2 2)
                          (("4" (rewrite "ideal_is_coset") nil nil))
                          nil)
                         ("5" (hide -1 -2 2)
                          (("5" (skosimp)
                            (("5" (lemma "coset_add")
                              (("5"
                                (inst -1 "R!1" "I!1" "x1!1`1" "x1!1`2")
                                (("5" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "restrict")
              (("2" (typepred "x!1" "r!1")
                (("2" (hide -1 -4)
                  (("2" (expand "restrict")
                    (("2" (expand "coset?")
                      (("2" (flatten)
                        (("2" (hide -3)
                          (("2" (expand "left_coset?")
                            (("2" (expand "/")
                              (("2"
                                (rewrite "lcoset_iff_coset" 1 :dir rl)
                                (("2"
                                  (expand "coset?")
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (hide -2)
                                      (("2"
                                        (expand "left_coset?")
                                        (("2"
                                          (skosimp*)
                                          (("2"
                                            (replaces -1)
                                            (("2"
                                              (replaces -1)
                                              (("2"
                                                (inst 1 "a!1*a!2")
                                                (("1"
                                                  (rewrite
                                                   "product_charac")
                                                  (("1"
                                                    (hide 2)
                                                    (("1"
                                                      (typepred "a!1")
                                                      (("1"
                                                        (expand
                                                         "ideal?")
                                                        (("1"
                                                          (expand
                                                           "left_ideal?")
                                                          (("1"
                                                            (expand
                                                             "subring?")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (hide-all-but
                                                                 (-1
                                                                  -2
                                                                  1))
                                                                (("1"
                                                                  (expand
                                                                   "subset?")
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide -2 -3)
                                                  (("2"
                                                    (typepred
                                                     "a!1"
                                                     "a!2")
                                                    (("2"
                                                      (expand "ideal?")
                                                      (("2"
                                                        (expand
                                                         "right_ideal?")
                                                        (("2"
                                                          (expand
                                                           "right_swallow?")
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (hide
                                                               -3
                                                               -4)
                                                              (("2"
                                                                (inst
                                                                 -3
                                                                 "a!2"
                                                                 "a!1")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (expand "restrict")
              (("3" (expand "/")
                (("3" (rewrite "lcoset_iff_coset" :dir rl)
                  (("3" (expand "left_coset?")
                    (("3" (typepred "r!1" "x!1")
                      (("3" (hide -2 -3)
                        (("3" (expand "restrict")
                          (("3" (expand "/")
                            (("3" (expand "coset?")
                              (("3"
                                (flatten)
                                (("3"
                                  (hide -2 -4)
                                  (("3"
                                    (expand "left_coset?")
                                    (("3"
                                      (skosimp*)
                                      (("3"
                                        (replaces -1)
                                        (("3"
                                          (replaces -1)
                                          (("3"
                                            (inst 1 "a!1*a!2")
                                            (("1"
                                              (rewrite
                                               "product_charac")
                                              (("1"
                                                (typepred "a!2")
                                                (("1"
                                                  (expand "ideal?")
                                                  (("1"
                                                    (expand
                                                     "left_ideal?")
                                                    (("1"
                                                      (expand
                                                       "subring?")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (hide-all-but
                                                           (-1 -2 1))
                                                          (("1"
                                                            (expand
                                                             "subset?")
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred "a!1" "a!2")
                                              (("2"
                                                (hide -4 -5)
                                                (("2"
                                                  (expand "ideal?")
                                                  (("2"
                                                    (expand
                                                     "left_ideal?")
                                                    (("2"
                                                      (expand
                                                       "left_swallow?")
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (hide -3 -5)
                                                          (("2"
                                                            (inst
                                                             -3
                                                             "a!1"
                                                             "a!2")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (inst 1 "I!1") (("2" (rewrite "ideal_is_coset") nil nil))
          nil))
        nil)
       ("3" (hide 2)
        (("3" (rewrite "fullset_quot_group_is_ring") nil nil)) nil)
       ("4" (hide 2) (("4" (rewrite "ideal_is_coset") nil nil)) nil)
       ("5" (hide 2)
        (("5" (skosimp)
          (("5" (lemma "coset_product")
            (("5" (inst -1 "R!1" "I!1" "x1!1`1" "x1!1`2")
              (("5" (assert) nil nil)) nil))
            nil))
          nil))
        nil)
       ("6" (hide 2)
        (("6" (skosimp)
          (("6" (lemma "coset_add")
            (("6" (inst -1 "R!1" "I!1" "x1!1`1" "x1!1`2")
              (("6" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ideal type-eq-decl nil ring_ideal_def nil)
    (ideal_is_coset formula-decl nil ring_cosets_lemmas nil)
    (left_coset? const-decl "bool" cosets_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (zero_is_member_R formula-decl nil ring_basic_properties nil)
    (left_ideal? const-decl "bool" ring_ideal_def nil)
    (left_zero formula-decl nil ring_cosets_lemmas nil)
    (lcoset_iff_coset formula-decl nil ring_cosets_lemmas nil)
    (inv_is_member_R formula-decl nil ring_basic_properties nil)
    (subring_equiv formula-decl nil ring_basic_properties nil)
    (right_ideal? const-decl "bool" ring_ideal_def nil)
    (right_swallow? const-decl "bool" ring_ideal_def nil)
    (left_swallow? const-decl "bool" ring_ideal_def nil)
    (product const-decl "set[T]" product_coset_def nil)
    (coset type-eq-decl nil cosets_def nil)
    (coset? const-decl "bool" cosets_def nil)
    (ideal_equiv formula-decl nil ring_ideal nil))
   shostak))
 (commutative_quotient_ring_TCC1 0
  (commutative_quotient_ring_TCC1-1 nil 3743540522
   ("" (skosimp)
    (("" (lemma "ideal_is_coset")
      (("" (inst -1 "R!1" "I!1") (("" (inst 1 "I!1") nil nil)) nil))
      nil))
    nil)
   ((zero formal-const-decl "T" quotient_rings nil)
    (* formal-const-decl "[T, T -> T]" quotient_rings nil)
    (+ formal-const-decl "[T, T -> T]" quotient_rings nil)
    (T formal-nonempty-type-decl nil quotient_rings nil)
    (ideal_is_coset formula-decl nil ring_cosets_lemmas nil)
    (coset? const-decl "bool" cosets_def nil)
    (coset type-eq-decl nil cosets_def nil)
    (I!1 skolem-const-decl "ideal[T, +, *, zero](R!1)" quotient_rings
     nil)
    (R!1 skolem-const-decl "(commutative_ring?[T, +, *, zero])"
     quotient_rings nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (commutative_ring? const-decl "bool" ring_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (ring? const-decl "bool" ring_def nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (commutative_quotient_ring existence ""
    "cosets_def[quotient_rings.T, quotient_rings.+].coset(quotient_rings.R, quotient_rings.I)")))
 (commutative_quotient_ring_TCC2 0
  (commutative_quotient_ring_TCC2-1 nil 3743540522
   ("" (skosimp*)
    (("" (lemma "coset_add")
      (("" (inst -1 "R!1" "I!1" "x1!1`1" "x1!1`2")
        (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((coset_add formula-decl nil quotient_rings nil)
    (coset type-eq-decl nil cosets_def nil)
    (coset? const-decl "bool" cosets_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (commutative_ring? const-decl "bool" ring_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (ring? const-decl "bool" ring_def nil)
    (zero formal-const-decl "T" quotient_rings nil)
    (* formal-const-decl "[T, T -> T]" quotient_rings nil)
    (+ formal-const-decl "[T, T -> T]" quotient_rings nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-nonempty-type-decl nil quotient_rings nil))
   nil
   (commutative_quotient_ring subtype
    "cosets_def[quotient_rings.T, quotient_rings.+].add(quotient_rings.R, quotient_rings.I)"
    "[[cosets_def[quotient_rings.T, quotient_rings.+].coset(quotient_rings.R, quotient_rings.I), cosets_def[quotient_rings.T, quotient_rings.+].coset(quotient_rings.R, quotient_rings.I)] -> cosets_def[quotient_rings.T, quotient_rings.+].coset(quotient_rings.R, quotient_rings.I)]")))
 (commutative_quotient_ring_TCC3 0
  (commutative_quotient_ring_TCC3-1 nil 3743540522
   ("" (skosimp*)
    (("" (lemma "coset_product")
      (("" (inst -1 "R!1" "I!1" "x1!1`1" "x1!1`2")
        (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((coset_product formula-decl nil quotient_rings nil)
    (coset type-eq-decl nil cosets_def nil)
    (coset? const-decl "bool" cosets_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (commutative_ring? const-decl "bool" ring_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (ring? const-decl "bool" ring_def nil)
    (zero formal-const-decl "T" quotient_rings nil)
    (* formal-const-decl "[T, T -> T]" quotient_rings nil)
    (+ formal-const-decl "[T, T -> T]" quotient_rings nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-nonempty-type-decl nil quotient_rings nil))
   nil
   (commutative_quotient_ring subtype
    "product_coset_def[quotient_rings.T, quotient_rings.+, quotient_rings.*].product(quotient_rings.R, quotient_rings.I)"
    "[[cosets_def[quotient_rings.T, quotient_rings.+].coset(quotient_rings.R, quotient_rings.I), cosets_def[quotient_rings.T, quotient_rings.+].coset(quotient_rings.R, quotient_rings.I)] -> cosets_def[quotient_rings.T, quotient_rings.+].coset(quotient_rings.R, quotient_rings.I)]")))
 (commutative_quotient_ring_TCC4 0
  (commutative_quotient_ring_TCC4-1 nil 3743540522
   ("" (skosimp)
    (("" (rewrite "lcoset_iff_coset" :dir rl)
      (("" (expand "left_coset?")
        (("" (inst 1 "zero")
          (("1" (rewrite "left_zero") nil nil)
           ("2" (lemma "zero_is_member_R[T,+,*,zero]")
            (("2" (typepred "R!1")
              (("2" (expand "commutative_ring?")
                (("2" (flatten)
                  (("2" (inst -3 "R!1") (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((lcoset_iff_coset formula-decl nil ring_cosets_lemmas nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (ring? const-decl "bool" ring_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (commutative_ring? const-decl "bool" ring_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (T formal-nonempty-type-decl nil quotient_rings nil)
    (+ formal-const-decl "[T, T -> T]" quotient_rings nil)
    (* formal-const-decl "[T, T -> T]" quotient_rings nil)
    (zero formal-const-decl "T" quotient_rings nil)
    (R!1 skolem-const-decl "(commutative_ring?[T, +, *, zero])"
     quotient_rings nil)
    (left_zero formula-decl nil ring_cosets_lemmas nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil)
    (zero_is_member_R formula-decl nil ring_basic_properties nil)
    (left_coset? const-decl "bool" cosets_def nil))
   nil
   (commutative_quotient_ring subtype "quotient_rings.I"
    "cosets_def[quotient_rings.T, quotient_rings.+].coset(quotient_rings.R, quotient_rings.I)")))
 (commutative_quotient_ring 0
  (commutative_quotient_ring-1 nil 3743540532
   ("" (skosimp)
    (("" (typepred "R!1")
      (("" (expand "commutative_ring?")
        (("" (flatten)
          (("" (lemma "quotient_group_is_ring")
            (("" (inst -1 "R!1" "I!1")
              (("" (assert)
                (("" (hide -1)
                  (("" (expand "commutative?")
                    (("" (skosimp)
                      (("" (expand "restrict")
                        (("" (typepred "x!1" "y!1")
                          (("" (expand "coset?")
                            (("" (expand "left_coset?")
                              ((""
                                (flatten)
                                ((""
                                  (hide -2 -3 -5 -6)
                                  ((""
                                    (skosimp*)
                                    ((""
                                      (replaces)
                                      ((""
                                        (rewrite "product_charac")
                                        ((""
                                          (rewrite "product_charac")
                                          ((""
                                            (inst -2 "a!1" "a!2")
                                            (("" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((commutative_ring? const-decl "bool" ring_def nil)
    (ring? const-decl "bool" ring_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (/ const-decl "setof[set[T]]" cosets_def nil)
    (coset type-eq-decl nil cosets_def nil)
    (coset? const-decl "bool" cosets_def nil)
    (left_coset? const-decl "bool" cosets_def nil))
   shostak))
 (lcoset_power_nat 0
  (lcoset_power_nat-1 nil 3810213749
   ("" (induct "i")
    (("1" (skosimp*)
      (("1" (expand "^")
        (("1" (expand "power") (("1" (rewrite "left_zero") nil nil))
          nil))
        nil))
      nil)
     ("2" (skosimp*)
      (("2" (inst?)
        (("2" (expand "^" -1 1)
          (("2" (expand "^" 1 1)
            (("2" (expand "power" 1)
              (("2" (replaces -1)
                (("2" (rewrite "add_charac")
                  (("1" (expand "^")
                    (("1" (expand "power" 1 2) (("1" (propax) nil nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (typepred "R!1")
                      (("2" (expand "ring?")
                        (("2" (expand "abelian_group?")
                          (("2" (flatten)
                            (("2" (hide (-2 -3 -4 -5 -6))
                              (("2"
                                (lemma "expt_member")
                                (("2"
                                  (inst -1 "R!1" "a!1" "j!1")
                                  (("2"
                                    (expand "member")
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skosimp*) (("3" (rewrite "ideal_is_coset") nil nil)) nil))
      nil)
     ("4" (hide 2)
      (("4" (skosimp*)
        (("4" (lemma "coset_add")
          (("4" (inst -1 "R!1" "I!1" "x1!1`1" "x1!1`2")
            (("4" (assert) nil nil)) nil))
          nil))
        nil))
      nil)
     ("5" (hide 2)
      (("5" (skosimp*)
        (("5" (inst?) (("5" (rewrite "ideal_is_coset") nil nil)) nil))
        nil))
      nil)
     ("6" (hide 2)
      (("6" (skosimp*)
        (("6" (lemma "lcoset_iff_coset")
          (("6" (inst?)
            (("6" (assert)
              (("6" (hide 2)
                (("6" (expand "left_coset?") (("6" (inst?) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((lcoset_iff_coset formula-decl nil ring_cosets_lemmas nil)
    (left_coset? const-decl "bool" cosets_def nil)
    (ideal_is_coset formula-decl nil ring_cosets_lemmas nil)
    (abelian_group? const-decl "bool" group_def nil)
    (group nonempty-type-eq-decl nil group nil)
    (group? const-decl "bool" group_def nil)
    (expt_member formula-decl nil group nil)
    (power def-decl "T" monoid_def nil)
    (left_zero formula-decl nil ring_cosets_lemmas nil)
    (^ const-decl "T" group nil)
    (add const-decl "set[T]" cosets_def nil)
    (coset type-eq-decl nil cosets_def nil)
    (ring? const-decl "bool" ring_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (coset? const-decl "bool" cosets_def nil) nil)
   shostak))
 (lcoset_power_int 0
  (lcoset_power_int-1 nil 3810214622
   ("" (skosimp*)
    (("" (case "m!1 < 0")
      (("1" (expand "^")
        (("1" (assert)
          (("1" (lemma "inv_charac")
            (("1" (inst?)
              (("1" (replaces -1)
                (("1" (lemma "lcoset_power_nat")
                  (("1" (inst -1 "R!1" "-m!1" "I!1" "inv(a!1)")
                    (("1" (expand "^" -1) (("1" (propax) nil nil)) nil)
                     ("2" (hide (-1 2))
                      (("2" (rewrite "inv_in") nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (lemma "lcoset_power_nat")
        (("2" (inst -1 "R!1" "m!1" "I!1" "a!1")
          (("2" (hide 3) (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((ideal type-eq-decl nil ring_ideal_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (ring? const-decl "bool" ring_def nil)
    (inv_in formula-decl nil group nil)
    (group? const-decl "bool" group_def nil)
    (group nonempty-type-eq-decl nil group nil)
    (inv const-decl "{y | x * y = one AND y * x = one}" group nil)
    (^ const-decl "T" group nil))
   shostak)))

