(integral_domain
 (fullset_is_integral_domain 0
  (fullset_is_integral_domain-1 nil 3292787563
   ("" (expand "integral_domain?")
    (("" (lemma "fullset_is_commutative_ring")
      (("" (lemma "no_zero_divisors")
        (("" (replace -2)
          (("" (expand "no_zero_divisors?")
            (("" (skosimp*)
              (("" (inst - "x!1" "y!1") (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fullset_is_commutative_ring formula-decl nil commutative_ring
     nil))
   shostak))
 (IMP_commutative_ring_TCC1 0
  (IMP_commutative_ring_TCC1-1 nil 3292787346
   ("" (lemma "fullset_is_integral_domain")
    (("" (expand "integral_domain?") (("" (flatten) nil nil)) nil))
    nil)
   ((integral_domain? const-decl "bool" integral_domain_def nil)
    (fullset_is_integral_domain formula-decl nil integral_domain nil))
   shostak
   (IMP_commutative_ring assuming
    "commutative_ring[integral_domain.T, integral_domain.+, integral_domain.*, integral_domain.zero].commutative_ring"
    "fullset_is_commutative_ring: ASSUMPTION ring_def[commutative_ring.T, commutative_ring.+, commutative_ring.*, commutative_ring.zero].commutative_ring?(sets[commutative_ring.T].fullset)")))
 (integral_domain_TCC1 0
  (integral_domain_TCC1-1 nil 3292787453
   ("" (lemma "fullset_is_integral_domain") (("" (propax) nil nil))
    nil)
   ((fullset_is_integral_domain formula-decl nil integral_domain nil))
   shostak
   (integral_domain subtype "sets[integral_domain.T].fullset"
    "integral_domain")))
 (integral_domain_is 0
  (integral_domain_is-1 nil 3292787653
   ("" (skolem!) (("" (typepred "I!1") (("" (propax) nil nil)) nil))
    nil)
   ((integral_domain nonempty-type-eq-decl nil integral_domain nil)
    (integral_domain? const-decl "bool" integral_domain_def nil)
    (zero formal-const-decl "T" integral_domain nil)
    (* formal-const-decl "[T, T -> T]" integral_domain nil)
    (+ formal-const-decl "[T, T -> T]" integral_domain nil)
    (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil integral_domain nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (integral_domain_is_ring 0
  (integral_domain_is_ring-1 nil 3885448261
   ("" (judgement-tcc) nil nil)
   ((integral_domain nonempty-type-eq-decl nil integral_domain nil)
    (integral_domain? const-decl "bool" integral_domain_def nil)
    (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nz_closed? const-decl "bool" ring_nz_closed_def nil)
    (remove const-decl "set" sets nil)
    (/= const-decl "boolean" notequal nil)
    (member const-decl "bool" sets nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (zero formal-const-decl "T" integral_domain nil)
    (* formal-const-decl "[T, T -> T]" integral_domain nil)
    (+ formal-const-decl "[T, T -> T]" integral_domain nil)
    (T formal-nonempty-type-decl nil integral_domain nil)
    (plus_zero formula-decl nil ring nil)
    (restrict const-decl "R" restrict nil)
    (zero_plus formula-decl nil ring nil)
    (identity? const-decl "bool" operator_defs nil)
    (monad? const-decl "bool" monad_def nil)
    (associative? const-decl "bool" operator_defs nil)
    (monoid? const-decl "bool" monoid_def nil)
    (inv_exists? const-decl "bool" group_def nil)
    (group? const-decl "bool" group_def nil)
    (commutative? const-decl "bool" operator_defs nil)
    (abelian_group? const-decl "bool" group_def nil)
    (left_distributive? const-decl "bool" operator_defs_more nil)
    (right_distributive? const-decl "bool" operator_defs_more nil)
    (ring? const-decl "bool" ring_def nil)
    (commutative_ring? const-decl "bool" ring_def nil))
   nil
   (integral_domain_is_ring_ subtype "integral_domain.integral_domain"
    "commutative_ring[integral_domain.T, integral_domain.+, integral_domain.*, integral_domain.zero].commutative_ring"))))

