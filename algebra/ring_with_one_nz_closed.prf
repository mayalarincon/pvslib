(ring_with_one_nz_closed
 (IMP_ring_with_one_TCC1 0
  (IMP_ring_with_one_TCC1-1 nil 3797872695
   ("" (rewrite "fullset_is_ring_with_one") nil nil)
   ((fullset_is_ring_with_one formula-decl nil ring_with_one_nz_closed
     nil))
   nil
   (IMP_ring_with_one assuming
    "ring_with_one[ring_with_one_nz_closed.T, ring_with_one_nz_closed.+, ring_with_one_nz_closed.*, ring_with_one_nz_closed.zero, ring_with_one_nz_closed.one].ring_with_one"
    "fullset_is_ring_with_one: ASSUMPTION ring_with_one_def[ring_with_one.T, ring_with_one.+, ring_with_one.*, ring_with_one.zero, ring_with_one.one].ring_with_one?(sets[ring_with_one.T].fullset)")))
 (IMP_ring_nz_closed_aux_TCC1 0
  (IMP_ring_nz_closed_aux_TCC1-1 nil 3797872695
   ("" (lemma "fullset_is_ring_with_one")
    (("" (expand "ring_with_one?") (("" (assert) nil nil)) nil)) nil)
   ((ring_with_one? const-decl "bool" ring_with_one_def nil)
    (fullset_is_ring_with_one formula-decl nil ring_with_one_nz_closed
     nil))
   nil
   (IMP_ring_nz_closed_aux assuming
    "ring_nz_closed_aux[ring_with_one_nz_closed.T, ring_with_one_nz_closed.+, ring_with_one_nz_closed.*, ring_with_one_nz_closed.zero].ring_nz_closed_aux"
    "fullset_is_ring: ASSUMPTION ring_def[ring_nz_closed_aux.T, ring_nz_closed_aux.+, ring_nz_closed_aux.*, ring_nz_closed_aux.zero].ring?(sets[ring_nz_closed_aux.T].fullset)")))
 (subring_nz_closed_one_TCC1 0
  (subring_nz_closed_one_TCC1-1 nil 3797871202
   ("" (skosimp*)
    (("" (hide-all-but 2)
      (("" (typepred "S!1")
        (("" (lemma "R_prod_star_closed")
          (("" (inst -1 "S!1" "x1!1`1" "x1!1`2")
            (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((R_prod_star_closed formula-decl nil ring_basic_properties nil)
    (member const-decl "bool" sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil ring_with_one_nz_closed nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" ring_with_one_nz_closed nil)
    (* formal-const-decl "[T, T -> T]" ring_with_one_nz_closed nil)
    (zero formal-const-decl "T" ring_with_one_nz_closed nil)
    (ring? const-decl "bool" ring_def nil)
    (ring nonempty-type-eq-decl nil ring nil))
   nil
   (subring_nz_closed_one subtype
    "restrict[[ring_with_one_nz_closed.T, ring_with_one_nz_closed.T], [(ring_with_one_nz_closed.S), (ring_with_one_nz_closed.S)], ring_with_one_nz_closed.T].restrict(ring_with_one_nz_closed.*)"
    "[[(ring_with_one_nz_closed.S), (ring_with_one_nz_closed.S)] -> (ring_with_one_nz_closed.S)]")))
 (subring_nz_closed_one 0
  (subring_nz_closed_one-1 nil 3797871216
   ("" (skosimp*)
    (("" (expand "identity?")
      (("" (lemma no_singleton_nzx)
        (("" (inst -1 "S!1")
          (("" (assert)
            (("" (skosimp)
              (("" (expand "restrict")
                (("" (inst -3 "nzx!1")
                  (("" (flatten)
                    (("" (lemma times_one)
                      (("" (inst -1 "nzx!1")
                        (("" (replace -1 -4 rl)
                          (("" (hide (-1 -5))
                            (("" (rewrite times_associative)
                              ((""
                                (lemma cancel_right_plus)
                                ((""
                                  (inst
                                   -1
                                   "nzx!1*y!1"
                                   "nzx!1*one"
                                   "inv(nzx!1*one)")
                                  ((""
                                    (lemma times_negative)
                                    ((""
                                      (inst -1 "nzx!1" "one")
                                      ((""
                                        (replace -1 -2 rl)
                                        ((""
                                          (hide -1)
                                          ((""
                                            (lemma right_distributive)
                                            ((""
                                              (inst
                                               -1
                                               "nzx!1"
                                               "y!1"
                                               "inv(one)")
                                              ((""
                                                (replace -1 -2 rl)
                                                ((""
                                                  (hide -1)
                                                  ((""
                                                    (assert)
                                                    ((""
                                                      (hide -4)
                                                      ((""
                                                        (lemma
                                                         "nz_times_is_zero")
                                                        ((""
                                                          (inst
                                                           -1
                                                           "R!1"
                                                           "nzx!1"
                                                           "y!1 + inv(one)")
                                                          ((""
                                                            (assert)
                                                            ((""
                                                              (prop)
                                                              (("1"
                                                                (hide
                                                                 -2
                                                                 2)
                                                                (("1"
                                                                  (lemma
                                                                   cancel_right_plus)
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "y!1 + inv(one)"
                                                                     "zero"
                                                                     "one")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (rewrite
                                                                         "plus_associative")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (typepred
                                                                 "nzx!1")
                                                                (("2"
                                                                  (expand
                                                                   "subring?")
                                                                  (("2"
                                                                    (hide-all-but
                                                                     (-1
                                                                      -4
                                                                      1))
                                                                    (("2"
                                                                      (expand
                                                                       "subset?")
                                                                      (("2"
                                                                        (inst
                                                                         -2
                                                                         "nzx!1")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (typepred
                                                                 "y!1")
                                                                (("3"
                                                                  (hide-all-but
                                                                   (-1
                                                                    -4
                                                                    1))
                                                                  (("3"
                                                                    (case
                                                                     "R!1(y!1) AND R!1(inv(one))")
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (lemma
                                                                         "R_sum_star_closed")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "R!1"
                                                                           "y!1"
                                                                           "inv(one)")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (split)
                                                                      (("1"
                                                                        (expand
                                                                         "subring?")
                                                                        (("1"
                                                                          (expand
                                                                           "subset?")
                                                                          (("1"
                                                                            (inst
                                                                             -2
                                                                             "y!1")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (lemma
                                                                         "inv_is_member_R")
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "R!1"
                                                                           "one")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (typepred
                                                                               "R!1")
                                                                              (("2"
                                                                                (expand
                                                                                 "ring_with_one?")
                                                                                (("2"
                                                                                  (expand
                                                                                   "monoid?")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "monad?")
                                                                                    (("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((identity? const-decl "bool" operator_defs nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil) nil nil nil
    (one formal-const-decl "T" ring_with_one_nz_closed nil) nil nil nil
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil nil nil
    nil nil nil nil (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil) nil nil
    (inv_is_member_R formula-decl nil ring_basic_properties nil)
    (R_sum_star_closed formula-decl nil ring_basic_properties nil)
    (nz_times_is_zero formula-decl nil ring_nz_closed_aux nil) nil nil
    nil nil nil nil (restrict const-decl "R" restrict nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (no_singleton_nzx formula-decl nil ring_basic_properties nil)
    (T formal-nonempty-type-decl nil ring_with_one_nz_closed nil)
    (+ formal-const-decl "[T, T -> T]" ring_with_one_nz_closed nil)
    (* formal-const-decl "[T, T -> T]" ring_with_one_nz_closed nil)
    (zero formal-const-decl "T" ring_with_one_nz_closed nil))
   shostak)))

