(finite_groups_extra
 (IMP_finite_groups_TCC1 0
  (IMP_finite_groups_TCC1-1 nil 3907943818
   ("" (lemma "fullset_is_group") (("" (propax) nil nil)) nil)
   ((fullset_is_group formula-decl nil finite_groups_extra nil)) nil
   (IMP_finite_groups assuming
    "finite_groups[finite_groups_extra.T, finite_groups_extra.*, finite_groups_extra.one].finite_groups"
    "fullset_is_group: ASSUMPTION group_def[finite_groups.T, finite_groups.*, finite_groups.one].group?(sets[finite_groups.T].fullset)")))
 (period_element_divides_power_TCC1 0
  (period_element_divides_power_TCC1-1 nil 3907943818
   ("" (subtype-tcc) nil nil) nil nil
   (period_element_divides_power subtype "finite_groups_extra.a"
    "(finite_groups_extra.G)")))
 (period_element_divides_power 0
  (period_element_divides_power-1 nil 3907943839
   ("" (skeep)
    (("" (expand "divides")
      (("" (lemma "euclid_nat")
        (("" (inst -1 "n" "period(G,a)")
          (("1" (skeep)
            (("1" (case-replace "r=0")
              (("1" (assert) (("1" (inst 1 "q") nil nil)) nil)
               ("2" (hide 2)
                (("2" (replaces -1)
                  (("2" (lemma "expt_mult")
                    (("2" (inst -1 "a" "period(G, a) * q" "r")
                      (("2" (replace -1 -3 rl)
                        (("2" (hide -1)
                          (("2" (rewrite "expt_expt" :dir rl)
                            (("2" (rewrite "a_hat_period")
                              (("2"
                                (rewrite "one_expt")
                                (("2"
                                  (assert)
                                  (("2"
                                    (typepred "r")
                                    (("2"
                                      (expand "period")
                                      (("2"
                                        (lemma "min_def[posnat]")
                                        (("2"
                                          (inst
                                           -1
                                           "min({n: posnat | a ^ n = one})"
                                           "{n: posnat | a ^ n = one}")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "minimum?")
                                              (("1"
                                                (inst -1 "r")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "nonempty?")
                                            (("2"
                                              (expand "empty?")
                                              (("2"
                                                (inst -1 "r")
                                                (("2"
                                                  (expand "member")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "member") (("2" (propax) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((divides const-decl "bool" divides nil)
    (a skolem-const-decl "T" finite_groups_extra nil)
    (G skolem-const-decl "finite_group[T, *, one]" finite_groups_extra
     nil)
    (finite_group nonempty-type-eq-decl nil group nil)
    (finite_group? const-decl "bool" group_def nil)
    (one formal-const-decl "T" finite_groups_extra nil)
    (* formal-const-decl "[T, T -> T]" finite_groups_extra nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-nonempty-type-decl nil finite_groups_extra nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (period const-decl "posnat" finite_groups nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (member const-decl "bool" sets nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (TRUE const-decl "bool" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (a_hat_period formula-decl nil finite_groups nil)
    (one_left formula-decl nil group nil)
    (nonempty? const-decl "bool" sets nil) (^ const-decl "T" group nil)
    (min const-decl "{a | S(a) AND (FORALL x: S(x) IMPLIES a <= x)}"
         min_nat nil)
    (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (minimum? const-decl "bool" min_nat nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty? const-decl "bool" sets nil)
    (min_def formula-decl nil min_nat nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (one_expt formula-decl nil group nil)
    (expt_expt formula-decl nil group nil)
    (expt_mult formula-decl nil group nil)
    (euclid_nat formula-decl nil euclidean_division nil))
   shostak)))

