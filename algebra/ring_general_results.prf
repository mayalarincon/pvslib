(ring_general_results
 (IMP_ring_with_one_basic_properties_TCC1 0
  (IMP_ring_with_one_basic_properties_TCC1-1 nil 3798279991
   ("" (rewrite "fullset_is_ring_with_one") nil nil)
   ((fullset_is_ring_with_one formula-decl nil ring_general_results
     nil))
   nil
   (IMP_ring_with_one_basic_properties assuming
    "ring_with_one_basic_properties[ring_general_results.T, ring_general_results.+, ring_general_results.*, ring_general_results.zero, ring_general_results.one].ring_with_one_basic_properties"
    "fullset_is_ring_with_one: ASSUMPTION ring_with_one_def[ring_with_one_basic_properties.T, ring_with_one_basic_properties.+, ring_with_one_basic_properties.*, ring_with_one_basic_properties.zero, ring_with_one_basic_properties.one].ring_with_one?(sets[ring_with_one_basic_properties.T].fullset)")))
 (IMP_ring_characteristic_def_TCC1 0
  (IMP_ring_characteristic_def_TCC1-1 nil 3798279991
   ("" (lemma "fullset_is_ring_with_one")
    (("" (expand "ring_with_one?") (("" (assert) nil nil)) nil)) nil)
   (nil
    (fullset_is_ring_with_one formula-decl nil ring_general_results
     nil))
   nil
   (IMP_ring_characteristic_def assuming
    "ring_characteristic_def[ring_general_results.T, ring_general_results.+, ring_general_results.*, ring_general_results.zero].ring_characteristic_def"
    "fullset_is_ring: ASSUMPTION ring_def[ring_characteristic_def.T, ring_characteristic_def.+, ring_characteristic_def.*, ring_characteristic_def.zero].ring?(sets[ring_characteristic_def.T].fullset)")))
 (homomorphism_Z_to_R_TCC1 0
  (homomorphism_Z_to_R_TCC1-1 nil 3725305783
   ("" (skosimp*)
    (("" (lemma "times_member")
      (("" (inst -1 "R!1" "x1!1" "one")
        (("1" (assert) nil nil)
         ("2" (typepred "R!1")
          (("2" (expand "ring_with_one?")
            (("2" (flatten)
              (("2" (expand "monoid?")
                (("2" (expand "monad?")
                  (("2" (flatten)
                    (("2" (expand "member") (("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((zero formal-const-decl "T" ring_general_results nil)
    (* formal-const-decl "[T, T -> T]" ring_general_results nil)
    (+ formal-const-decl "[T, T -> T]" ring_general_results nil)
    (T formal-nonempty-type-decl nil ring_general_results nil)
    (times_member formula-decl nil ring_basic_properties nil)
    (NOT const-decl "[bool -> bool]" booleans nil) nil nil
    (member const-decl "bool" sets nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fullset const-decl "set" sets nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil) nil
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (one formal-const-decl "T" ring_general_results nil) nil nil)
   nil
   (homomorphism_Z_to_R subtype
    "(restrict[int, (sets[int].fullset), ring_general_results.T].restrict((LAMBDA (m: integers.int): ring_basic_properties[ring_general_results.T, ring_general_results.+, ring_general_results.*, ring_general_results.zero].times(ring_general_results.one, m))))"
    "[(sets[int].fullset) -> (ring_general_results.R)]")))
 (homomorphism_Z_to_R 0
  (homomorphism_Z_to_R-2 nil 3725308776
   ("" (skosimp)
    (("" (expand "restrict")
      (("" (split)
        (("1" (expand "R_homomorphism?")
          (("1" (split)
            (("1" (expand "star_closed?")
              (("1" (skosimp)
                (("1" (expand "member")
                  (("1" (expand "fullset") (("1" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "star_closed?")
              (("2" (skosimp)
                (("2" (expand "member")
                  (("2" (expand "fullset") (("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (expand "star_closed?")
              (("3" (skosimp)
                (("3" (rewrite "R_sum_star_closed[T,+,*,zero]") nil
                  nil))
                nil))
              nil)
             ("4" (expand "star_closed?")
              (("4" (skosimp)
                (("4" (rewrite "R_prod_star_closed[T,+,*,zero]") nil
                  nil))
                nil))
              nil)
             ("5" (expand "homomorphism?")
              (("5" (skosimp)
                (("5" (rewrite "times_sum" :dir rl) nil nil)) nil))
              nil)
             ("6" (expand "homomorphism?")
              (("6" (skosimp)
                (("6" (lemma "times_product[T,+,*,zero]")
                  (("6" (inst -1 "a!1" "one" "one" "b!1")
                    (("6" (rewrite "times_one")
                      (("6" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "R_kernel")
          (("2" (decompose-equality)
            (("2" (iff)
              (("2" (prop)
                (("1" (lemma "multiple_char")
                  (("1" (inst -1 "R!1" "x!1")
                    (("1" (prop)
                      (("1" (skosimp)
                        (("1" (lemma "gen_times_int_one")
                          (("1" (inst -1 "x!1" "x!2")
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "fullset") (("2" (propax) nil nil)) nil)
                 ("3" (hide -)
                  (("3" (lemma "zero_is_member_R[T,+,*,zero]")
                    (("3" (inst -1 "R!1")
                      (("3" (expand "member") (("3" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("4" (lemma "multiple_char")
                  (("4" (inst -1 "R!1" "x!1")
                    (("4" (skosimp -2)
                      (("4" (hide -2)
                        (("4" (prop)
                          (("1" (inst -1 "one")
                            (("1" (lemma "one_in[T,*,one]")
                              (("1" (inst -1 "R!1") nil nil)) nil))
                            nil)
                           ("2" (inst 1 "k!1") nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((restrict const-decl "R" restrict nil)
    (R_kernel const-decl "set[T1]" ring_homomorphisms_def nil) nil nil
    nil (zero_is_member_R formula-decl nil ring_basic_properties nil)
    (multiple_char formula-decl nil ring_characteristic_def nil)
    (gen_times_int_one formula-decl nil ring_with_one_basic_properties
     nil)
    (charac const-decl "nat" ring_characteristic_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (times const-decl "T" ring_basic_properties nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (R_homomorphism? const-decl "bool" ring_homomorphisms_def nil)
    (times_product formula-decl nil ring_basic_properties nil) nil
    (homomorphism? const-decl "bool" homomorphisms_def nil)
    (times_sum formula-decl nil ring_basic_properties nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (R_prod_star_closed formula-decl nil ring_basic_properties nil)
    (R_sum_star_closed formula-decl nil ring_basic_properties nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil) nil
    (one formal-const-decl "T" ring_general_results nil) nil nil
    (T formal-nonempty-type-decl nil ring_general_results nil)
    (+ formal-const-decl "[T, T -> T]" ring_general_results nil)
    (* formal-const-decl "[T, T -> T]" ring_general_results nil)
    (zero formal-const-decl "T" ring_general_results nil)
    (int_times_int_is_int application-judgement "int" integers nil) nil
    (int_plus_int_is_int application-judgement "int" integers nil)
    (member const-decl "bool" sets nil)
    (fullset const-decl "set" sets nil))
   nil)
  (homomorphism_Z_to_R-1 nil 3725305784 ("" (postpone) nil nil) nil
   shostak))
 (gen_times_char_one 0
  (gen_times_char_one-1 nil 3798216195
   ("" (skosimp)
    (("" (lemma member_N_or_zero)
      (("" (inst -1 "R!1" "l!1")
        (("" (split)
          (("1" (typepred "l!1") (("1" (assert) nil nil)) nil)
           ("2" (expand "member")
            (("2" (expand "charac")
              (("2" (lift-if)
                (("2" (prop)
                  (("1" (assert) nil nil)
                   ("2"
                    (lemma "min_def" ("S" "N(R!1)" "a" "min(N(R!1))"))
                    (("2" (assert)
                      (("2" (expand "minimum?")
                        (("2" (inst -1 "l!1") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (lemma gen_times_int_one)
            (("3" (skosimp)
              (("3" (inst -1 "l!1" "x!1") (("3" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((zero formal-const-decl "T" ring_general_results nil)
    (* formal-const-decl "[T, T -> T]" ring_general_results nil)
    (+ formal-const-decl "[T, T -> T]" ring_general_results nil)
    (T formal-nonempty-type-decl nil ring_general_results nil)
    (member_N_or_zero formula-decl nil ring_characteristic_def nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (charac const-decl "nat" ring_characteristic_def nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minimum? const-decl "bool" min_nat nil)
    (min_def formula-decl nil min_nat nil)
    (nonempty? const-decl "bool" sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{a | S(a) AND (FORALL x: S(x) IMPLIES a <= x)}"
         min_nat nil)
    (N const-decl "set[posnat]" ring_characteristic_def nil)
    (member const-decl "bool" sets nil)
    (gen_times_int_one formula-decl nil ring_with_one_basic_properties
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil) nil nil
    (one formal-const-decl "T" ring_general_results nil) nil
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (nz_closed_char_prime 0
  (nz_closed_char_prime-1 nil 3798280170
   ("" (skosimp)
    (("" (case "R!1 = singleton(zero)")
      (("1" (lemma char_1_zero_ring)
        (("1" (inst -1 "R!1") (("1" (assert) nil nil)) nil)) nil)
       ("2" (expand "prime?")
        (("2" (prop)
          (("1" (skosimp)
            (("1" (copy -1)
              (("1" (hide -1)
                (("1" (expand "divides")
                  (("1" (skosimp)
                    (("1" (lemma times_product)
                      (("1" (inst -1 "j!1" "one" "one" "x!1")
                        (("1" (assert)
                          (("1" (replace -2 -1 rl)
                            (("1" (lemma times_char)
                              (("1"
                                (inst -1 "R!1" "one")
                                (("1"
                                  (replaces -1 -2)
                                  (("1"
                                    (lemma nz_times_is_zero)
                                    (("1"
                                      (inst
                                       -1
                                       "R!1"
                                       "times(one, j!1)"
                                       "times(one, x!1)")
                                      (("1"
                                        (lemma times_member)
                                        (("1"
                                          (copy -1)
                                          (("1"
                                            (inst -1 "R!1" "j!1" "one")
                                            (("1"
                                              (inst
                                               -2
                                               "R!1"
                                               "x!1"
                                               "one")
                                              (("1"
                                                (expand "member")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (split -3)
                                                    (("1"
                                                      (lemma
                                                       gen_times_char_one)
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "R!1"
                                                         "j!1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (lemma
                                                             divides_lt)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "charac(R!1)"
                                                               "j!1")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (reveal
                                                                   -8)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (case
                                                         "divides(x!1, charac(R!1))")
                                                        (("1"
                                                          (lemma
                                                           gen_times_char_one)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "R!1"
                                                             "x!1")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (lemma
                                                                 divides_lt)
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "charac(R!1)"
                                                                   "x!1")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (case
                                                                       "x!1 = charac(R!1)")
                                                                      (("1"
                                                                        (replaces
                                                                         -1
                                                                         -9)
                                                                        (("1"
                                                                          (lemma
                                                                           both_sides_times1)
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "charac(R!1)"
                                                                             "1"
                                                                             "j!1")
                                                                            (("1"
                                                                              (replace
                                                                               -9
                                                                               -1
                                                                               rl)
                                                                              (("1"
                                                                                (lemma
                                                                                 identity_mult)
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "charac(R!1)")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (typepred
                                                               "j!1")
                                                              (("2"
                                                                (replaces
                                                                 -7
                                                                 -8)
                                                                (("2"
                                                                  (lemma
                                                                   pos_times_gt)
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "j!1"
                                                                     "x!1")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "divides")
                                                          (("2"
                                                            (inst
                                                             1
                                                             "j!1")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but 1)
                                                (("2"
                                                  (typepred "R!1")
                                                  (("2"
                                                    (expand
                                                     "ring_with_one?")
                                                    (("2"
                                                      (expand
                                                       "monoid?")
                                                      (("2"
                                                        (expand
                                                         "monad?")
                                                        (("2"
                                                          (expand
                                                           "member")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but 1)
                                              (("2"
                                                (typepred "R!1")
                                                (("2"
                                                  (expand
                                                   "ring_with_one?")
                                                  (("2"
                                                    (expand "monoid?")
                                                    (("2"
                                                      (expand "monad?")
                                                      (("2"
                                                        (expand
                                                         "member")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2"
                                    (typepred "R!1")
                                    (("2"
                                      (expand "ring_with_one?")
                                      (("2"
                                        (expand "monoid?")
                                        (("2"
                                          (expand "monad?")
                                          (("2"
                                            (expand "member")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide -2 3)
            (("2" (lemma char_1_zero_ring)
              (("2" (inst -1 "R!1") (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil) nil nil
    (one formal-const-decl "T" ring_general_results nil)
    (zero formal-const-decl "T" ring_general_results nil)
    (* formal-const-decl "[T, T -> T]" ring_general_results nil)
    (+ formal-const-decl "[T, T -> T]" ring_general_results nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-nonempty-type-decl nil ring_general_results nil) nil
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (char_1_zero_ring formula-decl nil ring_characteristic_def nil)
    (times_product formula-decl nil ring_basic_properties nil)
    (int_times_int_is_int application-judgement "int" integers nil) nil
    (times_char formula-decl nil ring_characteristic_def nil)
    (TRUE const-decl "bool" booleans nil)
    (times const-decl "T" ring_basic_properties nil) nil
    (NOT const-decl "[bool -> bool]" booleans nil)
    (pos_times_gt formula-decl nil real_props nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (identity_mult formula-decl nil number_fields nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (gen_times_char_one formula-decl nil ring_general_results nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (charac const-decl "nat" ring_characteristic_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (abs_nat_rew formula-decl nil abs_rews ints)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (divides_lt formula-decl nil divides_lems ints)
    (member const-decl "bool" sets nil) nil nil
    (times_member formula-decl nil ring_basic_properties nil)
    (nz_times_is_zero formula-decl nil ring_nz_closed_aux nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (prime? const-decl "bool" primes ints))
   nil))
 (field_zero_maximal_ideal 0
  (field_zero_maximal_ideal-1 nil 3782203978
   ("" (skeep)
    (("" (prop)
      (("1"
        (lemma "zero_natural_isomorphism[T,+,*,zero,
                        coset[T,+](R,singleton(zero)),add[T,+](R,singleton(zero)),product[T,+,*](R,singleton(zero)),singleton(zero)]")
        (("1" (inst -1 "R")
          (("1"
            (lemma "isomorphic_fields[T,+,*,zero,one,
                            coset[T,+](R,singleton(zero)),add[T,+](R,singleton(zero)),product[T,+,*](R,singleton(zero)),singleton(zero),+[T,+](one,singleton(zero))]")
            (("1" (assert)
              (("1" (inst -1 "R" "/[T,+](R,singleton(zero))")
                (("1" (assert)
                  (("1" (lemma "quot_div_ring_maximal_ideal")
                    (("1" (inst -1 "R" "singleton(zero)")
                      (("1" (expand "field?") (("1" (assert) nil nil))
                        nil)
                       ("2" (hide-all-but 1)
                        (("2" (rewrite "zero_ideal") nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but 1)
                  (("2" (rewrite "quotient_ring_with_one")
                    (("2" (hide 2)
                      (("2" (rewrite "zero_ideal") nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but 1)
              (("2" (expand "ring_with_one?")
                (("2" (rewrite "fullset_quot_group_is_ring")
                  (("1" (expand "monoid?")
                    (("1" (expand "monad?")
                      (("1" (lemma "fullset_quot_group_is_ring")
                        (("1" (inst -1 "R" "singleton(zero)")
                          (("1" (expand "ring?")
                            (("1" (flatten)
                              (("1"
                                (assert)
                                (("1"
                                  (split)
                                  (("1"
                                    (expand "fullset" 1)
                                    (("1" (propax) nil nil))
                                    nil)
                                   ("2"
                                    (hide -)
                                    (("2"
                                      (expand "identity?")
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (expand "restrict")
                                          (("2"
                                            (typepred "x")
                                            (("2"
                                              (rewrite
                                               "lcoset_iff_coset"
                                               :dir
                                               rl)
                                              (("2"
                                                (expand "left_coset?")
                                                (("2"
                                                  (skeep)
                                                  (("2"
                                                    (replaces -1)
                                                    (("2"
                                                      (rewrite
                                                       "product_charac")
                                                      (("1"
                                                        (rewrite
                                                         "product_charac")
                                                        (("1"
                                                          (hide -1 2)
                                                          (("1"
                                                            (typepred
                                                             "R")
                                                            (("1"
                                                              (expand
                                                               "ring_with_one?")
                                                              (("1"
                                                                (expand
                                                                 "monoid?")
                                                                (("1"
                                                                  (expand
                                                                   "monad?")
                                                                  (("1"
                                                                    (expand
                                                                     "member")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide -1 2)
                                                          (("2"
                                                            (rewrite
                                                             "zero_ideal")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide -1 2)
                                                        (("2"
                                                          (typepred
                                                           "R")
                                                          (("2"
                                                            (expand
                                                             "ring_with_one?")
                                                            (("2"
                                                              (expand
                                                               "monoid?")
                                                              (("2"
                                                                (expand
                                                                 "monad?")
                                                                (("2"
                                                                  (expand
                                                                   "member")
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (hide -1 2)
                                                        (("3"
                                                          (rewrite
                                                           "zero_ideal")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (rewrite "zero_ideal") nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2) (("2" (rewrite "zero_ideal") nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (rewrite "fullset_is_ring_with_one") nil nil)
             ("4" (hide-all-but 1)
              (("4" (rewrite "lcoset_iff_coset" :dir rl)
                (("4" (expand "left_coset?")
                  (("4" (inst 1 "one")
                    (("4" (typepred "R")
                      (("4" (expand "ring_with_one?")
                        (("4" (expand "monoid?")
                          (("4" (expand "monad?")
                            (("4" (expand "member")
                              (("4" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide-all-but 1)
          (("2" (rewrite "fullset_quot_group_is_ring")
            (("2" (hide 2) (("2" (rewrite "zero_ideal") nil nil)) nil))
            nil))
          nil)
         ("3" (hide-all-but 1)
          (("3" (rewrite "fullset_is_ring") nil nil)) nil)
         ("4" (hide-all-but 1)
          (("4" (rewrite "ideal_is_coset")
            (("4" (hide 2) (("4" (rewrite "zero_ideal") nil nil)) nil))
            nil))
          nil)
         ("5" (hide-all-but 1)
          (("5" (skeep)
            (("5" (lemma "coset_product")
              (("5" (inst -1 "R" "singleton(zero)" "x1`1" "x1`2")
                (("1" (assert) nil nil)
                 ("2" (hide 2) (("2" (rewrite "zero_ideal") nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("6" (hide-all-but 1)
          (("6" (skeep)
            (("6" (lemma "coset_add")
              (("6" (inst -1 "R" "singleton(zero)" "x1`1" "x1`2")
                (("1" (assert) nil nil)
                 ("2" (hide 2) (("2" (rewrite "zero_ideal") nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("7" (hide - 2)
          (("7" (inst 1 "singleton(zero)")
            (("7" (rewrite "ideal_is_coset")
              (("7" (hide 2) (("7" (rewrite "zero_ideal") nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2"
        (lemma
         "zero_natural_isomorphism[T,+,*,zero,coset[T,+](R,singleton(zero)),add[T,+](R,singleton(zero)),product[T,+,*](R,singleton(zero)),singleton(zero)]")
        (("1" (inst -1 "R")
          (("1"
            (lemma
             "isomorphic_fields_charac[T, +, *, zero,one, coset[T, +](R, singleton(zero)),
                       add(R, singleton(zero)), product(R, singleton(zero)),
                       singleton(zero),+[T,+](one,singleton(zero))]")
            (("1" (inst -1 "R" "/[T,+](R,singleton(zero))")
              (("1" (assert)
                (("1" (hide -1 2)
                  (("1" (rewrite "maximal_ideal_quot_field") nil nil))
                  nil))
                nil)
               ("2" (hide-all-but 1)
                (("2" (rewrite "quotient_ring_with_one")
                  (("2" (hide 2) (("2" (rewrite "zero_ideal") nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but 1)
              (("2" (expand "ring_with_one?")
                (("2" (rewrite "fullset_quot_group_is_ring")
                  (("1" (lemma "fullset_quot_group_is_ring")
                    (("1" (inst -1 "R" "singleton(zero)")
                      (("1" (expand "monoid?")
                        (("1" (expand "monad?")
                          (("1" (expand "ring?")
                            (("1" (flatten)
                              (("1"
                                (assert)
                                (("1"
                                  (split)
                                  (("1"
                                    (expand "fullset")
                                    (("1" (propax) nil nil))
                                    nil)
                                   ("2"
                                    (hide -)
                                    (("2"
                                      (expand "identity?")
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (expand "restrict")
                                          (("2"
                                            (typepred "x")
                                            (("2"
                                              (rewrite
                                               "lcoset_iff_coset"
                                               :dir
                                               rl)
                                              (("2"
                                                (expand "left_coset?")
                                                (("2"
                                                  (skeep)
                                                  (("2"
                                                    (replaces -1)
                                                    (("2"
                                                      (rewrite
                                                       "product_charac")
                                                      (("1"
                                                        (rewrite
                                                         "product_charac")
                                                        (("1"
                                                          (hide -1 2)
                                                          (("1"
                                                            (typepred
                                                             "R")
                                                            (("1"
                                                              (expand
                                                               "ring_with_one?")
                                                              (("1"
                                                                (expand
                                                                 "monoid?")
                                                                (("1"
                                                                  (expand
                                                                   "monad?")
                                                                  (("1"
                                                                    (expand
                                                                     "member")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide -1 2)
                                                          (("2"
                                                            (rewrite
                                                             "zero_ideal")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide -1 2)
                                                        (("2"
                                                          (typepred
                                                           "R ")
                                                          (("2"
                                                            (expand
                                                             "ring_with_one?")
                                                            (("2"
                                                              (expand
                                                               "monoid?")
                                                              (("2"
                                                                (expand
                                                                 "monad?")
                                                                (("2"
                                                                  (expand
                                                                   "member")
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (hide -1 2)
                                                        (("3"
                                                          (rewrite
                                                           "zero_ideal")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (rewrite "zero_ideal") nil nil)) nil))
                      nil))
                    nil)
                   ("2" (hide 2) (("2" (rewrite "zero_ideal") nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (hide-all-but 1)
              (("3" (rewrite "fullset_is_ring_with_one") nil nil)) nil)
             ("4" (hide-all-but 1)
              (("4" (rewrite "lcoset_iff_coset" :dir rl)
                (("4" (expand "left_coset?")
                  (("4" (inst 1 "one")
                    (("4" (typepred "R")
                      (("4" (expand "ring_with_one?")
                        (("4" (expand "monoid?")
                          (("4" (expand "monad?")
                            (("4" (expand "member")
                              (("4" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide-all-but 1)
          (("2" (rewrite "fullset_quot_group_is_ring")
            (("2" (hide 2) (("2" (rewrite "zero_ideal") nil nil)) nil))
            nil))
          nil)
         ("3" (hide-all-but 1)
          (("3" (lemma "fullset_is_ring_with_one")
            (("3" (expand "ring_with_one?") (("3" (assert) nil nil))
              nil))
            nil))
          nil)
         ("4" (hide-all-but 1)
          (("4" (rewrite "ideal_is_coset")
            (("4" (hide 2) (("4" (rewrite "zero_ideal") nil nil)) nil))
            nil))
          nil)
         ("5" (hide-all-but 1)
          (("5" (skeep)
            (("5" (lemma "coset_product")
              (("5" (inst -1 "R" "singleton(zero)" "x1`1" "x1`2")
                (("1" (assert) nil nil)
                 ("2" (hide 2) (("2" (rewrite "zero_ideal") nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("6" (hide-all-but 1)
          (("6" (skeep)
            (("6" (lemma "coset_add")
              (("6" (inst -1 "R" "singleton(zero)" "x1`1" "x1`2")
                (("1" (assert) nil nil)
                 ("2" (hide 2) (("2" (rewrite "zero_ideal") nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("7" (hide-all-but 1)
          (("7" (inst 1 "singleton(zero)")
            (("7" (rewrite "ideal_is_coset")
              (("7" (hide 2) (("7" (rewrite "zero_ideal") nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((coset_add formula-decl nil quotient_rings nil)
    (coset_product formula-decl nil quotient_rings nil)
    (ideal_is_coset formula-decl nil ring_cosets_lemmas nil)
    (fullset_is_ring formula-decl nil ring_basic_properties nil) nil
    (fullset_is_ring_with_one formula-decl nil ring_general_results
     nil)
    (fullset_quot_group_is_ring formula-decl nil quotient_rings nil)
    nil (identity? const-decl "bool" operator_defs nil)
    (lcoset_iff_coset formula-decl nil ring_cosets_lemmas nil)
    (product_charac formula-decl nil quotient_rings nil) nil nil
    (left_coset? const-decl "bool" cosets_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil) nil
    (quotient_ring_with_one formula-decl nil quotient_rings_with_one
     nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil) nil
    (zero_ideal formula-decl nil ring_ideal nil)
    (quot_div_ring_maximal_ideal formula-decl nil
     ring_with_one_maximal_ideal nil)
    (/ const-decl "setof[set[T]]" cosets_def nil)
    (setof type-eq-decl nil defined_types nil)
    (restrict const-decl "R" restrict nil)
    (isomorphic_fields formula-decl nil ring_with_one_homomorphism nil)
    nil (fullset const-decl "set" sets nil)
    (TRUE const-decl "bool" booleans nil)
    (zero_natural_isomorphism formula-decl nil
     ring_homomorphism_lemmas_extras nil)
    (T formal-nonempty-type-decl nil ring_general_results nil)
    (+ formal-const-decl "[T, T -> T]" ring_general_results nil)
    (* formal-const-decl "[T, T -> T]" ring_general_results nil)
    (zero formal-const-decl "T" ring_general_results nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (coset? const-decl "bool" cosets_def nil)
    (one formal-const-decl "T" ring_general_results nil) nil nil
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (coset type-eq-decl nil cosets_def nil)
    (add const-decl "set[T]" cosets_def nil)
    (product const-decl "set[T]" product_coset_def nil)
    (maximal_ideal_quot_field formula-decl nil
     ring_with_one_maximal_ideal nil)
    (maximal_ideal? const-decl "bool" ring_maximal_ideal_def nil)
    (maximal_ideal type-eq-decl nil ring_maximal_ideal_def nil)
    (isomorphic_fields_charac formula-decl nil
     ring_with_one_homomorphism_extras nil))
   shostak))
 (maximal_ideal_iff_proper_id 0
  (maximal_ideal_iff_proper_id-1 nil 3782568229
   ("" (skeep)
    (("" (prop)
      (("1" (skeep)
        (("1" (expand "maximal_ideal?")
          (("1" (flatten)
            (("1" (inst -2 "I!1")
              (("1"
                (case "subset?(singleton(zero), I!1) AND subset?(I!1, R)")
                (("1" (assert) nil nil)
                 ("2" (hide-all-but 1)
                  (("2" (typepred "I!1")
                    (("2" (expand "ideal?")
                      (("2" (expand "left_ideal?")
                        (("2" (expand "subring?")
                          (("2" (flatten)
                            (("2" (assert)
                              (("2"
                                (expand "subset?")
                                (("2"
                                  (hide-all-but (-2 1))
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (expand "member")
                                      (("2"
                                        (expand "singleton")
                                        (("2"
                                          (lemma "zero_is_member_R")
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (expand "member")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "maximal_ideal?")
        (("2" (split)
          (("1" (rewrite "zero_ideal") nil nil)
           ("2" (lemma "one_diff_zero_monad")
            (("2" (inst -1 "R")
              (("2" (assert)
                (("2" (decompose-equality 1)
                  (("2" (inst -1 "one")
                    (("2" (iff)
                      (("2" (prop)
                        (("1" (hide -3 -4)
                          (("1" (expand "singleton")
                            (("1" (propax) nil nil)) nil))
                          nil)
                         ("2" (typepred "R")
                          (("2" (hide-all-but (-1 1))
                            (("2" (expand "ring_with_one?")
                              (("2"
                                (expand "monoid?")
                                (("2"
                                  (expand "monad?")
                                  (("2"
                                    (expand "member")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (skeep)
            (("3" (inst -3 "N") (("3" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((maximal_ideal? const-decl "bool" ring_maximal_ideal_def nil)
    (T formal-nonempty-type-decl nil ring_general_results nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" ring_general_results nil)
    (* formal-const-decl "[T, T -> T]" ring_general_results nil)
    (zero formal-const-decl "T" ring_general_results nil) nil
    (ideal? const-decl "bool" ring_ideal_def nil)
    (one formal-const-decl "T" ring_general_results nil) nil nil
    (ideal type-eq-decl nil ring_ideal_def nil) nil
    (member const-decl "bool" sets nil)
    (zero_is_member_R formula-decl nil ring_basic_properties nil)
    (left_ideal? const-decl "bool" ring_ideal_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (subset? const-decl "bool" sets nil)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil) nil
    (zero_ideal formula-decl nil ring_ideal nil)
    (= const-decl "[T, T -> boolean]" equalities nil) nil nil
    (one_diff_zero_monad formula-decl nil
     ring_with_one_basic_properties nil))
   shostak))
 (proper_id_zero_maximal_ideal 0
  (proper_id_zero_maximal_ideal-1 nil 3782217799
   ("" (skeep)
    (("" (prop)
      (("1" (hide -4)
        (("1" (skeep)
          (("1" (expand "strict_subset?")
            (("1" (expand "maximal_ideal?")
              (("1" (prop)
                (("1" (inst -2 "I!1")
                  (("1" (prop)
                    (("1" (hide-all-but 1)
                      (("1" (typepred "I!1")
                        (("1" (expand "subset?")
                          (("1" (skeep)
                            (("1" (expand "member")
                              (("1"
                                (expand "singleton")
                                (("1"
                                  (replaces -2)
                                  (("1"
                                    (case "ring?(I!1)")
                                    (("1"
                                      (hide -2)
                                      (("1"
                                        (lemma "zero_is_member_R")
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (expand "member")
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (expand "ideal?")
                                        (("2"
                                          (expand "left_ideal?")
                                          (("2"
                                            (expand "subring?")
                                            (("2" (flatten) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "maximal_ideal?")
        (("2" (prop)
          (("1" (rewrite "zero_ideal") nil nil)
           ("2" (hide -2 1)
            (("2" (lemma "one_diff_zero_monad")
              (("2" (inst?)
                (("2" (assert)
                  (("2" (hide -3)
                    (("2" (decompose-equality -2)
                      (("2" (inst -1 "one")
                        (("2" (iff)
                          (("2" (prop)
                            (("1" (expand "singleton")
                              (("1" (propax) nil nil)) nil)
                             ("2" (hide 2 3)
                              (("2"
                                (typepred "R")
                                (("2"
                                  (expand "ring_with_one?")
                                  (("2"
                                    (expand "monoid?")
                                    (("2"
                                      (expand "monad?")
                                      (("2"
                                        (expand "member")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (skeep)
            (("3" (inst 3 "N")
              (("3" (expand "strict_subset?")
                (("3" (hide -1 -3 -4) (("3" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((maximal_ideal? const-decl "bool" ring_maximal_ideal_def nil)
    (T formal-nonempty-type-decl nil ring_general_results nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" ring_general_results nil)
    (* formal-const-decl "[T, T -> T]" ring_general_results nil)
    (zero formal-const-decl "T" ring_general_results nil) nil
    (ideal? const-decl "bool" ring_ideal_def nil)
    (one formal-const-decl "T" ring_general_results nil) nil nil
    (ideal type-eq-decl nil ring_ideal_def nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (TRUE const-decl "bool" booleans nil)
    (left_ideal? const-decl "bool" ring_ideal_def nil) nil
    (zero_is_member_R formula-decl nil ring_basic_properties nil)
    (singleton const-decl "(singleton?)" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (strict_subset? const-decl "bool" sets nil) nil
    (zero_ideal formula-decl nil ring_ideal nil)
    (one_diff_zero_monad formula-decl nil
     ring_with_one_basic_properties nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (singleton? const-decl "bool" sets nil) nil nil
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil))
   shostak)))
