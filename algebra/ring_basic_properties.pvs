%%----------------------------------------------------------------------------
%%
%% Authors:	
%% 		Thaynara Arielly de Lima
%% 		Universidade Federal de Goiás - Brasil
%%
%%  		Andréia Borges Avelar da Silva
%%		Universidade de Brasília - Brasil
%%			
%%		André Luiz Galdino
%%		Universidade Federal de Catalão - Brasil
%%
%%		André Camapum Carvalho de Freitas
%%		Universidade Federal de Goiás - Brasil
%%
%%		Mauricio Ayala-Rincón
%%		Universidade de Brasília - Brasil
%%----------------------------------------------------------------------------
%%
%%	Formalization of some results about Ring Theory
%%
%%	Last version: June 25, 2020
%%
%%----------------------------------------------------------------------------
ring_basic_properties[T:Type+,+,*:[T,T->T],zero:T] : THEORY

BEGIN

   ASSUMING IMPORTING ring_def[T,+,*,zero]
    
	fullset_is_ring: ASSUMPTION ring?(fullset[T])

   ENDASSUMING

   IMPORTING ring[T,+,*,zero]

%%----------------------------------------------------------------------------

   x,y             : VAR T
   m,n,i,j         : VAR nat
   z,k             : VAR int
   R               : VAR (ring?)
   H,I,S           : VAR set[T]

%%----------------------------------------------------------------------------
 zero_is_member_R: LEMMA
    member(zero,R)

 inv_is_member_R: LEMMA
    member(x,R) IMPLIES member(inv(x),R)

 R_sum_star_closed: LEMMA
    (member(x,R) AND member(y,R)) IMPLIES member(x+y,R)

 R_prod_star_closed: LEMMA
    (member(x,R) AND member(y,R)) IMPLIES member(x*y,R)

 l_plus_zero: LEMMA
      x + y  = x IMPLIES y = zero

 r_plus_zero: LEMMA
      y + x  = x IMPLIES y = zero

 no_singleton_nzx: LEMMA
     FORALL(S:ring): S /= singleton(zero) IFF EXISTS (nzx:(S)): nzx /= zero

 card_gt_one_nzx: LEMMA
     FORALL(S:ring | is_finite(S)): Card(S) > 1 IFF EXISTS (nzx:(S)): nzx /= zero

 no_singleton_card: COROLLARY
     FORALL(S:ring | is_finite(S)): S /= singleton(zero) IFF Card(S) > 1

 subring_transitive: LEMMA
    subring?(H,R) AND subring?(I,H) IMPLIES subring?(I,R)
				
%%----------------------------------------------------------------------------
%%	Alternative characterization of subrings
%%----------------------------------------------------------------------------

 subring_equiv: LEMMA
    subring?(S,R) IFF nonempty?(S) AND
	  	      subset?(S,R) AND
                      (FORALL (x,y:(S)): member(x + inv(y),S) AND
		                         member(x * y,S))


%%----------------------------------------------------------------------------
%%      The function times(x,k) is equal to the function ^(x,k)[T,+,zero], defined
%%      within the scope of the theory group.
%%      This function multiplies an element of the ring by an integer.
%%----------------------------------------------------------------------------
 %% OPERADOR ^ DE GROUPS
 times(x,k): T =  ^(x,k)
 
 		  
 %*(x,k) : T = ^(x,k)
%%----------------------------------------------------------------------------

 times_member: LEMMA
      FORALL (x:(R)): member(times(x,k), R)

 left_times:  LEMMA
      times(x, k) * y = times(x * y, k)

 right_times: LEMMA
      x * times(y,k) = times(x * y, k)

 inv_times_neg: LEMMA
      times(x,k) = inv(times(x,-k))

 inv_times_inv: LEMMA
      inv(times(x,k)) = times(inv(x),k)

 times_inv_neg: LEMMA
      times(x,k) = times(inv(x),-k)

 times_int_zero: LEMMA
     times(zero,k) = zero

 times_int_one: LEMMA
     times(x,1) = x

 times_sum: LEMMA
     times(x,z) + times(x,k) = times(x,z+k)

 times_o : LEMMA
    times(times(x,k) , z) = times(x, z * k)

 times_product: LEMMA
    times(x,k) * times(y, z) = times(x * y, k * z)


%%----------------------------------------------------------------------------
%%	Sigma function for elements of the ring
%%	and related results
%%----------------------------------------------------------------------------
 F, G                   : VAR [nat -> T]
 low, high, low1, high1 : VAR nat

 R_sigma(low,high,F): Recursive T =
   IF low > high THEN zero
   ELSIF high = low THEN F(low) 
   ELSE R_sigma(low,high-1,F) + F(high)
   ENDIF
 MEASURE abs(high+1-low)

 R_sigma_first: LEMMA
   high >= low IMPLIES
    R_sigma(low,high,F) = F(low) + R_sigma(low + 1,high,F)

     
 R_sigma_eq_k: LEMMA
  FORALL(k:nat):
     (FORALL(n: subrange(low,high)): F(n) = G(n+k))
     IMPLIES R_sigma(low,high,F) = R_sigma(low+k,high+k,G)

 R_sigma_eq: COROLLARY
   (FORALL(n: subrange(low,high)): F(n) = G(n))
     IMPLIES R_sigma(low,high,F) = R_sigma(low,high,G)

 R_sigma_eq2: COROLLARY
   (FORALL(n: subrange(low,high)): F(n) = G(n+1))
     IMPLIES R_sigma(low,high,F) = R_sigma(low+1,high+1,G)

 R_sigma_sum: LEMMA
    R_sigma(low, high, F) + R_sigma(low, high, G) =
        R_sigma(low, high,LAMBDA i: F(i) + G(i))

 ast_R_sigma: LEMMA
    x*R_sigma(low,high,F) = R_sigma(low,high, (LAMBDA i: x*F(i)))

 R_sigma_ast: LEMMA
    R_sigma(low,high,F)*x = R_sigma(low,high, (LAMBDA i: F(i)*x))

 R_sigma_inv: LEMMA
    inv(R_sigma(low,high,F)) = R_sigma(low,high, (LAMBDA i: inv(F(i))))
    
 R_sigma_o: LEMMA
    R_sigma(low,high,F) * R_sigma(low1,high1,G)
    = R_sigma(low,high, LAMBDA i: R_sigma(low1,high1, lambda j: F(i) * G(j)) )

 R_sigma_R_sigma : LEMMA  FORALL(low, low1 : nat,  high: nat | high >= low, high1 : nat | high1 >= low1)  :
    R_sigma(low, high, F) + R_sigma(low1, high1, G) = R_sigma(low, high + (high1 - low1) + 1,
     LAMBDA (i : nat) :  IF (i >= low AND i <= high) THEN F(i)
                         ELSIF (i > high AND i <= high + (high1 - low1) + 1 ) THEN G(i - high + low1 - 1)
                         ELSE zero ENDIF )

 R_sigma_is_member_R: LEMMA (FORALL(n: subrange(low,high)):
                             member(F(n),R)) IMPLIES member(R_sigma(low,high,F),R)
			     
%%----------------------------------------------------------------------------
%%	Definition of a non zero divisor type
%%----------------------------------------------------------------------------

  IMPORTING ring_nz_closed_def[T,+,*,zero]

 %nz_T: Type = {x:T | x /= zero}

 left_zd?(x: nz_T): bool = EXISTS (y:nz_T): x * y = zero

 right_zd?(x: nz_T): bool = EXISTS (y:nz_T): y * x = zero
 
 zd_element?(x: nz_T): bool = left_zd?(x) AND right_zd?(x)

 lzd: TYPE = (left_zd?)

 rzd: TYPE = (right_zd?)
 
 zd: TYPE = (zd_element?)

 nlzd: TYPE = {x:T | x = zero OR NOT left_zd?(x)}

 nrzd: TYPE = {x:T | x = zero OR NOT right_zd?(x)}

 nzd: TYPE = {x:T | x = zero OR NOT zd_element?(x)}

 nzd_cancel_left: LEMMA
    	FORALL (a:nlzd, b,c:T): a * b = a * c IMPLIES (a = zero OR b = c)

 nzd_cancel_right: LEMMA
    	FORALL (a:nrzd, b,c:T):  b * a = c * a IMPLIES (a = zero OR b = c)


END ring_basic_properties
%%----------------------------------------------------------------------------

