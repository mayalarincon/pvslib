(abelian_group
 (IMP_group_TCC1 0
  (IMP_group_TCC1-1 nil 3293976868
   ("" (lemma "fullset_is_abelian_group")
    (("" (expand "abelian_group?") (("" (flatten) nil nil)) nil)) nil)
   ((abelian_group? const-decl "bool" group_def nil)
    (fullset_is_abelian_group formula-decl nil abelian_group nil))
   shostak
   (IMP_group assuming
    "group[abelian_group.T, abelian_group.*, abelian_group.one].group"
    "fullset_is_group: ASSUMPTION group_def[group.T, group.*, group.one].group?(sets[group.T].fullset)")))
 (abelian_group_TCC1 0
  (abelian_group_TCC1-1 nil 3293976891
   ("" (lemma "fullset_is_abelian_group") (("" (propax) nil nil)) nil)
   ((fullset_is_abelian_group formula-decl nil abelian_group nil))
   shostak
   (abelian_group subtype "sets[abelian_group.T].fullset"
    "abelian_group")))
 (abelian_group_is_group 0
  (abelian_group_is_group-1 nil 3861738051 ("" (judgement-tcc) nil nil)
   ((abelian_group nonempty-type-eq-decl nil abelian_group nil)
    (abelian_group? const-decl "bool" group_def nil)
    (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (commutative? const-decl "bool" operator_defs nil)
    (member const-decl "bool" sets nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (one formal-const-decl "T" abelian_group nil)
    (* formal-const-decl "[T, T -> T]" abelian_group nil)
    (T formal-nonempty-type-decl nil abelian_group nil)
    (one_member formula-decl nil monad nil)
    (right_identity formula-decl nil monad nil)
    (restrict const-decl "R" restrict nil)
    (left_identity formula-decl nil monad nil)
    (identity? const-decl "bool" operator_defs nil)
    (monad? const-decl "bool" monad_def nil)
    (associative? const-decl "bool" operator_defs nil)
    (monoid? const-decl "bool" monoid_def nil)
    (inv_exists? const-decl "bool" group_def nil)
    (group? const-decl "bool" group_def nil))
   nil
   (abelian_group_is_group_ subtype "abelian_group.abelian_group"
    "group[abelian_group.T, abelian_group.*, abelian_group.one].group")))
 (abelian_group_is_commutative_monoid 0
  (abelian_group_is_commutative_monoid-1 nil 3861738051
   ("" (judgement-tcc) nil nil)
   ((abelian_group nonempty-type-eq-decl nil abelian_group nil)
    (abelian_group? const-decl "bool" group_def nil)
    (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (group? const-decl "bool" group_def nil)
    (inv_exists? const-decl "bool" group_def nil)
    (member const-decl "bool" sets nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (one formal-const-decl "T" abelian_group nil)
    (* formal-const-decl "[T, T -> T]" abelian_group nil)
    (T formal-nonempty-type-decl nil abelian_group nil)
    (one_member formula-decl nil monad nil)
    (right_identity formula-decl nil monad nil)
    (restrict const-decl "R" restrict nil)
    (left_identity formula-decl nil monad nil)
    (identity? const-decl "bool" operator_defs nil)
    (monad? const-decl "bool" monad_def nil)
    (associative? const-decl "bool" operator_defs nil)
    (monoid? const-decl "bool" monoid_def nil)
    (commutative? const-decl "bool" operator_defs nil)
    (commutative_monoid? const-decl "bool" monoid_def nil))
   nil
   (abelian_group_is_commutative_monoid_ subtype
    "abelian_group.abelian_group"
    "monoid[abelian_group.T, abelian_group.*, abelian_group.one].commutative_monoid")))
 (abelian_subgroups 0
  (abelian_subgroups-2 "" 3790093331
   ("" (skolem!)
    (("" (flatten)
      (("" (typepred "A!1")
        (("" (expand "abelian_group?")
          (("" (flatten)
            (("" (expand "subgroup?")
              (("" (flatten)
                (("" (assert)
                  (("" (hide -1 -4)
                    (("" (expand "subset?") (("" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subgroup? const-decl "bool" group_def nil)
    (abelian_group? const-decl "bool" group_def nil))
   shostak)
  (abelian_subgroups-1 nil 3293976722
   ("" (skolem!)
    (("" (flatten)
      (("" (typepred "A!1")
        (("" (expand "abelian_group?")
          (("" (flatten)
            (("" (expand "subgroup?")
              (("" (flatten)
                (("" (assert)
                  (("" (hide -1 -4)
                    (("" (expand "commutative_over?")
                      (("" (skosimp*)
                        (("" (inst - "x!1" "y!1")
                          (("" (expand "subset?")
                            (("" (inst-cp - "x!1")
                              ((""
                                (inst - "y!1")
                                (("" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subgroup? const-decl "bool" group_def nil)
    (abelian_group? const-decl "bool" group_def nil))
   shostak))
 (finite_abelian_group_TCC1 0
  (finite_abelian_group_TCC1-1 nil 3407081659
   ("" (inst + "singleton[T](one)")
    (("" (expand "finite_abelian_group?")
      (("" (assert)
        (("" (expand "commutative?")
          (("" (skosimp*)
            (("" (grind)
              (("" (typepred "y!1")
                (("" (typepred "x!1")
                  (("" (expand "singleton")
                    (("" (replace -1)
                      (("" (hide -1)
                        (("" (replace -1) (("" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((commutative? const-decl "bool" operator_defs nil)
    (restrict const-decl "R" restrict nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (one_finite_group formula-decl nil group nil)
    (singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (finite_abelian_group? const-decl "bool" group_def nil)
    (one formal-const-decl "T" abelian_group nil)
    (* formal-const-decl "[T, T -> T]" abelian_group nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-nonempty-type-decl nil abelian_group nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil))
   nil
   (finite_abelian_group existence ""
    "{x: set[T] | group_def[abelian_group.T, abelian_group.*, abelian_group.one].finite_abelian_group?(x)}")))
 (finite_abelian_group_is_abelian_group 0
  (finite_abelian_group_is_abelian_group-1 nil 3861738051
   ("" (judgement-tcc) nil nil)
   ((finite_abelian_group nonempty-type-eq-decl nil abelian_group nil)
    (finite_abelian_group? const-decl "bool" group_def nil)
    (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finite_group? const-decl "bool" group_def nil)
    (is_finite const-decl "bool" finite_sets nil)
    (injective? const-decl "bool" functions nil)
    (member const-decl "bool" sets nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (one formal-const-decl "T" abelian_group nil)
    (* formal-const-decl "[T, T -> T]" abelian_group nil)
    (T formal-nonempty-type-decl nil abelian_group nil)
    (one_member formula-decl nil monad nil)
    (right_identity formula-decl nil monad nil)
    (restrict const-decl "R" restrict nil)
    (left_identity formula-decl nil monad nil)
    (identity? const-decl "bool" operator_defs nil)
    (monad? const-decl "bool" monad_def nil)
    (associative? const-decl "bool" operator_defs nil)
    (monoid? const-decl "bool" monoid_def nil)
    (inv_exists? const-decl "bool" group_def nil)
    (group? const-decl "bool" group_def nil)
    (commutative? const-decl "bool" operator_defs nil)
    (abelian_group? const-decl "bool" group_def nil))
   nil
   (finite_abelian_group_is_abelian_group_ subtype
    "abelian_group.finite_abelian_group"
    "abelian_group.abelian_group")))
 (finite_abelian_group_is_finite_group 0
  (finite_abelian_group_is_finite_group-1 nil 3861738051
   ("" (judgement-tcc) nil nil)
   ((finite_abelian_group nonempty-type-eq-decl nil abelian_group nil)
    (finite_abelian_group? const-decl "bool" group_def nil)
    (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (commutative? const-decl "bool" operator_defs nil)
    (member const-decl "bool" sets nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (one formal-const-decl "T" abelian_group nil)
    (* formal-const-decl "[T, T -> T]" abelian_group nil)
    (T formal-nonempty-type-decl nil abelian_group nil)
    (one_member formula-decl nil monad nil)
    (right_identity formula-decl nil monad nil)
    (restrict const-decl "R" restrict nil)
    (left_identity formula-decl nil monad nil)
    (identity? const-decl "bool" operator_defs nil)
    (monad? const-decl "bool" monad_def nil)
    (associative? const-decl "bool" operator_defs nil)
    (monoid? const-decl "bool" monoid_def nil)
    (inv_exists? const-decl "bool" group_def nil)
    (group? const-decl "bool" group_def nil)
    (injective? const-decl "bool" functions nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_group? const-decl "bool" group_def nil))
   nil
   (finite_abelian_group_is_finite_group_ subtype
    "abelian_group.finite_abelian_group"
    "group[abelian_group.T, abelian_group.*, abelian_group.one].finite_group")))
 (finite_abelian_subgroups 0
  (finite_abelian_subgroups-1 nil 3407081668
   ("" (skosimp)
    (("" (lemma "abelian_subgroups" ("S" "S!1" "A" "G!1"))
      (("" (expand "finite_abelian_group?")
        (("" (expand "abelian_group?")
          (("" (assert)
            (("" (flatten)
              (("" (assert)
                (("" (expand "finite_group?")
                  (("" (lemma "finite_subgroups")
                    (("" (inst?) (("" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_abelian_group? const-decl "bool" group_def nil)
    (abelian_group? const-decl "bool" group_def nil)
    (finite_group? const-decl "bool" group_def nil)
    (finite_group nonempty-type-eq-decl nil group nil)
    (finite_subgroups formula-decl nil group nil))
   nil)))

