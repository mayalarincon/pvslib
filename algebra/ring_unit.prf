(ring_unit
 (IMP_ring_ideal_TCC1 0
  (IMP_ring_ideal_TCC1-1 nil 3861799364
   ("" (lemma "fullset_is_ring_with_one")
    (("" (expand "ring_with_one?") (("" (flatten) nil nil)) nil)) nil)
   ((ring_with_one? const-decl "bool" ring_with_one_def nil)
    (fullset_is_ring_with_one formula-decl nil ring_unit nil))
   nil
   (IMP_ring_ideal assuming
    "ring_ideal[ring_unit.T, ring_unit.+, ring_unit.*, ring_unit.zero].ring_ideal"
    "fullset_is_ring: ASSUMPTION ring_def[ring_ideal.T, ring_ideal.+, ring_ideal.*, ring_ideal.zero].ring?(sets[ring_ideal.T].fullset)")))
 (IMP_ring_with_one_TCC1 0
  (IMP_ring_with_one_TCC1-1 nil 3861799364
   ("" (rewrite "fullset_is_ring_with_one") nil nil)
   ((fullset_is_ring_with_one formula-decl nil ring_unit nil)) nil
   (IMP_ring_with_one assuming
    "ring_with_one[ring_unit.T, ring_unit.+, ring_unit.*, ring_unit.zero, ring_unit.one].ring_with_one"
    "fullset_is_ring_with_one: ASSUMPTION ring_with_one_def[ring_with_one.T, ring_with_one.+, ring_with_one.*, ring_with_one.zero, ring_with_one.one].ring_with_one?(sets[ring_with_one.T].fullset)")))
 (proper_id_iff_no_unit_TCC1 0
  (proper_id_iff_no_unit_TCC1-1 nil 3855071013
   ("" (skosimp*)
    (("" (typepred "x!1" "I!1")
      (("" (expand "ideal?")
        (("" (expand "left_ideal?")
          (("" (expand "subring?")
            (("" (expand "subset?")
              (("" (expand "remove")
                (("" (expand "member")
                  (("" (flatten)
                    (("" (hide-all-but (-1 -2 3))
                      (("" (inst?) (("" (assert) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ideal type-eq-decl nil ring_ideal_def nil)
    (ring_with_one nonempty-type-eq-decl nil ring_with_one nil)
    (ring_with_one? const-decl "bool" ring_with_one_def nil)
    (one formal-const-decl "T" ring_unit nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ring? const-decl "bool" ring_def nil)
    (* formal-const-decl "[T, T -> T]" ring_unit nil)
    (+ formal-const-decl "[T, T -> T]" ring_unit nil)
    (zero formal-const-decl "T" ring_unit nil)
    (remove const-decl "set" sets nil) (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil ring_unit nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (left_ideal? const-decl "bool" ring_ideal_def nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (subring? const-decl "bool" ring_def nil))
   nil (proper_id_iff_no_unit subtype "ring_unit.x" "(ring_unit.R)")))
 (proper_id_iff_no_unit 0
  (proper_id_iff_no_unit-1 "first try" 3800274779
   ("" (skosimp)
    (("" (split)
      (("1" (prop)
        (("1" (typepred "I!1")
          (("1" (expand "ideal?")
            (("1" (flatten)
              (("1" (expand "left_ideal?")
                (("1" (flatten)
                  (("1" (expand "left_swallow?")
                    (("1" (skosimp)
                      (("1" (expand "unit?")
                        (("1" (flatten)
                          (("1" (expand "l_invertible?")
                            (("1" (skosimp)
                              (("1"
                                (inst -2 "y!1" "x!1")
                                (("1"
                                  (replace -5 -2)
                                  (("1"
                                    (expand "strict_subset?")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (decompose-equality 1)
                                        (("1"
                                          (iff 1)
                                          (("1"
                                            (split)
                                            (("1"
                                              (prop)
                                              (("1"
                                                (expand "subset?")
                                                (("1"
                                                  (expand "member")
                                                  (("1"
                                                    (inst -5 "x!2")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (prop)
                                              (("2"
                                                (expand "right_ideal?")
                                                (("2"
                                                  (expand
                                                   "right_swallow?")
                                                  (("2"
                                                    (inst
                                                     -4
                                                     "x!2"
                                                     "one")
                                                    (("2"
                                                      (rewrite
                                                       one_times)
                                                      (("2"
                                                        (expand
                                                         "member")
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (typepred "x!1")
                                  (("2"
                                    (expand "remove")
                                    (("2"
                                      (expand "member")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skosimp)
        (("2" (expand "strict_subset?")
          (("2" (split)
            (("1" (typepred "I!1")
              (("1" (expand "ideal?")
                (("1" (expand "left_ideal?")
                  (("1" (expand "subring?") (("1" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (typepred "R!1")
              (("2" (expand "ring_with_one?")
                (("2" (expand "monoid?")
                  (("2" (expand "monad?")
                    (("2" (flatten)
                      (("2" (decompose-equality)
                        (("2" (inst -1 "one")
                          (("2" (iff)
                            (("2" (flatten)
                              (("2"
                                (expand "member")
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst -8 "one")
                                    (("1"
                                      (expand "unit?")
                                      (("1"
                                        (expand "l_invertible?")
                                        (("1"
                                          (expand "r_invertible?")
                                          (("1"
                                            (split 1)
                                            (("1"
                                              (inst 1 "one")
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (inst 1 "one")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "remove")
                                      (("2"
                                        (split)
                                        (("1"
                                          (lemma "no_singleton_nzx")
                                          (("1"
                                            (inst -1 "I!1")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (case
                                                 "I!1 /= singleton(zero)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (skosimp)
                                                    (("1"
                                                      (case
                                                       "nzx!1*zero=nzx!1*one")
                                                      (("1"
                                                        (rewrite
                                                         times_zero)
                                                        (("1"
                                                          (rewrite
                                                           times_one)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (replace -2 1)
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "member")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ideal type-eq-decl nil ring_ideal_def nil)
    (ring_with_one nonempty-type-eq-decl nil ring_with_one nil)
    (ring_with_one? const-decl "bool" ring_with_one_def nil)
    (one formal-const-decl "T" ring_unit nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ring? const-decl "bool" ring_def nil)
    (zero formal-const-decl "T" ring_unit nil)
    (* formal-const-decl "[T, T -> T]" ring_unit nil)
    (+ formal-const-decl "[T, T -> T]" ring_unit nil)
    (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil ring_unit nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (strict_subset_is_strict_order name-judgement
     "(strict_order?[set[T]])" sets_lemmas nil)
    (right_swallow? const-decl "bool" ring_ideal_def nil)
    (one_times formula-decl nil ring_with_one nil) nil
    (right_ideal? const-decl "bool" ring_ideal_def nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (strict_subset? const-decl "bool" sets nil) nil
    (remove const-decl "set" sets nil) nil nil
    (l_invertible? const-decl "bool" ring_unit_def nil)
    (unit? const-decl "bool" ring_unit_def nil)
    (left_swallow? const-decl "bool" ring_ideal_def nil)
    (left_ideal? const-decl "bool" ring_ideal_def nil)
    (monoid? const-decl "bool" monoid_def nil)
    (no_singleton_nzx formula-decl nil ring_basic_properties nil)
    (times_one formula-decl nil ring_with_one nil)
    (times_zero formula-decl nil ring nil)
    (singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (/= const-decl "boolean" notequal nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (r_invertible? const-decl "bool" ring_unit_def nil)
    (one_member formula-decl nil monad nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (monad? const-decl "bool" monad_def nil)
    (subring? const-decl "bool" ring_def nil))
   shostak)
  (proper_id_iff_no_unit-1 nil 3800177138
   ("" (skosimp)
    (("" (split)
      (("1" (prop)
        (("1" (skosimp)
          (("1" (expand "unit?")
            (("1" (expand "l_invertible?")
              (("1" (flatten)
                (("1" (skosimp)
                  (("1" (case "NOT member(one, R!1)")
                    (("1" (expand "member")
                      (("1" (expand "strict_subset?")
                        (("1" (flatten)
                          (("1" (lemma R_prod_star_closed)
                            (("1" (inst -1 "R!1" "y!1" "x!1")
                              (("1"
                                (expand "member")
                                (("1"
                                  (typepred "x!1")
                                  (("1"
                                    (expand "remove")
                                    (("1"
                                      (expand "member")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand "subset?")
                                          (("1"
                                            (inst -3 "x!1")
                                            (("1"
                                              (expand "member")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (typepred "I!1")
                      (("2" (expand "ideal?")
                        (("2" (flatten)
                          (("2" (expand "left_ideal?")
                            (("2" (flatten)
                              (("2"
                                (expand "left_swallow?")
                                (("2"
                                  (expand "subring?")
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (inst -3 "y!1" "x!1")
                                      (("1"
                                        (replace -7 -3)
                                        (("1"
                                          (expand "right_ideal?")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand "member")
                                              (("1"
                                                (expand
                                                 "right_swallow?")
                                                (("1"
                                                  (expand
                                                   "strict_subset?")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (decompose-equality
                                                       1)
                                                      (("1"
                                                        (iff 1)
                                                        (("1"
                                                          (split)
                                                          (("1"
                                                            (prop)
                                                            (("1"
                                                              (expand
                                                               "subset?")
                                                              (("1"
                                                                (inst
                                                                 -2
                                                                 "x!2")
                                                                (("1"
                                                                  (expand
                                                                   "member")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (prop)
                                                            (("2"
                                                              (inst
                                                               -6
                                                               "x!2"
                                                               "one")
                                                              (("2"
                                                                (rewrite
                                                                 one_times)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred "x!1")
                                        (("2"
                                          (expand "remove")
                                          (("2"
                                            (expand "member")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred "I!1")
        (("2" (skosimp)
          (("2" (split)
            (("1" (expand "strict_subset?")
              (("1" (split)
                (("1" (expand "ideal?")
                  (("1" (expand "left_ideal?")
                    (("1" (expand "subring?") (("1" (assert) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "/=")
                  (("2" (decompose-equality -1)
                    (("2" (postpone) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (postpone) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (no_prop_l_ideal_nz_unit_TCC1 0
  (no_prop_l_ideal_nz_unit_TCC1-1 nil 3855071013
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil ring_unit nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" ring_unit nil)
    (* formal-const-decl "[T, T -> T]" ring_unit nil)
    (zero formal-const-decl "T" ring_unit nil)
    (one formal-const-decl "T" ring_unit nil)
    (ring_with_one? const-decl "bool" ring_with_one_def nil)
    (ring_with_one nonempty-type-eq-decl nil ring_with_one nil)
    (one_times formula-decl nil ring_with_one nil)
    (times_one formula-decl nil ring_with_one nil)
    (ring? const-decl "bool" ring_def nil)
    (right_distributive? const-decl "bool" operator_defs_more nil)
    (left_distributive? const-decl "bool" operator_defs_more nil)
    (abelian_group? const-decl "bool" group_def nil)
    (commutative? const-decl "bool" operator_defs nil)
    (group? const-decl "bool" group_def nil)
    (inv_exists? const-decl "bool" group_def nil)
    (monoid? const-decl "bool" monoid_def nil)
    (associative? const-decl "bool" operator_defs nil)
    (monad? const-decl "bool" monad_def nil)
    (identity? const-decl "bool" operator_defs nil)
    (left_identity formula-decl nil monad nil)
    (restrict const-decl "R" restrict nil)
    (right_identity formula-decl nil monad nil)
    (one_member formula-decl nil monad nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (member const-decl "bool" sets nil)
    (/= const-decl "boolean" notequal nil)
    (remove const-decl "set" sets nil))
   nil
   (no_prop_l_ideal_nz_unit subtype "ring_unit.x" "(ring_unit.R)")))
 (no_prop_l_ideal_nz_unit 0
  (no_prop_l_ideal_nz_unit-3 nil 3808585503
   ("" (skosimp*)
    (("" (copy -1)
      (("" (inst -1 "+[T,*](R!1,x!1)")
        (("1" (split)
          (("1" (hide-all-but -1)
            (("1" (decompose-equality)
              (("1" (inst -1 "x!1")
                (("1" (iff)
                  (("1" (flatten)
                    (("1" (hide -2)
                      (("1" (split)
                        (("1" (typepred "x!1")
                          (("1" (expand "remove")
                            (("1" (expand "singleton")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (expand "+")
                          (("2" (inst 1 "one")
                            (("1" (assert) nil nil)
                             ("2" (typepred "R!1")
                              (("2"
                                (expand "ring_with_one?")
                                (("2"
                                  (expand "monoid?")
                                  (("2"
                                    (expand "monad?")
                                    (("2"
                                      (expand "member")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "unit?")
            (("2" (expand "l_invertible?")
              (("2" (expand "r_invertible?")
                (("2" (split)
                  (("1" (hide -2)
                    (("1" (decompose-equality)
                      (("1" (inst -1 "one")
                        (("1" (iff)
                          (("1" (flatten)
                            (("1" (hide -1)
                              (("1"
                                (case "R!1(one)")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "+")
                                    (("1"
                                      (skosimp)
                                      (("1"
                                        (inst 1 "h!1")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (typepred "R!1")
                                  (("2"
                                    (expand "ring_with_one?")
                                    (("2"
                                      (expand "monoid?")
                                      (("2"
                                        (expand "monad?")
                                        (("2"
                                          (expand "member")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (decompose-equality -1)
                    (("2" (inst -1 "one")
                      (("2" (iff)
                        (("2" (flatten)
                          (("2" (hide -1)
                            (("2" (typepred "R!1")
                              (("2"
                                (expand "ring_with_one?")
                                (("2"
                                  (expand "monoid?")
                                  (("2"
                                    (expand "monad?")
                                    (("2"
                                      (expand "member")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (hide-all-but (-3 -6 -7 1 2))
                                          (("2"
                                            (prop)
                                            (("2"
                                              (expand "+ " -1)
                                              (("2"
                                                (skosimp)
                                                (("2"
                                                  (case "h!1 = zero")
                                                  (("1"
                                                    (replaces -1 -2)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (case
                                                         "x!1*one=x!1*zero")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (typepred
                                                             "x!1")
                                                            (("1"
                                                              (expand
                                                               "remove")
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (replace
                                                           -1
                                                           1)
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (inst
                                                     -3
                                                     "+[T, *](R!1,h!1)")
                                                    (("1"
                                                      (split)
                                                      (("1"
                                                        (decompose-equality)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "h!1")
                                                          (("1"
                                                            (iff)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (hide
                                                                 -2)
                                                                (("1"
                                                                  (case
                                                                   "(+[T, *])(R!1, h!1)(h!1)")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "singleton")
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "+ ")
                                                                    (("2"
                                                                      (inst
                                                                       1
                                                                       "one")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (decompose-equality)
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "one")
                                                          (("2"
                                                            (iff)
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "+ ")
                                                                  (("2"
                                                                    (hide
                                                                     -1)
                                                                    (("2"
                                                                      (skosimp)
                                                                      (("2"
                                                                        (lemma
                                                                         times_associative)
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "h!2"
                                                                           "h!1"
                                                                           "x!1")
                                                                          (("2"
                                                                            (replace
                                                                             -3
                                                                             -1
                                                                             rl)
                                                                            (("2"
                                                                              (replace
                                                                               -2
                                                                               -1
                                                                               rl)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (inst
                                                                                   2
                                                                                   "h!1")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (rewrite
                                                       "r_prod_is_l_ideal")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (rewrite "r_prod_is_l_ideal") nil nil))
        nil))
      nil))
    nil)
   ((singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (monoid? const-decl "bool" monoid_def nil)
    (monad? const-decl "bool" monad_def nil)
    (one_times formula-decl nil ring_with_one nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil)
    (l_invertible? const-decl "bool" ring_unit_def nil)
    (zero_times formula-decl nil ring nil)
    (times_one formula-decl nil ring_with_one nil)
    (times_zero formula-decl nil ring nil)
    (TRUE const-decl "bool" booleans nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (r_prod_is_l_ideal formula-decl nil ring_ideal nil)
    (times_associative formula-decl nil ring nil) nil
    (r_invertible? const-decl "bool" ring_unit_def nil)
    (unit? const-decl "bool" ring_unit_def nil)
    (left_ideal type-eq-decl nil ring_ideal_def nil)
    (T formal-nonempty-type-decl nil ring_unit nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" ring_unit nil)
    (* formal-const-decl "[T, T -> T]" ring_unit nil)
    (zero formal-const-decl "T" ring_unit nil)
    (ring? const-decl "bool" ring_def nil)
    (left_ideal? const-decl "bool" ring_ideal_def nil) nil
    (one formal-const-decl "T" ring_unit nil)
    (ring_with_one? const-decl "bool" ring_with_one_def nil)
    (ring_with_one nonempty-type-eq-decl nil ring_with_one nil) nil
    (remove const-decl "set" sets nil) nil)
   nil)
  (no_prop_l_ideal_nz_unit-2 nil 3808585404
   ("" (skosimp*)
    (("" (copy -1)
      (("" (inst -1 "+[T,*](R!1,x!1)")
        (("1" (split)
          (("1" (hide-all-but -1)
            (("1" (decompose-equality)
              (("1" (inst -1 "x!1")
                (("1" (iff)
                  (("1" (flatten)
                    (("1" (hide -2)
                      (("1" (split)
                        (("1" (typepred "x!1")
                          (("1" (expand "remove")
                            (("1" (expand "singleton")
                              (("1" (assert) nil)))))))
                         ("2" (expand "+")
                          (("2" (inst 1 "one")
                            (("1" (assert) nil)
                             ("2" (typepred "R!1")
                              (("2"
                                (expand "ring_with_one?")
                                (("2"
                                  (expand "monoid?")
                                  (("2"
                                    (expand "monad?")
                                    (("2"
                                      (expand "member")
                                      (("2"
                                        (assert)
                                        nil)))))))))))))))))))))))))))))
           ("2" (expand "unit?")
            (("2" (expand "l_invertible?")
              (("2" (expand "r_invertible?")
                (("2" (split)
                  (("1" (hide -2)
                    (("1" (decompose-equality)
                      (("1" (inst -1 "one")
                        (("1" (iff)
                          (("1" (flatten)
                            (("1" (hide -1)
                              (("1"
                                (case "R!1(one)")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "+")
                                    (("1"
                                      (skosimp)
                                      (("1"
                                        (inst 1 "h!1")
                                        (("1" (assert) nil)))))))))
                                 ("2"
                                  (typepred "R!1")
                                  (("2"
                                    (expand "ring_with_one?")
                                    (("2"
                                      (expand "monoid?")
                                      (("2"
                                        (expand "monad?")
                                        (("2"
                                          (expand "member")
                                          (("2"
                                            (assert)
                                            nil)))))))))))))))))))))))))
                   ("2" (decompose-equality -1)
                    (("2" (inst -1 "one")
                      (("2" (iff)
                        (("2" (flatten)
                          (("2" (hide -1)
                            (("2" (typepred "R!1")
                              (("2"
                                (expand "ring_with_one?")
                                (("2"
                                  (expand "monoid?")
                                  (("2"
                                    (expand "monad?")
                                    (("2"
                                      (expand "member")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (hide-all-but (-3 -6 -7 1 2))
                                          (("2"
                                            (prop)
                                            (("2"
                                              (expand "+ " -1)
                                              (("2"
                                                (skosimp)
                                                (("2"
                                                  (case "h!1 = zero")
                                                  (("1"
                                                    (replaces -1 -2)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (case
                                                         "x!1*one=x!1*zero")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (typepred
                                                             "x!1")
                                                            (("1"
                                                              (expand
                                                               "remove")
                                                              (("1"
                                                                (propax)
                                                                nil)))))))
                                                         ("2"
                                                          (replace
                                                           -1
                                                           1)
                                                          (("2"
                                                            (propax)
                                                            nil)))))))))
                                                   ("2"
                                                    (inst
                                                     -3
                                                     "+[T, *](R!1,h!1)")
                                                    (("1"
                                                      (split)
                                                      (("1"
                                                        (decompose-equality)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "h!1")
                                                          (("1"
                                                            (iff)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (hide
                                                                 -2)
                                                                (("1"
                                                                  (case
                                                                   "(+[T, *])(R!1, h!1)(h!1)")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "singleton")
                                                                      (("1"
                                                                        (propax)
                                                                        nil)))))
                                                                   ("2"
                                                                    (expand
                                                                     "+ ")
                                                                    (("2"
                                                                      (inst
                                                                       1
                                                                       "one")
                                                                      (("2"
                                                                        (assert)
                                                                        nil)))))))))))))))))
                                                       ("2"
                                                        (decompose-equality)
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "one")
                                                          (("2"
                                                            (iff)
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "+ ")
                                                                  (("2"
                                                                    (hide
                                                                     -1)
                                                                    (("2"
                                                                      (skosimp)
                                                                      (("2"
                                                                        (lemma
                                                                         times_associative)
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "h!2"
                                                                           "h!1"
                                                                           "x!1")
                                                                          (("2"
                                                                            (replace
                                                                             -3
                                                                             -1
                                                                             rl)
                                                                            (("2"
                                                                              (replace
                                                                               -2
                                                                               -1
                                                                               rl)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (inst
                                                                                   2
                                                                                   "h!1")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil)))))))))))))))))))))))))))))))
                                                     ("2"
                                                      (rewrite
                                                       "r_prod_is_l_ideal")
                                                      nil)))))))))))))))))))))))))))))))))))))))))))))
         ("2" (rewrite "r_prod_is_l_ideal") nil))))))
    nil)
   nil nil)
  (no_prop_l_ideal_nz_unit-1 nil 3808585174
   ("" (skosimp*)
    (("" (copy -1)
      (("" (inst -1 "+[T,*](R!1,x!1)")
        (("1" (split)
          (("1" (hide-all-but -1)
            (("1" (decompose-equality)
              (("1" (inst -1 "x!1")
                (("1" (iff)
                  (("1" (flatten)
                    (("1" (hide -2)
                      (("1" (split)
                        (("1" (typepred "x!1")
                          (("1" (expand "remove")
                            (("1" (expand "singleton")
                              (("1" (assert) nil)))))))
                         ("2" (expand "+")
                          (("2" (inst 1 "one")
                            (("1" (assert) nil)
                             ("2" (typepred "R!1")
                              (("2"
                                (expand "ring_with_one?")
                                (("2"
                                  (expand "monoid?")
                                  (("2"
                                    (expand "monad?")
                                    (("2"
                                      (expand "member")
                                      (("2"
                                        (assert)
                                        nil)))))))))))))))))))))))))))))
           ("2" (expand "unit?")
            (("2" (expand "l_invertible?")
              (("2" (expand "r_invertible?")
                (("2" (split)
                  (("1" (hide -2)
                    (("1" (decompose-equality)
                      (("1" (inst -1 "one")
                        (("1" (iff)
                          (("1" (flatten)
                            (("1" (hide -1)
                              (("1"
                                (case "R!1(one)")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "+")
                                    (("1"
                                      (skosimp)
                                      (("1"
                                        (inst 1 "h!1")
                                        (("1" (assert) nil)))))))))
                                 ("2"
                                  (typepred "R!1")
                                  (("2"
                                    (expand "ring_with_one?")
                                    (("2"
                                      (expand "monoid?")
                                      (("2"
                                        (expand "monad?")
                                        (("2"
                                          (expand "member")
                                          (("2"
                                            (assert)
                                            nil)))))))))))))))))))))))))
                   ("2" (decompose-equality -1)
                    (("2" (inst -1 "one")
                      (("2" (iff)
                        (("2" (flatten)
                          (("2" (hide -1)
                            (("2" (typepred "R!1")
                              (("2"
                                (expand "ring_with_one?")
                                (("2"
                                  (expand "monoid?")
                                  (("2"
                                    (expand "monad?")
                                    (("2"
                                      (expand "member")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (hide-all-but (-3 -6 -7 1 2))
                                          (("2"
                                            (prop)
                                            (("2"
                                              (expand "+ " -1)
                                              (("2"
                                                (skosimp)
                                                (("2"
                                                  (case "h!1 = zero")
                                                  (("1"
                                                    (replaces -1 -2)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (case
                                                         "x!1*one=x!1*zero")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (typepred
                                                             "x!1")
                                                            (("1"
                                                              (expand
                                                               "remove")
                                                              (("1"
                                                                (propax)
                                                                nil)))))))
                                                         ("2"
                                                          (replace
                                                           -1
                                                           1)
                                                          (("2"
                                                            (propax)
                                                            nil)))))))))
                                                   ("2"
                                                    (inst
                                                     -3
                                                     "+[T, *](R!1,h!1)")
                                                    (("1"
                                                      (split)
                                                      (("1"
                                                        (decompose-equality)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "h!1")
                                                          (("1"
                                                            (iff)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (hide
                                                                 -2)
                                                                (("1"
                                                                  (case
                                                                   "(+[T, *])(R!1, h!1)(h!1)")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "singleton")
                                                                      (("1"
                                                                        (propax)
                                                                        nil)))))
                                                                   ("2"
                                                                    (expand
                                                                     "+ ")
                                                                    (("2"
                                                                      (inst
                                                                       1
                                                                       "one")
                                                                      (("2"
                                                                        (assert)
                                                                        nil)))))))))))))))))
                                                       ("2"
                                                        (decompose-equality)
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "one")
                                                          (("2"
                                                            (iff)
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "+ ")
                                                                  (("2"
                                                                    (hide
                                                                     -1)
                                                                    (("2"
                                                                      (skosimp)
                                                                      (("2"
                                                                        (lemma
                                                                         times_associative)
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "h!2"
                                                                           "h!1"
                                                                           "x!1")
                                                                          (("2"
                                                                            (replace
                                                                             -3
                                                                             -1
                                                                             rl)
                                                                            (("2"
                                                                              (replace
                                                                               -2
                                                                               -1
                                                                               rl)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (inst
                                                                                   2
                                                                                   "h!1")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil)))))))))))))))))))))))))))))))
                                                     ("2"
                                                      (rewrite
                                                       "r_prod_is_l_ideal")
                                                      nil)))))))))))))))))))))))))))))))))))))))))))))
         ("2" (rewrite "r_prod_is_l_ideal") nil))))))
    nil)
   nil nil))
 (no_prop_r_ideal_nz_unit_TCC1 0
  (no_prop_r_ideal_nz_unit_TCC1-1 nil 3855071013
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil ring_unit nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" ring_unit nil)
    (* formal-const-decl "[T, T -> T]" ring_unit nil)
    (zero formal-const-decl "T" ring_unit nil)
    (one formal-const-decl "T" ring_unit nil)
    (ring_with_one? const-decl "bool" ring_with_one_def nil)
    (ring_with_one nonempty-type-eq-decl nil ring_with_one nil)
    (one_times formula-decl nil ring_with_one nil)
    (times_one formula-decl nil ring_with_one nil)
    (ring? const-decl "bool" ring_def nil)
    (right_distributive? const-decl "bool" operator_defs_more nil)
    (left_distributive? const-decl "bool" operator_defs_more nil)
    (abelian_group? const-decl "bool" group_def nil)
    (commutative? const-decl "bool" operator_defs nil)
    (group? const-decl "bool" group_def nil)
    (inv_exists? const-decl "bool" group_def nil)
    (monoid? const-decl "bool" monoid_def nil)
    (associative? const-decl "bool" operator_defs nil)
    (monad? const-decl "bool" monad_def nil)
    (identity? const-decl "bool" operator_defs nil)
    (left_identity formula-decl nil monad nil)
    (restrict const-decl "R" restrict nil)
    (right_identity formula-decl nil monad nil)
    (one_member formula-decl nil monad nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (member const-decl "bool" sets nil)
    (/= const-decl "boolean" notequal nil)
    (remove const-decl "set" sets nil))
   nil
   (no_prop_r_ideal_nz_unit subtype "ring_unit.x" "(ring_unit.R)")))
 (no_prop_r_ideal_nz_unit 0
  (no_prop_r_ideal_nz_unit-2 nil 3808756680
   ("" (skosimp*)
    (("" (copy -1)
      (("" (inst -1 "+[T,*](x!1,R!1)")
        (("1" (split)
          (("1" (hide-all-but -1)
            (("1" (decompose-equality)
              (("1" (inst -1 "x!1")
                (("1" (iff)
                  (("1" (flatten)
                    (("1" (hide -2)
                      (("1" (split)
                        (("1" (typepred "x!1")
                          (("1" (expand "remove")
                            (("1" (expand "singleton")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (expand "+")
                          (("2" (inst 1 "one")
                            (("1" (assert) nil nil)
                             ("2" (typepred "R!1")
                              (("2"
                                (expand "ring_with_one?")
                                (("2"
                                  (expand "monoid?")
                                  (("2"
                                    (expand "monad?")
                                    (("2"
                                      (expand "member")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "unit?")
            (("2" (expand "l_invertible?")
              (("2" (expand "r_invertible?")
                (("2" (split)
                  (("1" (decompose-equality)
                    (("1" (inst -1 "one")
                      (("1" (iff)
                        (("1" (flatten)
                          (("1" (hide -1)
                            (("1" (case "R!1(one)")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "+")
                                  (("1"
                                    (skosimp)
                                    (("1"
                                      (case "h!1 = zero")
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (inst 1 "zero")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (inst -3 "+[T,*](h!1,R!1)")
                                        (("1"
                                          (split)
                                          (("1"
                                            (decompose-equality)
                                            (("1"
                                              (inst -1 "h!1")
                                              (("1"
                                                (iff)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (hide -2)
                                                    (("1"
                                                      (case
                                                       " (+[T, *])(h!1, R!1)(h!1)")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "singleton")
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand "+" 1)
                                                        (("2"
                                                          (inst
                                                           1
                                                           "one")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (decompose-equality)
                                            (("2"
                                              (inst -1 "one")
                                              (("2"
                                                (iff)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (hide -1)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand "+")
                                                        (("2"
                                                          (skosimp)
                                                          (("2"
                                                            (lemma
                                                             "times_associative")
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "x!1"
                                                               "h!1"
                                                               "h!2")
                                                              (("2"
                                                                (replace
                                                                 -2
                                                                 -1
                                                                 rl)
                                                                (("2"
                                                                  (replace
                                                                   -4
                                                                   -1
                                                                   rl)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (inst
                                                                       2
                                                                       "h!1")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma "l_prod_is_r_ideal")
                                          (("2"
                                            (inst -1 "R!1" "h!1")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (typepred "R!1")
                                (("2"
                                  (expand "ring_with_one?")
                                  (("2"
                                    (expand "monoid?")
                                    (("2"
                                      (expand "monad?")
                                      (("2"
                                        (expand "member")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide -2)
                    (("2" (decompose-equality)
                      (("2" (inst -1 "one")
                        (("2" (iff)
                          (("2" (flatten)
                            (("2" (hide -1)
                              (("2"
                                (case "R!1(one)")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "+")
                                    (("1"
                                      (skosimp)
                                      (("1"
                                        (inst 1 "h!1")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (typepred "R!1")
                                  (("2"
                                    (expand "ring_with_one?")
                                    (("2"
                                      (expand "monoid?")
                                      (("2"
                                        (expand "monad?")
                                        (("2"
                                          (expand "member")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (lemma "l_prod_is_r_ideal")
          (("2" (inst -1 "R!1" "x!1") nil nil)) nil))
        nil))
      nil))
    nil)
   ((singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (monoid? const-decl "bool" monoid_def nil)
    (monad? const-decl "bool" monad_def nil)
    (times_one formula-decl nil ring_with_one nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil)
    (l_invertible? const-decl "bool" ring_unit_def nil)
    (times_zero formula-decl nil ring nil)
    (zero_times formula-decl nil ring nil)
    (TRUE const-decl "bool" booleans nil)
    (l_prod_is_r_ideal formula-decl nil ring_ideal nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (one_times formula-decl nil ring_with_one nil)
    (times_associative formula-decl nil ring nil) nil
    (r_invertible? const-decl "bool" ring_unit_def nil)
    (unit? const-decl "bool" ring_unit_def nil)
    (right_ideal type-eq-decl nil ring_ideal_def nil)
    (T formal-nonempty-type-decl nil ring_unit nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" ring_unit nil)
    (* formal-const-decl "[T, T -> T]" ring_unit nil)
    (zero formal-const-decl "T" ring_unit nil)
    (ring? const-decl "bool" ring_def nil)
    (right_ideal? const-decl "bool" ring_ideal_def nil) nil
    (remove const-decl "set" sets nil)
    (one formal-const-decl "T" ring_unit nil)
    (ring_with_one? const-decl "bool" ring_with_one_def nil)
    (ring_with_one nonempty-type-eq-decl nil ring_with_one nil) nil
    nil)
   nil)
  (no_prop_r_ideal_nz_unit-1 nil 3808756655 ("" (postpone) nil nil) nil
   shostak)))

