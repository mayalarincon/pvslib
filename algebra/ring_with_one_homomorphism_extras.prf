(ring_with_one_homomorphism_extras
 (R_TCC1 0
  (R_TCC1-1 nil 3782140885
   ("" (rewrite "fullsetT1_is_ring_w_one") nil nil)
   ((fullsetT1_is_ring_w_one formula-decl nil
     ring_with_one_homomorphism_extras nil))
   nil
   (R assuming
    "ring_with_one[ring_with_one_homomorphism_extras.T1, ring_with_one_homomorphism_extras.s1, ring_with_one_homomorphism_extras.p1, ring_with_one_homomorphism_extras.zero1, ring_with_one_homomorphism_extras.one1].ring_with_one"
    "fullset_is_ring_with_one: ASSUMPTION ring_with_one_def[ring_with_one.T, ring_with_one.+, ring_with_one.*, ring_with_one.zero, ring_with_one.one].ring_with_one?(sets[ring_with_one.T].fullset)")))
 (S_TCC1 0
  (S_TCC1-1 nil 3782140885
   ("" (rewrite "fullsetT2_is_ring_w_one") nil nil)
   ((fullsetT2_is_ring_w_one formula-decl nil
     ring_with_one_homomorphism_extras nil))
   nil
   (S assuming
    "ring_with_one[ring_with_one_homomorphism_extras.T2, ring_with_one_homomorphism_extras.s2, ring_with_one_homomorphism_extras.p2, ring_with_one_homomorphism_extras.zero2, ring_with_one_homomorphism_extras.one2].ring_with_one"
    "fullset_is_ring_with_one: ASSUMPTION ring_with_one_def[ring_with_one.T, ring_with_one.+, ring_with_one.*, ring_with_one.zero, ring_with_one.one].ring_with_one?(sets[ring_with_one.T].fullset)")))
 (isomorphic_fields_charac 0
  (isomorphic_fields_charac-1 nil 3782140897
   ("" (skeep)
    (("" (prop)
      (("1"
        (lemma
         "isomorphic_fields[T1,s1,p1,zero1,one1,T2,s2,p2,zero2,one2]")
        (("1" (inst -1 "R" "S") (("1" (assert) nil nil)) nil)
         ("2" (rewrite "fullsetT2_is_ring_w_one") nil nil)
         ("3" (rewrite "fullsetT1_is_ring_w_one") nil nil))
        nil)
       ("2"
        (lemma
         "isomorphic_fields[T2,s2,p2,zero2,one2,T1,s1,p1,zero1,one1]")
        (("1" (inst -1 "S" "R")
          (("1" (assert)
            (("1" (hide -1 2)
              (("1" (expand "R_isomorphic?")
                (("1" (skeep)
                  (("1" (inst 1 "inverse[(R),(S)](phi)")
                    (("1"
                      (rewrite
                       "inv_iso_is_iso[T1,s1,p1,zero1,T2,s2,p2,zero2]")
                      (("1" (lemma " fullsetT2_is_ring_w_one")
                        (("1" (expand "ring_with_one?")
                          (("1" (propax) nil nil)) nil))
                        nil)
                       ("2" (lemma " fullsetT1_is_ring_w_one")
                        (("2" (expand "ring_with_one?")
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (inst 1 "zero1")
                      (("2" (typepred "R")
                        (("2" (expand "ring_with_one?")
                          (("2" (flatten)
                            (("2"
                              (lemma
                               "zero_is_member_R[T1,s1,p1,zero1]")
                              (("1"
                                (inst?)
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (lemma " fullsetT1_is_ring_w_one")
                                (("2"
                                  (expand "ring_with_one?")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (rewrite " fullsetT1_is_ring_w_one") nil nil)
         ("3" (rewrite " fullsetT2_is_ring_w_one") nil nil))
        nil))
      nil))
    nil)
   ((fullsetT1_is_ring_w_one formula-decl nil
     ring_with_one_homomorphism_extras nil)
    (fullsetT2_is_ring_w_one formula-decl nil
     ring_with_one_homomorphism_extras nil)
    (ring_with_one nonempty-type-eq-decl nil ring_with_one nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (ring_with_one? const-decl "bool" ring_with_one_def nil)
    (fullset const-decl "set" sets nil)
    (isomorphic_fields formula-decl nil ring_with_one_homomorphism nil)
    (T1 formal-nonempty-type-decl nil ring_with_one_homomorphism_extras
     nil)
    (s1 formal-const-decl "[T1, T1 -> T1]"
     ring_with_one_homomorphism_extras nil)
    (p1 formal-const-decl "[T1, T1 -> T1]"
     ring_with_one_homomorphism_extras nil)
    (zero1 formal-const-decl "T1" ring_with_one_homomorphism_extras
     nil)
    (one1 formal-const-decl "T1" ring_with_one_homomorphism_extras nil)
    (T2 formal-nonempty-type-decl nil ring_with_one_homomorphism_extras
     nil)
    (s2 formal-const-decl "[T2, T2 -> T2]"
     ring_with_one_homomorphism_extras nil)
    (p2 formal-const-decl "[T2, T2 -> T2]"
     ring_with_one_homomorphism_extras nil)
    (zero2 formal-const-decl "T2" ring_with_one_homomorphism_extras
     nil)
    (one2 formal-const-decl "T2" ring_with_one_homomorphism_extras nil)
    (zero_is_member_R formula-decl nil ring_basic_properties nil)
    (member const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (inv_iso_is_iso formula-decl nil ring_homomorphism_lemmas nil)
    (ring? const-decl "bool" ring_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (R_isomorphism? const-decl "bool" ring_homomorphisms_def nil)
    (R_isomorphism type-eq-decl nil ring_homomorphisms_def nil)
    (inverse const-decl "D" function_inverse nil)
    (TRUE const-decl "bool" booleans nil)
    (R skolem-const-decl "ring_with_one[T1, s1, p1, zero1, one1]"
     ring_with_one_homomorphism_extras nil)
    (R_isomorphic? const-decl "bool" ring_homomorphisms_def nil))
   shostak))
 (ring_w_one_isomorphic_groupoid 0
  (ring_w_one_isomorphic_groupoid-1 nil 3853923868
   ("" (skosimp)
    (("" (skosimp)
      (("" (lemma "bijective_inverse_exists[(R!1),(S!1)]")
        (("" (case "bijective?[(R!1), (S!1)](phi!1)")
          (("1" (inst -2 "phi!1")
            (("1" (expand "exists1")
              (("1" (flatten)
                (("1" (skosimp)
                  (("1"
                    (lemma
                     "R_isomorphic_groupoid_is_ring[T1,s1,p1,x!1(zero2),T2,s2,p2,zero2]")
                    (("1" (inst -1 "S!1" "R!1")
                      (("1" (assert)
                        (("1" (prop)
                          (("1" (skosimp)
                            (("1" (inst 1 "zeroS!1" "x!1(one2)")
                              (("1"
                                (expand "ring_with_one?")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "monoid?")
                                    (("1"
                                      (expand "monad?")
                                      (("1"
                                        (expand "ring?")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (typepred S!1)
                                              (("1"
                                                (expand
                                                 "ring_with_one?")
                                                (("1"
                                                  (expand "monoid?")
                                                  (("1"
                                                    (expand "monad?")
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (hide-all-but
                                                         (1
                                                          -16
                                                          -14
                                                          -11
                                                          -10
                                                          -4
                                                          -3
                                                          -2))
                                                        (("1"
                                                          (expand
                                                           "isomorphism?")
                                                          (("1"
                                                            (expand
                                                             "monomorphism?")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (hide
                                                                 -9)
                                                                (("1"
                                                                  (expand
                                                                   "homomorphism?")
                                                                  (("1"
                                                                    (expand
                                                                     "identity?")
                                                                    (("1"
                                                                      (skosimp)
                                                                      (("1"
                                                                        (expand
                                                                         "restrict")
                                                                        (("1"
                                                                          (copy
                                                                           -8)
                                                                          (("1"
                                                                            (inst
                                                                             -9
                                                                             "x!2"
                                                                             "x!1(one2)")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "x!1(one2)"
                                                                               "x!2")
                                                                              (("1"
                                                                                (lemma
                                                                                 "comp_inverse_right_alt[(R!1),(S!1)]")
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "one2"
                                                                                   "phi!1"
                                                                                   "x!1")
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1
                                                                                     -2)
                                                                                    (("1"
                                                                                      (replaces
                                                                                       -1
                                                                                       -10)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -4
                                                                                         "phi!1(x!2)")
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (replaces
                                                                                             -5
                                                                                             -1)
                                                                                            (("1"
                                                                                              (replaces
                                                                                               -4
                                                                                               -9)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "bijective?")
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "injective?")
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -4
                                                                                                       "p1(x!2, x!1(one2))"
                                                                                                       "x!2")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -8
                                                                                                         "p1(x!1(one2),x!2)"
                                                                                                         "x!2")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               "member")
                                                                              (("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (typepred S!1)
                                (("2"
                                  (expand "ring_with_one?")
                                  (("2"
                                    (expand "monoid?")
                                    (("2"
                                      (expand "monad?")
                                      (("2"
                                        (expand "member")
                                        (("2" (flatten) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (inst 1 "phi!1")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma "fullsetT2_is_ring_w_one")
                      (("2" (expand "ring_with_one?")
                        (("2" (flatten) nil nil)) nil))
                      nil)
                     ("3" (lemma "fullsetT1_is_ring_w_one")
                      (("3" (expand "ring_with_one?")
                        (("3" (expand "ring?")
                          (("3" (expand "abelian_group?")
                            (("3" (expand "group?")
                              (("3"
                                (expand "inv_exists?")
                                (("3"
                                  (expand "monoid?")
                                  (("3"
                                    (expand "monad?")
                                    (("3"
                                      (flatten)
                                      (("3"
                                        (assert)
                                        (("3"
                                          (hide-all-but
                                           (1
                                            -20
                                            -18
                                            -16
                                            -15
                                            -5
                                            -3
                                            -2))
                                          (("3"
                                            (typepred "S!1")
                                            (("3"
                                              (expand "ring_with_one?")
                                              (("3"
                                                (expand "ring?")
                                                (("3"
                                                  (expand
                                                   "abelian_group?")
                                                  (("3"
                                                    (expand "group?")
                                                    (("3"
                                                      (expand
                                                       "inv_exists?")
                                                      (("3"
                                                        (expand
                                                         "monoid?")
                                                        (("3"
                                                          (expand
                                                           "monad?")
                                                          (("3"
                                                            (flatten)
                                                            (("3"
                                                              (hide
                                                               (-4
                                                                -6
                                                                -7
                                                                -8
                                                                -9
                                                                -10
                                                                -11
                                                                -12
                                                                -13
                                                                -14))
                                                              (("3"
                                                                (expand
                                                                 "identity?")
                                                                (("3"
                                                                  (case
                                                                   "nonempty?[T2](S!1)")
                                                                  (("1"
                                                                    (expand
                                                                     "nonempty?")
                                                                    (("1"
                                                                      (expand
                                                                       "empty?")
                                                                      (("1"
                                                                        (skosimp)
                                                                        (("1"
                                                                          (inst
                                                                           -4
                                                                           "x!2")
                                                                          (("1"
                                                                            (expand
                                                                             "restrict")
                                                                            (("1"
                                                                              (expand
                                                                               "homomorphism?")
                                                                              (("1"
                                                                                (inst
                                                                                 -12
                                                                                 "x!1(x!2)"
                                                                                 "x!1(zero2)")
                                                                                (("1"
                                                                                  (lemma
                                                                                   "comp_inverse_right_alt[(R!1),(S!1)]")
                                                                                  (("1"
                                                                                    (copy
                                                                                     -1)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "x!2"
                                                                                       "phi!1"
                                                                                       "x!1")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -2
                                                                                         "zero2"
                                                                                         "phi!1"
                                                                                         "x!1")
                                                                                        (("1"
                                                                                          (replaces
                                                                                           -1
                                                                                           -14)
                                                                                          (("1"
                                                                                            (replaces
                                                                                             -1
                                                                                             -13)
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (replaces
                                                                                                 -4
                                                                                                 -13)
                                                                                                (("1"
                                                                                                  (case
                                                                                                   "x!1(phi!1(s1(x!1(x!2), x!1(zero2)))) = x!1(x!2)")
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     "comp_inverse_left_alt[(R!1),(S!1)]")
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "s1(x!1(x!2), x!1(zero2))"
                                                                                                       "phi!1 "
                                                                                                       "x!1")
                                                                                                      (("1"
                                                                                                        (replaces
                                                                                                         -1
                                                                                                         -2)
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -8
                                                                                                           "x!1(x!2)")
                                                                                                          (("1"
                                                                                                            (flatten)
                                                                                                            (("1"
                                                                                                              (name-replace
                                                                                                               "X1X2"
                                                                                                               "x!1(x!2)")
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "X1X2"
                                                                                                                 -1
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -8
                                                                                                                   -1
                                                                                                                   rl)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "X1X2")
                                                                                                                    (("1"
                                                                                                                      (lemma
                                                                                                                       "cancel_left_plus[T1,s1,p1,zero1]")
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         -1
                                                                                                                         "x!1(zero2)"
                                                                                                                         "zero1"
                                                                                                                         "x!1(x!2)")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (reveal
                                                                                                                             -3)
                                                                                                                            (("1"
                                                                                                                              (replaces
                                                                                                                               -2
                                                                                                                               1)
                                                                                                                              (("1"
                                                                                                                                (split)
                                                                                                                                (("1"
                                                                                                                                  (propax)
                                                                                                                                  nil
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (propax)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (expand
                                                                                                             "fullset")
                                                                                                            (("2"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (replaces
                                                                                                     -12
                                                                                                     1)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (expand
                                                                                   "member")
                                                                                  (("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("3"
                                                                                  (expand
                                                                                   "member")
                                                                                  (("3"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             "member")
                                                                            (("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "nonempty?")
                                                                    (("2"
                                                                      (expand
                                                                       "empty?")
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "zero2")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("4" (hide-all-but 1)
                      (("4" (typepred "S!1")
                        (("4" (expand "ring_with_one?")
                          (("4" (expand "ring?")
                            (("4" (expand "abelian_group?")
                              (("4"
                                (expand "group?")
                                (("4"
                                  (expand "monoid?")
                                  (("4"
                                    (expand "monad?")
                                    (("4"
                                      (expand "member")
                                      (("4" (flatten) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "isomorphism?")
            (("2" (expand "monomorphism?")
              (("2" (expand "epimorphism?")
                (("2" (flatten)
                  (("2" (expand "bijective?") (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bijective? const-decl "bool" functions nil)
    (exists1 const-decl "bool" exists1 nil)
    (fullsetT1_is_ring_w_one formula-decl nil
     ring_with_one_homomorphism_extras nil)
    (group? const-decl "bool" group_def nil)
    (nonempty? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (x!2 skolem-const-decl "T2" ring_with_one_homomorphism_extras nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (x!1 skolem-const-decl "[(S!1) -> (R!1)]"
     ring_with_one_homomorphism_extras nil)
    (cancel_left_plus formula-decl nil ring nil)
    (zero1 formal-const-decl "T1" ring_with_one_homomorphism_extras
     nil)
    (X1X2 skolem-const-decl "(R!1)" ring_with_one_homomorphism_extras
     nil)
    (comp_inverse_left_alt formula-decl nil function_inverse_def nil)
    (inv_exists? const-decl "bool" group_def nil)
    (abelian_group? const-decl "bool" group_def nil)
    (fullsetT2_is_ring_w_one formula-decl nil
     ring_with_one_homomorphism_extras nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (monad? const-decl "bool" monad_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (isomorphism? const-decl "bool" homomorphisms_def nil)
    (homomorphism? const-decl "bool" homomorphisms_def nil)
    (inverse? const-decl "bool" function_inverse_def nil)
    (TRUE const-decl "bool" booleans nil)
    (injective? const-decl "bool" functions nil)
    (comp_inverse_right_alt formula-decl nil function_inverse_def nil)
    (restrict const-decl "R" restrict nil)
    (identity? const-decl "bool" operator_defs nil)
    (monomorphism? const-decl "bool" homomorphisms_def nil)
    (member const-decl "bool" sets nil)
    (monoid? const-decl "bool" monoid_def nil)
    (ring? const-decl "bool" ring_def nil)
    (fullset const-decl "set" sets nil)
    (p1 formal-const-decl "[T1, T1 -> T1]"
     ring_with_one_homomorphism_extras nil)
    (s1 formal-const-decl "[T1, T1 -> T1]"
     ring_with_one_homomorphism_extras nil)
    (R_isomorphic_groupoid_is_ring formula-decl nil
     ring_homomorphism_lemmas nil)
    (R!1 skolem-const-decl "set[T1]" ring_with_one_homomorphism_extras
     nil)
    (S!1 skolem-const-decl "ring_with_one[T2, s2, p2, zero2, one2]"
     ring_with_one_homomorphism_extras nil)
    (phi!1 skolem-const-decl "[(R!1) -> (S!1)]"
     ring_with_one_homomorphism_extras nil)
    (epimorphism? const-decl "bool" homomorphisms_def nil)
    (bijective_inverse_exists formula-decl nil function_inverse_def
     nil)
    (T1 formal-nonempty-type-decl nil ring_with_one_homomorphism_extras
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (T2 formal-nonempty-type-decl nil ring_with_one_homomorphism_extras
     nil)
    (s2 formal-const-decl "[T2, T2 -> T2]"
     ring_with_one_homomorphism_extras nil)
    (p2 formal-const-decl "[T2, T2 -> T2]"
     ring_with_one_homomorphism_extras nil)
    (zero2 formal-const-decl "T2" ring_with_one_homomorphism_extras
     nil)
    (one2 formal-const-decl "T2" ring_with_one_homomorphism_extras nil)
    (ring_with_one? const-decl "bool" ring_with_one_def nil)
    (ring_with_one nonempty-type-eq-decl nil ring_with_one nil))
   shostak)))

