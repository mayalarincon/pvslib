(ring_nz_closed_aux
 (IMP_ring_basic_properties_TCC1 0
  (IMP_ring_basic_properties_TCC1-1 nil 3861799363
   ("" (rewrite "fullset_is_ring") nil nil)
   ((fullset_is_ring formula-decl nil ring_nz_closed_aux nil)) nil
   (IMP_ring_basic_properties assuming
    "ring_basic_properties[ring_nz_closed_aux.T, ring_nz_closed_aux.+, ring_nz_closed_aux.*, ring_nz_closed_aux.zero].ring_basic_properties"
    "fullset_is_ring: ASSUMPTION ring_def[ring_basic_properties.T, ring_basic_properties.+, ring_basic_properties.*, ring_basic_properties.zero].ring?(sets[ring_basic_properties.T].fullset)")))
 (nz_times_is_zero 0
  (nz_times_is_zero-1 nil 3777132428
   ("" (skosimp)
    (("" (prop)
      (("1" (expand "nz_closed?")
        (("1" (expand "star_closed?")
          (("1" (inst -2 "x!1" "y!1")
            (("1" (expand "member")
              (("1" (expand "remove") (("1" (assert) nil nil)) nil))
              nil)
             ("2" (expand "remove")
              (("2" (prop)
                (("1" (assert) nil nil)
                 ("2" (expand "member") (("2" (propax) nil nil)) nil))
                nil))
              nil)
             ("3" (expand "remove")
              (("3" (prop)
                (("1" (assert) nil nil)
                 ("2" (expand "member") (("2" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide-all-but (-1 1))
        (("2" (replaces -1) (("2" (assert) nil nil)) nil)) nil)
       ("3" (hide-all-but (-1 1))
        (("3" (replaces -1) (("3" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((star_closed? const-decl "bool" groupoid_def nil)
    (member const-decl "bool" sets nil) nil
    (T formal-nonempty-type-decl nil ring_nz_closed_aux nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil) (remove const-decl "set" sets nil)
    (zero formal-const-decl "T" ring_nz_closed_aux nil)
    (+ formal-const-decl "[T, T -> T]" ring_nz_closed_aux nil)
    (* formal-const-decl "[T, T -> T]" ring_nz_closed_aux nil)
    (ring? const-decl "bool" ring_def nil)
    (ring nonempty-type-eq-decl nil ring nil) nil nil
    (nz_closed? const-decl "bool" ring_nz_closed_def nil)
    (TRUE const-decl "bool" booleans nil)
    (zero_times formula-decl nil ring nil)
    (times_zero formula-decl nil ring nil))
   shostak))
 (nzd_R_cancel_left 0
  (nzd_R_cancel_left-1 nil 3780319853
   ("" (skosimp)
    (("" (skosimp)
      (("" (split 1)
        (("1" (prop)
          (("1" (lemma cancel_right_plus)
            (("1" (inst -1 "x!1 * y!1" "x!1 * z!1" "inv(x!1 * z!1)")
              (("1" (assert)
                (("1" (lemma times_negative)
                  (("1" (inst -1 "x!1" "z!1")
                    (("1" (replace -1 -2 rl)
                      (("1" (hide -1)
                        (("1" (lemma right_distributive)
                          (("1" (inst -1 "x!1" "y!1" "inv(z!1)")
                            (("1" (replace -1 -2 rl)
                              (("1"
                                (hide -1)
                                (("1"
                                  (lemma nz_times_is_zero)
                                  (("1"
                                    (inst
                                     -1
                                     "R!1"
                                     "x!1"
                                     "y!1 + inv(z!1)")
                                    (("1"
                                      (typepred "x!1")
                                      (("1"
                                        (lemma inv_is_member_R)
                                        (("1"
                                          (inst -1 "R!1" "z!1")
                                          (("1"
                                            (typepred "y!1" "z!1")
                                            (("1"
                                              (expand "member")
                                              (("1"
                                                (lemma
                                                 R_sum_star_closed)
                                                (("1"
                                                  (inst
                                                   -1
                                                   "R!1"
                                                   "y!1"
                                                   "inv(z!1)")
                                                  (("1"
                                                    (expand "member")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (hide-all-but
                                                         (-6 2))
                                                        (("1"
                                                          (lemma
                                                           cancel_right_plus)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "y!1 + inv(z!1)"
                                                             "zero"
                                                             "z!1")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (hide
                                                                 -2)
                                                                (("1"
                                                                  (lemma
                                                                   plus_associative)
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "y!1"
                                                                     "inv(z!1)"
                                                                     "z!1")
                                                                    (("1"
                                                                      (replaces
                                                                       -1
                                                                       -2)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (prop)
          (("1" (lemma zero_times)
            (("1" (copy -1)
              (("1" (inst -1 "z!1")
                (("1" (inst -2 "y!1")
                  (("1" (replace -3 -1 rl)
                    (("1" (replace -3 -2 rl)
                      (("1" (hide -3) (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (case "y!1 = z!1 IMPLIES x!1 * y!1 = x!1 * z!1")
            (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((zero_times formula-decl nil ring nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (ring? const-decl "bool" ring_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (inv const-decl "{y | x * y = one AND y * x = one}" group nil)
    (times_negative formula-decl nil ring nil)
    (right_distributive formula-decl nil ring nil)
    (nz_times_is_zero formula-decl nil ring_nz_closed_aux nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil)
    (zero_plus formula-decl nil ring nil)
    (plus_associative formula-decl nil ring nil)
    (TRUE const-decl "bool" booleans nil)
    (plus_zero formula-decl nil ring nil)
    (negate_is_left_inv formula-decl nil ring nil)
    (R_sum_star_closed formula-decl nil ring_basic_properties nil)
    (inv_is_member_R formula-decl nil ring_basic_properties nil)
    (negate_is_right_inv formula-decl nil ring nil)
    (cancel_right_plus formula-decl nil ring nil)
    (T formal-nonempty-type-decl nil ring_nz_closed_aux nil)
    (+ formal-const-decl "[T, T -> T]" ring_nz_closed_aux nil)
    (* formal-const-decl "[T, T -> T]" ring_nz_closed_aux nil)
    (zero formal-const-decl "T" ring_nz_closed_aux nil))
   shostak))
 (nzd_R_cancel_right 0
  (nzd_R_cancel_right-1 nil 3856627806
   ("" (skosimp)
    (("" (skosimp)
      (("" (split 1)
        (("1" (prop)
          (("1" (lemma cancel_left_plus)
            (("1" (inst -1 "y!1 * x!1" "z!1 * x!1" "inv(y!1 * x!1)")
              (("1" (assert)
                (("1" (lemma negative_times)
                  (("1" (inst -1 "y!1" "x!1")
                    (("1" (replace -1 -2 rl)
                      (("1" (hide -1)
                        (("1" (lemma left_distributive)
                          (("1" (inst -1 "inv(y!1)" "z!1" "x!1")
                            (("1" (replace -1 -2 rl)
                              (("1"
                                (hide -1)
                                (("1"
                                  (lemma nz_times_is_zero)
                                  (("1"
                                    (inst
                                     -1
                                     "R!1"
                                     "inv(y!1) + z!1"
                                     "x!1")
                                    (("1"
                                      (typepred "x!1")
                                      (("1"
                                        (lemma inv_is_member_R)
                                        (("1"
                                          (inst -1 "R!1" "y!1")
                                          (("1"
                                            (typepred "y!1" "z!1")
                                            (("1"
                                              (expand "member")
                                              (("1"
                                                (lemma
                                                 R_sum_star_closed)
                                                (("1"
                                                  (inst
                                                   -1
                                                   "R!1"
                                                   "inv(y!1)"
                                                   "z!1")
                                                  (("1"
                                                    (expand "member")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (hide-all-but
                                                         (-6 2))
                                                        (("1"
                                                          (lemma
                                                           cancel_left_plus)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "inv(y!1) + z!1"
                                                             "zero"
                                                             "y!1")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (hide
                                                                 -2)
                                                                (("1"
                                                                  (lemma
                                                                   plus_associative)
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "y!1"
                                                                     "inv(y!1)"
                                                                     "z!1")
                                                                    (("1"
                                                                      (replace
                                                                       -1
                                                                       -2
                                                                       rl)
                                                                      (("1"
                                                                        (hide
                                                                         -1)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (prop)
          (("1" (lemma times_zero)
            (("1" (copy -1)
              (("1" (inst -1 "z!1")
                (("1" (inst -2 "y!1")
                  (("1" (replace -3 -1 rl)
                    (("1" (replace -3 -2 rl)
                      (("1" (hide -3) (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (case "y!1 = z!1 IMPLIES x!1 * y!1 = x!1 * z!1")
            (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((times_zero formula-decl nil ring nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (ring? const-decl "bool" ring_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (inv const-decl "{y | x * y = one AND y * x = one}" group nil)
    (negative_times formula-decl nil ring nil)
    (left_distributive formula-decl nil ring nil)
    (nz_times_is_zero formula-decl nil ring_nz_closed_aux nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil)
    (plus_zero formula-decl nil ring nil)
    (plus_associative formula-decl nil ring nil)
    (negate_is_right_inv formula-decl nil ring nil)
    (zero_plus formula-decl nil ring nil)
    (R_sum_star_closed formula-decl nil ring_basic_properties nil)
    (inv_is_member_R formula-decl nil ring_basic_properties nil)
    (negate_is_left_inv formula-decl nil ring nil)
    (cancel_left_plus formula-decl nil ring nil)
    (T formal-nonempty-type-decl nil ring_nz_closed_aux nil)
    (+ formal-const-decl "[T, T -> T]" ring_nz_closed_aux nil)
    (* formal-const-decl "[T, T -> T]" ring_nz_closed_aux nil)
    (zero formal-const-decl "T" ring_nz_closed_aux nil))
   shostak))
 (subring_nz_closed 0
  (subring_nz_closed-1 nil 3780435423
   ("" (skosimp)
    (("" (expand "nz_closed?")
      (("" (expand "star_closed?")
        (("" (skosimp)
          (("" (inst -1 "x!1" "y!1")
            (("1" (assert)
              (("1" (expand "remove")
                (("1" (assert)
                  (("1" (flatten)
                    (("1" (assert)
                      (("1" (typepred "x!1" "y!1")
                        (("1" (expand "remove")
                          (("1" (flatten)
                            (("1" (expand "member")
                              (("1"
                                (hide-all-but (-1 -2 -4 4))
                                (("1"
                                  (rewrite "subring_equiv")
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (inst -5 "x!1" "y!1")
                                      (("1" (flatten) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "subring?")
              (("2" (expand "remove")
                (("2" (hide 2)
                  (("2" (typepred "y!1")
                    (("2" (expand "remove")
                      (("2" (flatten)
                        (("2" (assert)
                          (("2" (expand "subset?")
                            (("2" (inst -2 "y!1")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (expand "remove")
              (("3" (hide 2)
                (("3" (typepred "x!1")
                  (("3" (expand "remove")
                    (("3" (flatten)
                      (("3" (assert)
                        (("3" (expand "subring?")
                          (("3" (expand "subset?")
                            (("3" (inst -2 "x!1")
                              (("3" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nz_closed? const-decl "bool" ring_nz_closed_def nil)
    (subring? const-decl "bool" ring_def nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (subring_equiv formula-decl nil ring_basic_properties nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (NOT const-decl "[bool -> bool]" booleans nil) nil
    (T formal-nonempty-type-decl nil ring_nz_closed_aux nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil) (remove const-decl "set" sets nil)
    (zero formal-const-decl "T" ring_nz_closed_aux nil)
    (+ formal-const-decl "[T, T -> T]" ring_nz_closed_aux nil)
    (* formal-const-decl "[T, T -> T]" ring_nz_closed_aux nil)
    (ring? const-decl "bool" ring_def nil)
    (ring nonempty-type-eq-decl nil ring nil) nil nil nil
    (star_closed? const-decl "bool" groupoid_def nil))
   shostak)))

