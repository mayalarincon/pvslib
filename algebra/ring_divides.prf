(ring_divides
 (IMP_ring_with_id_one_generator_TCC1 0
  (IMP_ring_with_id_one_generator_TCC1-1 nil 3840203950
   ("" (lemma "fullset_is_ring_with_one") (("" (propax) nil nil)) nil)
   ((fullset_is_ring_with_one formula-decl nil ring_divides nil)) nil
   (IMP_ring_with_id_one_generator assuming
    "ring_with_id_one_generator[ring_divides.T, ring_divides.+, ring_divides.*, ring_divides.zero, ring_divides.one].ring_with_id_one_generator"
    "fullset_is_ring_with_one: ASSUMPTION ring_with_one_def[ring_with_id_one_generator.T, ring_with_id_one_generator.+, ring_with_id_one_generator.*, ring_with_id_one_generator.zero, ring_with_id_one_generator.one].ring_with_one?(sets[ring_with_id_one_generator.T].fullset)")))
 (IMP_ring_nz_closed_aux_TCC1 0
  (IMP_ring_nz_closed_aux_TCC1-1 nil 3840203950
   ("" (lemma "fullset_is_ring_with_one")
    (("" (expand "ring_with_one?") (("" (flatten) nil nil)) nil)) nil)
   ((ring_with_one? const-decl "bool" ring_with_one_def nil)
    (fullset_is_ring_with_one formula-decl nil ring_divides nil))
   nil
   (IMP_ring_nz_closed_aux assuming
    "ring_nz_closed_aux[ring_divides.T, ring_divides.+, ring_divides.*, ring_divides.zero].ring_nz_closed_aux"
    "fullset_is_ring: ASSUMPTION ring_def[ring_nz_closed_aux.T, ring_nz_closed_aux.+, ring_nz_closed_aux.*, ring_nz_closed_aux.zero].ring?(sets[ring_nz_closed_aux.T].fullset)")))
 (IMP_op_finseq_monoid_TCC1 0
  (IMP_op_finseq_monoid_TCC1-1 nil 3907857832
   ("" (lemma "fullset_is_ring_with_one")
    (("" (expand "ring_with_one?")
      (("" (expand "ring?")
        (("" (expand "abelian_group?")
          (("" (expand "group?") (("" (flatten) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((ring_with_one? const-decl "bool" ring_with_one_def nil)
    (abelian_group? const-decl "bool" group_def nil)
    (group? const-decl "bool" group_def nil)
    (ring? const-decl "bool" ring_def nil)
    (fullset_is_ring_with_one formula-decl nil ring_divides nil))
   nil
   (IMP_op_finseq_monoid assuming
    "op_finseq_monoid[ring_divides.T, ring_divides.*, ring_divides.one].op_finseq_monoid"
    "fullset_is_monoid: ASSUMPTION monoid_def[op_finseq_monoid.T, op_finseq_monoid.*, op_finseq_monoid.one].monoid?(sets[op_finseq_monoid.T].fullset)")))
 (divides_subset_TCC1 0
  (divides_subset_TCC1-1 nil 3799597414
   ("" (skeep)
    (("" (typepred "a")
      (("" (expand "remove")
        (("" (expand "member") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((commutative_ring? const-decl "bool" ring_def nil)
    (ring_with_one nonempty-type-eq-decl nil ring_with_one nil)
    (ring_with_one? const-decl "bool" ring_with_one_def nil)
    (one formal-const-decl "T" ring_divides nil)
    (* formal-const-decl "[T, T -> T]" ring_divides nil)
    (+ formal-const-decl "[T, T -> T]" ring_divides nil)
    (zero formal-const-decl "T" ring_divides nil)
    (remove const-decl "set" sets nil) (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil ring_divides nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (member const-decl "bool" sets nil))
   nil (divides_subset subtype "ring_divides.a" "(ring_divides.R)")))
 (divides_subset 0
  (divides_subset-2 nil 3799597590
   ("" (skeep)
    (("" (typepred "R")
      (("" (prop)
        (("1" (rewrite "commutative_id_one_gen_charac")
          (("1" (rewrite "commutative_id_one_gen_charac")
            (("1" (expand "divides?")
              (("1" (skeep)
                (("1" (expand "subset?")
                  (("1" (skeep)
                    (("1" (expand "member")
                      (("1" (expand "restrict")
                        (("1" (expand "+")
                          (("1" (skeep)
                            (("1" (inst 1 "x*h")
                              (("1"
                                (replace -1 -2 rl)
                                (("1"
                                  (rewrite "times_associative")
                                  nil
                                  nil))
                                nil)
                               ("2"
                                (lemma "R_prod_star_closed")
                                (("2"
                                  (inst?)
                                  (("2"
                                    (inst -1 "R")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (rewrite "commutative_id_one_gen_charac")
          (("2" (rewrite "commutative_id_one_gen_charac")
            (("2" (expand "subset?")
              (("2" (expand "divides?")
                (("2" (typepred "a" "b")
                  (("2" (expand "member")
                    (("2" (inst -3 "b")
                      (("2" (expand "restrict")
                        (("2" (expand "+")
                          (("2" (split)
                            (("1" (skeep)
                              (("1"
                                (inst 1 "h")
                                (("1" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (inst 1 "one")
                              (("1" (assert) nil nil)
                               ("2"
                                (hide-all-but (-3 1))
                                (("2"
                                  (expand "ring_with_one?")
                                  (("2"
                                    (expand "monoid?")
                                    (("2"
                                      (expand "monad?")
                                      (("2"
                                        (expand "member")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((commutative_ring? const-decl "bool" ring_def nil)
    (ring_with_one nonempty-type-eq-decl nil ring_with_one nil)
    (ring_with_one? const-decl "bool" ring_with_one_def nil)
    (one formal-const-decl "T" ring_divides nil)
    (zero formal-const-decl "T" ring_divides nil)
    (* formal-const-decl "[T, T -> T]" ring_divides nil)
    (+ formal-const-decl "[T, T -> T]" ring_divides nil)
    (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil ring_divides nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (right_identity formula-decl nil monad nil)
    (monad? const-decl "bool" monad_def nil)
    (monoid? const-decl "bool" monoid_def nil)
    (commutative_id_one_gen_charac formula-decl nil
     ring_with_id_one_generator nil)
    (divides? const-decl "bool" ring_divides_def nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (+ const-decl "set[T]" cosets_def nil)
    (R skolem-const-decl "{R: ring_with_one | commutative_ring?(R)}"
     ring_divides nil)
    (x skolem-const-decl "(R)" ring_divides nil)
    (h skolem-const-decl "(R)" ring_divides nil)
    (times_associative formula-decl nil ring nil)
    (ring? const-decl "bool" ring_def nil)
    (R_prod_star_closed formula-decl nil ring_basic_properties nil)
    (restrict const-decl "R" restrict nil)
    (remove const-decl "set" sets nil))
   nil)
  (divides_subset-1 nil 3798819922
   ("" (skeep)
    (("" (typepred "R")
      (("" (prop)
        (("1" (rewrite "commutative_id_one_gen_charac")
          (("1" (rewrite "commutative_id_one_gen_charac")
            (("1" (expand "divides?")
              (("1" (flatten)
                (("1" (skeep)
                  (("1" (replace -3 1 rl)
                    (("1" (expand "subset?")
                      (("1" (skeep)
                        (("1" (expand "member")
                          (("1" (expand "restrict")
                            (("1" (expand "+")
                              (("1"
                                (skeep)
                                (("1"
                                  (inst 1 "x*h")
                                  (("1"
                                    (rewrite "times_associative")
                                    nil)
                                   ("2"
                                    (lemma "R_prod_star_closed")
                                    (("2"
                                      (inst?)
                                      (("2"
                                        (inst -1 "R")
                                        (("2"
                                          (assert)
                                          nil)))))))))))))))))))))))))))))))))
         ("2" (rewrite "commutative_id_one_gen_charac")
          (("2" (rewrite "commutative_id_one_gen_charac")
            (("2" (expand "subset?")
              (("2" (expand "divides?")
                (("2" (typepred "a" "b")
                  (("2" (expand "member")
                    (("2" (inst -3 "b")
                      (("2" (expand "restrict")
                        (("2" (expand "+")
                          (("2" (split)
                            (("1" (skeep)
                              (("1"
                                (inst 1 "h")
                                (("1" (assert) nil)))))
                             ("2" (inst 1 "one")
                              (("1" (assert) nil)
                               ("2"
                                (hide-all-but (-3 1))
                                (("2"
                                  (expand "ring_with_one?")
                                  (("2"
                                    (expand "monoid?")
                                    (("2"
                                      (expand "monad?")
                                      (("2"
                                        (expand "member")
                                        (("2"
                                          (assert)
                                          nil))))))))))))))))))))))))))))))))))))))
    nil)
   nil nil))
 (divides_equal_TCC1 0
  (divides_equal_TCC3-1 nil 3798819755
   ("" (skeep)
    (("" (typepred "b")
      (("" (expand "remove")
        (("" (expand "member") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((commutative_ring? const-decl "bool" ring_def nil)
    (ring_with_one nonempty-type-eq-decl nil ring_with_one nil)
    (ring_with_one? const-decl "bool" ring_with_one_def nil)
    (one formal-const-decl "T" ring_divides nil)
    (* formal-const-decl "[T, T -> T]" ring_divides nil)
    (+ formal-const-decl "[T, T -> T]" ring_divides nil)
    (zero formal-const-decl "T" ring_divides nil)
    (remove const-decl "set" sets nil) (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil ring_divides nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (member const-decl "bool" sets nil))
   nil (divides_equal subtype "ring_divides.b" "(ring_divides.R)")))
 (divides_equal_TCC2 0
  (divides_equal_TCC4-1 nil 3798819755
   ("" (skeep)
    (("" (typepred "a")
      (("" (expand "remove")
        (("" (expand "member") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((commutative_ring? const-decl "bool" ring_def nil)
    (ring_with_one nonempty-type-eq-decl nil ring_with_one nil)
    (ring_with_one? const-decl "bool" ring_with_one_def nil)
    (one formal-const-decl "T" ring_divides nil)
    (* formal-const-decl "[T, T -> T]" ring_divides nil)
    (+ formal-const-decl "[T, T -> T]" ring_divides nil)
    (zero formal-const-decl "T" ring_divides nil)
    (remove const-decl "set" sets nil) (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil ring_divides nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (member const-decl "bool" sets nil))
   nil (divides_equal subtype "ring_divides.a" "(ring_divides.R)")))
 (divides_equal 0
  (divides_equal-2 nil 3799597746
   ("" (skeep)
    (("" (expand "associates?")
      (("" (prop)
        (("1" (decompose-equality)
          (("1" (iff)
            (("1" (prop)
              (("1" (lemma "divides_subset")
                (("1" (inst -1 "R" "a" "b")
                  (("1" (assert)
                    (("1" (expand "subset?")
                      (("1" (inst -1 "x!1") (("1" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (lemma "divides_subset")
                (("2" (inst -1 "R" "b" "a")
                  (("2" (assert)
                    (("2" (expand "subset?")
                      (("2" (inst -1 "x!1") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (rewrite "commutative_id_one_gen_charac")
          (("2" (rewrite "commutative_id_one_gen_charac")
            (("2" (decompose-equality)
              (("2" (inst -1 "b")
                (("2" (expand "restrict")
                  (("2" (expand "+")
                    (("2" (iff)
                      (("2" (prop)
                        (("1" (expand "divides?")
                          (("1" (assert)
                            (("1" (typepred "b")
                              (("1"
                                (expand "remove")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (hide 1)
                                      (("1"
                                        (skeep -3)
                                        (("1"
                                          (inst 1 "h")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 1 3)
                          (("2" (inst 1 "one")
                            (("1" (assert) nil nil)
                             ("2" (typepred "R")
                              (("2"
                                (expand "ring_with_one?")
                                (("2"
                                  (expand "monoid?")
                                  (("2"
                                    (expand "monad?")
                                    (("2"
                                      (expand "member")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (rewrite "commutative_id_one_gen_charac")
          (("3" (rewrite "commutative_id_one_gen_charac")
            (("3" (decompose-equality)
              (("3" (inst -1 "a")
                (("3" (iff)
                  (("3" (prop)
                    (("1" (expand "restrict")
                      (("1" (expand "+")
                        (("1" (skeep)
                          (("1" (hide -2)
                            (("1" (expand "divides?")
                              (("1"
                                (assert)
                                (("1"
                                  (typepred "a")
                                  (("1"
                                    (expand "remove")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst 2 "h")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2 3)
                      (("2" (expand "restrict")
                        (("2" (expand "+")
                          (("2" (inst 1 "one")
                            (("1" (assert) nil nil)
                             ("2" (typepred "R")
                              (("2"
                                (expand "ring_with_one?")
                                (("2"
                                  (expand "monoid?")
                                  (("2"
                                    (expand "monad?")
                                    (("2"
                                      (expand "member")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((associates? const-decl "bool" ring_divides_def nil)
    (commutative_id_one_gen_charac formula-decl nil
     ring_with_id_one_generator nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (restrict const-decl "R" restrict nil)
    (+ const-decl "set[T]" cosets_def nil)
    (monoid? const-decl "bool" monoid_def nil)
    (monad? const-decl "bool" monad_def nil)
    (right_identity formula-decl nil monad nil)
    (R skolem-const-decl "{R: ring_with_one | commutative_ring?(R)}"
     ring_divides nil)
    (divides? const-decl "bool" ring_divides_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (ring? const-decl "bool" ring_def nil)
    (one_gen const-decl "set[(R)]" ring_one_generator nil)
    (remove const-decl "set" sets nil)
    (commutative_ring? const-decl "bool" ring_def nil)
    (ring_with_one nonempty-type-eq-decl nil ring_with_one nil)
    (ring_with_one? const-decl "bool" ring_with_one_def nil)
    (one formal-const-decl "T" ring_divides nil)
    (zero formal-const-decl "T" ring_divides nil)
    (* formal-const-decl "[T, T -> T]" ring_divides nil)
    (+ formal-const-decl "[T, T -> T]" ring_divides nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-nonempty-type-decl nil ring_divides nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (divides_subset formula-decl nil ring_divides nil))
   nil)
  (divides_equal-1 nil 3799597706 ("" (postpone) nil nil) nil shostak))
 (associates_equiv_relation 0
  (associates_equiv_relation-1 nil 3799597888
   ("" (skosimp)
    (("" (expand "equivalence?")
      (("" (split)
        (("1" (expand "reflexive?")
          (("1" (skosimp)
            (("1" (expand "associates?")
              (("1" (case "divides?(R!1)(x!1, x!1)")
                (("1" (assert) nil nil)
                 ("2" (hide 2)
                  (("2" (expand "divides?")
                    (("2" (typepred "x!1")
                      (("2" (expand "remove")
                        (("2" (expand "member")
                          (("2" (flatten)
                            (("2" (assert)
                              (("2"
                                (inst 2 "one")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (hide -1 2)
                                  (("2"
                                    (typepred "R!1")
                                    (("2"
                                      (expand "ring_with_one?")
                                      (("2"
                                        (expand "monoid?")
                                        (("2"
                                          (expand "monad?")
                                          (("2"
                                            (expand "member")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (typepred "x!1")
                  (("3" (expand "remove")
                    (("3" (expand "member") (("3" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "symmetric?")
          (("2" (skeep)
            (("2" (expand "associates?")
              (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
            nil))
          nil)
         ("3" (expand "transitive?")
          (("3" (skeep)
            (("3" (expand "associates?")
              (("3" (flatten)
                (("3" (expand "divides?")
                  (("3" (skeep*)
                    (("3" (split)
                      (("1" (inst 1 "x_1 * x!1")
                        (("1" (hide -2 -4)
                          (("1" (replace -1 -2 rl)
                            (("1" (rewrite "times_associative") nil
                              nil))
                            nil))
                          nil)
                         ("2" (typepred "x_1" "x!1")
                          (("2" (hide-all-but (-1 -2 1))
                            (("2" (lemma "R_prod_star_closed")
                              (("2"
                                (inst -1 "R!1" "x_1" "x!1")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide -1 -3)
                        (("2" (replace -2 -1 rl)
                          (("2" (inst 1 "x!2 * x_1!1")
                            (("1" (rewrite "times_associative") nil
                              nil)
                             ("2" (hide -)
                              (("2"
                                (typepred "x!2" "x_1!1")
                                (("2"
                                  (lemma "R_prod_star_closed")
                                  (("2"
                                    (inst -1 "R!1" "x!2" "x_1!1")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((equivalence? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (R_prod_star_closed formula-decl nil ring_basic_properties nil)
    (times_associative formula-decl nil ring nil)
    (x_1 skolem-const-decl "(R!1)" ring_divides nil)
    (x!1 skolem-const-decl "(R!1)" ring_divides nil)
    (x!2 skolem-const-decl "(R!1)" ring_divides nil)
    (x_1!1 skolem-const-decl "(R!1)" ring_divides nil)
    (TRUE const-decl "bool" booleans nil)
    (symmetric? const-decl "bool" relations nil)
    (reflexive? const-decl "bool" relations nil)
    (associates? const-decl "bool" ring_divides_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil)
    (monad? const-decl "bool" monad_def nil)
    (monoid? const-decl "bool" monoid_def nil)
    (right_identity formula-decl nil monad nil)
    (R!1 skolem-const-decl "{R: ring_with_one | commutative_ring?(R)}"
     ring_divides nil)
    (T formal-nonempty-type-decl nil ring_divides nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" ring_divides nil)
    (* formal-const-decl "[T, T -> T]" ring_divides nil)
    (zero formal-const-decl "T" ring_divides nil)
    (ring? const-decl "bool" ring_def nil)
    (remove const-decl "set" sets nil)
    (divides? const-decl "bool" ring_divides_def nil)
    (one formal-const-decl "T" ring_divides nil)
    (ring_with_one? const-decl "bool" ring_with_one_def nil)
    (ring_with_one nonempty-type-eq-decl nil ring_with_one nil)
    (commutative_ring? const-decl "bool" ring_def nil))
   nil))
 (unit_divides_TCC1 0
  (unit_divides_TCC1-1 nil 3799600157
   ("" (skeep)
    (("" (typepred "u")
      (("" (expand "remove")
        (("" (expand "member") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((commutative_ring? const-decl "bool" ring_def nil)
    (ring_with_one nonempty-type-eq-decl nil ring_with_one nil)
    (ring_with_one? const-decl "bool" ring_with_one_def nil)
    (one formal-const-decl "T" ring_divides nil)
    (* formal-const-decl "[T, T -> T]" ring_divides nil)
    (+ formal-const-decl "[T, T -> T]" ring_divides nil)
    (zero formal-const-decl "T" ring_divides nil)
    (remove const-decl "set" sets nil) (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil ring_divides nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (member const-decl "bool" sets nil))
   nil (unit_divides subtype "ring_divides.u" "(ring_divides.R)")))
 (unit_divides 0
  (unit_divides-1 nil 3799600173
   ("" (skeep)
    (("" (prop)
      (("1" (skeep)
        (("1" (expand "unit?")
          (("1" (flatten)
            (("1" (hide -1)
              (("1" (expand "r_invertible?")
                (("1" (skeep)
                  (("1" (expand "divides?")
                    (("1" (assert)
                      (("1" (case "r = one * r")
                        (("1" (replaces -1)
                          (("1" (replace -1 1 rl)
                            (("1" (inst 1 "y * r")
                              (("1"
                                (rewrite "times_associative")
                                nil
                                nil)
                               ("2"
                                (hide -1)
                                (("2"
                                  (typepred "R")
                                  (("2"
                                    (expand "ring_with_one?")
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (hide -2 -3)
                                        (("2"
                                          (lemma "R_prod_star_closed")
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (inst -1 "R")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (inst -1 "one")
        (("1" (expand "divides?")
          (("1" (skeep)
            (("1" (expand "unit?")
              (("1" (expand "l_invertible?")
                (("1" (expand "r_invertible?")
                  (("1" (split)
                    (("1" (inst 1 "x")
                      (("1" (typepred "R")
                        (("1" (expand "commutative_ring?")
                          (("1" (flatten)
                            (("1" (hide -1 -2)
                              (("1"
                                (expand "commutative?")
                                (("1"
                                  (inst?)
                                  (("1"
                                    (inst -1 "u")
                                    (("1"
                                      (expand "restrict")
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (assert)
                                      (("2"
                                        (typepred "u")
                                        (("2"
                                          (expand "remove")
                                          (("2"
                                            (expand "member")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (inst 1 "x") nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (typepred "R")
          (("2" (expand "ring_with_one?")
            (("2" (expand "monoid?")
              (("2" (expand "monad?")
                (("2" (expand "member") (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((unit? const-decl "bool" ring_unit_def nil)
    (left_identity formula-decl nil monad nil)
    (TRUE const-decl "bool" booleans nil)
    (R skolem-const-decl "{R: ring_with_one | commutative_ring?(R)}"
     ring_divides nil)
    (y skolem-const-decl "(R)" ring_divides nil)
    (r skolem-const-decl "(R)" ring_divides nil)
    (times_associative formula-decl nil ring nil)
    (remove const-decl "set" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (R_prod_star_closed formula-decl nil ring_basic_properties nil)
    (ring? const-decl "bool" ring_def nil)
    (member const-decl "bool" sets nil)
    (T formal-nonempty-type-decl nil ring_divides nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" ring_divides nil)
    (* formal-const-decl "[T, T -> T]" ring_divides nil)
    (zero formal-const-decl "T" ring_divides nil)
    (one formal-const-decl "T" ring_divides nil)
    (ring_with_one? const-decl "bool" ring_with_one_def nil)
    (ring_with_one nonempty-type-eq-decl nil ring_with_one nil)
    (commutative_ring? const-decl "bool" ring_def nil)
    (divides? const-decl "bool" ring_divides_def nil)
    (r_invertible? const-decl "bool" ring_unit_def nil)
    (monoid? const-decl "bool" monoid_def nil)
    (monad? const-decl "bool" monad_def nil)
    (restrict const-decl "R" restrict nil)
    (u skolem-const-decl "(remove(zero, R))" ring_divides nil)
    (commutative? const-decl "bool" operator_defs nil)
    (l_invertible? const-decl "bool" ring_unit_def nil))
   nil))
 (one_gen_unit_R 0
  (one_gen_unit_R-1 nil 3799664935
   ("" (skeep)
    (("" (prop)
      (("1" (decompose-equality)
        (("1" (iff)
          (("1" (prop)
            (("1" (expand "restrict") (("1" (propax) nil nil)) nil)
             ("2" (expand "restrict")
              (("2" (rewrite "commutative_id_one_gen_charac")
                (("2" (expand "restrict")
                  (("2" (expand "+")
                    (("2" (rewrite "unit_divides")
                      (("2" (inst -2 "x!1")
                        (("2" (expand "divides?")
                          (("2" (skeep)
                            (("2" (inst 1 "x") (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (rewrite "unit_divides")
        (("2" (skeep)
          (("2" (expand "divides?")
            (("2" (decompose-equality)
              (("2" (inst -1 "r")
                (("2" (iff)
                  (("2" (prop)
                    (("1" (expand "restrict")
                      (("1" (rewrite "commutative_id_one_gen_charac")
                        (("1" (expand "restrict")
                          (("1" (expand "+")
                            (("1" (skeep)
                              (("1"
                                (inst 1 "h")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "restrict") (("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((unit_divides formula-decl nil ring_divides nil)
    (divides? const-decl "bool" ring_divides_def nil)
    (+ const-decl "set[T]" cosets_def nil)
    (commutative_id_one_gen_charac formula-decl nil
     ring_with_id_one_generator nil)
    (T formal-nonempty-type-decl nil ring_divides nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" ring_divides nil)
    (* formal-const-decl "[T, T -> T]" ring_divides nil)
    (zero formal-const-decl "T" ring_divides nil)
    (one formal-const-decl "T" ring_divides nil)
    (ring_with_one? const-decl "bool" ring_with_one_def nil)
    (ring_with_one nonempty-type-eq-decl nil ring_with_one nil)
    (commutative_ring? const-decl "bool" ring_def nil)
    (restrict const-decl "R" restrict nil)
    (remove const-decl "set" sets nil)
    (one_gen const-decl "set[(R)]" ring_one_generator nil)
    (ring? const-decl "bool" ring_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   shostak))
 (quot_unit_associates 0
  (quot_unit_associates-1 nil 3817312413
   ("" (skosimp)
    (("" (expand "associates?")
      (("" (split)
        (("1" (expand "unit?")
          (("1" (expand "r_invertible?")
            (("1" (flatten)
              (("1" (hide -1)
                (("1" (skosimp)
                  (("1" (lemma "times_associative")
                    (("1" (inst -1 "b!1" "r!1" "y!1")
                      (("1" (replace -3 -1 rl)
                        (("1" (replaces -2)
                          (("1" (assert)
                            (("1" (hide -2)
                              (("1"
                                (expand "divides?")
                                (("1" (inst 1 "y!1") nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "divides?")
          (("2" (inst 1 "r!1") (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((associates? const-decl "bool" ring_divides_def nil)
    (unit? const-decl "bool" ring_unit_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil) (remove const-decl "set" sets nil)
    (one formal-const-decl "T" ring_divides nil)
    (ring_with_one? const-decl "bool" ring_with_one_def nil)
    (ring_with_one nonempty-type-eq-decl nil ring_with_one nil)
    (commutative_ring? const-decl "bool" ring_def nil)
    (TRUE const-decl "bool" booleans nil)
    (divides? const-decl "bool" ring_divides_def nil)
    (right_identity formula-decl nil monad nil)
    (times_associative formula-decl nil ring nil)
    (T formal-nonempty-type-decl nil ring_divides nil)
    (+ formal-const-decl "[T, T -> T]" ring_divides nil)
    (* formal-const-decl "[T, T -> T]" ring_divides nil)
    (zero formal-const-decl "T" ring_divides nil)
    (r_invertible? const-decl "bool" ring_unit_def nil))
   shostak))
 (int_domain_assoc_quot_unit_TCC1 0
  (int_domain_assoc_quot_unit_TCC1-1 nil 3833449228
   ("" (subtype-tcc) nil nil)
   ((remove const-decl "set" sets nil)
    (integral_domain_w_one? const-decl "bool"
     integral_domain_with_one_def nil)
    (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (integral_domain? const-decl "bool" integral_domain_def nil)
    (nz_closed? const-decl "bool" ring_nz_closed_def nil)
    (/= const-decl "boolean" notequal nil)
    (commutative_ring? const-decl "bool" ring_def nil)
    (zero formal-const-decl "T" ring_divides nil)
    (* formal-const-decl "[T, T -> T]" ring_divides nil)
    (+ formal-const-decl "[T, T -> T]" ring_divides nil)
    (T formal-nonempty-type-decl nil ring_divides nil)
    (divides? const-decl "bool" ring_divides_def nil)
    (associates? const-decl "bool" ring_divides_def nil)
    (member const-decl "bool" sets nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (plus_zero formula-decl nil ring nil)
    (restrict const-decl "R" restrict nil)
    (zero_plus formula-decl nil ring nil)
    (identity? const-decl "bool" operator_defs nil)
    (monad? const-decl "bool" monad_def nil)
    (associative? const-decl "bool" operator_defs nil)
    (monoid? const-decl "bool" monoid_def nil)
    (inv_exists? const-decl "bool" group_def nil)
    (group? const-decl "bool" group_def nil)
    (commutative? const-decl "bool" operator_defs nil)
    (abelian_group? const-decl "bool" group_def nil)
    (left_distributive? const-decl "bool" operator_defs_more nil)
    (right_distributive? const-decl "bool" operator_defs_more nil)
    (ring? const-decl "bool" ring_def nil)
    (one formal-const-decl "T" ring_divides nil)
    (right_identity formula-decl nil monad nil)
    (left_identity formula-decl nil monad nil)
    (ring_with_one? const-decl "bool" ring_with_one_def nil))
   nil
   (int_domain_assoc_quot_unit subtype "ring_divides.R"
    "(ring_with_one_def[ring_divides.T, ring_divides.+, ring_divides.*, ring_divides.zero, ring_divides.one].ring_with_one?)")))
 (int_domain_assoc_quot_unit 0
  (int_domain_assoc_quot_unit-1 nil 3817315197
   ("" (skosimp)
    (("" (expand "associates?")
      (("" (flatten)
        (("" (expand "divides?")
          (("" (hide -3)
            (("" (skosimp)
              (("" (replace -2 -1 rl)
                (("" (lemma "cancel_right_minus")
                  ((""
                    (inst -1 "a!1" "a!1 * x!1 * r!1" "a!1 * x!1 * r!1")
                    (("" (assert)
                      (("" (hide -2 -3)
                        (("" (rewrite "times_associative")
                          (("" (rewrite "times_negative" :dir rl)
                            (("" (name-replace "A" "a!1")
                              ((""
                                (expand "A" -1 1)
                                ((""
                                  (case-replace "a!1 = a!1*one")
                                  (("1"
                                    (expand "A")
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (rewrite
                                         "right_distributive"
                                         :dir
                                         rl)
                                        (("1"
                                          (lemma "nz_times_is_zero")
                                          (("1"
                                            (inst
                                             -1
                                             "R!1"
                                             "a!1"
                                             "(one + (inv((x!1 * r!1))))")
                                            (("1"
                                              (typepred "R!1")
                                              (("1"
                                                (expand
                                                 "integral_domain_w_one?")
                                                (("1"
                                                  (expand
                                                   "integral_domain?")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (typepred
                                                         "a!1")
                                                        (("1"
                                                          (expand
                                                           "remove")
                                                          (("1"
                                                            (expand
                                                             "member")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (case
                                                                   " R!1((one + (inv((x!1 * r!1)))))")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (lemma
                                                                       "cancel_right_plus")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         " (one + (inv((x!1 * r!1))))"
                                                                         "zero"
                                                                         "x!1*r!1")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (rewrite
                                                                             "plus_associative")
                                                                            (("1"
                                                                              (hide-all-but
                                                                               (-1
                                                                                -4
                                                                                2))
                                                                              (("1"
                                                                                (expand
                                                                                 "unit?")
                                                                                (("1"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "l_invertible?")
                                                                                    (("1"
                                                                                      (inst
                                                                                       1
                                                                                       "x!1")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (expand
                                                                                     "r_invertible?")
                                                                                    (("2"
                                                                                      (inst
                                                                                       1
                                                                                       "x!1")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "commutative_ring?")
                                                                                        (("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "commutative?")
                                                                                            (("2"
                                                                                              (inst
                                                                                               -3
                                                                                               "x!1"
                                                                                               "r!1")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "restrict")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     (-2
                                                                      -4
                                                                      1))
                                                                    (("2"
                                                                      (expand
                                                                       "commutative_ring?")
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (lemma
                                                                           "R_sum_star_closed")
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "R!1"
                                                                             "one"
                                                                             "(inv((x!1 * r!1)))")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (hide
                                                                                 2)
                                                                                (("2"
                                                                                  (expand
                                                                                   "monad?")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "member")
                                                                                    (("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (hide-all-but
                                                                                           (-1
                                                                                            1))
                                                                                          (("2"
                                                                                            (lemma
                                                                                             "inv_is_member_R")
                                                                                            (("2"
                                                                                              (inst
                                                                                               -1
                                                                                               "R!1"
                                                                                               "x!1*r!1")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (hide
                                                                                                   2)
                                                                                                  (("2"
                                                                                                    (lemma
                                                                                                     "R_prod_star_closed")
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "R!1"
                                                                                                       "x!1"
                                                                                                       "r!1")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((associates? const-decl "bool" ring_divides_def nil)
    (divides? const-decl "bool" ring_divides_def nil)
    (zero formal-const-decl "T" ring_divides nil)
    (* formal-const-decl "[T, T -> T]" ring_divides nil)
    (+ formal-const-decl "[T, T -> T]" ring_divides nil)
    (T formal-nonempty-type-decl nil ring_divides nil)
    (cancel_right_minus formula-decl nil ring nil)
    (negate_is_right_inv formula-decl nil ring nil)
    (times_associative formula-decl nil ring nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nz_times_is_zero formula-decl nil ring_nz_closed_aux nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (integral_domain? const-decl "bool" integral_domain_def nil)
    (cancel_right_plus formula-decl nil ring nil)
    (zero_plus formula-decl nil ring nil)
    (l_invertible? const-decl "bool" ring_unit_def nil)
    (restrict const-decl "R" restrict nil)
    (commutative? const-decl "bool" operator_defs nil)
    (commutative_ring? const-decl "bool" ring_def nil)
    (r_invertible? const-decl "bool" ring_unit_def nil)
    (unit? const-decl "bool" ring_unit_def nil)
    (plus_zero formula-decl nil ring nil)
    (negate_is_left_inv formula-decl nil ring nil)
    (plus_associative formula-decl nil ring nil)
    (R_sum_star_closed formula-decl nil ring_basic_properties nil)
    (monad? const-decl "bool" monad_def nil)
    (R_prod_star_closed formula-decl nil ring_basic_properties nil)
    (inv_is_member_R formula-decl nil ring_basic_properties nil)
    (member const-decl "bool" sets nil)
    (ring? const-decl "bool" ring_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (right_distributive formula-decl nil ring nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (inv const-decl "{y | x * y = one AND y * x = one}" group nil)
    (right_identity formula-decl nil monad nil)
    (A skolem-const-decl "(remove(zero, R!1))" ring_divides nil)
    (times_negative formula-decl nil ring nil)
    (integral_domain_w_one? const-decl "bool"
     integral_domain_with_one_def nil)
    (one formal-const-decl "T" ring_divides nil)
    (remove const-decl "set" sets nil) (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (x_divides_x_TCC1 0
  (x_divides_x_TCC1-1 nil 3826292747 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil ring_divides nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" ring_divides nil)
    (* formal-const-decl "[T, T -> T]" ring_divides nil)
    (zero formal-const-decl "T" ring_divides nil)
    (one formal-const-decl "T" ring_divides nil)
    (ring_with_one? const-decl "bool" ring_with_one_def nil)
    (ring_with_one nonempty-type-eq-decl nil ring_with_one nil)
    (remove const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (plus_zero formula-decl nil ring nil)
    (restrict const-decl "R" restrict nil)
    (zero_plus formula-decl nil ring nil)
    (identity? const-decl "bool" operator_defs nil)
    (monad? const-decl "bool" monad_def nil)
    (associative? const-decl "bool" operator_defs nil)
    (monoid? const-decl "bool" monoid_def nil)
    (inv_exists? const-decl "bool" group_def nil)
    (group? const-decl "bool" group_def nil)
    (commutative? const-decl "bool" operator_defs nil)
    (abelian_group? const-decl "bool" group_def nil)
    (left_distributive? const-decl "bool" operator_defs_more nil)
    (right_distributive? const-decl "bool" operator_defs_more nil)
    (ring? const-decl "bool" ring_def nil)
    (right_identity formula-decl nil monad nil)
    (left_identity formula-decl nil monad nil)
    (/= const-decl "boolean" notequal nil))
   nil (x_divides_x subtype "ring_divides.x" "(ring_divides.R)")))
 (x_divides_x 0
  (x_divides_x-1 nil 3826292752
   ("" (skosimp)
    (("" (expand "divides?")
      (("" (inst 1 "one")
        (("1" (assert) nil nil)
         ("2" (typepred "R!1")
          (("2" (expand "ring_with_one?")
            (("2" (expand "monoid?")
              (("2" (expand "monad?")
                (("2" (expand "member") (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((divides? const-decl "bool" ring_divides_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (monoid? const-decl "bool" monoid_def nil)
    (member const-decl "bool" sets nil)
    (monad? const-decl "bool" monad_def nil)
    (right_identity formula-decl nil monad nil)
    (T formal-nonempty-type-decl nil ring_divides nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" ring_divides nil)
    (* formal-const-decl "[T, T -> T]" ring_divides nil)
    (zero formal-const-decl "T" ring_divides nil)
    (one formal-const-decl "T" ring_divides nil)
    (ring_with_one? const-decl "bool" ring_with_one_def nil)
    (ring_with_one nonempty-type-eq-decl nil ring_with_one nil)
    (R!1 skolem-const-decl "ring_with_one[T, +, *, zero, one]"
     ring_divides nil))
   shostak))
 (int_domain_assoc_unit_TCC1 0
  (int_domain_assoc_unit_TCC1-1 nil 3839686965
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (one formal-const-decl "T" ring_divides nil)
    (integral_domain_w_one? const-decl "bool"
     integral_domain_with_one_def nil)
    (remove const-decl "set" sets nil)
    (left_identity formula-decl nil monad nil)
    (right_identity formula-decl nil monad nil)
    (integral_domain? const-decl "bool" integral_domain_def nil)
    (nz_closed? const-decl "bool" ring_nz_closed_def nil)
    (/= const-decl "boolean" notequal nil)
    (commutative_ring? const-decl "bool" ring_def nil)
    (ring? const-decl "bool" ring_def nil)
    (right_distributive? const-decl "bool" operator_defs_more nil)
    (left_distributive? const-decl "bool" operator_defs_more nil)
    (abelian_group? const-decl "bool" group_def nil)
    (commutative? const-decl "bool" operator_defs nil)
    (group? const-decl "bool" group_def nil)
    (inv_exists? const-decl "bool" group_def nil)
    (monoid? const-decl "bool" monoid_def nil)
    (associative? const-decl "bool" operator_defs nil)
    (monad? const-decl "bool" monad_def nil)
    (identity? const-decl "bool" operator_defs nil)
    (zero_plus formula-decl nil ring nil)
    (restrict const-decl "R" restrict nil)
    (plus_zero formula-decl nil ring nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (member const-decl "bool" sets nil)
    (zero formal-const-decl "T" ring_divides nil)
    (* formal-const-decl "[T, T -> T]" ring_divides nil)
    (+ formal-const-decl "[T, T -> T]" ring_divides nil)
    (T formal-nonempty-type-decl nil ring_divides nil)
    (divides? const-decl "bool" ring_divides_def nil)
    (associates? const-decl "bool" ring_divides_def nil))
   nil
   (int_domain_assoc_unit subtype "ring_divides.a"
    "(ring_divides.R)")))
 (int_domain_assoc_unit_TCC2 0
  (int_domain_assoc_unit_TCC2-1 nil 3839686965
   ("" (subtype-tcc) nil nil)
   ((remove const-decl "set" sets nil)
    (integral_domain_w_one? const-decl "bool"
     integral_domain_with_one_def nil)
    (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (commutative_ring? const-decl "bool" ring_def nil)
    (/= const-decl "boolean" notequal nil)
    (nz_closed? const-decl "bool" ring_nz_closed_def nil)
    (integral_domain? const-decl "bool" integral_domain_def nil)
    (zero formal-const-decl "T" ring_divides nil)
    (* formal-const-decl "[T, T -> T]" ring_divides nil)
    (+ formal-const-decl "[T, T -> T]" ring_divides nil)
    (T formal-nonempty-type-decl nil ring_divides nil)
    (divides? const-decl "bool" ring_divides_def nil)
    (associates? const-decl "bool" ring_divides_def nil)
    (member const-decl "bool" sets nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (plus_zero formula-decl nil ring nil)
    (restrict const-decl "R" restrict nil)
    (zero_plus formula-decl nil ring nil)
    (identity? const-decl "bool" operator_defs nil)
    (monad? const-decl "bool" monad_def nil)
    (associative? const-decl "bool" operator_defs nil)
    (monoid? const-decl "bool" monoid_def nil)
    (inv_exists? const-decl "bool" group_def nil)
    (group? const-decl "bool" group_def nil)
    (commutative? const-decl "bool" operator_defs nil)
    (abelian_group? const-decl "bool" group_def nil)
    (left_distributive? const-decl "bool" operator_defs_more nil)
    (right_distributive? const-decl "bool" operator_defs_more nil)
    (ring? const-decl "bool" ring_def nil)
    (one formal-const-decl "T" ring_divides nil)
    (right_identity formula-decl nil monad nil)
    (left_identity formula-decl nil monad nil)
    (ring_with_one? const-decl "bool" ring_with_one_def nil))
   nil
   (int_domain_assoc_unit subtype "ring_divides.R"
    "(ring_with_one_def[ring_divides.T, ring_divides.+, ring_divides.*, ring_divides.zero, ring_divides.one].ring_with_one?)")))
 (int_domain_assoc_unit_TCC3 0
  (int_domain_assoc_unit_TCC1-1 nil 3833379121
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (integral_domain_w_one? const-decl "bool"
     integral_domain_with_one_def nil)
    (remove const-decl "set" sets nil)
    (left_identity formula-decl nil monad nil)
    (right_identity formula-decl nil monad nil)
    (integral_domain? const-decl "bool" integral_domain_def nil)
    (nz_closed? const-decl "bool" ring_nz_closed_def nil)
    (/= const-decl "boolean" notequal nil)
    (commutative_ring? const-decl "bool" ring_def nil)
    (ring? const-decl "bool" ring_def nil)
    (right_distributive? const-decl "bool" operator_defs_more nil)
    (left_distributive? const-decl "bool" operator_defs_more nil)
    (abelian_group? const-decl "bool" group_def nil)
    (commutative? const-decl "bool" operator_defs nil)
    (group? const-decl "bool" group_def nil)
    (inv_exists? const-decl "bool" group_def nil)
    (monoid? const-decl "bool" monoid_def nil)
    (associative? const-decl "bool" operator_defs nil)
    (monad? const-decl "bool" monad_def nil)
    (identity? const-decl "bool" operator_defs nil)
    (zero_plus formula-decl nil ring nil)
    (restrict const-decl "R" restrict nil)
    (plus_zero formula-decl nil ring nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (member const-decl "bool" sets nil)
    (zero formal-const-decl "T" ring_divides nil)
    (* formal-const-decl "[T, T -> T]" ring_divides nil)
    (+ formal-const-decl "[T, T -> T]" ring_divides nil)
    (T formal-nonempty-type-decl nil ring_divides nil)
    (divides? const-decl "bool" ring_divides_def nil)
    (associates? const-decl "bool" ring_divides_def nil)
    (one formal-const-decl "T" ring_divides nil)
    (l_invertible? const-decl "bool" ring_unit_def nil)
    (r_invertible? const-decl "bool" ring_unit_def nil)
    (unit? const-decl "bool" ring_unit_def nil))
   nil
   (int_domain_assoc_unit subtype "ring_divides.b"
    "(ring_divides.R)")))
 (int_domain_assoc_unit 0
  (int_domain_assoc_unit-1 nil 3833379129
   ("" (skeep)
    (("" (copy -1)
      (("" (expand "associates?" -1)
        (("" (flatten)
          (("" (hide -2)
            (("" (expand "divides?")
              (("" (skeep)
                (("" (lemma "int_domain_assoc_quot_unit")
                  (("" (inst -1 "R" "b" "a" "x")
                    (("" (expand "associates?")
                      (("" (assert)
                        (("" (flatten)
                          (("" (assert)
                            (("" (expand "unit?")
                              ((""
                                (expand "l_invertible?")
                                ((""
                                  (expand "r_invertible?")
                                  ((""
                                    (flatten)
                                    ((""
                                      (split)
                                      (("1"
                                        (hide -2 -7)
                                        (("1"
                                          (skeep*)
                                          (("1"
                                            (inst 1 "y*y!1")
                                            (("1"
                                              (replace -2 1 :dir rl)
                                              (("1"
                                                (rewrite
                                                 "times_associative")
                                                (("1"
                                                  (rewrite
                                                   "times_associative"
                                                   :dir
                                                   rl)
                                                  (("1"
                                                    (replaces -5)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (lemma
                                               "R_prod_star_closed")
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (inst -1 "R")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide -1 -6)
                                        (("2"
                                          (skeep*)
                                          (("2"
                                            (inst 1 "y*y!1")
                                            (("1"
                                              (replace -2 1 rl)
                                              (("1"
                                                (rewrite
                                                 "times_associative")
                                                (("1"
                                                  (rewrite
                                                   "times_associative"
                                                   :dir
                                                   rl)
                                                  (("1"
                                                    (replaces -1)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (lemma
                                               "R_prod_star_closed")
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (inst -1 "R")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((divides? const-decl "bool" ring_divides_def nil)
    (int_domain_assoc_quot_unit formula-decl nil ring_divides nil)
    (unit? const-decl "bool" ring_unit_def nil)
    (r_invertible? const-decl "bool" ring_unit_def nil)
    (TRUE const-decl "bool" booleans nil)
    (R_prod_star_closed formula-decl nil ring_basic_properties nil)
    (ring? const-decl "bool" ring_def nil)
    (member const-decl "bool" sets nil)
    (left_identity formula-decl nil monad nil)
    (times_associative formula-decl nil ring nil)
    (y!1 skolem-const-decl "(R)" ring_divides nil)
    (y skolem-const-decl "(R)" ring_divides nil)
    (R skolem-const-decl "(integral_domain_w_one?)" ring_divides nil)
    (y!1 skolem-const-decl "(R)" ring_divides nil)
    (y skolem-const-decl "(R)" ring_divides nil)
    (l_invertible? const-decl "bool" ring_unit_def nil)
    (remove const-decl "set" sets nil)
    (integral_domain_w_one? const-decl "bool"
     integral_domain_with_one_def nil)
    (one formal-const-decl "T" ring_divides nil)
    (zero formal-const-decl "T" ring_divides nil)
    (* formal-const-decl "[T, T -> T]" ring_divides nil)
    (+ formal-const-decl "[T, T -> T]" ring_divides nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-nonempty-type-decl nil ring_divides nil)
    (associates? const-decl "bool" ring_divides_def nil))
   shostak))
 (div_member_fseq_div_op_finseq_TCC1 0
  (div_member_fseq_div_op_finseq_TCC1-1 nil 3839687315
   (""
    (case "FORALL (R: (commutative_ring_with_one?[T, +, *, zero, one]), fs: finseq[(R)]): R(op_fseq[T, *, one](fs))")
    (("1" (assert) (("1" (skeep) (("1" (inst?) nil nil)) nil)) nil)
     ("2" (hide 2)
      (("2" (measure-induct "length(fs)" ("R" "fs"))
        (("2" (skeep)
          (("2" (expand "op_fseq" 1)
            (("2" (prop)
              (("1" (hide -)
                (("1" (typepred "x_1")
                  (("1" (expand "commutative_ring_with_one?")
                    (("1" (expand "ring_with_one?")
                      (("1" (expand "monoid?")
                        (("1" (expand "monad?")
                          (("1" (expand "member")
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (inst -1 "x_1" "x_2 ^ (1, length(x_2) - 1)")
                (("1" (prop)
                  (("1" (lemma "R_prod_star_closed")
                    (("1"
                      (inst -1 "x_1" "seq(x_2)(0)"
                       "op_fseq(x_2 ^ (1, length(x_2) - 1))")
                      (("1" (assert) nil nil)
                       ("2" (hide -1 3) (("2" (grind) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (hide 3) (("2" (grind) nil nil)) nil))
                  nil)
                 ("2" (skeep)
                  (("2" (assert)
                    (("2" (typepred "x1")
                      (("2" (assert)
                        (("2" (expand "^" 1)
                          (("2" (assert)
                            (("2" (prop)
                              (("1"
                                (assert)
                                (("1"
                                  (hide 1 3)
                                  (("1" (grind) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 1 3)
                                (("2" (grind) nil nil))
                                nil)
                               ("3"
                                (typepred "x_2`seq(1 + x1)")
                                (("3" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (hide 3) (("3" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (ring_with_one? const-decl "bool" ring_with_one_def nil)
    (monad? const-decl "bool" monad_def nil)
    (member const-decl "bool" sets nil)
    (monoid? const-decl "bool" monoid_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ring? const-decl "bool" ring_def nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (R_prod_star_closed formula-decl nil ring_basic_properties nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^ const-decl "finseq" finite_sequences nil)
    (x_2 skolem-const-decl "finseq[(x_1)]" ring_divides nil)
    (x_1 skolem-const-decl
     "(commutative_ring_with_one?[T, +, *, zero, one])" ring_divides
     nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (T formal-nonempty-type-decl nil ring_divides nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" ring_divides nil)
    (* formal-const-decl "[T, T -> T]" ring_divides nil)
    (zero formal-const-decl "T" ring_divides nil)
    (one formal-const-decl "T" ring_divides nil)
    (commutative_ring_with_one? const-decl "bool" ring_with_one_def
     nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (op_fseq def-decl "T" op_finseq_monoid_def nil))
   nil
   (div_member_fseq_div_op_finseq subtype
    "op_finseq_monoid_def[ring_divides.T, ring_divides.*, ring_divides.one].op_fseq(ring_divides.fs)"
    "(ring_divides.R)")))
 (div_member_fseq_div_op_finseq 0
  (div_member_fseq_div_op_finseq-1 nil 3840203951
   ("" (measure-induct+ "length(fs)" ("R" "fs"))
    (("1" (skeep)
      (("1" (skeep)
        (("1" (expand "op_fseq" 1)
          (("1" (typepred i)
            (("1" (case "length(x!2) = 0")
              (("1" (hide -3 -4 1) (("1" (grind) nil nil)) nil)
               ("2" (case "i = 0")
                (("1" (replaces -1)
                  (("1" (hide -1 -2)
                    (("1" (expand "divides?")
                      (("1" (skeep)
                        (("1"
                          (inst 2
                           "x * op_fseq(x!2 ^ (1, length(x!2) - 1))")
                          (("1" (rewrite "times_associative" :dir rl)
                            (("1" (assert)
                              (("1"
                                (expand "finseq_appl")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "finseq_appl")
                            (("2" (lemma R_prod_star_closed)
                              (("2"
                                (inst
                                 -1
                                 x!1
                                 x
                                 "op_fseq[T, *, one](^[T](x!2, (1, length(x!2) - 1)))")
                                (("2"
                                  (prop)
                                  (("1"
                                    (expand "member")
                                    (("1" (propax) nil nil))
                                    nil)
                                   ("2"
                                    (expand "member")
                                    (("2" (propax) nil nil))
                                    nil)
                                   ("3"
                                    (lemma op_fseq_closed)
                                    (("3"
                                      (inst
                                       -1
                                       "x!1"
                                       "^[T](x!2, (1, length(x!2) - 1))")
                                      (("1"
                                        (expand "member")
                                        (("1" (propax) nil nil))
                                        nil)
                                       ("2"
                                        (skeep)
                                        (("2"
                                          (expand "^" 1)
                                          (("2"
                                            (split)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (typepred "x1")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide-all-but
                                                     (-1 -2 4))
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (hide - 4 5)
                                                (("2"
                                                  (typepred
                                                   "x!2`seq(1 + x1)")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (inst -2 "x!1" "x!2 ^ (1, length(x!2) - 1)")
                  (("1" (inst?)
                    (("1" (expand "finseq_appl")
                      (("1" (prop)
                        (("1" (inst -1 "i -1")
                          (("1" (prop)
                            (("1" (expand "divides?")
                              (("1"
                                (skeep -1)
                                (("1"
                                  (inst 3 " x!2(0) * x")
                                  (("1"
                                    (expand "finseq_appl")
                                    (("1"
                                      (replace -1 3 rl)
                                      (("1"
                                        (rewrite
                                         "times_associative"
                                         :dir
                                         rl)
                                        (("1"
                                          (typepred "x!1")
                                          (("1"
                                            (expand
                                             "commutative_ring_with_one?")
                                            (("1"
                                              (expand "commutative?")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (inst
                                                   -2
                                                   "c"
                                                   "x!2(0)")
                                                  (("1"
                                                    (expand "restrict")
                                                    (("1"
                                                      (expand
                                                       "finseq_appl")
                                                      (("1"
                                                        (replaces -2)
                                                        (("1"
                                                          (rewrite
                                                           "times_associative"
                                                           :dir
                                                           rl)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (typepred "c")
                                                      (("2"
                                                        (expand
                                                         "remove")
                                                        (("2"
                                                          (expand
                                                           "member")
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "finseq_appl")
                                    (("2"
                                      (lemma R_prod_star_closed)
                                      (("2"
                                        (inst -1 "x!1" "x!2(0)" "x")
                                        (("2"
                                          (expand "finseq_appl")
                                          (("2"
                                            (expand "member")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 4) (("2" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (hide -2 4) (("2" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (hide -2 4) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skeep)
                    (("2" (hide -2 4)
                      (("2" (expand "^")
                        (("2" (split)
                          (("1" (flatten)
                            (("1" (typepred "x1")
                              (("1" (grind) nil nil)) nil))
                            nil)
                           ("2" (flatten)
                            (("2" (typepred "x!2`seq(1 + x1)")
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (expand "finseq_appl")
      (("2" (typepred "y!1")
        (("2" (skeep)
          (("2" (typepred "y!2(i)")
            (("2" (expand "finseq_appl")
              (("2" (hide -5 2)
                (("2" (lemma op_fseq_closed)
                  (("2" (inst -1 "y!1" "y!2") nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep) (("3" (rewrite "op_fseq_closed") nil nil)) nil))
      nil)
     ("4" (hide -1 2)
      (("4" (skeep) (("4" (rewrite "op_fseq_closed") nil nil)) nil))
      nil)
     ("5" (hide -2 2 3)
      (("5" (skeep) (("5" (rewrite "op_fseq_closed") nil nil)) nil))
      nil)
     ("6" (hide 2)
      (("6" (skeep) (("6" (rewrite "op_fseq_closed") nil nil)) nil))
      nil)
     ("7" (rewrite "op_fseq_closed") nil nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (i skolem-const-decl "below[length(x!2)]" ring_divides nil)
    (x skolem-const-decl "(x!1)" ring_divides nil)
    (commutative? const-decl "bool" operator_defs nil)
    (c skolem-const-decl "(remove(zero, x!1))" ring_divides nil)
    (restrict const-decl "R" restrict nil)
    (TRUE const-decl "bool" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (x!1 skolem-const-decl "(commutative_ring_with_one?)" ring_divides
     nil)
    (x skolem-const-decl "(x!1)" ring_divides nil)
    (^ const-decl "finseq" finite_sequences nil)
    (x!2 skolem-const-decl "finseq[(x!1)]" ring_divides nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (times_associative formula-decl nil ring nil)
    (R_prod_star_closed formula-decl nil ring_basic_properties nil)
    (member const-decl "bool" sets nil)
    (monad? const-decl "bool" monad_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (op_fseq_closed formula-decl nil op_finseq_monoid nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (remove const-decl "set" sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (ring? const-decl "bool" ring_def nil)
    (divides? const-decl "bool" ring_divides_def nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (op_fseq def-decl "T" op_finseq_monoid_def nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (commutative_ring_with_one? const-decl "bool" ring_with_one_def
     nil)
    (one formal-const-decl "T" ring_divides nil)
    (zero formal-const-decl "T" ring_divides nil)
    (* formal-const-decl "[T, T -> T]" ring_divides nil)
    (+ formal-const-decl "[T, T -> T]" ring_divides nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-nonempty-type-decl nil ring_divides nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak)))

