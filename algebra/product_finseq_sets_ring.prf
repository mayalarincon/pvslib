(product_finseq_sets_ring
 (IMP_cartesian_product_quot_ring_TCC1 0
  (IMP_cartesian_product_quot_ring_TCC1-1 nil 3796724087
   ("" (lemma "fullset_is_ring_with_one")
    (("" (expand "ring_with_one?") (("" (assert) nil nil)) nil)) nil)
   ((ring_with_one? const-decl "bool" ring_with_one_def nil)
    (fullset_is_ring_with_one formula-decl nil product_finseq_sets_ring
     nil))
   nil
   (IMP_cartesian_product_quot_ring assuming
    "cartesian_product_quot_ring[product_finseq_sets_ring.T, product_finseq_sets_ring.+, product_finseq_sets_ring.*, product_finseq_sets_ring.zero].cartesian_product_quot_ring"
    "fullset_is_ring: ASSUMPTION ring_def[cartesian_product_quot_ring.T, cartesian_product_quot_ring.+, cartesian_product_quot_ring.*, cartesian_product_quot_ring.zero].ring?(sets[cartesian_product_quot_ring.T].fullset)")))
 (IMP_ring_with_one_TCC1 0
  (IMP_ring_with_one_TCC1-1 nil 3796724381
   ("" (rewrite "fullset_is_ring_with_one") nil nil)
   ((fullset_is_ring_with_one formula-decl nil product_finseq_sets_ring
     nil))
   nil
   (IMP_ring_with_one assuming
    "ring_with_one[product_finseq_sets_ring.T, product_finseq_sets_ring.+, product_finseq_sets_ring.*, product_finseq_sets_ring.zero, product_finseq_sets_ring.one].ring_with_one"
    "fullset_is_ring_with_one: ASSUMPTION ring_with_one_def[ring_with_one.T, ring_with_one.+, ring_with_one.*, ring_with_one.zero, ring_with_one.one].ring_with_one?(sets[ring_with_one.T].fullset)")))
 (product_fs_rec_TCC1 0
  (product_fs_rec_TCC1-1 nil 3782684369 ("" (subtype-tcc) nil nil) nil
   nil (product_fs_rec subtype "0" "below[fs`length]")))
 (product_fs_rec_TCC2 0
  (product_fs_rec_TCC2-1 nil 3782684369 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-nonempty-type-decl nil product_finseq_sets_ring nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (product_fs_rec subtype
    "(number_fields.-)(product_finseq_sets_ring.i, 1)"
    "below[length(fs)]")))
 (product_fs_rec_TCC3 0
  (product_fs_rec_TCC3-1 nil 3782684369 ("" (termination-tcc) nil nil)
   nil nil
   (product_fs_rec termination
    "product_finseq_sets_ring.product_fs_rec(product_finseq_sets_ring.fs)((number_fields.-)(product_finseq_sets_ring.i, 1))"
    "nil")))
 (product_fs_TCC1 0
  (product_fs_TCC1-1 nil 3782685613 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (product_fs subtype
    "((number_fields.-)(length(product_finseq_sets_ring.fs), 1))"
    "below[length(fs)]")))
 (product_of_sets_TCC1 0
  (product_of_sets_TCC1-1 nil 3783983103 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil))
   nil
   (product_of_sets subtype "product_finseq_sets_ring.i"
    "below[length(fsc)]")))
 (product_of_sets_TCC2 0
  (product_of_sets_TCC2-1 nil 3783983103 ("" (subtype-tcc) nil nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (member const-decl "bool" sets nil))
   nil
   (product_of_sets subtype
    "(number_fields.-)(product_finseq_sets_ring.n, 1)"
    "int_below_N[T, +, *, zero, n]")))
 (product_fs_emptyseq 0
  (product_fs_emptyseq-1 nil 3782818918
   ("" (expand "product_fs")
    (("" (expand "empty_seq") (("" (propax) nil nil)) nil)) nil)
   ((empty_seq const-decl "finseq" finite_sequences nil)
    (product_fs const-decl "T" product_finseq_sets_ring nil))
   shostak))
 (product_fs_1 0
  (product_fs_1-1 nil 3782819109
   ("" (skeep)
    (("" (expand "product_fs")
      (("" (expand "#")
        (("" (expand "product_fs_rec") (("" (propax) nil nil)) nil))
        nil))
      nil))
    nil)
   ((product_fs const-decl "T" product_finseq_sets_ring nil)
    (product_fs_rec def-decl "T" product_finseq_sets_ring nil)
    (|#| const-decl "finite_sequence[T]" set2seq structures))
   shostak))
 (product_fs_rec_caret_TCC1 0
  (product_fs_rec_caret_TCC1-1 nil 3782688860
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^ const-decl "finseq" finite_sequences nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (product_fs_rec_caret subtype "product_finseq_sets_ring.n"
    "below[length(^[T](fs, (0, m)))]")))
 (product_fs_rec_caret 0
  (product_fs_rec_caret-1 nil 3782688862
   ("" (induct "n")
    (("1" (skosimp*)
      (("1" (expand "product_fs_rec")
        (("1" (expand "^") (("1" (assert) nil nil)) nil)) nil))
      nil)
     ("2" (skosimp*)
      (("2" (expand "product_fs_rec" 1)
        (("2" (inst?)
          (("2" (assert)
            (("2" (replace -1)
              (("2" (hide -1)
                (("2" (expand "^") (("2" (propax) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skosimp*)
        (("3" (expand "^")
          (("3" (lift-if)
            (("3" (expand "min")
              (("3" (lift-if) (("3" (ground) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (product_fs_rec def-decl "T" product_finseq_sets_ring nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-nonempty-type-decl nil product_finseq_sets_ring nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (^ const-decl "finseq" finite_sequences nil))
   shostak))
 (product_fs_rec_mult_TCC1 0
  (product_fs_rec_mult_TCC1-1 nil 3782686674 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (O const-decl "finseq" finite_sequences nil))
   nil
   (product_fs_rec_mult subtype "product_finseq_sets_ring.n"
    "below[length(fs2)]")))
 (product_fs_rec_mult_TCC2 0
  (product_fs_rec_mult_TCC2-1 nil 3782686674 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (O const-decl "finseq" finite_sequences nil))
   nil
   (product_fs_rec_mult subtype
    "(number_fields.-)(product_finseq_sets_ring.n, length(product_finseq_sets_ring.fs1))"
    "below[length(fs2)]")))
 (product_fs_rec_mult 0
  (product_fs_rec_mult-1 nil 3782686686
   ("" (skeep)
    (("" (lift-if)
      (("" (split)
        (("1" (flatten)
          (("1"
            (case "FORALL (n: nat):
                 n < length(fs1) AND n < length(fs1 o fs2) IMPLIES
                  product_fs_rec(fs1 o fs2)(n) = product_fs_rec(fs1)(n)")
            (("1" (inst - "n") (("1" (assert) nil nil)) nil)
             ("2" (hide-all-but 1)
              (("2" (induct "n" 1)
                (("1" (flatten) (("1" (grind) nil nil)) nil)
                 ("2" (skolem 1 "nn")
                  (("2" (flatten)
                    (("2" (expand "product_fs_rec" +)
                      (("2" (assert)
                        (("2" (replace -1)
                          (("2"
                            (grind :exclude
                             ("length" "product_fs_rec"))
                            nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (split +)
            (("1" (flatten)
              (("1" (case "fs1 o fs2 = fs2")
                (("1" (assert) nil nil)
                 ("2" (hide-all-but (-1 1))
                  (("2" (decompose-equality)
                    (("1" (grind) nil nil)
                     ("2" (decompose-equality) (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2"
                (case "FORALL (n:nat): length(fs1)+n < length(fs1 o fs2) IMPLIES product_fs_rec(fs1 o fs2)(length(fs1)+n) = product_fs_rec(fs2)(n) * product_fs_rec(fs1)(length(fs1)-1)")
                (("1" (inst - "n-length(fs1)")
                  (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)
                 ("2" (hide 3)
                  (("2" (induct "n" 1)
                    (("1" (assert)
                      (("1" (expand "product_fs_rec" + 1)
                        (("1"
                          (case "seq(fs1 o fs2)(length(fs1)) = seq(fs2)(0)")
                          (("1"
                            (case "product_fs_rec(fs1 o fs2)(length(fs1)-1) = product_fs_rec(fs1)(length(fs1)-1)")
                            (("1" (expand "product_fs_rec" + 2)
                              (("1" (assert) nil nil)) nil)
                             ("2" (hide 2)
                              (("2"
                                (case
                                 "FORALL (mm:nat): mm < length(fs1) IMPLIES product_fs_rec(fs1 o fs2)(mm) =
                          product_fs_rec(fs1)(mm)")
                                (("1"
                                  (inst?)
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (induct "mm" 1)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand "product_fs_rec" 1)
                                      (("1"
                                        (hide-all-but (1 3))
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skeep)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "product_fs_rec" 1)
                                        (("2"
                                          (case
                                           "seq(fs1 o fs2)(1+j) = seq(fs1)(1+j)")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (hide-all-but (-2 1))
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (hide-all-but 1)
                                    (("3" (grind) nil nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (hide-all-but 1)
                                  (("3" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but 1)
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skeep)
                      (("2" (assert)
                        (("2" (expand "product_fs_rec" 1 1)
                          (("2" (expand "product_fs_rec" 1 2)
                            (("2" (replace -1)
                              (("2"
                                (case
                                 "seq(fs2)(1+j) = seq(fs1 o fs2)(1+length(fs1)+j)")
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (lemma "fullset_is_ring")
                                    (("1"
                                      (expand "ring?")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (hide (-1 -2 -4 -5 -6 -7))
                                          (("1"
                                            (expand "associative?")
                                            (("1"
                                              (inst
                                               -1
                                               "seq(fs1 o fs2)(1 + length(fs1) + j)"
                                               "product_fs_rec(fs2)(j)"
                                               "product_fs_rec(fs1)(length(fs1) - 1)")
                                              (("1"
                                                (expand "restrict")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but 1)
                                                (("2"
                                                  (expand "fullset")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (hide-all-but 1)
                                                (("3"
                                                  (expand "fullset")
                                                  (("3"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("4"
                                                (hide-all-but 1)
                                                (("4"
                                                  (expand "fullset")
                                                  (("4"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (hide 2) (("3" (grind) nil nil)) nil)
                     ("4" (hide 2) (("4" (grind) nil nil)) nil))
                    nil))
                  nil)
                 ("3" (hide 3) (("3" (grind) nil nil)) nil)
                 ("4" (hide 3) (("4" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ring? const-decl "bool" ring_def nil)
    (set type-eq-decl nil sets nil) (fullset const-decl "set" sets nil)
    nil (restrict const-decl "R" restrict nil)
    (associative? const-decl "bool" operator_defs nil)
    (zero formal-const-decl "T" product_finseq_sets_ring nil)
    (+ formal-const-decl "[T, T -> T]" product_finseq_sets_ring nil)
    (fullset_is_ring formula-decl nil cartesian_product_quot_ring nil)
    (NOT const-decl "[bool -> bool]" booleans nil) nil
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    nil nil
    (int_plus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* formal-const-decl "[T, T -> T]" product_finseq_sets_ring nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-nonempty-type-decl nil product_finseq_sets_ring nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (O const-decl "finseq" finite_sequences nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (product_fs_rec def-decl "T" product_finseq_sets_ring nil))
   shostak))
 (product_fs_split_TCC1 0
  (product_fs_split_TCC1-1 nil 3782689305 ("" (subtype-tcc) nil nil)
   nil nil
   (product_fs_split subtype
    "(number_fields.-)(length(product_finseq_sets_ring.fs), 1)"
    "below[fs`length]")))
 (product_fs_split_TCC2 0
  (product_fs_split_TCC2-1 nil 3782689305 ("" (subtype-tcc) nil nil)
   nil nil
   (product_fs_split subtype
    "(number_fields.-)(length(product_finseq_sets_ring.fs), 2)"
    "nat")))
 (product_fs_split 0
  (product_fs_split-1 nil 3782689306
   ("" (skosimp*)
    (("" (expand "product_fs")
      (("" (assert)
        (("" (lift-if)
          (("" (ground)
            (("1" (expand "^")
              (("1" (expand "min") (("1" (assert) nil nil)) nil)) nil)
             ("2" (expand "product_fs_rec" 2 1)
              (("2" (expand "^" 2 2)
                (("2" (expand "min")
                  (("2" (lemma "product_fs_rec_caret")
                    (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((product_fs const-decl "T" product_finseq_sets_ring nil)
    (product_fs_rec def-decl "T" product_finseq_sets_ring nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (product_fs_rec_caret formula-decl nil product_finseq_sets_ring
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (^ const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (times_one formula-decl nil ring_with_one nil)
    (T formal-nonempty-type-decl nil product_finseq_sets_ring nil)
    (+ formal-const-decl "[T, T -> T]" product_finseq_sets_ring nil)
    (* formal-const-decl "[T, T -> T]" product_finseq_sets_ring nil)
    (zero formal-const-decl "T" product_finseq_sets_ring nil)
    (one formal-const-decl "T" product_finseq_sets_ring nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (Product_fs_o 0
  (Product_fs_o-1 nil 3782820004
   ("" (skosimp)
    (("" (expand "product_fs")
      (("" (lift-if)
        (("" (lift-if)
          (("" (lift-if)
            (("" (lift-if)
              (("" (lift-if)
                (("" (lift-if)
                  (("" (lift-if)
                    (("" (prop)
                      (("1" (rewrite "one_times") nil nil)
                       ("2" (hide 2)
                        (("2" (expand "o ") (("2" (assert) nil nil))
                          nil))
                        nil)
                       ("3" (hide 1)
                        (("3" (expand "o ") (("3" (assert) nil nil))
                          nil))
                        nil)
                       ("4" (hide 2)
                        (("4" (expand "o ") (("4" (assert) nil nil))
                          nil))
                        nil)
                       ("5" (hide 1)
                        (("5" (expand "o ") (("5" (assert) nil nil))
                          nil))
                        nil)
                       ("6" (rewrite "empty_0" -1)
                        (("6" (replaces -1)
                          (("6" (rewrite "seq_o_empty")
                            (("6" (rewrite "one_times") nil nil)) nil))
                          nil))
                        nil)
                       ("7" (rewrite "empty_0" -1)
                        (("7" (replaces -1)
                          (("7" (rewrite "empty_o_seq")
                            (("7" (rewrite "times_one") nil nil)) nil))
                          nil))
                        nil)
                       ("8" (lemma "product_fs_rec_mult")
                        (("8"
                          (inst -1 "fs1!1" "fs2!1"
                           "length(fs1!1 o fs2!1) - 1")
                          (("1" (assert)
                            (("1" (lift-if)
                              (("1"
                                (prop)
                                (("1"
                                  (hide (-2 2))
                                  (("1"
                                    (expand "o ")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "o" -1 3)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 3)
                            (("2" (expand "o") (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((product_fs const-decl "T" product_finseq_sets_ring nil)
    (one formal-const-decl "T" product_finseq_sets_ring nil)
    (zero formal-const-decl "T" product_finseq_sets_ring nil)
    (* formal-const-decl "[T, T -> T]" product_finseq_sets_ring nil)
    (+ formal-const-decl "[T, T -> T]" product_finseq_sets_ring nil)
    (T formal-nonempty-type-decl nil product_finseq_sets_ring nil)
    (one_times formula-decl nil ring_with_one nil)
    (O const-decl "finseq" finite_sequences nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (product_fs_rec def-decl "T" product_finseq_sets_ring nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (seq_o_empty formula-decl nil seq_extras structures)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (empty_0 formula-decl nil seq_extras structures)
    (times_one formula-decl nil ring_with_one nil)
    (empty_o_seq formula-decl nil seq_extras structures) nil nil
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (product_fs_rec_mult formula-decl nil product_finseq_sets_ring
     nil))
   shostak))
 (Product_fs_o_split_TCC1 0
  (Product_fs_o_split_TCC1-1 nil 3782914551 ("" (subtype-tcc) nil nil)
   nil nil
   (Product_fs_o_split subtype
    "(number_fields.-)(length(product_finseq_sets_ring.fs), 1)"
    "nat")))
 (Product_fs_o_split_TCC2 0
  (Product_fs_o_split_TCC2-1 nil 3782914551 ("" (subtype-tcc) nil nil)
   nil nil
   (Product_fs_o_split subtype
    "(number_fields.-)(product_finseq_sets_ring.j, 1)" "nat")))
 (Product_fs_o_split 0
  (Product_fs_o_split-1 nil 3782914653
   ("" (skosimp)
    (("" (expand "finseq_appl")
      ((""
        (name-replace "FS!3"
         "product_fs(fs!1 ^ (j!1 + 1, length(fs!1) - 1))")
        (("" (name-replace "FS!2" "fs!1`seq(j!1)")
          (("" (name-replace "FS!1" "product_fs(fs!1 ^ (0, j!1 - 1))")
            ((""
              (case-replace
               "fs!1 = fs!1 ^ (0, j!1 - 1) o #(fs!1(j!1)) o fs!1 ^ (j!1 + 1, length(fs!1) - 1)"
               :hide? T)
              (("1" (expand "finseq_appl")
                (("1" (rewrite "Product_fs_o")
                  (("1" (rewrite "Product_fs_o")
                    (("1" (rewrite "product_fs_1")
                      (("1" (expand "FS!3")
                        (("1" (expand "FS!2")
                          (("1" (expand "FS!1")
                            (("1" (lemma "fullset_is_ring")
                              (("1"
                                (expand "ring?")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (hide (-1 -2 -4 -5))
                                    (("1"
                                      (expand "associative?")
                                      (("1"
                                        (expand "restrict")
                                        (("1"
                                          (inst?)
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (expand "fullset")
                                            (("2" (propax) nil nil))
                                            nil)
                                           ("3"
                                            (assert)
                                            (("3"
                                              (expand "fullset")
                                              (("3" (propax) nil nil))
                                              nil))
                                            nil)
                                           ("4"
                                            (expand "fullset")
                                            (("4" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "finseq_appl")
                (("2" (decompose-equality 1)
                  (("1" (grind) nil nil)
                   ("2" (decompose-equality 1)
                    (("2" (expand* "^" "o")
                      (("2" (lift-if)
                        (("2" (prop)
                          (("1" (grind) nil nil) ("2" (grind) nil nil)
                           ("3" (grind) nil nil) ("4" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (|#| const-decl "finite_sequence[T]" set2seq structures)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (O const-decl "finseq" finite_sequences nil)
    (Product_fs_o formula-decl nil product_finseq_sets_ring nil)
    (product_fs_1 formula-decl nil product_finseq_sets_ring nil) nil
    (fullset_is_ring formula-decl nil cartesian_product_quot_ring nil)
    (+ formal-const-decl "[T, T -> T]" product_finseq_sets_ring nil)
    (* formal-const-decl "[T, T -> T]" product_finseq_sets_ring nil)
    (zero formal-const-decl "T" product_finseq_sets_ring nil)
    (associative? const-decl "bool" operator_defs nil)
    (set type-eq-decl nil sets nil) (fullset const-decl "set" sets nil)
    nil nil (restrict const-decl "R" restrict nil)
    (ring? const-decl "bool" ring_def nil) nil nil
    (product_fs_rec def-decl "T" product_finseq_sets_ring nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (< const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (^ const-decl "finseq" finite_sequences nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (product_fs const-decl "T" product_finseq_sets_ring nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-nonempty-type-decl nil product_finseq_sets_ring nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (product_fs_rec_in_ring 0
  (product_fs_rec_in_ring-1 nil 3782721749
   ("" (skosimp)
    (("" (case "length(fs!1) = 0")
      (("1" (hide -2) (("1" (skosimp) (("1" (assert) nil nil)) nil))
        nil)
       ("2" (induct "n" :fnum 2)
        (("1" (assert)
          (("1" (expand "finseq_appl")
            (("1" (expand "product_fs_rec") (("1" (inst?) nil nil))
              nil))
            nil))
          nil)
         ("2" (skosimp)
          (("2" (expand "finseq_appl")
            (("2" (expand "member")
              (("2" (expand "product_fs_rec" 1)
                (("2" (inst?)
                  (("2" (typepred "R!1")
                    (("2" (expand "ring?")
                      (("2" (flatten)
                        (("2" (hide (-1 -3 -4 -5 -6 2))
                          (("2" (expand "star_closed?")
                            (("2" (expand "member")
                              (("2" (inst?) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finseq type-eq-decl nil finite_sequences nil)
    (T formal-nonempty-type-decl nil product_finseq_sets_ring nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil) nil nil nil
    (star_closed? const-decl "bool" groupoid_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (below_induction formula-decl nil bounded_nat_inductions nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (ring? const-decl "bool" ring_def nil)
    (zero formal-const-decl "T" product_finseq_sets_ring nil)
    (* formal-const-decl "[T, T -> T]" product_finseq_sets_ring nil)
    (+ formal-const-decl "[T, T -> T]" product_finseq_sets_ring nil)
    (product_fs_rec def-decl "T" product_finseq_sets_ring nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (pred type-eq-decl nil defined_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil))
   shostak))
 (product_fs_rec_in_each_TCC1 0
  (product_fs_rec_in_each_TCC1-1 nil 3782722261
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil product_finseq_sets_ring nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" product_finseq_sets_ring nil)
    (* formal-const-decl "[T, T -> T]" product_finseq_sets_ring nil)
    (zero formal-const-decl "T" product_finseq_sets_ring nil)
    (ring? const-decl "bool" ring_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (fsRI? const-decl "bool" ring_ideal_def nil)
    (fsI type-eq-decl nil ring_ideal_def nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (cartesian_product_n const-decl "set[finseq[T]]"
     cartesian_product_finite nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (right_ideal? const-decl "bool" ring_ideal_def nil)
    (right_swallow? const-decl "bool" ring_ideal_def nil)
    (left_ideal? const-decl "bool" ring_ideal_def nil)
    (left_swallow? const-decl "bool" ring_ideal_def nil)
    (subring? const-decl "bool" ring_def nil)
    (subset? const-decl "bool" sets nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (right_distributive? const-decl "bool" operator_defs_more nil)
    (left_distributive? const-decl "bool" operator_defs_more nil)
    (abelian_group? const-decl "bool" group_def nil)
    (commutative? const-decl "bool" operator_defs nil)
    (group? const-decl "bool" group_def nil)
    (inv_exists? const-decl "bool" group_def nil)
    (monoid? const-decl "bool" monoid_def nil)
    (associative? const-decl "bool" operator_defs nil)
    (monad? const-decl "bool" monad_def nil)
    (identity? const-decl "bool" operator_defs nil)
    (zero_plus formula-decl nil ring nil)
    (restrict const-decl "R" restrict nil)
    (plus_zero formula-decl nil ring nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (member const-decl "bool" sets nil)
    (R!1 skolem-const-decl "ring[T, +, *, zero]"
     product_finseq_sets_ring nil))
   nil
   (product_fs_rec_in_each subtype
    "(number_fields.-)(length(product_finseq_sets_ring.fsA), 1)"
    "below[length(fsx)]")))
 (product_fs_rec_in_each 0
  (product_fs_rec_in_each-1 nil 3782722275
   ("" (skolem 1 ("R" "_" "_" "_"))
    (("" (measure-induct+ "length(fsA)" "fsA")
      (("1" (skosimp)
        (("1" (expand "finseq_appl")
          (("1" (expand "member")
            (("1" (case "length(x!1) = 1")
              (("1" (hide -2)
                (("1" (typepred "i!1")
                  (("1" (replaces -2)
                    (("1" (assert)
                      (("1" (expand "product_fs_rec")
                        (("1" (case "i!1 = 0")
                          (("1" (hide -2)
                            (("1" (replaces -1)
                              (("1"
                                (typepred "fsx!1")
                                (("1"
                                  (expand "cartesian_product_n")
                                  (("1"
                                    (expand "finseq_appl")
                                    (("1"
                                      (expand "member")
                                      (("1"
                                        (flatten)
                                        (("1" (inst?) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "fsx!1")
                (("2" (expand "cartesian_product_n")
                  (("2" (expand "finseq_appl")
                    (("2" (expand "member")
                      (("2" (flatten)
                        (("2" (lemma "product_fs_split")
                          (("2" (inst?)
                            (("1" (assert)
                              (("1"
                                (expand "product_fs")
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (hide (-2 -4 -5))
                                      (("1"
                                        (expand "^")
                                        (("1"
                                          (expand "min")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (replace -2 -1)
                                      (("2"
                                        (replaces -1)
                                        (("2"
                                          (inst
                                           -3
                                           "x!1 ^ (0, length(x!1) - 2)")
                                          (("1"
                                            (case-replace
                                             "i!1 = length(x!1) - 1")
                                            (("1"
                                              (hide -2)
                                              (("1"
                                                (typepred "x!1")
                                                (("1"
                                                  (expand "fsRI?")
                                                  (("1"
                                                    (expand
                                                     "finseq_appl")
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (expand
                                                           "ideal?")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (hide -1)
                                                              (("1"
                                                                (expand
                                                                 "right_ideal?")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (hide
                                                                     -1)
                                                                    (("1"
                                                                      (expand
                                                                       "right_swallow?")
                                                                      (("1"
                                                                        (expand
                                                                         "member")
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (hide
                                                                             (-3
                                                                              5))
                                                                            (("1"
                                                                              (expand
                                                                               "^"
                                                                               1
                                                                               2)
                                                                              (("1"
                                                                                (expand
                                                                                 "min")
                                                                                (("1"
                                                                                  (lemma
                                                                                   "product_fs_rec_in_ring")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "finseq_appl")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "member")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "R"
                                                                                         "^[T](fsx!1, (0, length(x!1) - 2))")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (prop)
                                                                                            (("1"
                                                                                              (inst?)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide-all-but
                                                                                               1)
                                                                                              (("2"
                                                                                                (skosimp)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "^")
                                                                                                  (("2"
                                                                                                    (typepred
                                                                                                     "fsx!1")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "cartesian_product_n")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "finseq_appl")
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "member")
                                                                                                          (("2"
                                                                                                            (inst?)
                                                                                                            (("2"
                                                                                                              (typepred
                                                                                                               "x!1")
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "fsRI?")
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "finseq_appl")
                                                                                                                  (("2"
                                                                                                                    (inst?)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "ideal?")
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "left_ideal?")
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "subring?")
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "subset?")
                                                                                                                            (("2"
                                                                                                                              (flatten)
                                                                                                                              (("2"
                                                                                                                                (inst?)
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             (-3
                                                                              5))
                                                                            (("2"
                                                                              (expand
                                                                               "^")
                                                                              (("2"
                                                                                (expand
                                                                                 "min")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (inst
                                               -3
                                               "i!1"
                                               "fsx!1 ^ (0, length(x!1) - 2)")
                                              (("1"
                                                (expand "^" -3 (1 2 4))
                                                (("1"
                                                  (expand "^" 4 2)
                                                  (("1"
                                                    (expand "min")
                                                    (("1"
                                                      (inst
                                                       -2
                                                       "length(x!1) - 1")
                                                      (("1"
                                                        (typepred
                                                         "x!1")
                                                        (("1"
                                                          (expand
                                                           "fsRI?")
                                                          (("1"
                                                            (expand
                                                             "finseq_appl")
                                                            (("1"
                                                              (inst-cp
                                                               -1
                                                               "i!1")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "length(x!1) - 1")
                                                                (("1"
                                                                  (expand
                                                                   "ideal?")
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (hide
                                                                       (-2
                                                                        -4))
                                                                      (("1"
                                                                        (expand
                                                                         "left_ideal?")
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (hide
                                                                             (-2
                                                                              -3))
                                                                            (("1"
                                                                              (expand
                                                                               "subring?")
                                                                              (("1"
                                                                                (expand
                                                                                 "left_swallow?")
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (hide
                                                                                     -2)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "subset?")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "member")
                                                                                        (("1"
                                                                                          (inst?)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (inst?)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 5)
                                                (("2"
                                                  (expand
                                                   "cartesian_product_n")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (prop)
                                                      (("1"
                                                        (expand "^")
                                                        (("1"
                                                          (expand
                                                           "min")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand "^")
                                                        (("2"
                                                          (expand
                                                           "min")
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (expand
                                                         "finseq_appl")
                                                        (("3"
                                                          (skosimp)
                                                          (("3"
                                                            (expand
                                                             "^")
                                                            (("3"
                                                              (expand
                                                               "min")
                                                              (("3"
                                                                (inst?)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (hide 5)
                                                (("3"
                                                  (expand "^")
                                                  (("3"
                                                    (expand "min")
                                                    (("3"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 4)
                                            (("2"
                                              (prop)
                                              (("1"
                                                (expand "fsRI?")
                                                (("1"
                                                  (expand
                                                   "finseq_appl")
                                                  (("1"
                                                    (skosimp)
                                                    (("1"
                                                      (expand "^")
                                                      (("1"
                                                        (typepred
                                                         "x!1")
                                                        (("1"
                                                          (expand
                                                           "fsRI?")
                                                          (("1"
                                                            (expand
                                                             "finseq_appl")
                                                            (("1"
                                                              (inst?)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "^")
                                                (("2"
                                                  (expand "min")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (typepred "fsx!1")
          (("2" (expand "cartesian_product_n") (("2" (assert) nil nil))
            nil))
          nil))
        nil)
       ("3" (hide 2)
        (("3" (typepred "fsx!1")
          (("3" (expand "cartesian_product_n") (("3" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-nonempty-type-decl nil product_finseq_sets_ring nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (+ formal-const-decl "[T, T -> T]" product_finseq_sets_ring nil)
    (* formal-const-decl "[T, T -> T]" product_finseq_sets_ring nil)
    (zero formal-const-decl "T" product_finseq_sets_ring nil)
    (ring? const-decl "bool" ring_def nil)
    (fsRI? const-decl "bool" ring_ideal_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (fsI type-eq-decl nil ring_ideal_def nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (cartesian_product_n const-decl "set[finseq[T]]"
     cartesian_product_finite nil)
    nil (member const-decl "bool" sets nil)
    (product_fs_rec def-decl "T" product_finseq_sets_ring nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (TRUE const-decl "bool" booleans nil)
    (product_fs_split formula-decl nil product_finseq_sets_ring nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (left_swallow? const-decl "bool" ring_ideal_def nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (right_swallow? const-decl "bool" ring_ideal_def nil)
    (product_fs_rec_in_ring formula-decl nil product_finseq_sets_ring
     nil)
    (subring? const-decl "bool" ring_def nil)
    (subset? const-decl "bool" sets nil)
    (left_ideal? const-decl "bool" ring_ideal_def nil)
    (right_ideal? const-decl "bool" ring_ideal_def nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^ const-decl "finseq" finite_sequences nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (product_fs const-decl "T" product_finseq_sets_ring nil) nil nil
    (> const-decl "bool" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (Intersection_of_ideals_is_ideal 0
  (Intersection_of_ideals_is_ideal-2 nil 3807095656
   ("" (skosimp*)
    (("" (expand "ideal?")
      (("" (prop)
        (("1" (expand "left_ideal?")
          (("1" (prop)
            (("1" (expand "subring?")
              (("1" (prop)
                (("1" (expand "subset?")
                  (("1" (skosimp)
                    (("1" (expand "member")
                      (("1" (expand "Intersection")
                        (("1" (lemma "seq2set_lem[set[T]]")
                          (("1" (inst?)
                            (("1" (expand "finseq_appl")
                              (("1"
                                (inst -1 "0")
                                (("1"
                                  (inst -2 "fsA!1`seq(0)")
                                  (("1"
                                    (hide -1)
                                    (("1"
                                      (typepred "fsA!1")
                                      (("1"
                                        (expand "fsRI?")
                                        (("1"
                                          (expand "finseq_appl")
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (expand "ideal?")
                                              (("1"
                                                (expand "left_ideal?")
                                                (("1"
                                                  (expand "subring?")
                                                  (("1"
                                                    (expand "subset?")
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (hide
                                                         (-2 -3 -4 1))
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "ring?")
                  (("2" (prop)
                    (("1" (expand "abelian_group?")
                      (("1" (prop)
                        (("1" (expand "group?")
                          (("1" (prop)
                            (("1" (expand "monoid?")
                              (("1"
                                (prop)
                                (("1"
                                  (expand "monad?")
                                  (("1"
                                    (prop)
                                    (("1"
                                      (expand "star_closed?")
                                      (("1"
                                        (skosimp)
                                        (("1"
                                          (expand "member")
                                          (("1"
                                            (typepred "x!1" "y!1")
                                            (("1"
                                              (expand "Intersection")
                                              (("1"
                                                (skosimp)
                                                (("1"
                                                  (inst -1 "a!1")
                                                  (("1"
                                                    (inst -2 "a!1")
                                                    (("1"
                                                      (typepred "a!1")
                                                      (("1"
                                                        (expand
                                                         "seq2set")
                                                        (("1"
                                                          (expand
                                                           "finseq_appl")
                                                          (("1"
                                                            (skosimp)
                                                            (("1"
                                                              (replace
                                                               -1
                                                               (- 1)
                                                               rl)
                                                              (("1"
                                                                (typepred
                                                                 "fsA!1")
                                                                (("1"
                                                                  (expand
                                                                   "fsRI?")
                                                                  (("1"
                                                                    (expand
                                                                     "finseq_appl")
                                                                    (("1"
                                                                      (inst?)
                                                                      (("1"
                                                                        (expand
                                                                         "ideal?")
                                                                        (("1"
                                                                          (expand
                                                                           "left_ideal?")
                                                                          (("1"
                                                                            (expand
                                                                             "subring?")
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (hide
                                                                                 (-1
                                                                                  -3
                                                                                  -4))
                                                                                (("1"
                                                                                  (expand
                                                                                   "ring?")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "abelian_group?")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "group?")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "monoid?")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "monad?")
                                                                                          (("1"
                                                                                            (prop)
                                                                                            (("1"
                                                                                              (hide-all-but
                                                                                               (-1
                                                                                                -12
                                                                                                -13
                                                                                                2))
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "star_closed?")
                                                                                                (("1"
                                                                                                  (inst?)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "member")
                                                                                                    (("1"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "member")
                                      (("2"
                                        (expand "Intersection")
                                        (("2"
                                          (skosimp)
                                          (("2"
                                            (typepred "a!1")
                                            (("2"
                                              (expand "seq2set")
                                              (("2"
                                                (expand "finseq_appl")
                                                (("2"
                                                  (skosimp)
                                                  (("2"
                                                    (replace -1 1 rl)
                                                    (("2"
                                                      (typepred
                                                       "fsA!1")
                                                      (("2"
                                                        (expand
                                                         "fsRI?")
                                                        (("2"
                                                          (expand
                                                           "finseq_appl")
                                                          (("2"
                                                            (inst?)
                                                            (("2"
                                                              (expand
                                                               "ideal?")
                                                              (("2"
                                                                (expand
                                                                 "left_ideal?")
                                                                (("2"
                                                                  (expand
                                                                   "subring?")
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (hide
                                                                       (-1
                                                                        -3
                                                                        -4))
                                                                      (("2"
                                                                        (expand
                                                                         "ring?")
                                                                        (("2"
                                                                          (expand
                                                                           "abelian_group?")
                                                                          (("2"
                                                                            (expand
                                                                             "group?")
                                                                            (("2"
                                                                              (expand
                                                                               "monoid?")
                                                                              (("2"
                                                                                (expand
                                                                                 "monad?")
                                                                                (("2"
                                                                                  (prop)
                                                                                  (("2"
                                                                                    (hide-all-but
                                                                                     (-2
                                                                                      -11
                                                                                      2))
                                                                                    (("2"
                                                                                      (expand
                                                                                       "member")
                                                                                      (("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (expand "identity?")
                                      (("3"
                                        (expand "restrict")
                                        (("3"
                                          (skosimp)
                                          (("3"
                                            (rewrite "plus_zero")
                                            (("3"
                                              (rewrite "zero_plus")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "associative?")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "restrict")
                                      (("2"
                                        (skosimp)
                                        (("2"
                                          (typepred "x!1" "y!1" "z!1")
                                          (("2"
                                            (expand "Intersection")
                                            (("2"
                                              (lemma
                                               "seq2set_lem[set[T]]")
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (expand
                                                   "finseq_appl")
                                                  (("2"
                                                    (inst -1 "0")
                                                    (("1"
                                                      (inst
                                                       -2
                                                       "fsA!1`seq(0)")
                                                      (("1"
                                                        (inst
                                                         -3
                                                         "fsA!1`seq(0)")
                                                        (("1"
                                                          (inst
                                                           -4
                                                           "fsA!1`seq(0)")
                                                          (("1"
                                                            (hide -1)
                                                            (("1"
                                                              (typepred
                                                               "fsA!1")
                                                              (("1"
                                                                (expand
                                                                 "fsRI?")
                                                                (("1"
                                                                  (expand
                                                                   "finseq_appl")
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (expand
                                                                       "ideal?")
                                                                      (("1"
                                                                        (expand
                                                                         "left_ideal?")
                                                                        (("1"
                                                                          (expand
                                                                           "subring?")
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (hide
                                                                               (-1
                                                                                -3
                                                                                -4))
                                                                              (("1"
                                                                                (expand
                                                                                 "ring?")
                                                                                (("1"
                                                                                  (expand
                                                                                   "abelian_group?")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "group?")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "monoid?")
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (hide
                                                                                           (-1
                                                                                            -3
                                                                                            -4
                                                                                            -5
                                                                                            -6
                                                                                            -7
                                                                                            -8
                                                                                            1))
                                                                                          (("1"
                                                                                            (expand
                                                                                             "associative?")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "restrict")
                                                                                              (("1"
                                                                                                (inst?)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "inv_exists?")
                              (("2"
                                (skosimp)
                                (("2"
                                  (typepred "x!1")
                                  (("2"
                                    (inst 1 "inv(x!1)")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (expand "Intersection")
                                      (("2"
                                        (skosimp)
                                        (("2"
                                          (typepred "a!1")
                                          (("2"
                                            (expand "seq2set")
                                            (("2"
                                              (expand "finseq_appl")
                                              (("2"
                                                (skosimp)
                                                (("2"
                                                  (inst?)
                                                  (("1"
                                                    (replace -1 1 rl)
                                                    (("1"
                                                      (hide -1)
                                                      (("1"
                                                        (typepred
                                                         "fsA!1")
                                                        (("1"
                                                          (expand
                                                           "fsRI?")
                                                          (("1"
                                                            (expand
                                                             "finseq_appl")
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (expand
                                                                 "ideal?")
                                                                (("1"
                                                                  (expand
                                                                   "left_ideal?")
                                                                  (("1"
                                                                    (expand
                                                                     "subring?")
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (hide
                                                                         (-1
                                                                          -3
                                                                          -4))
                                                                        (("1"
                                                                          (expand
                                                                           "ring?")
                                                                          (("1"
                                                                            (expand
                                                                             "abelian_group?")
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (hide
                                                                                 (-2
                                                                                  -3
                                                                                  -4
                                                                                  -5
                                                                                  -6
                                                                                  1))
                                                                                (("1"
                                                                                  (lemma
                                                                                   "inv_in")
                                                                                  (("1"
                                                                                    (inst?)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand "seq2set")
                                                    (("2"
                                                      (expand
                                                       "finseq_appl")
                                                      (("2"
                                                        (inst?)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "commutative?")
                          (("2" (expand "restrict")
                            (("2" (skosimp)
                              (("2"
                                (typepred "x!1" "y!1")
                                (("2"
                                  (expand "Intersection")
                                  (("2"
                                    (lemma "seq2set_lem[set[T]]")
                                    (("2"
                                      (inst?)
                                      (("2"
                                        (expand "finseq_appl")
                                        (("2"
                                          (inst -1 "0")
                                          (("1"
                                            (inst -2 "fsA!1`seq(0)")
                                            (("1"
                                              (inst -3 "fsA!1`seq(0)")
                                              (("1"
                                                (hide -1)
                                                (("1"
                                                  (typepred "fsA!1")
                                                  (("1"
                                                    (expand "fsRI?")
                                                    (("1"
                                                      (expand
                                                       "finseq_appl")
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (expand
                                                           "ideal?")
                                                          (("1"
                                                            (expand
                                                             "left_ideal?")
                                                            (("1"
                                                              (expand
                                                               "subring?")
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (hide
                                                                   (-1
                                                                    -3
                                                                    -4))
                                                                  (("1"
                                                                    (expand
                                                                     "ring?")
                                                                    (("1"
                                                                      (expand
                                                                       "abelian_group?")
                                                                      (("1"
                                                                        (prop)
                                                                        (("1"
                                                                          (hide
                                                                           (-1
                                                                            -3
                                                                            -4
                                                                            -5
                                                                            -6
                                                                            1))
                                                                          (("1"
                                                                            (expand
                                                                             "commutative?")
                                                                            (("1"
                                                                              (expand
                                                                               "restrict")
                                                                              (("1"
                                                                                (inst?)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "star_closed?")
                      (("2" (skosimp)
                        (("2" (expand "member")
                          (("2" (typepred "x!1" "y!1")
                            (("2" (expand "Intersection")
                              (("2"
                                (skosimp)
                                (("2"
                                  (inst -1 "a!1")
                                  (("2"
                                    (inst -2 "a!1")
                                    (("2"
                                      (typepred "a!1")
                                      (("2"
                                        (expand "seq2set")
                                        (("2"
                                          (expand "finseq_appl")
                                          (("2"
                                            (skosimp)
                                            (("2"
                                              (replace -1 -2 rl)
                                              (("2"
                                                (replace -1 -3 rl)
                                                (("2"
                                                  (replace -1 1 rl)
                                                  (("2"
                                                    (hide -1)
                                                    (("2"
                                                      (typepred
                                                       "fsA!1")
                                                      (("2"
                                                        (expand
                                                         "fsRI?")
                                                        (("2"
                                                          (expand
                                                           "finseq_appl")
                                                          (("2"
                                                            (inst?)
                                                            (("2"
                                                              (expand
                                                               "ideal?")
                                                              (("2"
                                                                (expand
                                                                 "left_ideal?")
                                                                (("2"
                                                                  (expand
                                                                   "subring?")
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (hide
                                                                       (-1
                                                                        -3
                                                                        -4))
                                                                      (("2"
                                                                        (expand
                                                                         "ring?")
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (hide
                                                                             (-1
                                                                              -3
                                                                              -4
                                                                              -5
                                                                              1))
                                                                            (("2"
                                                                              (expand
                                                                               "star_closed?")
                                                                              (("2"
                                                                                (inst?)
                                                                                (("2"
                                                                                  (expand
                                                                                   "member")
                                                                                  (("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (expand "associative?")
                      (("3" (expand "restrict")
                        (("3" (skosimp)
                          (("3" (typepred "x!1" "y!1" "z!1")
                            (("3" (expand "Intersection")
                              (("3"
                                (lemma "seq2set_lem[set[T]]")
                                (("3"
                                  (inst?)
                                  (("3"
                                    (expand "finseq_appl")
                                    (("3"
                                      (inst -1 "0")
                                      (("1"
                                        (inst -2 "fsA!1`seq(0)")
                                        (("1"
                                          (inst -3 "fsA!1`seq(0)")
                                          (("1"
                                            (inst -4 "fsA!1`seq(0)")
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (typepred "fsA!1")
                                                (("1"
                                                  (expand "fsRI?")
                                                  (("1"
                                                    (expand
                                                     "finseq_appl")
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (expand
                                                         "ideal?")
                                                        (("1"
                                                          (expand
                                                           "left_ideal?")
                                                          (("1"
                                                            (expand
                                                             "subring?")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (hide
                                                                 (-1
                                                                  -3
                                                                  -4))
                                                                (("1"
                                                                  (expand
                                                                   "ring?")
                                                                  (("1"
                                                                    (prop)
                                                                    (("1"
                                                                      (hide
                                                                       (-1
                                                                        -2
                                                                        -4
                                                                        -5
                                                                        1))
                                                                      (("1"
                                                                        (expand
                                                                         "associative?")
                                                                        (("1"
                                                                          (expand
                                                                           "restrict")
                                                                          (("1"
                                                                            (inst?)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("4" (expand "left_distributive?")
                      (("4" (expand "restrict")
                        (("4" (skosimp)
                          (("4" (typepred "x!1" "y!1" "z!1")
                            (("4" (expand "Intersection")
                              (("4"
                                (lemma "seq2set_lem[set[T]]")
                                (("4"
                                  (inst?)
                                  (("4"
                                    (expand "finseq_appl")
                                    (("4"
                                      (inst -1 "0")
                                      (("1"
                                        (inst -2 "fsA!1`seq(0)")
                                        (("1"
                                          (inst -3 "fsA!1`seq(0)")
                                          (("1"
                                            (inst -4 "fsA!1`seq(0)")
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (typepred "fsA!1")
                                                (("1"
                                                  (expand "fsRI?")
                                                  (("1"
                                                    (expand
                                                     "finseq_appl")
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (expand
                                                         "ideal?")
                                                        (("1"
                                                          (expand
                                                           "left_ideal?")
                                                          (("1"
                                                            (expand
                                                             "subring?")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (hide
                                                                 (-1
                                                                  -3
                                                                  -4))
                                                                (("1"
                                                                  (expand
                                                                   "ring?")
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (hide
                                                                       (-1
                                                                        -2
                                                                        -3
                                                                        -5))
                                                                      (("1"
                                                                        (expand
                                                                         "left_distributive?")
                                                                        (("1"
                                                                          (expand
                                                                           "restrict")
                                                                          (("1"
                                                                            (inst?)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("5" (expand "right_distributive?")
                      (("5" (expand "restrict")
                        (("5" (skosimp)
                          (("5" (typepred "x!1" "y!1" "z!1")
                            (("5" (expand "Intersection")
                              (("5"
                                (lemma "seq2set_lem[set[T]]")
                                (("5"
                                  (inst?)
                                  (("5"
                                    (expand "finseq_appl")
                                    (("5"
                                      (inst -1 "0")
                                      (("1"
                                        (inst -2 "fsA!1`seq(0)")
                                        (("1"
                                          (inst -3 "fsA!1`seq(0)")
                                          (("1"
                                            (inst -4 "fsA!1`seq(0)")
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (typepred "fsA!1")
                                                (("1"
                                                  (expand "fsRI?")
                                                  (("1"
                                                    (expand
                                                     "finseq_appl")
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (expand
                                                         "ideal?")
                                                        (("1"
                                                          (expand
                                                           "left_ideal?")
                                                          (("1"
                                                            (expand
                                                             "subring?")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (hide
                                                                 (-1
                                                                  -3
                                                                  -4))
                                                                (("1"
                                                                  (expand
                                                                   "ring?")
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (hide
                                                                       (-1
                                                                        -2
                                                                        -3
                                                                        -4))
                                                                      (("1"
                                                                        (expand
                                                                         "right_distributive?")
                                                                        (("1"
                                                                          (expand
                                                                           "restrict")
                                                                          (("1"
                                                                            (inst?)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "left_swallow?")
              (("2" (skosimp)
                (("2" (expand "member")
                  (("2" (typepred "x!1" "r!1")
                    (("2" (expand "Intersection")
                      (("2" (skosimp)
                        (("2" (typepred "a!1")
                          (("2" (expand "seq2set")
                            (("2" (expand "finseq_appl")
                              (("2"
                                (skosimp)
                                (("2"
                                  (inst?)
                                  (("1"
                                    (replace -1 1 rl)
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (typepred "fsA!1")
                                        (("1"
                                          (expand "fsRI?")
                                          (("1"
                                            (expand "finseq_appl")
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (expand "ideal?")
                                                (("1"
                                                  (expand
                                                   "left_ideal?")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (hide (-1 -3 1))
                                                      (("1"
                                                        (expand
                                                         "left_swallow?")
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (expand
                                                             "member")
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "seq2set")
                                    (("2"
                                      (expand "finseq_appl")
                                      (("2" (inst?) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "right_ideal?")
          (("2" (prop)
            (("1" (expand "subring?")
              (("1" (prop)
                (("1" (expand "subset?")
                  (("1" (skosimp)
                    (("1" (expand "member")
                      (("1" (expand "Intersection")
                        (("1" (lemma "seq2set_lem[set[T]]")
                          (("1" (inst?)
                            (("1" (expand "finseq_appl")
                              (("1"
                                (inst -1 "0")
                                (("1"
                                  (inst -2 "fsA!1`seq(0)")
                                  (("1"
                                    (hide -1)
                                    (("1"
                                      (typepred "fsA!1")
                                      (("1"
                                        (expand "fsRI?")
                                        (("1"
                                          (expand "finseq_appl")
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (expand "ideal?")
                                              (("1"
                                                (expand "left_ideal?")
                                                (("1"
                                                  (expand "subring?")
                                                  (("1"
                                                    (expand "subset?")
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (hide
                                                         (-2 -3 -4 1))
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "ring?")
                  (("2" (prop)
                    (("1" (expand "abelian_group?")
                      (("1" (prop)
                        (("1" (expand "group?")
                          (("1" (prop)
                            (("1" (expand "monoid?")
                              (("1"
                                (prop)
                                (("1"
                                  (expand "monad?")
                                  (("1"
                                    (prop)
                                    (("1"
                                      (expand "star_closed?")
                                      (("1"
                                        (skosimp)
                                        (("1"
                                          (expand "member")
                                          (("1"
                                            (typepred "x!1" "y!1")
                                            (("1"
                                              (expand "Intersection")
                                              (("1"
                                                (skosimp)
                                                (("1"
                                                  (inst -1 "a!1")
                                                  (("1"
                                                    (inst -2 "a!1")
                                                    (("1"
                                                      (typepred "a!1")
                                                      (("1"
                                                        (expand
                                                         "seq2set")
                                                        (("1"
                                                          (expand
                                                           "finseq_appl")
                                                          (("1"
                                                            (skosimp)
                                                            (("1"
                                                              (replace
                                                               -1
                                                               (- 1)
                                                               rl)
                                                              (("1"
                                                                (typepred
                                                                 "fsA!1")
                                                                (("1"
                                                                  (expand
                                                                   "fsRI?")
                                                                  (("1"
                                                                    (expand
                                                                     "finseq_appl")
                                                                    (("1"
                                                                      (inst?)
                                                                      (("1"
                                                                        (expand
                                                                         "ideal?")
                                                                        (("1"
                                                                          (expand
                                                                           "left_ideal?")
                                                                          (("1"
                                                                            (expand
                                                                             "subring?")
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (hide
                                                                                 (-1
                                                                                  -3
                                                                                  -4))
                                                                                (("1"
                                                                                  (expand
                                                                                   "ring?")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "abelian_group?")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "group?")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "monoid?")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "monad?")
                                                                                          (("1"
                                                                                            (prop)
                                                                                            (("1"
                                                                                              (hide-all-but
                                                                                               (-1
                                                                                                -12
                                                                                                -13
                                                                                                2))
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "star_closed?")
                                                                                                (("1"
                                                                                                  (inst?)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "member")
                                                                                                    (("1"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "member")
                                      (("2"
                                        (expand "Intersection")
                                        (("2"
                                          (skosimp)
                                          (("2"
                                            (typepred "a!1")
                                            (("2"
                                              (expand "seq2set")
                                              (("2"
                                                (expand "finseq_appl")
                                                (("2"
                                                  (skosimp)
                                                  (("2"
                                                    (replace -1 1 rl)
                                                    (("2"
                                                      (typepred
                                                       "fsA!1")
                                                      (("2"
                                                        (expand
                                                         "fsRI?")
                                                        (("2"
                                                          (expand
                                                           "finseq_appl")
                                                          (("2"
                                                            (inst?)
                                                            (("2"
                                                              (expand
                                                               "ideal?")
                                                              (("2"
                                                                (expand
                                                                 "left_ideal?")
                                                                (("2"
                                                                  (expand
                                                                   "subring?")
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (hide
                                                                       (-1
                                                                        -3
                                                                        -4))
                                                                      (("2"
                                                                        (expand
                                                                         "ring?")
                                                                        (("2"
                                                                          (expand
                                                                           "abelian_group?")
                                                                          (("2"
                                                                            (expand
                                                                             "group?")
                                                                            (("2"
                                                                              (expand
                                                                               "monoid?")
                                                                              (("2"
                                                                                (expand
                                                                                 "monad?")
                                                                                (("2"
                                                                                  (prop)
                                                                                  (("2"
                                                                                    (hide-all-but
                                                                                     (-2
                                                                                      -11
                                                                                      2))
                                                                                    (("2"
                                                                                      (expand
                                                                                       "member")
                                                                                      (("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (expand "identity?")
                                      (("3"
                                        (expand "restrict")
                                        (("3"
                                          (skosimp)
                                          (("3"
                                            (rewrite "plus_zero")
                                            (("3"
                                              (rewrite "zero_plus")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "associative?")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "restrict")
                                      (("2"
                                        (skosimp)
                                        (("2"
                                          (typepred "x!1" "y!1" "z!1")
                                          (("2"
                                            (expand "Intersection")
                                            (("2"
                                              (lemma
                                               "seq2set_lem[set[T]]")
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (expand
                                                   "finseq_appl")
                                                  (("2"
                                                    (inst -1 "0")
                                                    (("1"
                                                      (inst
                                                       -2
                                                       "fsA!1`seq(0)")
                                                      (("1"
                                                        (inst
                                                         -3
                                                         "fsA!1`seq(0)")
                                                        (("1"
                                                          (inst
                                                           -4
                                                           "fsA!1`seq(0)")
                                                          (("1"
                                                            (hide -1)
                                                            (("1"
                                                              (typepred
                                                               "fsA!1")
                                                              (("1"
                                                                (expand
                                                                 "fsRI?")
                                                                (("1"
                                                                  (expand
                                                                   "finseq_appl")
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (expand
                                                                       "ideal?")
                                                                      (("1"
                                                                        (expand
                                                                         "left_ideal?")
                                                                        (("1"
                                                                          (expand
                                                                           "subring?")
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (hide
                                                                               (-1
                                                                                -3
                                                                                -4))
                                                                              (("1"
                                                                                (expand
                                                                                 "ring?")
                                                                                (("1"
                                                                                  (expand
                                                                                   "abelian_group?")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "group?")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "monoid?")
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (hide
                                                                                           (-1
                                                                                            -3
                                                                                            -4
                                                                                            -5
                                                                                            -6
                                                                                            -7
                                                                                            -8
                                                                                            1))
                                                                                          (("1"
                                                                                            (expand
                                                                                             "associative?")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "restrict")
                                                                                              (("1"
                                                                                                (inst?)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "inv_exists?")
                              (("2"
                                (skosimp)
                                (("2"
                                  (typepred "x!1")
                                  (("2"
                                    (inst 1 "inv(x!1)")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (expand "Intersection")
                                      (("2"
                                        (skosimp)
                                        (("2"
                                          (typepred "a!1")
                                          (("2"
                                            (expand "seq2set")
                                            (("2"
                                              (expand "finseq_appl")
                                              (("2"
                                                (skosimp)
                                                (("2"
                                                  (inst?)
                                                  (("1"
                                                    (replace -1 1 rl)
                                                    (("1"
                                                      (hide -1)
                                                      (("1"
                                                        (typepred
                                                         "fsA!1")
                                                        (("1"
                                                          (expand
                                                           "fsRI?")
                                                          (("1"
                                                            (expand
                                                             "finseq_appl")
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (expand
                                                                 "ideal?")
                                                                (("1"
                                                                  (expand
                                                                   "left_ideal?")
                                                                  (("1"
                                                                    (expand
                                                                     "subring?")
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (hide
                                                                         (-1
                                                                          -3
                                                                          -4))
                                                                        (("1"
                                                                          (expand
                                                                           "ring?")
                                                                          (("1"
                                                                            (expand
                                                                             "abelian_group?")
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (hide
                                                                                 (-2
                                                                                  -3
                                                                                  -4
                                                                                  -5
                                                                                  -6
                                                                                  1))
                                                                                (("1"
                                                                                  (lemma
                                                                                   "inv_in")
                                                                                  (("1"
                                                                                    (inst?)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand "seq2set")
                                                    (("2"
                                                      (expand
                                                       "finseq_appl")
                                                      (("2"
                                                        (inst?)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "commutative?")
                          (("2" (expand "restrict")
                            (("2" (skosimp)
                              (("2"
                                (typepred "x!1" "y!1")
                                (("2"
                                  (expand "Intersection")
                                  (("2"
                                    (lemma "seq2set_lem[set[T]]")
                                    (("2"
                                      (inst?)
                                      (("2"
                                        (expand "finseq_appl")
                                        (("2"
                                          (inst -1 "0")
                                          (("1"
                                            (inst -2 "fsA!1`seq(0)")
                                            (("1"
                                              (inst -3 "fsA!1`seq(0)")
                                              (("1"
                                                (hide -1)
                                                (("1"
                                                  (typepred "fsA!1")
                                                  (("1"
                                                    (expand "fsRI?")
                                                    (("1"
                                                      (expand
                                                       "finseq_appl")
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (expand
                                                           "ideal?")
                                                          (("1"
                                                            (expand
                                                             "left_ideal?")
                                                            (("1"
                                                              (expand
                                                               "subring?")
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (hide
                                                                   (-1
                                                                    -3
                                                                    -4))
                                                                  (("1"
                                                                    (expand
                                                                     "ring?")
                                                                    (("1"
                                                                      (expand
                                                                       "abelian_group?")
                                                                      (("1"
                                                                        (prop)
                                                                        (("1"
                                                                          (hide
                                                                           (-1
                                                                            -3
                                                                            -4
                                                                            -5
                                                                            -6
                                                                            1))
                                                                          (("1"
                                                                            (expand
                                                                             "commutative?")
                                                                            (("1"
                                                                              (expand
                                                                               "restrict")
                                                                              (("1"
                                                                                (inst?)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "star_closed?")
                      (("2" (skosimp)
                        (("2" (expand "member")
                          (("2" (typepred "x!1" "y!1")
                            (("2" (expand "Intersection")
                              (("2"
                                (skosimp)
                                (("2"
                                  (inst -1 "a!1")
                                  (("2"
                                    (inst -2 "a!1")
                                    (("2"
                                      (typepred "a!1")
                                      (("2"
                                        (expand "seq2set")
                                        (("2"
                                          (expand "finseq_appl")
                                          (("2"
                                            (skosimp)
                                            (("2"
                                              (replace -1 -2 rl)
                                              (("2"
                                                (replace -1 -3 rl)
                                                (("2"
                                                  (replace -1 1 rl)
                                                  (("2"
                                                    (hide -1)
                                                    (("2"
                                                      (typepred
                                                       "fsA!1")
                                                      (("2"
                                                        (expand
                                                         "fsRI?")
                                                        (("2"
                                                          (expand
                                                           "finseq_appl")
                                                          (("2"
                                                            (inst?)
                                                            (("2"
                                                              (expand
                                                               "ideal?")
                                                              (("2"
                                                                (expand
                                                                 "left_ideal?")
                                                                (("2"
                                                                  (expand
                                                                   "subring?")
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (hide
                                                                       (-1
                                                                        -3
                                                                        -4))
                                                                      (("2"
                                                                        (expand
                                                                         "ring?")
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (hide
                                                                             (-1
                                                                              -3
                                                                              -4
                                                                              -5
                                                                              1))
                                                                            (("2"
                                                                              (expand
                                                                               "star_closed?")
                                                                              (("2"
                                                                                (inst?)
                                                                                (("2"
                                                                                  (expand
                                                                                   "member")
                                                                                  (("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (expand "associative?")
                      (("3" (expand "restrict")
                        (("3" (skosimp)
                          (("3" (typepred "x!1" "y!1" "z!1")
                            (("3" (expand "Intersection")
                              (("3"
                                (lemma "seq2set_lem[set[T]]")
                                (("3"
                                  (inst?)
                                  (("3"
                                    (expand "finseq_appl")
                                    (("3"
                                      (inst -1 "0")
                                      (("1"
                                        (inst -2 "fsA!1`seq(0)")
                                        (("1"
                                          (inst -3 "fsA!1`seq(0)")
                                          (("1"
                                            (inst -4 "fsA!1`seq(0)")
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (typepred "fsA!1")
                                                (("1"
                                                  (expand "fsRI?")
                                                  (("1"
                                                    (expand
                                                     "finseq_appl")
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (expand
                                                         "ideal?")
                                                        (("1"
                                                          (expand
                                                           "left_ideal?")
                                                          (("1"
                                                            (expand
                                                             "subring?")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (hide
                                                                 (-1
                                                                  -3
                                                                  -4))
                                                                (("1"
                                                                  (expand
                                                                   "ring?")
                                                                  (("1"
                                                                    (prop)
                                                                    (("1"
                                                                      (hide
                                                                       (-1
                                                                        -2
                                                                        -4
                                                                        -5
                                                                        1))
                                                                      (("1"
                                                                        (expand
                                                                         "associative?")
                                                                        (("1"
                                                                          (expand
                                                                           "restrict")
                                                                          (("1"
                                                                            (inst?)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("4" (expand "left_distributive?")
                      (("4" (expand "restrict")
                        (("4" (skosimp)
                          (("4" (typepred "x!1" "y!1" "z!1")
                            (("4" (expand "Intersection")
                              (("4"
                                (lemma "seq2set_lem[set[T]]")
                                (("4"
                                  (inst?)
                                  (("4"
                                    (expand "finseq_appl")
                                    (("4"
                                      (inst -1 "0")
                                      (("1"
                                        (inst -2 "fsA!1`seq(0)")
                                        (("1"
                                          (inst -3 "fsA!1`seq(0)")
                                          (("1"
                                            (inst -4 "fsA!1`seq(0)")
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (typepred "fsA!1")
                                                (("1"
                                                  (expand "fsRI?")
                                                  (("1"
                                                    (expand
                                                     "finseq_appl")
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (expand
                                                         "ideal?")
                                                        (("1"
                                                          (expand
                                                           "left_ideal?")
                                                          (("1"
                                                            (expand
                                                             "subring?")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (hide
                                                                 (-1
                                                                  -3
                                                                  -4))
                                                                (("1"
                                                                  (expand
                                                                   "ring?")
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (hide
                                                                       (-1
                                                                        -2
                                                                        -3
                                                                        -5))
                                                                      (("1"
                                                                        (expand
                                                                         "left_distributive?")
                                                                        (("1"
                                                                          (expand
                                                                           "restrict")
                                                                          (("1"
                                                                            (inst?)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("5" (expand "right_distributive?")
                      (("5" (expand "restrict")
                        (("5" (skosimp)
                          (("5" (typepred "x!1" "y!1" "z!1")
                            (("5" (expand "Intersection")
                              (("5"
                                (lemma "seq2set_lem[set[T]]")
                                (("5"
                                  (inst?)
                                  (("5"
                                    (expand "finseq_appl")
                                    (("5"
                                      (inst -1 "0")
                                      (("1"
                                        (inst -2 "fsA!1`seq(0)")
                                        (("1"
                                          (inst -3 "fsA!1`seq(0)")
                                          (("1"
                                            (inst -4 "fsA!1`seq(0)")
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (typepred "fsA!1")
                                                (("1"
                                                  (expand "fsRI?")
                                                  (("1"
                                                    (expand
                                                     "finseq_appl")
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (expand
                                                         "ideal?")
                                                        (("1"
                                                          (expand
                                                           "left_ideal?")
                                                          (("1"
                                                            (expand
                                                             "subring?")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (hide
                                                                 (-1
                                                                  -3
                                                                  -4))
                                                                (("1"
                                                                  (expand
                                                                   "ring?")
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (hide
                                                                       (-1
                                                                        -2
                                                                        -3
                                                                        -4))
                                                                      (("1"
                                                                        (expand
                                                                         "right_distributive?")
                                                                        (("1"
                                                                          (expand
                                                                           "restrict")
                                                                          (("1"
                                                                            (inst?)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "Intersection")
              (("2" (expand "right_swallow?")
                (("2" (skosimp)
                  (("2" (expand "member")
                    (("2" (typepred "x!1" "r!1")
                      (("2" (skosimp)
                        (("2" (typepred "a!1")
                          (("2" (expand "seq2set")
                            (("2" (expand "finseq_appl")
                              (("2"
                                (skosimp)
                                (("2"
                                  (inst?)
                                  (("1"
                                    (replace -1 1 rl)
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (typepred "fsA!1")
                                        (("1"
                                          (expand "fsRI?")
                                          (("1"
                                            (expand "finseq_appl")
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (expand "ideal?")
                                                (("1"
                                                  (expand
                                                   "right_ideal?")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (hide (-1 -2 1))
                                                      (("1"
                                                        (expand
                                                         "right_swallow?")
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (expand
                                                             "member")
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "seq2set")
                                    (("2"
                                      (expand "finseq_appl")
                                      (("2" (inst?) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Intersection const-decl "set" sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (+ formal-const-decl "[T, T -> T]" product_finseq_sets_ring nil)
    (* formal-const-decl "[T, T -> T]" product_finseq_sets_ring nil)
    (zero formal-const-decl "T" product_finseq_sets_ring nil)
    (ring? const-decl "bool" ring_def nil)
    (fsRI? const-decl "bool" ring_ideal_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (fsI type-eq-decl nil ring_ideal_def nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil) nil nil
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (seq2set const-decl "finite_set[T]" seq2set structures)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-nonempty-type-decl nil product_finseq_sets_ring nil)
    (seq2set_lem formula-decl nil seq2set structures)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil) nil nil nil
    (star_closed? const-decl "bool" groupoid_def nil)
    (restrict const-decl "R" restrict nil)
    (plus_zero formula-decl nil ring nil)
    (zero_plus formula-decl nil ring nil)
    (identity? const-decl "bool" operator_defs nil)
    (monad? const-decl "bool" monad_def nil) nil nil nil
    (associative? const-decl "bool" operator_defs nil)
    (monoid? const-decl "bool" monoid_def nil)
    (Intersection_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (inv const-decl "{y | x * y = one AND y * x = one}" group nil) nil
    (negate_is_left_inv formula-decl nil ring nil)
    (negate_is_right_inv formula-decl nil ring nil)
    (group nonempty-type-eq-decl nil group nil)
    (inv_in formula-decl nil group nil) nil
    (inv_exists? const-decl "bool" group_def nil)
    (group? const-decl "bool" group_def nil) nil nil
    (commutative? const-decl "bool" operator_defs nil)
    (abelian_group? const-decl "bool" group_def nil) nil nil nil nil
    nil nil nil nil nil
    (left_distributive? const-decl "bool" operator_defs_more nil) nil
    nil nil
    (right_distributive? const-decl "bool" operator_defs_more nil)
    (subring? const-decl "bool" ring_def nil) nil nil
    (left_swallow? const-decl "bool" ring_ideal_def nil)
    (left_ideal? const-decl "bool" ring_ideal_def nil) nil nil nil nil
    nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil
    nil (right_swallow? const-decl "bool" ring_ideal_def nil) nil nil
    (right_ideal? const-decl "bool" ring_ideal_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil))
   nil)
  (Intersection_of_ideals_is_ideal-1 nil 3782689807
   ("" (skosimp*)
    (("" (expand "ideal?")
      (("" (prop)
        (("1" (expand "left_ideal?")
          (("1" (prop)
            (("1" (expand "subring?")
              (("1" (prop)
                (("1" (expand "subset?")
                  (("1" (skosimp)
                    (("1" (expand "member")
                      (("1" (expand "Intersection")
                        (("1" (lemma "seq2set_lem[set[T]]")
                          (("1" (inst?)
                            (("1" (expand "finseq_appl")
                              (("1"
                                (inst -1 "0")
                                (("1"
                                  (inst -2 "fsA!1`seq(0)")
                                  (("1"
                                    (hide -1)
                                    (("1"
                                      (typepred "fsA!1")
                                      (("1"
                                        (expand "fsRI?")
                                        (("1"
                                          (expand "finseq_appl")
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (expand "ideal?")
                                              (("1"
                                                (expand "left_ideal?")
                                                (("1"
                                                  (expand "subring?")
                                                  (("1"
                                                    (expand "subset?")
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (hide
                                                         (-2 -3 -4 1))
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "ring?")
                  (("2" (prop)
                    (("1" (expand "abelian_group?")
                      (("1" (prop)
                        (("1" (expand "group?")
                          (("1" (prop)
                            (("1" (expand "monoid?")
                              (("1"
                                (prop)
                                (("1"
                                  (expand "monad?")
                                  (("1"
                                    (prop)
                                    (("1"
                                      (expand "star_closed?")
                                      (("1"
                                        (skosimp)
                                        (("1"
                                          (expand "member")
                                          (("1"
                                            (typepred "x!1" "y!1")
                                            (("1"
                                              (expand "Intersection")
                                              (("1"
                                                (skosimp)
                                                (("1"
                                                  (inst -1 "a!1")
                                                  (("1"
                                                    (inst -2 "a!1")
                                                    (("1"
                                                      (typepred "a!1")
                                                      (("1"
                                                        (expand
                                                         "seq2set")
                                                        (("1"
                                                          (expand
                                                           "finseq_appl")
                                                          (("1"
                                                            (skosimp)
                                                            (("1"
                                                              (replace
                                                               -1
                                                               (- 1)
                                                               rl)
                                                              (("1"
                                                                (typepred
                                                                 "fsA!1")
                                                                (("1"
                                                                  (expand
                                                                   "fsRI?")
                                                                  (("1"
                                                                    (expand
                                                                     "finseq_appl")
                                                                    (("1"
                                                                      (inst?)
                                                                      (("1"
                                                                        (expand
                                                                         "ideal?")
                                                                        (("1"
                                                                          (expand
                                                                           "left_ideal?")
                                                                          (("1"
                                                                            (expand
                                                                             "subring?")
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (hide
                                                                                 (-1
                                                                                  -3
                                                                                  -4))
                                                                                (("1"
                                                                                  (expand
                                                                                   "ring?")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "abelian_group?")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "group?")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "monoid?")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "monad?")
                                                                                          (("1"
                                                                                            (prop)
                                                                                            (("1"
                                                                                              (hide-all-but
                                                                                               (-1
                                                                                                -12
                                                                                                -13
                                                                                                2))
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "star_closed?")
                                                                                                (("1"
                                                                                                  (inst?)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "member")
                                                                                                    (("1"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "member")
                                      (("2"
                                        (expand "Intersection")
                                        (("2"
                                          (skosimp)
                                          (("2"
                                            (typepred "a!1")
                                            (("2"
                                              (expand "seq2set")
                                              (("2"
                                                (expand "finseq_appl")
                                                (("2"
                                                  (skosimp)
                                                  (("2"
                                                    (replace -1 1 rl)
                                                    (("2"
                                                      (typepred
                                                       "fsA!1")
                                                      (("2"
                                                        (expand
                                                         "fsRI?")
                                                        (("2"
                                                          (expand
                                                           "finseq_appl")
                                                          (("2"
                                                            (inst?)
                                                            (("2"
                                                              (expand
                                                               "ideal?")
                                                              (("2"
                                                                (expand
                                                                 "left_ideal?")
                                                                (("2"
                                                                  (expand
                                                                   "subring?")
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (hide
                                                                       (-1
                                                                        -3
                                                                        -4))
                                                                      (("2"
                                                                        (expand
                                                                         "ring?")
                                                                        (("2"
                                                                          (expand
                                                                           "abelian_group?")
                                                                          (("2"
                                                                            (expand
                                                                             "group?")
                                                                            (("2"
                                                                              (expand
                                                                               "monoid?")
                                                                              (("2"
                                                                                (expand
                                                                                 "monad?")
                                                                                (("2"
                                                                                  (prop)
                                                                                  (("2"
                                                                                    (hide-all-but
                                                                                     (-2
                                                                                      -11
                                                                                      2))
                                                                                    (("2"
                                                                                      (expand
                                                                                       "member")
                                                                                      (("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (expand "identity?")
                                      (("3"
                                        (expand "restrict")
                                        (("3"
                                          (skosimp)
                                          (("3"
                                            (rewrite "plus_zero")
                                            (("3"
                                              (rewrite "zero_plus")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "associative?")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "restrict")
                                      (("2"
                                        (skosimp)
                                        (("2"
                                          (typepred "x!1" "y!1" "z!1")
                                          (("2"
                                            (expand "Intersection")
                                            (("2"
                                              (lemma
                                               "seq2set_lem[set[T]]")
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (expand
                                                   "finseq_appl")
                                                  (("2"
                                                    (inst -1 "0")
                                                    (("1"
                                                      (inst
                                                       -2
                                                       "fsA!1`seq(0)")
                                                      (("1"
                                                        (inst
                                                         -3
                                                         "fsA!1`seq(0)")
                                                        (("1"
                                                          (inst
                                                           -4
                                                           "fsA!1`seq(0)")
                                                          (("1"
                                                            (hide -1)
                                                            (("1"
                                                              (typepred
                                                               "fsA!1")
                                                              (("1"
                                                                (expand
                                                                 "fsRI?")
                                                                (("1"
                                                                  (expand
                                                                   "finseq_appl")
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (expand
                                                                       "ideal?")
                                                                      (("1"
                                                                        (expand
                                                                         "left_ideal?")
                                                                        (("1"
                                                                          (expand
                                                                           "subring?")
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (hide
                                                                               (-1
                                                                                -3
                                                                                -4))
                                                                              (("1"
                                                                                (expand
                                                                                 "ring?")
                                                                                (("1"
                                                                                  (expand
                                                                                   "abelian_group?")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "group?")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "monoid?")
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (hide
                                                                                           (-1
                                                                                            -3
                                                                                            -4
                                                                                            -5
                                                                                            -6
                                                                                            -7
                                                                                            -8
                                                                                            1))
                                                                                          (("1"
                                                                                            (expand
                                                                                             "associative?")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "restrict")
                                                                                              (("1"
                                                                                                (inst?)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "inv_exists?")
                              (("2"
                                (skosimp)
                                (("2"
                                  (typepred "x!1")
                                  (("2"
                                    (inst 1 "-x!1")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (expand "Intersection")
                                      (("2"
                                        (skosimp)
                                        (("2"
                                          (typepred "a!1")
                                          (("2"
                                            (expand "seq2set")
                                            (("2"
                                              (expand "finseq_appl")
                                              (("2"
                                                (skosimp)
                                                (("2"
                                                  (inst?)
                                                  (("1"
                                                    (replace -1 1 rl)
                                                    (("1"
                                                      (hide -1)
                                                      (("1"
                                                        (typepred
                                                         "fsA!1")
                                                        (("1"
                                                          (expand
                                                           "fsRI?")
                                                          (("1"
                                                            (expand
                                                             "finseq_appl")
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (expand
                                                                 "ideal?")
                                                                (("1"
                                                                  (expand
                                                                   "left_ideal?")
                                                                  (("1"
                                                                    (expand
                                                                     "subring?")
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (hide
                                                                         (-1
                                                                          -3
                                                                          -4))
                                                                        (("1"
                                                                          (expand
                                                                           "ring?")
                                                                          (("1"
                                                                            (expand
                                                                             "abelian_group?")
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (hide
                                                                                 (-2
                                                                                  -3
                                                                                  -4
                                                                                  -5
                                                                                  -6
                                                                                  1))
                                                                                (("1"
                                                                                  (lemma
                                                                                   "inv_in")
                                                                                  (("1"
                                                                                    (inst?)
                                                                                    (("1"
                                                                                      (inst?)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "-")
                                                                                          (("1"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand "seq2set")
                                                    (("2"
                                                      (expand
                                                       "finseq_appl")
                                                      (("2"
                                                        (inst?)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "commutative?")
                          (("2" (expand "restrict")
                            (("2" (skosimp)
                              (("2"
                                (typepred "x!1" "y!1")
                                (("2"
                                  (expand "Intersection")
                                  (("2"
                                    (lemma "seq2set_lem[set[T]]")
                                    (("2"
                                      (inst?)
                                      (("2"
                                        (expand "finseq_appl")
                                        (("2"
                                          (inst -1 "0")
                                          (("1"
                                            (inst -2 "fsA!1`seq(0)")
                                            (("1"
                                              (inst -3 "fsA!1`seq(0)")
                                              (("1"
                                                (hide -1)
                                                (("1"
                                                  (typepred "fsA!1")
                                                  (("1"
                                                    (expand "fsRI?")
                                                    (("1"
                                                      (expand
                                                       "finseq_appl")
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (expand
                                                           "ideal?")
                                                          (("1"
                                                            (expand
                                                             "left_ideal?")
                                                            (("1"
                                                              (expand
                                                               "subring?")
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (hide
                                                                   (-1
                                                                    -3
                                                                    -4))
                                                                  (("1"
                                                                    (expand
                                                                     "ring?")
                                                                    (("1"
                                                                      (expand
                                                                       "abelian_group?")
                                                                      (("1"
                                                                        (prop)
                                                                        (("1"
                                                                          (hide
                                                                           (-1
                                                                            -3
                                                                            -4
                                                                            -5
                                                                            -6
                                                                            1))
                                                                          (("1"
                                                                            (expand
                                                                             "commutative?")
                                                                            (("1"
                                                                              (expand
                                                                               "restrict")
                                                                              (("1"
                                                                                (inst?)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "star_closed?")
                      (("2" (skosimp)
                        (("2" (expand "member")
                          (("2" (typepred "x!1" "y!1")
                            (("2" (expand "Intersection")
                              (("2"
                                (skosimp)
                                (("2"
                                  (inst -1 "a!1")
                                  (("2"
                                    (inst -2 "a!1")
                                    (("2"
                                      (typepred "a!1")
                                      (("2"
                                        (expand "seq2set")
                                        (("2"
                                          (expand "finseq_appl")
                                          (("2"
                                            (skosimp)
                                            (("2"
                                              (replace -1 -2 rl)
                                              (("2"
                                                (replace -1 -3 rl)
                                                (("2"
                                                  (replace -1 1 rl)
                                                  (("2"
                                                    (hide -1)
                                                    (("2"
                                                      (typepred
                                                       "fsA!1")
                                                      (("2"
                                                        (expand
                                                         "fsRI?")
                                                        (("2"
                                                          (expand
                                                           "finseq_appl")
                                                          (("2"
                                                            (inst?)
                                                            (("2"
                                                              (expand
                                                               "ideal?")
                                                              (("2"
                                                                (expand
                                                                 "left_ideal?")
                                                                (("2"
                                                                  (expand
                                                                   "subring?")
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (hide
                                                                       (-1
                                                                        -3
                                                                        -4))
                                                                      (("2"
                                                                        (expand
                                                                         "ring?")
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (hide
                                                                             (-1
                                                                              -3
                                                                              -4
                                                                              -5
                                                                              1))
                                                                            (("2"
                                                                              (expand
                                                                               "star_closed?")
                                                                              (("2"
                                                                                (inst?)
                                                                                (("2"
                                                                                  (expand
                                                                                   "member")
                                                                                  (("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (expand "associative?")
                      (("3" (expand "restrict")
                        (("3" (skosimp)
                          (("3" (typepred "x!1" "y!1" "z!1")
                            (("3" (expand "Intersection")
                              (("3"
                                (lemma "seq2set_lem[set[T]]")
                                (("3"
                                  (inst?)
                                  (("3"
                                    (expand "finseq_appl")
                                    (("3"
                                      (inst -1 "0")
                                      (("1"
                                        (inst -2 "fsA!1`seq(0)")
                                        (("1"
                                          (inst -3 "fsA!1`seq(0)")
                                          (("1"
                                            (inst -4 "fsA!1`seq(0)")
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (typepred "fsA!1")
                                                (("1"
                                                  (expand "fsRI?")
                                                  (("1"
                                                    (expand
                                                     "finseq_appl")
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (expand
                                                         "ideal?")
                                                        (("1"
                                                          (expand
                                                           "left_ideal?")
                                                          (("1"
                                                            (expand
                                                             "subring?")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (hide
                                                                 (-1
                                                                  -3
                                                                  -4))
                                                                (("1"
                                                                  (expand
                                                                   "ring?")
                                                                  (("1"
                                                                    (prop)
                                                                    (("1"
                                                                      (hide
                                                                       (-1
                                                                        -2
                                                                        -4
                                                                        -5
                                                                        1))
                                                                      (("1"
                                                                        (expand
                                                                         "associative?")
                                                                        (("1"
                                                                          (expand
                                                                           "restrict")
                                                                          (("1"
                                                                            (inst?)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("4" (expand "left_distributive?")
                      (("4" (expand "restrict")
                        (("4" (skosimp)
                          (("4" (typepred "x!1" "y!1" "z!1")
                            (("4" (expand "Intersection")
                              (("4"
                                (lemma "seq2set_lem[set[T]]")
                                (("4"
                                  (inst?)
                                  (("4"
                                    (expand "finseq_appl")
                                    (("4"
                                      (inst -1 "0")
                                      (("1"
                                        (inst -2 "fsA!1`seq(0)")
                                        (("1"
                                          (inst -3 "fsA!1`seq(0)")
                                          (("1"
                                            (inst -4 "fsA!1`seq(0)")
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (typepred "fsA!1")
                                                (("1"
                                                  (expand "fsRI?")
                                                  (("1"
                                                    (expand
                                                     "finseq_appl")
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (expand
                                                         "ideal?")
                                                        (("1"
                                                          (expand
                                                           "left_ideal?")
                                                          (("1"
                                                            (expand
                                                             "subring?")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (hide
                                                                 (-1
                                                                  -3
                                                                  -4))
                                                                (("1"
                                                                  (expand
                                                                   "ring?")
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (hide
                                                                       (-1
                                                                        -2
                                                                        -3
                                                                        -5))
                                                                      (("1"
                                                                        (expand
                                                                         "left_distributive?")
                                                                        (("1"
                                                                          (expand
                                                                           "restrict")
                                                                          (("1"
                                                                            (inst?)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("5" (expand "right_distributive?")
                      (("5" (expand "restrict")
                        (("5" (skosimp)
                          (("5" (typepred "x!1" "y!1" "z!1")
                            (("5" (expand "Intersection")
                              (("5"
                                (lemma "seq2set_lem[set[T]]")
                                (("5"
                                  (inst?)
                                  (("5"
                                    (expand "finseq_appl")
                                    (("5"
                                      (inst -1 "0")
                                      (("1"
                                        (inst -2 "fsA!1`seq(0)")
                                        (("1"
                                          (inst -3 "fsA!1`seq(0)")
                                          (("1"
                                            (inst -4 "fsA!1`seq(0)")
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (typepred "fsA!1")
                                                (("1"
                                                  (expand "fsRI?")
                                                  (("1"
                                                    (expand
                                                     "finseq_appl")
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (expand
                                                         "ideal?")
                                                        (("1"
                                                          (expand
                                                           "left_ideal?")
                                                          (("1"
                                                            (expand
                                                             "subring?")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (hide
                                                                 (-1
                                                                  -3
                                                                  -4))
                                                                (("1"
                                                                  (expand
                                                                   "ring?")
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (hide
                                                                       (-1
                                                                        -2
                                                                        -3
                                                                        -4))
                                                                      (("1"
                                                                        (expand
                                                                         "right_distributive?")
                                                                        (("1"
                                                                          (expand
                                                                           "restrict")
                                                                          (("1"
                                                                            (inst?)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "left_swallow?")
              (("2" (skosimp)
                (("2" (expand "member")
                  (("2" (typepred "x!1" "r!1")
                    (("2" (expand "Intersection")
                      (("2" (skosimp)
                        (("2" (typepred "a!1")
                          (("2" (expand "seq2set")
                            (("2" (expand "finseq_appl")
                              (("2"
                                (skosimp)
                                (("2"
                                  (inst?)
                                  (("1"
                                    (replace -1 1 rl)
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (typepred "fsA!1")
                                        (("1"
                                          (expand "fsRI?")
                                          (("1"
                                            (expand "finseq_appl")
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (expand "ideal?")
                                                (("1"
                                                  (expand
                                                   "left_ideal?")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (hide (-1 -3 1))
                                                      (("1"
                                                        (expand
                                                         "left_swallow?")
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (expand
                                                             "member")
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "seq2set")
                                    (("2"
                                      (expand "finseq_appl")
                                      (("2" (inst?) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "right_ideal?")
          (("2" (prop)
            (("1" (expand "subring?")
              (("1" (prop)
                (("1" (expand "subset?")
                  (("1" (skosimp)
                    (("1" (expand "member")
                      (("1" (expand "Intersection")
                        (("1" (lemma "seq2set_lem[set[T]]")
                          (("1" (inst?)
                            (("1" (expand "finseq_appl")
                              (("1"
                                (inst -1 "0")
                                (("1"
                                  (inst -2 "fsA!1`seq(0)")
                                  (("1"
                                    (hide -1)
                                    (("1"
                                      (typepred "fsA!1")
                                      (("1"
                                        (expand "fsRI?")
                                        (("1"
                                          (expand "finseq_appl")
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (expand "ideal?")
                                              (("1"
                                                (expand "left_ideal?")
                                                (("1"
                                                  (expand "subring?")
                                                  (("1"
                                                    (expand "subset?")
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (hide
                                                         (-2 -3 -4 1))
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "ring?")
                  (("2" (prop)
                    (("1" (expand "abelian_group?")
                      (("1" (prop)
                        (("1" (expand "group?")
                          (("1" (prop)
                            (("1" (expand "monoid?")
                              (("1"
                                (prop)
                                (("1"
                                  (expand "monad?")
                                  (("1"
                                    (prop)
                                    (("1"
                                      (expand "star_closed?")
                                      (("1"
                                        (skosimp)
                                        (("1"
                                          (expand "member")
                                          (("1"
                                            (typepred "x!1" "y!1")
                                            (("1"
                                              (expand "Intersection")
                                              (("1"
                                                (skosimp)
                                                (("1"
                                                  (inst -1 "a!1")
                                                  (("1"
                                                    (inst -2 "a!1")
                                                    (("1"
                                                      (typepred "a!1")
                                                      (("1"
                                                        (expand
                                                         "seq2set")
                                                        (("1"
                                                          (expand
                                                           "finseq_appl")
                                                          (("1"
                                                            (skosimp)
                                                            (("1"
                                                              (replace
                                                               -1
                                                               (- 1)
                                                               rl)
                                                              (("1"
                                                                (typepred
                                                                 "fsA!1")
                                                                (("1"
                                                                  (expand
                                                                   "fsRI?")
                                                                  (("1"
                                                                    (expand
                                                                     "finseq_appl")
                                                                    (("1"
                                                                      (inst?)
                                                                      (("1"
                                                                        (expand
                                                                         "ideal?")
                                                                        (("1"
                                                                          (expand
                                                                           "left_ideal?")
                                                                          (("1"
                                                                            (expand
                                                                             "subring?")
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (hide
                                                                                 (-1
                                                                                  -3
                                                                                  -4))
                                                                                (("1"
                                                                                  (expand
                                                                                   "ring?")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "abelian_group?")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "group?")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "monoid?")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "monad?")
                                                                                          (("1"
                                                                                            (prop)
                                                                                            (("1"
                                                                                              (hide-all-but
                                                                                               (-1
                                                                                                -12
                                                                                                -13
                                                                                                2))
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "star_closed?")
                                                                                                (("1"
                                                                                                  (inst?)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "member")
                                                                                                    (("1"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "member")
                                      (("2"
                                        (expand "Intersection")
                                        (("2"
                                          (skosimp)
                                          (("2"
                                            (typepred "a!1")
                                            (("2"
                                              (expand "seq2set")
                                              (("2"
                                                (expand "finseq_appl")
                                                (("2"
                                                  (skosimp)
                                                  (("2"
                                                    (replace -1 1 rl)
                                                    (("2"
                                                      (typepred
                                                       "fsA!1")
                                                      (("2"
                                                        (expand
                                                         "fsRI?")
                                                        (("2"
                                                          (expand
                                                           "finseq_appl")
                                                          (("2"
                                                            (inst?)
                                                            (("2"
                                                              (expand
                                                               "ideal?")
                                                              (("2"
                                                                (expand
                                                                 "left_ideal?")
                                                                (("2"
                                                                  (expand
                                                                   "subring?")
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (hide
                                                                       (-1
                                                                        -3
                                                                        -4))
                                                                      (("2"
                                                                        (expand
                                                                         "ring?")
                                                                        (("2"
                                                                          (expand
                                                                           "abelian_group?")
                                                                          (("2"
                                                                            (expand
                                                                             "group?")
                                                                            (("2"
                                                                              (expand
                                                                               "monoid?")
                                                                              (("2"
                                                                                (expand
                                                                                 "monad?")
                                                                                (("2"
                                                                                  (prop)
                                                                                  (("2"
                                                                                    (hide-all-but
                                                                                     (-2
                                                                                      -11
                                                                                      2))
                                                                                    (("2"
                                                                                      (expand
                                                                                       "member")
                                                                                      (("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (expand "identity?")
                                      (("3"
                                        (expand "restrict")
                                        (("3"
                                          (skosimp)
                                          (("3"
                                            (rewrite "plus_zero")
                                            (("3"
                                              (rewrite "zero_plus")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "associative?")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "restrict")
                                      (("2"
                                        (skosimp)
                                        (("2"
                                          (typepred "x!1" "y!1" "z!1")
                                          (("2"
                                            (expand "Intersection")
                                            (("2"
                                              (lemma
                                               "seq2set_lem[set[T]]")
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (expand
                                                   "finseq_appl")
                                                  (("2"
                                                    (inst -1 "0")
                                                    (("1"
                                                      (inst
                                                       -2
                                                       "fsA!1`seq(0)")
                                                      (("1"
                                                        (inst
                                                         -3
                                                         "fsA!1`seq(0)")
                                                        (("1"
                                                          (inst
                                                           -4
                                                           "fsA!1`seq(0)")
                                                          (("1"
                                                            (hide -1)
                                                            (("1"
                                                              (typepred
                                                               "fsA!1")
                                                              (("1"
                                                                (expand
                                                                 "fsRI?")
                                                                (("1"
                                                                  (expand
                                                                   "finseq_appl")
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (expand
                                                                       "ideal?")
                                                                      (("1"
                                                                        (expand
                                                                         "left_ideal?")
                                                                        (("1"
                                                                          (expand
                                                                           "subring?")
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (hide
                                                                               (-1
                                                                                -3
                                                                                -4))
                                                                              (("1"
                                                                                (expand
                                                                                 "ring?")
                                                                                (("1"
                                                                                  (expand
                                                                                   "abelian_group?")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "group?")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "monoid?")
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (hide
                                                                                           (-1
                                                                                            -3
                                                                                            -4
                                                                                            -5
                                                                                            -6
                                                                                            -7
                                                                                            -8
                                                                                            1))
                                                                                          (("1"
                                                                                            (expand
                                                                                             "associative?")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "restrict")
                                                                                              (("1"
                                                                                                (inst?)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "inv_exists?")
                              (("2"
                                (skosimp)
                                (("2"
                                  (typepred "x!1")
                                  (("2"
                                    (inst 1 "-x!1")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (expand "Intersection")
                                      (("2"
                                        (skosimp)
                                        (("2"
                                          (typepred "a!1")
                                          (("2"
                                            (expand "seq2set")
                                            (("2"
                                              (expand "finseq_appl")
                                              (("2"
                                                (skosimp)
                                                (("2"
                                                  (inst?)
                                                  (("1"
                                                    (replace -1 1 rl)
                                                    (("1"
                                                      (hide -1)
                                                      (("1"
                                                        (typepred
                                                         "fsA!1")
                                                        (("1"
                                                          (expand
                                                           "fsRI?")
                                                          (("1"
                                                            (expand
                                                             "finseq_appl")
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (expand
                                                                 "ideal?")
                                                                (("1"
                                                                  (expand
                                                                   "left_ideal?")
                                                                  (("1"
                                                                    (expand
                                                                     "subring?")
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (hide
                                                                         (-1
                                                                          -3
                                                                          -4))
                                                                        (("1"
                                                                          (expand
                                                                           "ring?")
                                                                          (("1"
                                                                            (expand
                                                                             "abelian_group?")
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (hide
                                                                                 (-2
                                                                                  -3
                                                                                  -4
                                                                                  -5
                                                                                  -6
                                                                                  1))
                                                                                (("1"
                                                                                  (lemma
                                                                                   "inv_in")
                                                                                  (("1"
                                                                                    (inst?)
                                                                                    (("1"
                                                                                      (inst?)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "-")
                                                                                          (("1"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand "seq2set")
                                                    (("2"
                                                      (expand
                                                       "finseq_appl")
                                                      (("2"
                                                        (inst?)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "commutative?")
                          (("2" (expand "restrict")
                            (("2" (skosimp)
                              (("2"
                                (typepred "x!1" "y!1")
                                (("2"
                                  (expand "Intersection")
                                  (("2"
                                    (lemma "seq2set_lem[set[T]]")
                                    (("2"
                                      (inst?)
                                      (("2"
                                        (expand "finseq_appl")
                                        (("2"
                                          (inst -1 "0")
                                          (("1"
                                            (inst -2 "fsA!1`seq(0)")
                                            (("1"
                                              (inst -3 "fsA!1`seq(0)")
                                              (("1"
                                                (hide -1)
                                                (("1"
                                                  (typepred "fsA!1")
                                                  (("1"
                                                    (expand "fsRI?")
                                                    (("1"
                                                      (expand
                                                       "finseq_appl")
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (expand
                                                           "ideal?")
                                                          (("1"
                                                            (expand
                                                             "left_ideal?")
                                                            (("1"
                                                              (expand
                                                               "subring?")
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (hide
                                                                   (-1
                                                                    -3
                                                                    -4))
                                                                  (("1"
                                                                    (expand
                                                                     "ring?")
                                                                    (("1"
                                                                      (expand
                                                                       "abelian_group?")
                                                                      (("1"
                                                                        (prop)
                                                                        (("1"
                                                                          (hide
                                                                           (-1
                                                                            -3
                                                                            -4
                                                                            -5
                                                                            -6
                                                                            1))
                                                                          (("1"
                                                                            (expand
                                                                             "commutative?")
                                                                            (("1"
                                                                              (expand
                                                                               "restrict")
                                                                              (("1"
                                                                                (inst?)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "star_closed?")
                      (("2" (skosimp)
                        (("2" (expand "member")
                          (("2" (typepred "x!1" "y!1")
                            (("2" (expand "Intersection")
                              (("2"
                                (skosimp)
                                (("2"
                                  (inst -1 "a!1")
                                  (("2"
                                    (inst -2 "a!1")
                                    (("2"
                                      (typepred "a!1")
                                      (("2"
                                        (expand "seq2set")
                                        (("2"
                                          (expand "finseq_appl")
                                          (("2"
                                            (skosimp)
                                            (("2"
                                              (replace -1 -2 rl)
                                              (("2"
                                                (replace -1 -3 rl)
                                                (("2"
                                                  (replace -1 1 rl)
                                                  (("2"
                                                    (hide -1)
                                                    (("2"
                                                      (typepred
                                                       "fsA!1")
                                                      (("2"
                                                        (expand
                                                         "fsRI?")
                                                        (("2"
                                                          (expand
                                                           "finseq_appl")
                                                          (("2"
                                                            (inst?)
                                                            (("2"
                                                              (expand
                                                               "ideal?")
                                                              (("2"
                                                                (expand
                                                                 "left_ideal?")
                                                                (("2"
                                                                  (expand
                                                                   "subring?")
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (hide
                                                                       (-1
                                                                        -3
                                                                        -4))
                                                                      (("2"
                                                                        (expand
                                                                         "ring?")
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (hide
                                                                             (-1
                                                                              -3
                                                                              -4
                                                                              -5
                                                                              1))
                                                                            (("2"
                                                                              (expand
                                                                               "star_closed?")
                                                                              (("2"
                                                                                (inst?)
                                                                                (("2"
                                                                                  (expand
                                                                                   "member")
                                                                                  (("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (expand "associative?")
                      (("3" (expand "restrict")
                        (("3" (skosimp)
                          (("3" (typepred "x!1" "y!1" "z!1")
                            (("3" (expand "Intersection")
                              (("3"
                                (lemma "seq2set_lem[set[T]]")
                                (("3"
                                  (inst?)
                                  (("3"
                                    (expand "finseq_appl")
                                    (("3"
                                      (inst -1 "0")
                                      (("1"
                                        (inst -2 "fsA!1`seq(0)")
                                        (("1"
                                          (inst -3 "fsA!1`seq(0)")
                                          (("1"
                                            (inst -4 "fsA!1`seq(0)")
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (typepred "fsA!1")
                                                (("1"
                                                  (expand "fsRI?")
                                                  (("1"
                                                    (expand
                                                     "finseq_appl")
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (expand
                                                         "ideal?")
                                                        (("1"
                                                          (expand
                                                           "left_ideal?")
                                                          (("1"
                                                            (expand
                                                             "subring?")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (hide
                                                                 (-1
                                                                  -3
                                                                  -4))
                                                                (("1"
                                                                  (expand
                                                                   "ring?")
                                                                  (("1"
                                                                    (prop)
                                                                    (("1"
                                                                      (hide
                                                                       (-1
                                                                        -2
                                                                        -4
                                                                        -5
                                                                        1))
                                                                      (("1"
                                                                        (expand
                                                                         "associative?")
                                                                        (("1"
                                                                          (expand
                                                                           "restrict")
                                                                          (("1"
                                                                            (inst?)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("4" (expand "left_distributive?")
                      (("4" (expand "restrict")
                        (("4" (skosimp)
                          (("4" (typepred "x!1" "y!1" "z!1")
                            (("4" (expand "Intersection")
                              (("4"
                                (lemma "seq2set_lem[set[T]]")
                                (("4"
                                  (inst?)
                                  (("4"
                                    (expand "finseq_appl")
                                    (("4"
                                      (inst -1 "0")
                                      (("1"
                                        (inst -2 "fsA!1`seq(0)")
                                        (("1"
                                          (inst -3 "fsA!1`seq(0)")
                                          (("1"
                                            (inst -4 "fsA!1`seq(0)")
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (typepred "fsA!1")
                                                (("1"
                                                  (expand "fsRI?")
                                                  (("1"
                                                    (expand
                                                     "finseq_appl")
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (expand
                                                         "ideal?")
                                                        (("1"
                                                          (expand
                                                           "left_ideal?")
                                                          (("1"
                                                            (expand
                                                             "subring?")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (hide
                                                                 (-1
                                                                  -3
                                                                  -4))
                                                                (("1"
                                                                  (expand
                                                                   "ring?")
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (hide
                                                                       (-1
                                                                        -2
                                                                        -3
                                                                        -5))
                                                                      (("1"
                                                                        (expand
                                                                         "left_distributive?")
                                                                        (("1"
                                                                          (expand
                                                                           "restrict")
                                                                          (("1"
                                                                            (inst?)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("5" (expand "right_distributive?")
                      (("5" (expand "restrict")
                        (("5" (skosimp)
                          (("5" (typepred "x!1" "y!1" "z!1")
                            (("5" (expand "Intersection")
                              (("5"
                                (lemma "seq2set_lem[set[T]]")
                                (("5"
                                  (inst?)
                                  (("5"
                                    (expand "finseq_appl")
                                    (("5"
                                      (inst -1 "0")
                                      (("1"
                                        (inst -2 "fsA!1`seq(0)")
                                        (("1"
                                          (inst -3 "fsA!1`seq(0)")
                                          (("1"
                                            (inst -4 "fsA!1`seq(0)")
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (typepred "fsA!1")
                                                (("1"
                                                  (expand "fsRI?")
                                                  (("1"
                                                    (expand
                                                     "finseq_appl")
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (expand
                                                         "ideal?")
                                                        (("1"
                                                          (expand
                                                           "left_ideal?")
                                                          (("1"
                                                            (expand
                                                             "subring?")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (hide
                                                                 (-1
                                                                  -3
                                                                  -4))
                                                                (("1"
                                                                  (expand
                                                                   "ring?")
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (hide
                                                                       (-1
                                                                        -2
                                                                        -3
                                                                        -4))
                                                                      (("1"
                                                                        (expand
                                                                         "right_distributive?")
                                                                        (("1"
                                                                          (expand
                                                                           "restrict")
                                                                          (("1"
                                                                            (inst?)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "Intersection")
              (("2" (expand "right_swallow?")
                (("2" (skosimp)
                  (("2" (expand "member")
                    (("2" (typepred "x!1" "r!1")
                      (("2" (skosimp)
                        (("2" (typepred "a!1")
                          (("2" (expand "seq2set")
                            (("2" (expand "finseq_appl")
                              (("2"
                                (skosimp)
                                (("2"
                                  (inst?)
                                  (("1"
                                    (replace -1 1 rl)
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (typepred "fsA!1")
                                        (("1"
                                          (expand "fsRI?")
                                          (("1"
                                            (expand "finseq_appl")
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (expand "ideal?")
                                                (("1"
                                                  (expand
                                                   "right_ideal?")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (hide (-1 -2 1))
                                                      (("1"
                                                        (expand
                                                         "right_swallow?")
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (expand
                                                             "member")
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "seq2set")
                                    (("2"
                                      (expand "finseq_appl")
                                      (("2" (inst?) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ideal? const-decl "bool" ring_ideal_def nil)
    (right_ideal? const-decl "bool" ring_ideal_def nil)
    (right_swallow? const-decl "bool" ring_ideal_def nil)
    (left_ideal? const-decl "bool" ring_ideal_def nil)
    (left_swallow? const-decl "bool" ring_ideal_def nil)
    (commutative? const-decl "bool" operator_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Intersection_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (associative? const-decl "bool" operator_defs nil)
    (identity? const-decl "bool" operator_defs nil)
    (restrict const-decl "R" restrict nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (seq2set_lem formula-decl nil seq2set structures)
    (T formal-nonempty-type-decl nil product_finseq_sets_ring nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (seq2set const-decl "finite_set[T]" seq2set structures)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (/= const-decl "boolean" notequal nil)
    (number nonempty-type-decl nil numbers nil)
    (fsI type-eq-decl nil ring_ideal_def nil)
    (fsRI? const-decl "bool" ring_ideal_def nil)
    (zero formal-const-decl "T" product_finseq_sets_ring nil)
    (* formal-const-decl "[T, T -> T]" product_finseq_sets_ring nil)
    (+ formal-const-decl "[T, T -> T]" product_finseq_sets_ring nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Intersection const-decl "set" sets nil))
   shostak))
 (product_of_ideals_subset_of_each 0
  (product_of_ideals_subset_of_each-1 nil 3782723242
   ("" (skosimp*)
    (("" (case "length(fsA!1) =  0")
      (("1" (assert) nil nil)
       ("2" (expand "subset?")
        (("2" (expand "member")
          (("2" (skosimp)
            (("2" (expand "finseq_appl")
              (("2" (expand "product_of_sets")
                (("2" (skosimp)
                  (("2" (expand "finseq_appl")
                    (("2" (expand "member")
                      (("2"
                        (lemma
                         "R_sigma_b_in_ideal[T, +, *, zero, n!1]")
                        (("1"
                          (inst -1
                           "LAMBDA (k: below(n!1)): product_fs(fsc!1`seq(k))"
                           "fsA!1`seq(i!1)" "R!1" "n!1 - 1" "0")
                          (("1" (assert)
                            (("1" (hide (-3 3))
                              (("1"
                                (prop)
                                (("1"
                                  (typepred "fsA!1")
                                  (("1"
                                    (hide-all-but (-1 1))
                                    (("1"
                                      (expand "fsRI?")
                                      (("1"
                                        (expand "finseq_appl")
                                        (("1" (inst?) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skosimp)
                                  (("2"
                                    (inst?)
                                    (("2"
                                      (expand "cartesian_product_n")
                                      (("2"
                                        (expand "finseq_appl")
                                        (("2"
                                          (expand "member")
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (expand "product_fs")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (lemma
                                                   "product_fs_rec_in_each")
                                                  (("2"
                                                    (expand
                                                     "finseq_appl")
                                                    (("2"
                                                      (expand "member")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "R!1"
                                                         "fsA!1"
                                                         "i!1"
                                                         "fsc!1`seq(j!1)")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "cartesian_product_n")
                                                          (("2"
                                                            (expand
                                                             "finseq_appl")
                                                            (("2"
                                                              (expand
                                                               "member")
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide (-3 3))
                            (("2" (skosimp)
                              (("2"
                                (inst?)
                                (("2"
                                  (expand "cartesian_product_n")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but 1)
                          (("2" (rewrite "fullset_is_ring") nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fsI type-eq-decl nil ring_ideal_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (fsRI? const-decl "bool" ring_ideal_def nil)
    (ring? const-decl "bool" ring_def nil)
    (zero formal-const-decl "T" product_finseq_sets_ring nil)
    (* formal-const-decl "[T, T -> T]" product_finseq_sets_ring nil)
    (+ formal-const-decl "[T, T -> T]" product_finseq_sets_ring nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (T formal-nonempty-type-decl nil product_finseq_sets_ring nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (member const-decl "bool" sets nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (fullset_is_ring formula-decl nil quotient_rings nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (< const-decl "bool" reals nil) nil
    (below type-eq-decl nil naturalnumbers nil) nil
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_below_N type-eq-decl nil sigma_R_below nil)
    (product_fs const-decl "T" product_finseq_sets_ring nil)
    (cartesian_product_n const-decl "set[finseq[T]]"
     cartesian_product_finite nil)
    (product_fs_rec_in_each formula-decl nil product_finseq_sets_ring
     nil)
    (/= const-decl "boolean" notequal nil) nil nil nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (subrange type-eq-decl nil integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (fullset const-decl "set" sets nil)
    (R_sigma_b_in_ideal formula-decl nil sigma_R_below nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (product_of_sets const-decl "set[T]" product_finseq_sets_ring nil)
    (subset? const-decl "bool" sets nil))
   shostak))
 (product_of_ideals_subset_intersection 0
  (product_of_ideals_subset_intersection-1 nil 3782724842
   ("" (skosimp)
    (("" (expand "subset?")
      (("" (expand "member")
        (("" (skosimp)
          (("" (case "length(fsA!1) =  0")
            (("1" (lemma "card_seq2set[set[T]]")
              (("1" (inst?)
                (("1" (replaces -2)
                  (("1" (case "card[set[T]](seq2set(fsA!1)) = 0")
                    (("1" (hide (-2 -3))
                      (("1" (rewrite "card_is_0 ")
                        (("1" (expand "Intersection")
                          (("1" (skosimp)
                            (("1" (typepred "a!1")
                              (("1"
                                (replaces -2)
                                (("1"
                                  (expand "emptyset")
                                  (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "Intersection")
              (("2" (skosimp)
                (("2" (typepred "a!1")
                  (("2" (expand "seq2set")
                    (("2" (expand "finseq_appl")
                      (("2" (skosimp)
                        (("2" (replace -1 2 rl)
                          (("2" (hide -1)
                            (("2"
                              (lemma
                               "product_of_ideals_subset_of_each")
                              (("2"
                                (inst?)
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst -1 "kk!1")
                                    (("2"
                                      (expand "subset?")
                                      (("2"
                                        (expand "member")
                                        (("2"
                                          (expand "finseq_appl")
                                          (("2"
                                            (inst?)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset? const-decl "bool" sets nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (product_of_ideals_subset_of_each formula-decl nil
     product_finseq_sets_ring nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (card_seq2set formula-decl nil seq2set structures)
    (TRUE const-decl "bool" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Intersection const-decl "set" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil) nil
    (card_is_0 formula-decl nil finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (seq2set const-decl "finite_set[T]" seq2set structures)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-nonempty-type-decl nil product_finseq_sets_ring nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (+ formal-const-decl "[T, T -> T]" product_finseq_sets_ring nil)
    (* formal-const-decl "[T, T -> T]" product_finseq_sets_ring nil)
    (zero formal-const-decl "T" product_finseq_sets_ring nil)
    (ring? const-decl "bool" ring_def nil)
    (fsRI? const-decl "bool" ring_ideal_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (fsI type-eq-decl nil ring_ideal_def nil)
    (member const-decl "bool" sets nil))
   shostak))
 (cartesian_product_fs_representative_TCC1 0
  (cartesian_product_fs_representative_TCC1-1 nil 3782985267
   ("" (skosimp)
    (("" (typepred "y!1")
      (("" (expand "cartesian_product_n")
        (("" (prop)
          (("1" (expand "emptyset") (("1" (propax) nil nil)) nil)
           ("2" (hide (-2 1))
            (("2" (typepred "i!1" "r!1")
              (("2" (expand "fsQ")
                (("2" (lift-if)
                  (("2" (prop)
                    (("1" (expand "empty_seq") (("1" (assert) nil nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fsQ const-decl "finseq[setof[set[T]]]" cartesian_product_quot_ring
     nil)
    (setof type-eq-decl nil defined_types nil)
    (fsI type-eq-decl nil ring_ideal_def nil)
    (fsRI? const-decl "bool" ring_ideal_def nil)
    (ring? const-decl "bool" ring_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (zero formal-const-decl "T" product_finseq_sets_ring nil)
    (* formal-const-decl "[T, T -> T]" product_finseq_sets_ring nil)
    (+ formal-const-decl "[T, T -> T]" product_finseq_sets_ring nil)
    (cartesian_product_n const-decl "set[finseq[T]]"
     cartesian_product_finite nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil product_finseq_sets_ring nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (emptyset const-decl "set" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty_seq const-decl "finseq" finite_sequences nil))
   nil
   (cartesian_product_fs_representative subtype
    "product_finseq_sets_ring.i" "below[length(r)]")))
 (cartesian_product_fs_representative_TCC2 0
  (cartesian_product_fs_representative_TCC2-1 nil 3782985267
   ("" (skosimp*)
    (("" (typepred "y!1")
      (("" (expand "cartesian_product_n")
        (("" (prop)
          (("1" (expand "emptyset") (("1" (propax) nil nil)) nil)
           ("2" (hide (-2 1))
            (("2" (typepred "i!1")
              (("2" (expand "fsQ")
                (("2" (lift-if)
                  (("2" (prop)
                    (("1" (expand "empty_seq") (("1" (assert) nil nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fsQ const-decl "finseq[setof[set[T]]]" cartesian_product_quot_ring
     nil)
    (setof type-eq-decl nil defined_types nil)
    (fsI type-eq-decl nil ring_ideal_def nil)
    (fsRI? const-decl "bool" ring_ideal_def nil)
    (ring? const-decl "bool" ring_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (zero formal-const-decl "T" product_finseq_sets_ring nil)
    (* formal-const-decl "[T, T -> T]" product_finseq_sets_ring nil)
    (+ formal-const-decl "[T, T -> T]" product_finseq_sets_ring nil)
    (cartesian_product_n const-decl "set[finseq[T]]"
     cartesian_product_finite nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil product_finseq_sets_ring nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (emptyset const-decl "set" sets nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty_seq const-decl "finseq" finite_sequences nil))
   nil
   (cartesian_product_fs_representative subtype
    "product_finseq_sets_ring.i" "below[length(fsA)]")))
 (cartesian_product_fs_representative 0
  (cartesian_product_fs_representative-1 nil 3782986032
   ("" (expand "finseq_appl")
    (("" (skolem 1 ("R!1" "_" "_"))
      (("" (measure-induct+ "length(fsA)" "fsA")
        (("1" (skosimp)
          (("1" (typepred "y!1")
            (("1" (case "length(x!1) = 0")
              (("1" (hide -3)
                (("1" (expand "cartesian_product_n")
                  (("1" (prop)
                    (("1" (expand "emptyset") (("1" (propax) nil nil))
                      nil)
                     ("2" (hide (-2 2))
                      (("2" (expand "fsQ")
                        (("2" (assert)
                          (("2" (expand "empty_seq")
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (case "length(x!1) =  1")
                (("1" (hide -3)
                  (("1" (expand "cartesian_product_n")
                    (("1" (prop)
                      (("1" (expand "emptyset")
                        (("1" (propax) nil nil)) nil)
                       ("2" (expand "finseq_appl")
                        (("2" (expand "member")
                          (("2" (expand "fsQ")
                            (("2" (assert)
                              (("2"
                                (inst -2 "0")
                                (("2"
                                  (expand "finseq_appl")
                                  (("2"
                                    (expand "/")
                                    (("2"
                                      (expand "coset?")
                                      (("2"
                                        (expand "left_coset?")
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (hide (-3 1))
                                            (("2"
                                              (skosimp)
                                              (("2"
                                                (inst 2 "#( a!1 )")
                                                (("1"
                                                  (skosimp)
                                                  (("1"
                                                    (typepred "i!1")
                                                    (("1"
                                                      (replaces -4)
                                                      (("1"
                                                        (replaces -2)
                                                        (("1"
                                                          (expand "#")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "#")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (inst -2 "rest(x!1)")
                  (("1" (inst -2 "rest(y!1)")
                    (("1" (prop)
                      (("1" (skosimp)
                        (("1" (expand "cartesian_product_n")
                          (("1" (expand "finseq_appl")
                            (("1" (expand "member")
                              (("1"
                                (prop)
                                (("1"
                                  (expand "emptyset")
                                  (("1" (propax) nil nil))
                                  nil)
                                 ("2"
                                  (expand "fsQ")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "finseq_appl")
                                      (("2"
                                        (expand "/")
                                        (("2"
                                          (inst -2 "0")
                                          (("2"
                                            (expand "coset?")
                                            (("2"
                                              (expand "left_coset?")
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (hide (-3 1))
                                                  (("2"
                                                    (skosimp)
                                                    (("2"
                                                      (inst
                                                       3
                                                       "add_first(a!1, r!1)")
                                                      (("1"
                                                        (skosimp)
                                                        (("1"
                                                          (case-replace
                                                           "i!1 = 0"
                                                           :hide?
                                                           T)
                                                          (("1"
                                                            (hide -3)
                                                            (("1"
                                                              (expand
                                                               "add_first")
                                                              (("1"
                                                                (expand
                                                                 "insert?")
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "add_first")
                                                            (("2"
                                                              (expand
                                                               "insert?")
                                                              (("2"
                                                                (expand
                                                                 "finseq_appl")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (inst
                                                                     -3
                                                                     "i!1 - 1")
                                                                    (("1"
                                                                      (expand
                                                                       "rest")
                                                                      (("1"
                                                                        (expand
                                                                         "^")
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       (-2
                                                                        5))
                                                                      (("2"
                                                                        (expand
                                                                         "rest")
                                                                        (("2"
                                                                          (expand
                                                                           "^")
                                                                          (("2"
                                                                            (expand
                                                                             "min")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide (-2 -3))
                                                        (("2"
                                                          (typepred
                                                           "r!1")
                                                          (("2"
                                                            (expand
                                                             "rest")
                                                            (("2"
                                                              (expand
                                                               "^")
                                                              (("2"
                                                                (expand
                                                                 "min")
                                                                (("2"
                                                                  (expand
                                                                   "add_first")
                                                                  (("2"
                                                                    (expand
                                                                     "insert?")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 4)
                        (("2" (expand "cartesian_product_n")
                          (("2" (expand "finseq_appl")
                            (("2" (expand "member")
                              (("2"
                                (assert)
                                (("2"
                                  (prop)
                                  (("1" (grind) nil nil)
                                   ("2"
                                    (hide -2)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil)
                   ("2" (hide (-1 4))
                    (("2" (typepred "x!1")
                      (("2" (expand "fsRI?")
                        (("2" (expand "finseq_appl")
                          (("2" (skosimp)
                            (("2" (inst -1 "i!1 + 1")
                              (("1"
                                (expand "rest")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "^")
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (typepred "i!1")
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide (-2 2))
          (("2" (skosimp)
            (("2" (typepred "i!1")
              (("2" (typepred "y!2")
                (("2" (expand "cartesian_product_n")
                  (("2" (prop)
                    (("1" (expand "emptyset") (("1" (propax) nil nil))
                      nil)
                     ("2" (hide -2) (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (hide (-2 2))
          (("3" (skosimp)
            (("3" (typepred "i!1")
              (("3" (typepred "y!2")
                (("3" (expand "cartesian_product_n")
                  (("3" (prop)
                    (("1" (expand "emptyset") (("1" (propax) nil nil))
                      nil)
                     ("2" (hide -2) (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("4" (hide 2)
          (("4" (typepred "i!1")
            (("4" (typepred "y!1")
              (("4" (expand "cartesian_product_n")
                (("4" (prop)
                  (("1" (expand "emptyset") (("1" (propax) nil nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("5" (hide 2)
          (("5" (typepred "i!1")
            (("5" (typepred "y!1")
              (("5" (expand "cartesian_product_n")
                (("5" (prop)
                  (("1" (expand "emptyset") (("1" (propax) nil nil))
                    nil)
                   ("2" (hide -2) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((empty_seq const-decl "finseq" finite_sequences nil)
    (emptyset const-decl "set" sets nil)
    (rest const-decl "finseq" seq_extras structures)
    (right_coset? const-decl "bool" cosets_def nil)
    (> const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (add_first const-decl "finseq" seq_extras structures) nil nil
    (insert? const-decl "finseq" seq_extras structures)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^ const-decl "finseq" finite_sequences nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    nil
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    nil
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    nil (member const-decl "bool" sets nil)
    (coset? const-decl "bool" cosets_def nil)
    (TRUE const-decl "bool" booleans nil) nil nil
    (|#| const-decl "finite_sequence[T]" set2seq structures)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (left_coset? const-decl "bool" cosets_def nil)
    (/ const-decl "setof[set[T]]" cosets_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) nil nil
    (cartesian_product_n const-decl "set[finseq[T]]"
     cartesian_product_finite nil)
    (setof type-eq-decl nil defined_types nil)
    (fsQ const-decl "finseq[setof[set[T]]]" cartesian_product_quot_ring
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (fsI type-eq-decl nil ring_ideal_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (fsRI? const-decl "bool" ring_ideal_def nil)
    (ring? const-decl "bool" ring_def nil)
    (zero formal-const-decl "T" product_finseq_sets_ring nil)
    (* formal-const-decl "[T, T -> T]" product_finseq_sets_ring nil)
    (+ formal-const-decl "[T, T -> T]" product_finseq_sets_ring nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-nonempty-type-decl nil product_finseq_sets_ring nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   shostak)))

