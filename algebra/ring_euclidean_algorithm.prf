(ring_euclidean_algorithm
 (IMP_euclidean_domain_TCC1 0
  (IMP_euclidean_domain_TCC1-1 nil 3859538045
   ("" (lemma "fullset_is_ring_with_one") (("" (propax) nil nil)) nil)
   ((fullset_is_ring_with_one formula-decl nil ring_euclidean_algorithm
     nil))
   nil
   (IMP_euclidean_domain assuming
    "euclidean_domain[ring_euclidean_algorithm.T, ring_euclidean_algorithm.+, ring_euclidean_algorithm.*, ring_euclidean_algorithm.zero, ring_euclidean_algorithm.one].euclidean_domain"
    "fullset_is_ring_with_one: ASSUMPTION ring_with_one_def[euclidean_domain.T, euclidean_domain.+, euclidean_domain.*, euclidean_domain.zero, euclidean_domain.one].ring_with_one?(sets[euclidean_domain.T].fullset)")))
 (euclidean_gcd_algorithm_TCC1 0
  (euclidean_gcd_algorithm_TCC1-1 nil 3859538045
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil ring_euclidean_algorithm nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" ring_euclidean_algorithm nil)
    (* formal-const-decl "[T, T -> T]" ring_euclidean_algorithm nil)
    (zero formal-const-decl "T" ring_euclidean_algorithm nil)
    (one formal-const-decl "T" ring_euclidean_algorithm nil)
    (euclidean_domain? const-decl "bool" euclidean_domain_def nil)
    (euclidean_ring? const-decl "bool" euclidean_ring_def nil)
    (singleton? const-decl "bool" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (euclidean_pair? const-decl "bool" euclidean_ring_def nil)
    (remove const-decl "set" sets nil)
    (euclidean_f_phi? const-decl "bool" euclidean_ring_def nil) nil
    (star_closed? const-decl "bool" groupoid_def nil)
    (plus_zero formula-decl nil ring nil)
    (restrict const-decl "R" restrict nil)
    (zero_plus formula-decl nil ring nil)
    (identity? const-decl "bool" operator_defs nil)
    (monad? const-decl "bool" monad_def nil)
    (associative? const-decl "bool" operator_defs nil)
    (monoid? const-decl "bool" monoid_def nil)
    (inv_exists? const-decl "bool" group_def nil)
    (group? const-decl "bool" group_def nil)
    (commutative? const-decl "bool" operator_defs nil)
    (abelian_group? const-decl "bool" group_def nil)
    (left_distributive? const-decl "bool" operator_defs_more nil)
    (right_distributive? const-decl "bool" operator_defs_more nil)
    (ring? const-decl "bool" ring_def nil)
    (commutative_ring? const-decl "bool" ring_def nil)
    (/= const-decl "boolean" notequal nil)
    (nz_closed? const-decl "bool" ring_nz_closed_def nil)
    (integral_domain? const-decl "bool" integral_domain_def nil)
    (right_identity formula-decl nil monad nil)
    (left_identity formula-decl nil monad nil)
    (integral_domain_w_one? const-decl "bool"
     integral_domain_with_one_def nil)
    (member const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (difference const-decl "set" sets nil))
   nil
   (euclidean_gcd_algorithm subtype "ring_euclidean_algorithm.b"
    "(sets[ring_euclidean_algorithm.T].difference(ring_euclidean_algorithm.R, sets[ring_euclidean_algorithm.T].singleton(ring_euclidean_algorithm.zero)))")))
 (euclidean_gcd_algorithm_TCC2 0
  (euclidean_gcd_algorithm_TCC2-1 nil 3859538045
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil ring_euclidean_algorithm nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" ring_euclidean_algorithm nil)
    (* formal-const-decl "[T, T -> T]" ring_euclidean_algorithm nil)
    (zero formal-const-decl "T" ring_euclidean_algorithm nil)
    (one formal-const-decl "T" ring_euclidean_algorithm nil)
    (euclidean_domain? const-decl "bool" euclidean_domain_def nil)
    (euclidean_ring? const-decl "bool" euclidean_ring_def nil)
    (singleton? const-decl "bool" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (euclidean_pair? const-decl "bool" euclidean_ring_def nil)
    (remove const-decl "set" sets nil)
    (euclidean_f_phi? const-decl "bool" euclidean_ring_def nil)
    (member const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (difference const-decl "set" sets nil))
   nil
   (euclidean_gcd_algorithm subtype "ring_euclidean_algorithm.a"
    "(sets[ring_euclidean_algorithm.T].difference(ring_euclidean_algorithm.R, sets[ring_euclidean_algorithm.T].singleton(ring_euclidean_algorithm.zero)))")))
 (euclidean_gcd_algorithm_TCC3 0
  (euclidean_gcd_algorithm_TCC3-1 nil 3859538045
   ("" (skeep)
    (("" (typepred "z`2")
      (("" (expand "difference")
        (("" (expand "remove")
          (("" (expand "member")
            (("" (expand "singleton") (("" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((euclidean_f_phi? const-decl "bool" euclidean_ring_def nil)
    (euclidean_pair? const-decl "bool" euclidean_ring_def nil)
    (euclidean_ring? const-decl "bool" euclidean_ring_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (difference const-decl "set" sets nil)
    (euclidean_domain? const-decl "bool" euclidean_domain_def nil)
    (one formal-const-decl "T" ring_euclidean_algorithm nil)
    (* formal-const-decl "[T, T -> T]" ring_euclidean_algorithm nil)
    (+ formal-const-decl "[T, T -> T]" ring_euclidean_algorithm nil)
    (zero formal-const-decl "T" ring_euclidean_algorithm nil)
    (remove const-decl "set" sets nil) (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil ring_euclidean_algorithm nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (/= const-decl "boolean" notequal nil)
    (member const-decl "bool" sets nil))
   nil
   (euclidean_gcd_algorithm subtype "ring_euclidean_algorithm.z`2"
    "(sets[ring_euclidean_algorithm.T].difference(d1`1, sets[ring_euclidean_algorithm.T].singleton(ring_euclidean_algorithm.zero)))")))
 (euclidean_gcd_algorithm_TCC4 0
  (euclidean_gcd_algorithm_TCC4-1 nil 3859538045
   ("" (subtype-tcc) nil nil)
   ((member const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (difference const-decl "set" sets nil))
   nil
   (euclidean_gcd_algorithm subtype "ring_euclidean_algorithm.z`1"
    "(sets[ring_euclidean_algorithm.T].difference(d1`1, sets[ring_euclidean_algorithm.T].singleton(ring_euclidean_algorithm.zero)))")))
 (euclidean_gcd_algorithm_TCC5 0
  (euclidean_gcd_algorithm_TCC5-1 nil 3859538045
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil ring_euclidean_algorithm nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" ring_euclidean_algorithm nil)
    (* formal-const-decl "[T, T -> T]" ring_euclidean_algorithm nil)
    (zero formal-const-decl "T" ring_euclidean_algorithm nil)
    (one formal-const-decl "T" ring_euclidean_algorithm nil)
    (euclidean_domain? const-decl "bool" euclidean_domain_def nil)
    (remove const-decl "set" sets nil) nil
    (star_closed? const-decl "bool" groupoid_def nil)
    (plus_zero formula-decl nil ring nil)
    (restrict const-decl "R" restrict nil)
    (zero_plus formula-decl nil ring nil)
    (identity? const-decl "bool" operator_defs nil)
    (monad? const-decl "bool" monad_def nil)
    (associative? const-decl "bool" operator_defs nil)
    (monoid? const-decl "bool" monoid_def nil)
    (inv_exists? const-decl "bool" group_def nil)
    (group? const-decl "bool" group_def nil)
    (commutative? const-decl "bool" operator_defs nil)
    (abelian_group? const-decl "bool" group_def nil)
    (left_distributive? const-decl "bool" operator_defs_more nil)
    (right_distributive? const-decl "bool" operator_defs_more nil)
    (ring? const-decl "bool" ring_def nil)
    (commutative_ring? const-decl "bool" ring_def nil)
    (/= const-decl "boolean" notequal nil)
    (euclidean_ring? const-decl "bool" euclidean_ring_def nil)
    (nz_closed? const-decl "bool" ring_nz_closed_def nil)
    (integral_domain? const-decl "bool" integral_domain_def nil)
    (right_identity formula-decl nil monad nil)
    (left_identity formula-decl nil monad nil)
    (integral_domain_w_one? const-decl "bool"
     integral_domain_with_one_def nil)
    (member const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (difference const-decl "set" sets nil))
   nil
   (euclidean_gcd_algorithm subtype "ring_euclidean_algorithm.b"
    "(sets[ring_euclidean_algorithm.T].difference(ring_euclidean_algorithm.R, sets[ring_euclidean_algorithm.T].singleton(ring_euclidean_algorithm.zero)))")))
 (euclidean_gcd_algorithm_TCC6 0
  (euclidean_gcd_algorithm_TCC6-1 nil 3859538045
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil ring_euclidean_algorithm nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" ring_euclidean_algorithm nil)
    (* formal-const-decl "[T, T -> T]" ring_euclidean_algorithm nil)
    (zero formal-const-decl "T" ring_euclidean_algorithm nil)
    (one formal-const-decl "T" ring_euclidean_algorithm nil)
    (euclidean_domain? const-decl "bool" euclidean_domain_def nil)
    (member const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (difference const-decl "set" sets nil))
   nil
   (euclidean_gcd_algorithm subtype "ring_euclidean_algorithm.a"
    "(sets[ring_euclidean_algorithm.T].difference(ring_euclidean_algorithm.R, sets[ring_euclidean_algorithm.T].singleton(ring_euclidean_algorithm.zero)))")))
 (euclidean_gcd_algorithm_TCC7 0
  (euclidean_gcd_algorithm_TCC7-1 nil 3859538045
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil ring_euclidean_algorithm nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" ring_euclidean_algorithm nil)
    (* formal-const-decl "[T, T -> T]" ring_euclidean_algorithm nil)
    (zero formal-const-decl "T" ring_euclidean_algorithm nil)
    (one formal-const-decl "T" ring_euclidean_algorithm nil)
    (euclidean_domain? const-decl "bool" euclidean_domain_def nil)
    (euclidean_ring? const-decl "bool" euclidean_ring_def nil)
    (difference const-decl "set" sets nil)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (euclidean_pair? const-decl "bool" euclidean_ring_def nil)
    (remove const-decl "set" sets nil)
    (euclidean_f_phi? const-decl "bool" euclidean_ring_def nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (integral_domain_w_one? const-decl "bool"
     integral_domain_with_one_def nil)
    (left_identity formula-decl nil monad nil)
    (right_identity formula-decl nil monad nil)
    (integral_domain? const-decl "bool" integral_domain_def nil)
    (nz_closed? const-decl "bool" ring_nz_closed_def nil)
    (/= const-decl "boolean" notequal nil)
    (commutative_ring? const-decl "bool" ring_def nil)
    (ring? const-decl "bool" ring_def nil)
    (right_distributive? const-decl "bool" operator_defs_more nil)
    (left_distributive? const-decl "bool" operator_defs_more nil)
    (abelian_group? const-decl "bool" group_def nil)
    (commutative? const-decl "bool" operator_defs nil)
    (group? const-decl "bool" group_def nil)
    (inv_exists? const-decl "bool" group_def nil)
    (monoid? const-decl "bool" monoid_def nil)
    (associative? const-decl "bool" operator_defs nil)
    (monad? const-decl "bool" monad_def nil)
    (identity? const-decl "bool" operator_defs nil)
    (zero_plus formula-decl nil ring nil)
    (restrict const-decl "R" restrict nil)
    (plus_zero formula-decl nil ring nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (member const-decl "bool" sets nil))
   nil
   (euclidean_gcd_algorithm subtype "ring_euclidean_algorithm.b"
    "(ring_euclidean_algorithm.R)")))
 (euclidean_gcd_algorithm_TCC8 0
  (euclidean_gcd_algorithm_TCC8-1 nil 3859538045
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil ring_euclidean_algorithm nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" ring_euclidean_algorithm nil)
    (* formal-const-decl "[T, T -> T]" ring_euclidean_algorithm nil)
    (zero formal-const-decl "T" ring_euclidean_algorithm nil)
    (one formal-const-decl "T" ring_euclidean_algorithm nil)
    (euclidean_domain? const-decl "bool" euclidean_domain_def nil)
    (euclidean_ring? const-decl "bool" euclidean_ring_def nil)
    (difference const-decl "set" sets nil)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (euclidean_pair? const-decl "bool" euclidean_ring_def nil)
    (euclidean_f_phi? const-decl "bool" euclidean_ring_def nil)
    (/= const-decl "boolean" notequal nil)
    (member const-decl "bool" sets nil)
    (remove const-decl "set" sets nil))
   nil
   (euclidean_gcd_algorithm subtype "ring_euclidean_algorithm.rem"
    "(sets[ring_euclidean_algorithm.T].remove(ring_euclidean_algorithm.zero, ring_euclidean_algorithm.R))")))
 (euclidean_gcd_algorithm_TCC9 0
  (euclidean_gcd_algorithm_TCC9-1 nil 3859538045
   ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil ring_euclidean_algorithm nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" ring_euclidean_algorithm nil)
    (* formal-const-decl "[T, T -> T]" ring_euclidean_algorithm nil)
    (zero formal-const-decl "T" ring_euclidean_algorithm nil)
    (one formal-const-decl "T" ring_euclidean_algorithm nil)
    (euclidean_domain? const-decl "bool" euclidean_domain_def nil)
    (euclidean_ring? const-decl "bool" euclidean_ring_def nil)
    (difference const-decl "set" sets nil)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (euclidean_pair? const-decl "bool" euclidean_ring_def nil)
    (euclidean_f_phi? const-decl "bool" euclidean_ring_def nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    nil nil (= const-decl "[T, T -> boolean]" equalities nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    nil nil nil (star_closed? const-decl "bool" groupoid_def nil)
    (plus_zero formula-decl nil ring nil)
    (restrict const-decl "R" restrict nil)
    (zero_plus formula-decl nil ring nil)
    (identity? const-decl "bool" operator_defs nil)
    (monad? const-decl "bool" monad_def nil)
    (associative? const-decl "bool" operator_defs nil)
    (monoid? const-decl "bool" monoid_def nil)
    (inv_exists? const-decl "bool" group_def nil)
    (group? const-decl "bool" group_def nil)
    (commutative? const-decl "bool" operator_defs nil)
    (abelian_group? const-decl "bool" group_def nil)
    (left_distributive? const-decl "bool" operator_defs_more nil)
    (right_distributive? const-decl "bool" operator_defs_more nil)
    (ring? const-decl "bool" ring_def nil)
    (commutative_ring? const-decl "bool" ring_def nil)
    (nz_closed? const-decl "bool" ring_nz_closed_def nil)
    (integral_domain? const-decl "bool" integral_domain_def nil)
    (right_identity formula-decl nil monad nil)
    (left_identity formula-decl nil monad nil)
    (integral_domain_w_one? const-decl "bool"
     integral_domain_with_one_def nil)
    (< def-decl "bool" ordinals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (lex2 const-decl "ordinal" lex2 nil)
    (remove const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (euclidean_gcd_algorithm termination
    "ring_euclidean_algorithm.euclidean_gcd_algorithm(ring_euclidean_algorithm.R, ring_euclidean_algorithm.phi, ring_euclidean_algorithm.f_phi)(ring_euclidean_algorithm.b, ring_euclidean_algorithm.rem)"
    "nil")))
 (euclidean_gcd_algorithm_TCC10 0
  (euclidean_gcd_algorithm_TCC10-1 nil 3859538045
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil ring_euclidean_algorithm nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" ring_euclidean_algorithm nil)
    (* formal-const-decl "[T, T -> T]" ring_euclidean_algorithm nil)
    (zero formal-const-decl "T" ring_euclidean_algorithm nil)
    (one formal-const-decl "T" ring_euclidean_algorithm nil)
    (euclidean_domain? const-decl "bool" euclidean_domain_def nil)
    (euclidean_ring? const-decl "bool" euclidean_ring_def nil)
    (difference const-decl "set" sets nil)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (euclidean_pair? const-decl "bool" euclidean_ring_def nil)
    (remove const-decl "set" sets nil)
    (euclidean_f_phi? const-decl "bool" euclidean_ring_def nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (integral_domain_w_one? const-decl "bool"
     integral_domain_with_one_def nil)
    (left_identity formula-decl nil monad nil)
    (right_identity formula-decl nil monad nil)
    (integral_domain? const-decl "bool" integral_domain_def nil)
    (nz_closed? const-decl "bool" ring_nz_closed_def nil)
    (/= const-decl "boolean" notequal nil)
    (commutative_ring? const-decl "bool" ring_def nil)
    (ring? const-decl "bool" ring_def nil)
    (right_distributive? const-decl "bool" operator_defs_more nil)
    (left_distributive? const-decl "bool" operator_defs_more nil)
    (abelian_group? const-decl "bool" group_def nil)
    (commutative? const-decl "bool" operator_defs nil)
    (group? const-decl "bool" group_def nil)
    (inv_exists? const-decl "bool" group_def nil)
    (monoid? const-decl "bool" monoid_def nil)
    (associative? const-decl "bool" operator_defs nil)
    (monad? const-decl "bool" monad_def nil)
    (identity? const-decl "bool" operator_defs nil)
    (zero_plus formula-decl nil ring nil)
    (restrict const-decl "R" restrict nil)
    (plus_zero formula-decl nil ring nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (member const-decl "bool" sets nil))
   nil
   (euclidean_gcd_algorithm subtype "ring_euclidean_algorithm.b"
    "(ring_euclidean_algorithm.R)")))
 (euclidean_gcd_algorithm_TCC11 0
  (euclidean_gcd_algorithm_TCC11-1 nil 3859538045
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil ring_euclidean_algorithm nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" ring_euclidean_algorithm nil)
    (* formal-const-decl "[T, T -> T]" ring_euclidean_algorithm nil)
    (zero formal-const-decl "T" ring_euclidean_algorithm nil)
    (one formal-const-decl "T" ring_euclidean_algorithm nil)
    (euclidean_domain? const-decl "bool" euclidean_domain_def nil)
    (euclidean_ring? const-decl "bool" euclidean_ring_def nil)
    (difference const-decl "set" sets nil)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (euclidean_pair? const-decl "bool" euclidean_ring_def nil)
    (euclidean_f_phi? const-decl "bool" euclidean_ring_def nil)
    (/= const-decl "boolean" notequal nil)
    (member const-decl "bool" sets nil)
    (remove const-decl "set" sets nil))
   nil
   (euclidean_gcd_algorithm subtype "ring_euclidean_algorithm.a"
    "(sets[ring_euclidean_algorithm.T].remove(ring_euclidean_algorithm.zero, ring_euclidean_algorithm.R))")))
 (euclidean_gcd_algorithm_TCC12 0
  (euclidean_gcd_algorithm_TCC12-1 nil 3859538045
   ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil ring_euclidean_algorithm nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" ring_euclidean_algorithm nil)
    (* formal-const-decl "[T, T -> T]" ring_euclidean_algorithm nil)
    (zero formal-const-decl "T" ring_euclidean_algorithm nil)
    (one formal-const-decl "T" ring_euclidean_algorithm nil)
    (euclidean_domain? const-decl "bool" euclidean_domain_def nil)
    (euclidean_ring? const-decl "bool" euclidean_ring_def nil)
    (difference const-decl "set" sets nil)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (euclidean_pair? const-decl "bool" euclidean_ring_def nil)
    (remove const-decl "set" sets nil)
    (euclidean_f_phi? const-decl "bool" euclidean_ring_def nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (< def-decl "bool" ordinals nil)
    (integral_domain_w_one? const-decl "bool"
     integral_domain_with_one_def nil)
    (left_identity formula-decl nil monad nil)
    (right_identity formula-decl nil monad nil)
    (integral_domain? const-decl "bool" integral_domain_def nil)
    (nz_closed? const-decl "bool" ring_nz_closed_def nil)
    (/= const-decl "boolean" notequal nil)
    (commutative_ring? const-decl "bool" ring_def nil)
    (ring? const-decl "bool" ring_def nil)
    (right_distributive? const-decl "bool" operator_defs_more nil)
    (left_distributive? const-decl "bool" operator_defs_more nil)
    (abelian_group? const-decl "bool" group_def nil)
    (commutative? const-decl "bool" operator_defs nil)
    (group? const-decl "bool" group_def nil)
    (inv_exists? const-decl "bool" group_def nil)
    (monoid? const-decl "bool" monoid_def nil)
    (associative? const-decl "bool" operator_defs nil)
    (monad? const-decl "bool" monad_def nil)
    (identity? const-decl "bool" operator_defs nil)
    (zero_plus formula-decl nil ring nil)
    (restrict const-decl "R" restrict nil)
    (plus_zero formula-decl nil ring nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (member const-decl "bool" sets nil)
    (lex2 const-decl "ordinal" lex2 nil))
   nil
   (euclidean_gcd_algorithm termination
    "ring_euclidean_algorithm.euclidean_gcd_algorithm(ring_euclidean_algorithm.R, ring_euclidean_algorithm.phi, ring_euclidean_algorithm.f_phi)(ring_euclidean_algorithm.b, ring_euclidean_algorithm.a)"
    "nil")))
 (Euclid_theorem_TCC1 0
  (Euclid_theorem_TCC1-1 nil 3859538045
   ("" (skeep)
    (("" (prop)
      (("1" (expand "empty?")
        (("1" (inst -1 "a")
          (("1" (expand "member")
            (("1" (expand "extend") (("1" (propax) nil nil)) nil))
            nil))
          nil))
        nil)
       ("2" (expand "subset?")
        (("2" (skeep)
          (("2" (expand "member")
            (("2" (expand "extend") (("2" (prop) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((T formal-nonempty-type-decl nil ring_euclidean_algorithm nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" ring_euclidean_algorithm nil)
    (* formal-const-decl "[T, T -> T]" ring_euclidean_algorithm nil)
    (zero formal-const-decl "T" ring_euclidean_algorithm nil)
    (one formal-const-decl "T" ring_euclidean_algorithm nil)
    (euclidean_domain? const-decl "bool" euclidean_domain_def nil)
    (extend const-decl "R" extend nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil))
   nil
   (Euclid_theorem subtype
    "extend[ring_euclidean_algorithm.T, (ring_euclidean_algorithm.R), booleans.bool, booleans.FALSE].extend({x: (ring_euclidean_algorithm.R) | booleans.OR(x = ring_euclidean_algorithm.a, x = ring_euclidean_algorithm.b)})"
    "{X | booleans.AND((booleans.NOT)(sets[ring_euclidean_algorithm.T].empty?(X)), sets[ring_euclidean_algorithm.T].subset?(X, ring_euclidean_algorithm.R))}")))
 (Euclid_theorem_TCC2 0
  (Euclid_theorem_TCC2-1 nil 3859538045
   ("" (skeep)
    (("" (prop)
      (("1" (expand "empty?")
        (("1" (inst -1 "b")
          (("1" (expand "member")
            (("1" (expand "extend")
              (("1" (prop)
                (("1" (typepred "b")
                  (("1" (expand "remove")
                    (("1" (expand "member") (("1" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "subset?")
        (("2" (skeep)
          (("2" (expand "member")
            (("2" (expand "extend") (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((T formal-nonempty-type-decl nil ring_euclidean_algorithm nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil) (remove const-decl "set" sets nil)
    (zero formal-const-decl "T" ring_euclidean_algorithm nil)
    (+ formal-const-decl "[T, T -> T]" ring_euclidean_algorithm nil)
    (* formal-const-decl "[T, T -> T]" ring_euclidean_algorithm nil)
    (one formal-const-decl "T" ring_euclidean_algorithm nil)
    (euclidean_domain? const-decl "bool" euclidean_domain_def nil)
    (extend const-decl "R" extend nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil))
   nil
   (Euclid_theorem subtype
    "extend[ring_euclidean_algorithm.T, (ring_euclidean_algorithm.R), booleans.bool, booleans.FALSE].extend({x: (ring_euclidean_algorithm.R) | booleans.OR(x = (ring_euclidean_algorithm.f_phi(ring_euclidean_algorithm.a, ring_euclidean_algorithm.b))`2, x = ring_euclidean_algorithm.b)})"
    "{X | booleans.AND((booleans.NOT)(sets[ring_euclidean_algorithm.T].empty?(X)), sets[ring_euclidean_algorithm.T].subset?(X, ring_euclidean_algorithm.R))}")))
 (Euclid_theorem 0
  (Euclid_theorem-1 nil 3859538055
   ("" (skeep)
    (("" (prop)
      (("1" (expand "gcd?" 1)
        (("1" (prop)
          (("1" (skeep)
            (("1" (expand "member")
              (("1" (expand "extend")
                (("1" (prop)
                  (("1" (replaces -1)
                    (("1" (expand "divides?")
                      (("1" (typepred "f_phi")
                        (("1" (expand "euclidean_f_phi?")
                          (("1" (inst -1 "a" "b")
                            (("1" (prop)
                              (("1"
                                (inst 1 "zero")
                                (("1"
                                  (hide-all-but (-2 1))
                                  (("1" (grind) nil nil))
                                  nil)
                                 ("2"
                                  (lemma
                                   "zero_is_member_R[T,+,*,zero]")
                                  (("2"
                                    (typepred "R")
                                    (("2"
                                      (expand "euclidean_domain?")
                                      (("2"
                                        (expand "euclidean_ring?")
                                        (("2"
                                          (expand "commutative_ring?")
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (inst -5 "R")
                                              (("2"
                                                (expand "member")
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (replaces -1)
                                (("2"
                                  (inst 2 "zero")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil)
                               ("3"
                                (expand "gcd?")
                                (("3"
                                  (flatten)
                                  (("3"
                                    (inst-cp -4 "a")
                                    (("3"
                                      (expand "member")
                                      (("3"
                                        (inst -4 "b")
                                        (("3"
                                          (prop)
                                          (("1"
                                            (expand "divides?")
                                            (("1"
                                              (skeep*)
                                              (("1"
                                                (inst
                                                 3
                                                 "x!1+inv(f_phi(a, b)`1*x)")
                                                (("1"
                                                  (replace -1 -3 rl)
                                                  (("1"
                                                    (hide -1)
                                                    (("1"
                                                      (replace
                                                       -4
                                                       -2
                                                       rl)
                                                      (("1"
                                                        (hide -4)
                                                        (("1"
                                                          (rewrite
                                                           "times_associative"
                                                           :dir
                                                           rl)
                                                          (("1"
                                                            (hide -4)
                                                            (("1"
                                                              (typepred
                                                               "R")
                                                              (("1"
                                                                (expand
                                                                 "euclidean_domain?")
                                                                (("1"
                                                                  (expand
                                                                   "euclidean_ring?")
                                                                  (("1"
                                                                    (expand
                                                                     "commutative_ring?")
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (hide
                                                                         -3
                                                                         -4)
                                                                        (("1"
                                                                          (expand
                                                                           "commutative?")
                                                                          (("1"
                                                                            (inst
                                                                             -2
                                                                             "f_phi(g * x!1, g * x)`1"
                                                                             "g")
                                                                            (("1"
                                                                              (expand
                                                                               "restrict")
                                                                              (("1"
                                                                                (replaces
                                                                                 -2)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "cancel_right_plus[T,+,*,zero]")
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "right_distributive")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "g * x!1"
                                                                                       "(g * f_phi(g * x!1, g * x)`1) * x + f_phi(g * x!1, g * x)`2"
                                                                                       "inv((g * f_phi(g * x!1, g * x)`1) * x)")
                                                                                      (("1"
                                                                                        (prop)
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "plus_commutative[T,+,*,zero]")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             "(g * f_phi(g * x!1, g * x)`1) * x + f_phi(g * x!1, g * x)`2"
                                                                                             "inv((g * f_phi(g * x!1, g * x)`1) * x)")
                                                                                            (("1"
                                                                                              (replaces
                                                                                               -1)
                                                                                              (("1"
                                                                                                (rewrite
                                                                                                 "plus_associative"
                                                                                                 :dir
                                                                                                 rl)
                                                                                                (("1"
                                                                                                  (reveal
                                                                                                   (-9
                                                                                                    -10))
                                                                                                  (("1"
                                                                                                    (case
                                                                                                     "inv((g * f_phi(g * x!1, g * x)`1) * x) = (g * inv(f_phi(a, b)`1 * x))")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (hide
                                                                                                       -3
                                                                                                       -4
                                                                                                       -6
                                                                                                       -7
                                                                                                       2
                                                                                                       3
                                                                                                       4)
                                                                                                      (("2"
                                                                                                        (rewrite
                                                                                                         "times_associative")
                                                                                                        (("2"
                                                                                                          (rewrite
                                                                                                           "times_negative"
                                                                                                           :dir
                                                                                                           rl)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (typepred
                                                                               "g")
                                                                              (("2"
                                                                                (expand
                                                                                 "remove")
                                                                                (("2"
                                                                                  (expand
                                                                                   "member")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred "R")
                                                  (("2"
                                                    (expand
                                                     "euclidean_domain?")
                                                    (("2"
                                                      (expand
                                                       "euclidean_ring?")
                                                      (("2"
                                                        (expand
                                                         "commutative_ring?")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (hide
                                                             -2
                                                             -3
                                                             -4)
                                                            (("2"
                                                              (lemma
                                                               "R_sum_star_closed[T,+,*,zero]")
                                                              (("2"
                                                                (inst?)
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "R")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (lemma
                                                                       "inv_is_member_R[T,+,*,zero]")
                                                                      (("2"
                                                                        (inst?)
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "R")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (lemma
                                                                               "R_prod_star_closed[T,+,*,zero]")
                                                                              (("2"
                                                                                (inst?)
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "R")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (typepred "b")
                                            (("2"
                                              (expand "remove")
                                              (("2"
                                                (expand "member")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (replaces -1)
                    (("2" (expand "gcd?")
                      (("2" (prop)
                        (("2" (hide -3)
                          (("2" (inst -2 "b")
                            (("2" (prop)
                              (("2"
                                (hide-all-but 1)
                                (("2"
                                  (grind)
                                  (("2"
                                    (typepred "b")
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "gcd?")
            (("2" (prop)
              (("2" (hide -1)
                (("2" (skeep)
                  (("2" (inst -2 "c")
                    (("2" (assert)
                      (("2" (skeep)
                        (("2" (hide 1)
                          (("2" (expand "extend")
                            (("2" (prop)
                              (("1"
                                (replaces -1)
                                (("1"
                                  (copy -2)
                                  (("1"
                                    (inst -1 "(f_phi(a, b))`2 ")
                                    (("1"
                                      (prop)
                                      (("1"
                                        (inst -3 "b")
                                        (("1"
                                          (prop)
                                          (("1"
                                            (expand "divides?")
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (typepred "f_phi")
                                                  (("1"
                                                    (expand
                                                     "euclidean_f_phi?")
                                                    (("1"
                                                      (typepred "R")
                                                      (("1"
                                                        (expand
                                                         "euclidean_domain?")
                                                        (("1"
                                                          (expand
                                                           "euclidean_ring?")
                                                          (("1"
                                                            (expand
                                                             "commutative_ring?")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (hide
                                                                 -3
                                                                 -4)
                                                                (("1"
                                                                  (inst
                                                                   -3
                                                                   "a"
                                                                   "b")
                                                                  (("1"
                                                                    (case
                                                                     "a = zero")
                                                                    (("1"
                                                                      (inst
                                                                       1
                                                                       "zero")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (lemma
                                                                         "zero_is_member_R[T,+,*,zero]")
                                                                        (("2"
                                                                          (inst?)
                                                                          (("2"
                                                                            (expand
                                                                             "member")
                                                                            (("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (hide
                                                                           -4)
                                                                          (("2"
                                                                            (replace
                                                                             -5
                                                                             -3
                                                                             rl)
                                                                            (("2"
                                                                              (hide
                                                                               -5)
                                                                              (("2"
                                                                                (replace
                                                                                 -4
                                                                                 -3
                                                                                 rl)
                                                                                (("2"
                                                                                  (hide
                                                                                   -4)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "commutative?")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -2
                                                                                       "f_phi(a, c * x)`1"
                                                                                       "(c * x)")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "restrict")
                                                                                        (("1"
                                                                                          (replaces
                                                                                           -2)
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "times_associative")
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "right_distributive"
                                                                                               :dir
                                                                                               rl)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 2
                                                                                                 "((x * f_phi(a, c * x)`1) + x!1)")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (lemma
                                                                                                   "R_sum_star_closed[T,+,*,zero]")
                                                                                                  (("2"
                                                                                                    (inst?)
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "R")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (lemma
                                                                                                           "R_prod_star_closed[T,+,*,zero]")
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "R"
                                                                                                             "x"
                                                                                                             "f_phi(a, c * x)`1")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (lemma
                                                                                         "R_prod_star_closed[T,+,*,zero]")
                                                                                        (("2"
                                                                                          (inst?)
                                                                                          (("2"
                                                                                            (inst
                                                                                             -1
                                                                                             "R")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (typepred
                                                                                                 "c")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "remove")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "member")
                                                                                                    (("2"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (typepred "b")
                                            (("2"
                                              (expand "remove")
                                              (("2"
                                                (expand "member")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred "(f_phi(a, b))`2")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (inst -3 "b")
                                (("2"
                                  (prop)
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (typepred "b")
                                    (("2"
                                      (expand "remove")
                                      (("2"
                                        (expand "member")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "gcd?")
        (("2" (flatten)
          (("2" (typepred "R")
            (("2" (expand "euclidean_domain?")
              (("2" (expand "euclidean_ring?")
                (("2" (expand "commutative_ring?")
                  (("2" (flatten)
                    (("2" (hide -3 -4)
                      (("2" (split)
                        (("1" (skeep)
                          (("1" (expand "member")
                            (("1" (expand "extend")
                              (("1"
                                (prop)
                                (("1"
                                  (hide -6)
                                  (("1"
                                    (expand "divides?")
                                    (("1"
                                      (inst-cp -5 "(f_phi(a, b))`2")
                                      (("1"
                                        (inst -5 "b")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (skeep*)
                                              (("1"
                                                (typepred "f_phi")
                                                (("1"
                                                  (expand
                                                   "euclidean_f_phi?")
                                                  (("1"
                                                    (inst -1 "a" "b")
                                                    (("1"
                                                      (case "a = zero")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst
                                                           1
                                                           "zero")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (hide -2)
                                                            (("2"
                                                              (replace
                                                               -7
                                                               -1
                                                               rl)
                                                              (("2"
                                                                (replace
                                                                 -2
                                                                 -1
                                                                 rl)
                                                                (("2"
                                                                  (rewrite
                                                                   "times_associative"
                                                                   :dir
                                                                   rl)
                                                                  (("2"
                                                                    (expand
                                                                     "commutative?")
                                                                    (("2"
                                                                      (inst
                                                                       -6
                                                                       "f_phi(a, g * x)`1"
                                                                       "g")
                                                                      (("1"
                                                                        (expand
                                                                         "restrict")
                                                                        (("1"
                                                                          (replaces
                                                                           -6)
                                                                          (("1"
                                                                            (rewrite
                                                                             "times_associative")
                                                                            (("1"
                                                                              (rewrite
                                                                               "right_distributive"
                                                                               :dir
                                                                               rl)
                                                                              (("1"
                                                                                (inst
                                                                                 2
                                                                                 "((f_phi(a, g * x)`1 * x) + x!1)")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (lemma
                                                                                   "R_sum_star_closed[T,+,*,zero]")
                                                                                  (("2"
                                                                                    (inst?)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -1
                                                                                       "R")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (lemma
                                                                                           "R_prod_star_closed[T,+,*,zero]")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -1
                                                                                             "R"
                                                                                             "f_phi(a, g * x)`1"
                                                                                             "x")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (typepred
                                                                         "g")
                                                                        (("2"
                                                                          (expand
                                                                           "remove")
                                                                          (("2"
                                                                            (expand
                                                                             "member")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred "b")
                                              (("2"
                                                (expand "remove")
                                                (("2"
                                                  (expand "member")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide -6)
                                  (("2"
                                    (inst -5 "b")
                                    (("2"
                                      (prop)
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (typepred "b")
                                        (("2"
                                          (expand "remove")
                                          (("2"
                                            (expand "member")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skeep)
                          (("2" (inst -5 "c")
                            (("2" (prop)
                              (("2"
                                (skeep)
                                (("2"
                                  (expand "member")
                                  (("2"
                                    (expand "extend" -1)
                                    (("2"
                                      (hide-all-but (-1 -2 -3 1))
                                      (("2"
                                        (prop)
                                        (("1"
                                          (typepred "f_phi")
                                          (("1"
                                            (expand "euclidean_f_phi?")
                                            (("1"
                                              (inst -1 "a" "b")
                                              (("1"
                                                (case "a = zero")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "divides?")
                                                    (("1"
                                                      (inst 1 "zero")
                                                      (("1"
                                                        (hide-all-but
                                                         (-2 -3 1))
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (hide -2)
                                                      (("2"
                                                        (inst-cp
                                                         -4
                                                         "a")
                                                        (("2"
                                                          (expand
                                                           "extend")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (inst
                                                               -4
                                                               "b")
                                                              (("2"
                                                                (prop)
                                                                (("1"
                                                                  (expand
                                                                   "divides?")
                                                                  (("1"
                                                                    (skeep*)
                                                                    (("1"
                                                                      (replace
                                                                       -5
                                                                       -2
                                                                       rl)
                                                                      (("1"
                                                                        (replace
                                                                         -1
                                                                         -2
                                                                         rl)
                                                                        (("1"
                                                                          (reveal
                                                                           -4)
                                                                          (("1"
                                                                            (expand
                                                                             "commutative?")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "f_phi(c * x!1, c * x)`1"
                                                                               "(c * x)")
                                                                              (("1"
                                                                                (expand
                                                                                 "restrict")
                                                                                (("1"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "cancel_right_plus[T,+,*,zero]")
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       "times_associative")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "c * x!1"
                                                                                         "c * (x * f_phi(c * x!1, c * x)`1) + f_phi(c * x!1, c * x)`2"
                                                                                         "inv(c * (x * f_phi(c * x!1, c * x)`1))")
                                                                                        (("1"
                                                                                          (prop)
                                                                                          (("1"
                                                                                            (hide
                                                                                             -2)
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "plus_commutative[T,+,*,zero]")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "c * (x * f_phi(c * x!1, c * x)`1) + f_phi(c * x!1, c * x)`2"
                                                                                                 "inv(c * (x * f_phi(c * x!1, c * x)`1))")
                                                                                                (("1"
                                                                                                  (replaces
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (rewrite
                                                                                                     "plus_associative"
                                                                                                     :dir
                                                                                                     rl)
                                                                                                    (("1"
                                                                                                      (rewrite
                                                                                                       "times_negative"
                                                                                                       :dir
                                                                                                       rl)
                                                                                                      (("1"
                                                                                                        (rewrite
                                                                                                         "right_distributive"
                                                                                                         :dir
                                                                                                         rl)
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           2
                                                                                                           "(x!1 + (inv((x * f_phi(c * x!1, c * x)`1))))")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (hide-all-but
                                                                                                             (-7
                                                                                                              1))
                                                                                                            (("2"
                                                                                                              (lemma
                                                                                                               "R_sum_star_closed[T,+,*,zero]")
                                                                                                              (("2"
                                                                                                                (inst?)
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   "R")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (hide
                                                                                                                       2)
                                                                                                                      (("2"
                                                                                                                        (lemma
                                                                                                                         "inv_is_member_R[T,+,*,zero]")
                                                                                                                        (("2"
                                                                                                                          (inst?)
                                                                                                                          (("2"
                                                                                                                            (inst
                                                                                                                             -1
                                                                                                                             "R")
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              (("2"
                                                                                                                                (hide
                                                                                                                                 2)
                                                                                                                                (("2"
                                                                                                                                  (lemma
                                                                                                                                   "R_prod_star_closed[T,+,*,zero]")
                                                                                                                                  (("2"
                                                                                                                                    (inst
                                                                                                                                     -1
                                                                                                                                     "R"
                                                                                                                                     "x"
                                                                                                                                     "f_phi(a, c * x)`1")
                                                                                                                                    (("2"
                                                                                                                                      (reveal
                                                                                                                                       (-7
                                                                                                                                        -10))
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide-all-but
                                                                                 (-6
                                                                                  1))
                                                                                (("2"
                                                                                  (lemma
                                                                                   "R_prod_star_closed[T,+,*,zero]")
                                                                                  (("2"
                                                                                    (inst?)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -1
                                                                                       "R")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "c")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "remove")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "member")
                                                                                              (("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (typepred
                                                                   "b")
                                                                  (("2"
                                                                    (expand
                                                                     "remove")
                                                                    (("2"
                                                                      (expand
                                                                       "member")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (inst -3 "b")
                                          (("2"
                                            (expand "extend")
                                            (("2"
                                              (prop)
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (typepred "b")
                                                (("2"
                                                  (expand "remove")
                                                  (("2"
                                                    (expand "member")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member const-decl "bool" sets nil)
    (divides? const-decl "bool" ring_divides_def nil)
    (zero_is_member_R formula-decl nil ring_basic_properties nil)
    (commutative_ring? const-decl "bool" ring_def nil)
    (ring? const-decl "bool" ring_def nil)
    (times_zero formula-decl nil ring nil)
    (plus_zero formula-decl nil ring nil)
    (R_sum_star_closed formula-decl nil ring_basic_properties nil)
    (inv_is_member_R formula-decl nil ring_basic_properties nil)
    (R_prod_star_closed formula-decl nil ring_basic_properties nil)
    (times_associative formula-decl nil ring nil)
    (commutative? const-decl "bool" operator_defs nil)
    (restrict const-decl "R" restrict nil)
    (cancel_right_plus formula-decl nil ring nil)
    (plus_commutative formula-decl nil ring nil)
    (times_negative formula-decl nil ring nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (zero_plus formula-decl nil ring nil)
    (negate_is_left_inv formula-decl nil ring nil)
    (plus_associative formula-decl nil ring nil)
    (right_distributive formula-decl nil ring nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (inv const-decl "{y | x * y = one AND y * x = one}" group nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil ring_euclidean_algorithm nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" ring_euclidean_algorithm nil)
    (* formal-const-decl "[T, T -> T]" ring_euclidean_algorithm nil)
    (zero formal-const-decl "T" ring_euclidean_algorithm nil)
    (euclidean_ring? const-decl "bool" euclidean_ring_def nil)
    (difference const-decl "set" sets nil)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (euclidean_pair? const-decl "bool" euclidean_ring_def nil)
    (remove const-decl "set" sets nil)
    (euclidean_f_phi? const-decl "bool" euclidean_ring_def nil)
    (one formal-const-decl "T" ring_euclidean_algorithm nil)
    (euclidean_domain? const-decl "bool" euclidean_domain_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (extend const-decl "R" extend nil)
    (gcd? const-decl "bool" ring_gcd_def nil))
   shostak))
 (euclidean_gcd_alg_correctness_TCC1 0
  (euclidean_gcd_alg_correctness_TCC1-1 nil 3859538045
   ("" (skeep)
    (("" (prop)
      (("1" (expand "empty?")
        (("1" (inst -1 "a")
          (("1" (expand "member")
            (("1" (expand "extend") (("1" (propax) nil nil)) nil))
            nil))
          nil))
        nil)
       ("2" (expand "subset?")
        (("2" (skeep)
          (("2" (expand "member")
            (("2" (expand "extend") (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((T formal-nonempty-type-decl nil ring_euclidean_algorithm nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" ring_euclidean_algorithm nil)
    (* formal-const-decl "[T, T -> T]" ring_euclidean_algorithm nil)
    (zero formal-const-decl "T" ring_euclidean_algorithm nil)
    (one formal-const-decl "T" ring_euclidean_algorithm nil)
    (euclidean_domain? const-decl "bool" euclidean_domain_def nil)
    (extend const-decl "R" extend nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil))
   nil
   (euclidean_gcd_alg_correctness subtype
    "extend[ring_euclidean_algorithm.T, (ring_euclidean_algorithm.R), booleans.bool, booleans.FALSE].extend({x: (ring_euclidean_algorithm.R) | booleans.OR(x = ring_euclidean_algorithm.a, x = ring_euclidean_algorithm.b)})"
    "{X | booleans.AND((booleans.NOT)(sets[ring_euclidean_algorithm.T].empty?(X)), sets[ring_euclidean_algorithm.T].subset?(X, ring_euclidean_algorithm.R))}")))
 (euclidean_gcd_alg_correctness 0
  (euclidean_gcd_alg_correctness-1 nil 3859538057
   ("" (skolem * ("R" "phi" "f_phi" "_" "_"))
    ((""
      (measure-induct+
       "lex2(phi(b), IF a = zero THEN 0 ELSE phi(a) ENDIF)" ("a" "b"))
      (("1" (expand "euclidean_gcd_algorithm" 1)
        (("1" (lift-if)
          (("1" (prop)
            (("1" (hide -2)
              (("1" (replaces -1)
                (("1" (expand "gcd?")
                  (("1" (prop)
                    (("1" (skeep)
                      (("1" (expand "member")
                        (("1" (expand "extend")
                          (("1" (prop)
                            (("1" (expand "divides?")
                              (("1"
                                (inst 1 "zero")
                                (("1" (assert) nil nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (expand "divides?")
                              (("2"
                                (inst 1 "one")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (typepred "R")
                                  (("2"
                                    (expand "euclidean_domain?")
                                    (("2"
                                      (expand "integral_domain_w_one?")
                                      (("2"
                                        (expand "monad?")
                                        (("2"
                                          (expand "member")
                                          (("2"
                                            (expand "remove")
                                            (("2"
                                              (expand "member")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skeep)
                      (("2" (inst -1 "x!2")
                        (("2" (expand "member")
                          (("2" (expand "extend")
                            (("2" (assert)
                              (("2"
                                (hide 2)
                                (("2"
                                  (prop)
                                  (("2"
                                    (typepred "x!2")
                                    (("2"
                                      (expand "remove")
                                      (("2"
                                        (expand "member")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide -3)
              (("2" (expand "gcd?")
                (("2" (prop)
                  (("1" (skeep)
                    (("1" (expand "member")
                      (("1" (expand "extend")
                        (("1" (prop)
                          (("1" (replaces -1)
                            (("1" (expand "divides?")
                              (("1"
                                (inst 1 "(f_phi(x!1, x!2))`1")
                                (("1"
                                  (typepred "f_phi")
                                  (("1"
                                    (expand "euclidean_f_phi?")
                                    (("1"
                                      (inst -1 "x!1" "x!2")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (grind)
                                          (("1"
                                            (typepred "R")
                                            (("1"
                                              (expand
                                               "euclidean_domain?")
                                              (("1"
                                                (expand
                                                 "euclidean_ring?")
                                                (("1"
                                                  (expand
                                                   "commutative_ring?")
                                                  (("1"
                                                    (expand
                                                     "commutative?")
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (inst
                                                         -2
                                                         "x!2"
                                                         "(f_phi(x!1, x!2))`1")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (typepred
                                                           "x!2")
                                                          (("2"
                                                            (expand
                                                             "remove")
                                                            (("2"
                                                              (expand
                                                               "member")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "divides?")
                            (("2" (inst 1 "one")
                              (("1" (assert) nil nil)
                               ("2"
                                (typepred "R")
                                (("2"
                                  (expand "euclidean_domain?")
                                  (("2"
                                    (expand "integral_domain_w_one?")
                                    (("2"
                                      (expand "monad?")
                                      (("2"
                                        (expand "member")
                                        (("2"
                                          (expand "remove")
                                          (("2"
                                            (expand "member")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skeep)
                    (("2" (inst -1 "x!2")
                      (("2" (expand "member")
                        (("2" (expand "extend")
                          (("2" (prop)
                            (("2" (hide-all-but 1)
                              (("2"
                                (typepred "x!2")
                                (("2"
                                  (expand "remove")
                                  (("2"
                                    (expand "member")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (inst -2 "x!2" "(f_phi(x!1, x!2))`2")
              (("3" (prop)
                (("1" (lemma "Euclid_theorem")
                  (("1" (inst?)
                    (("1"
                      (inst -1
                       "euclidean_gcd_algorithm(R, phi, f_phi)(x!2, (f_phi(x!1, x!2))`2)")
                      (("1"
                        (case "extend[T, (R), bool, FALSE] ({x: (R) | x = (f_phi(x!1, x!2))`2 OR x = x!2}) = extend[T, (R), bool, FALSE] ({x: (R) | x = x!2 OR x = (f_phi(x!1, x!2))`2})")
                        (("1" (assert) nil nil)
                         ("2" (hide-all-but 1)
                          (("2" (decompose-equality)
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 3)
                  (("2" (typepred "f_phi")
                    (("2" (expand "euclidean_f_phi?")
                      (("2" (inst -1 "x!1" "x!2")
                        (("2" (assert)
                          (("2" (prop) (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("4" (inst -1 "x!2" "x!1")
              (("4" (prop)
                (("1"
                  (case "extend[T, (R), bool, FALSE]({x: (R) | x = x!2 OR x = x!1}) = extend[T, (R), bool, FALSE]({x: (R) | x = x!1 OR x = x!2})")
                  (("1" (assert) nil nil)
                   ("2" (hide-all-but 1)
                    (("2" (decompose-equality) (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but (1 2)) (("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide-all-but 1)
        (("2" (prop)
          (("1" (expand "empty?")
            (("1" (inst -1 "y!1") (("1" (grind) nil nil)) nil)) nil)
           ("2" (grind) nil nil))
          nil))
        nil)
       ("3" (hide 3)
        (("3" (expand "difference") (("3" (grind) nil nil)) nil)) nil)
       ("4" (hide 2)
        (("4" (typepred "x!2") (("4" (grind) nil nil)) nil)) nil)
       ("5" (hide 3) (("5" (grind) nil nil)) nil)
       ("6" (hide 2)
        (("6" (typepred "y!2") (("6" (grind) nil nil)) nil)) nil)
       ("7" (hide-all-but 1)
        (("7" (prop)
          (("1" (expand "empty?")
            (("1" (inst -1 "x!1`1") (("1" (grind) nil nil)) nil)) nil)
           ("2" (grind) nil nil))
          nil))
        nil)
       ("8" (hide -1 2)
        (("8" (prop) (("1" (grind) nil nil) ("2" (grind) nil nil))
          nil))
        nil)
       ("9" (hide 3) (("9" (grind) nil nil)) nil)
       ("10" (hide 2)
        (("10" (typepred "x!1`2") (("10" (grind) nil nil)) nil)) nil)
       ("11" (hide 3) (("11" (grind) nil nil)) nil)
       ("12" (hide 2)
        (("12" (typepred "y!1`2") (("12" (grind) nil nil)) nil)) nil)
       ("13" (hide 2)
        (("13" (prop)
          (("1" (expand "empty?")
            (("1" (inst -1 "a!1") (("1" (grind) nil nil)) nil)) nil)
           ("2" (grind) nil nil))
          nil))
        nil)
       ("14" (hide 3) (("14" (grind) nil nil)) nil)
       ("15" (hide 2)
        (("15" (typepred "b!1") (("15" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (measure_induction formula-decl nil measure_induction nil)
    (T formal-nonempty-type-decl nil ring_euclidean_algorithm nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" ring_euclidean_algorithm nil)
    (* formal-const-decl "[T, T -> T]" ring_euclidean_algorithm nil)
    (zero formal-const-decl "T" ring_euclidean_algorithm nil)
    (one formal-const-decl "T" ring_euclidean_algorithm nil)
    (euclidean_domain? const-decl "bool" euclidean_domain_def nil)
    (remove const-decl "set" sets nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (lex2 const-decl "ordinal" lex2 nil)
    (difference const-decl "set" sets nil)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (euclidean_ring? const-decl "bool" euclidean_ring_def nil)
    (euclidean_pair? const-decl "bool" euclidean_ring_def nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (< def-decl "bool" ordinals nil)
    (well_founded_le formula-decl nil ordinals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (FALSE const-decl "bool" booleans nil)
    (extend const-decl "R" extend nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (subset? const-decl "bool" sets nil)
    (commutative_ring? const-decl "bool" ring_def nil)
    (gcd? const-decl "bool" ring_gcd_def nil)
    (euclidean_f_phi? const-decl "bool" euclidean_ring_def nil)
    (euclidean_gcd_algorithm def-decl "(remove(zero, R))"
     ring_euclidean_algorithm nil)
    (Euclid_theorem formula-decl nil ring_euclidean_algorithm nil)
    (plus_zero formula-decl nil ring nil)
    (left_identity formula-decl nil monad nil)
    (integral_domain? const-decl "bool" integral_domain_def nil)
    (nz_closed? const-decl "bool" ring_nz_closed_def nil)
    (/= const-decl "boolean" notequal nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (restrict const-decl "R" restrict nil)
    (zero_plus formula-decl nil ring nil)
    (identity? const-decl "bool" operator_defs nil)
    (associative? const-decl "bool" operator_defs nil)
    (monoid? const-decl "bool" monoid_def nil)
    (inv_exists? const-decl "bool" group_def nil)
    (group? const-decl "bool" group_def nil)
    (abelian_group? const-decl "bool" group_def nil)
    (left_distributive? const-decl "bool" operator_defs_more nil)
    (right_distributive? const-decl "bool" operator_defs_more nil)
    (ring? const-decl "bool" ring_def nil)
    (commutative? const-decl "bool" operator_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (integral_domain_w_one? const-decl "bool"
     integral_domain_with_one_def nil)
    (monad? const-decl "bool" monad_def nil)
    (right_identity formula-decl nil monad nil)
    (divides? const-decl "bool" ring_divides_def nil)
    (times_zero formula-decl nil ring nil)
    (member const-decl "bool" sets nil)
    (TRUE const-decl "bool" booleans nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil))
   shostak)))
