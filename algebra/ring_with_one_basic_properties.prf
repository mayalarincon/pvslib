(ring_with_one_basic_properties
 (IMP_ring_with_one_TCC1 0
  (IMP_ring_with_one_TCC1-1 nil 3793817341
   ("" (lemma "fullset_is_ring_with_one") (("" (propax) nil nil)) nil)
   ((fullset_is_ring_with_one formula-decl nil
     ring_with_one_basic_properties nil))
   nil
   (IMP_ring_with_one assuming
    "ring_with_one[ring_with_one_basic_properties.T, ring_with_one_basic_properties.+, ring_with_one_basic_properties.*, ring_with_one_basic_properties.zero, ring_with_one_basic_properties.one].ring_with_one"
    "fullset_is_ring_with_one: ASSUMPTION ring_with_one_def[ring_with_one.T, ring_with_one.+, ring_with_one.*, ring_with_one.zero, ring_with_one.one].ring_with_one?(sets[ring_with_one.T].fullset)")))
 (IMP_ring_basic_properties_TCC1 0
  (IMP_ring_basic_properties_TCC1-1 nil 3793817341
   ("" (lemma "fullset_is_ring_with_one")
    (("" (expand "ring_with_one?") (("" (assert) nil nil)) nil)) nil)
   ((ring_with_one? const-decl "bool" ring_with_one_def nil)
    (fullset_is_ring_with_one formula-decl nil
     ring_with_one_basic_properties nil))
   nil
   (IMP_ring_basic_properties assuming
    "ring_basic_properties[ring_with_one_basic_properties.T, ring_with_one_basic_properties.+, ring_with_one_basic_properties.*, ring_with_one_basic_properties.zero].ring_basic_properties"
    "fullset_is_ring: ASSUMPTION ring_def[ring_basic_properties.T, ring_basic_properties.+, ring_basic_properties.*, ring_basic_properties.zero].ring?(sets[ring_basic_properties.T].fullset)")))
 (power_commute_aux 0
  (power_commute_aux-1 nil 3710519246
   ("" (skolem 1 ("_" "x!1" "y!1"))
    (("" (induct "m")
      (("1" (prop)
        (("1" (expand "power") (("1" (assert) nil nil)) nil)) nil)
       ("2" (skosimp)
        (("2" (split)
          (("1" (expand "power" 1)
            (("1" (rewrite "times_associative" 1)
              (("1" (replace -1 1 :dir rl)
                (("1" (rewrite "times_associative" 1 :dir rl)
                  (("1" (replace -2 1)
                    (("1" (rewrite "times_associative" 1 :dir rl) nil
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (propax) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil ring_with_one_basic_properties
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (* formal-const-decl "[T, T -> T]" ring_with_one_basic_properties
       nil)
    (one formal-const-decl "T" ring_with_one_basic_properties nil)
    (power def-decl "T" monoid_def nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (left_identity formula-decl nil monad nil)
    (right_identity formula-decl nil monad nil)
    (zero formal-const-decl "T" ring_with_one_basic_properties nil)
    (+ formal-const-decl "[T, T -> T]" ring_with_one_basic_properties
       nil)
    (times_associative formula-decl nil ring nil))
   nil))
 (power_commute 0
  (power_commute-1 nil 3710519324
   ("" (skosimp)
    (("" (lemma "power_commute_aux")
      (("" (inst -1 "i!1" "power(x!1, m!1)" "y!1")
        (("" (assert)
          (("" (lemma "power_commute_aux")
            (("" (inst -1 "m!1" "y!1" "x!1") (("" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((power_commute_aux formula-decl nil ring_with_one_basic_properties
     nil)
    (power def-decl "T" monoid_def nil)
    (one formal-const-decl "T" ring_with_one_basic_properties nil)
    (* formal-const-decl "[T, T -> T]" ring_with_one_basic_properties
       nil)
    (T formal-nonempty-type-decl nil ring_with_one_basic_properties
     nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (gen_times_int_one 0
  (gen_times_int_one-1 nil 3706612606
   ("" (skosimp)
    (("" (lemma "one_times")
      (("" (inst -1 "x!1")
        (("" (replace -1 1 rl)
          (("" (hide -1)
            (("" (rewrite "left_times" :dir rl)
              (("" (replace -1 1) (("" (rewrite "zero_times") nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((one formal-const-decl "T" ring_with_one_basic_properties nil)
    (zero formal-const-decl "T" ring_with_one_basic_properties nil)
    (* formal-const-decl "[T, T -> T]" ring_with_one_basic_properties
       nil)
    (+ formal-const-decl "[T, T -> T]" ring_with_one_basic_properties
       nil)
    (T formal-nonempty-type-decl nil ring_with_one_basic_properties
     nil)
    (one_times formula-decl nil ring_with_one nil)
    (left_times formula-decl nil ring_basic_properties nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (zero_times formula-decl nil ring nil))
   nil))
 (ring_w_one_is_idempotent 0
  (ring_w_one_is_idempotent-1 nil 3778429605
   ("" (skosimp)
    (("" (decompose-equality)
      (("" (iff)
        (("" (prop)
          (("1" (expand "sum")
            (("1" (skosimp)
              (("1" (lemma "R_prod_star_closed")
                (("1" (inst -1 "R!1" "h!1" "k!1")
                  (("1" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (expand "sum")
            (("2" (inst 1 "x!1" "one")
              (("1" (assert) nil nil)
               ("2" (typepred "R!1")
                (("2" (expand "ring_with_one?")
                  (("2" (expand "monoid?")
                    (("2" (expand "monad?")
                      (("2" (flatten)
                        (("2" (hide-all-but (-3 1))
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (* formal-const-decl "[T, T -> T]" ring_with_one_basic_properties
       nil)
    (sum const-decl "set[T]" cosets_def nil)
    (+ formal-const-decl "[T, T -> T]" ring_with_one_basic_properties
       nil)
    (zero formal-const-decl "T" ring_with_one_basic_properties nil)
    (one formal-const-decl "T" ring_with_one_basic_properties nil)
    (ring_with_one? const-decl "bool" ring_with_one_def nil)
    (ring_with_one nonempty-type-eq-decl nil ring_with_one nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-nonempty-type-decl nil ring_with_one_basic_properties
     nil)
    (ring? const-decl "bool" ring_def nil)
    (member const-decl "bool" sets nil)
    (R_prod_star_closed formula-decl nil ring_basic_properties nil) nil
    nil (right_identity formula-decl nil monad nil)
    (monad? const-decl "bool" monad_def nil)
    (monoid? const-decl "bool" monoid_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   shostak))
 (one_diff_zero_monad 0
  (one_diff_zero_monad-1 nil 3779017676
   ("" (skosimp)
    (("" (expand "monad?")
      (("" (flatten)
        (("" (expand "member")
          (("" (expand "remove") (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((monad? const-decl "bool" monad_def nil)
    (member const-decl "bool" sets nil)
    (remove const-decl "set" sets nil))
   shostak)))

