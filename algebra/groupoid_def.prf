(groupoid_def
 (commutative_groupoid?_TCC1 0
  (commutative_groupoid?_TCC1-2 "" 3790093315
   ("" (expand "star_closed?")
    (("" (expand "member") (("" (skosimp*) nil nil)) nil)) nil)
   ((member const-decl "bool" sets nil)
    (star_closed? const-decl "bool" groupoid_def nil))
   shostak
   (commutative_groupoid? subtype
    "restrict[[groupoid_def.T, groupoid_def.T], [(groupoid_def.S), (groupoid_def.S)], groupoid_def.T].restrict(groupoid_def.*)"
    "[[(groupoid_def.S), (groupoid_def.S)] -> (groupoid_def.S)]"))
  (commutative_groupoid?_TCC1-1 nil 3301141181
   ("" (expand "groupoid?")
    (("" (expand "star_closed?")
      (("" (expand "member") (("" (skosimp*) nil nil)) nil)) nil))
    nil)
   ((member const-decl "bool" sets nil)
    (star_closed? const-decl "bool" groupoid_def nil))
   shostak
   (commutative_groupoid? subtype
    "restrict[[groupoid_def.T, groupoid_def.T], [(groupoid_def.S), (groupoid_def.S)], groupoid_def.T].restrict(groupoid_def.*)"
    "[[(groupoid_def.S), (groupoid_def.S)] -> (groupoid_def.S)]")))
 (finite_commutative_groupoid?_TCC1 0
  (finite_commutative_groupoid?_TCC1-2 "" 3790093315
   ("" (expand "finite_groupoid?")
    (("" (expand "star_closed?")
      (("" (expand "member") (("" (skosimp*) nil nil)) nil)) nil))
    nil)
   ((star_closed? const-decl "bool" groupoid_def nil)
    (member const-decl "bool" sets nil)
    (finite_groupoid? const-decl "bool" groupoid_def nil))
   shostak
   (finite_commutative_groupoid? subtype
    "restrict[[groupoid_def.T, groupoid_def.T], [(groupoid_def.S), (groupoid_def.S)], groupoid_def.T].restrict(groupoid_def.*)"
    "[[(groupoid_def.S), (groupoid_def.S)] -> (groupoid_def.S)]"))
  (finite_commutative_groupoid?_TCC1-1 nil 3301141181
   ("" (expand "finite_groupoid?")
    (("" (expand "groupoid?")
      (("" (expand "star_closed?")
        (("" (expand "member") (("" (skosimp*) nil nil)) nil)) nil))
      nil))
    nil)
   ((star_closed? const-decl "bool" groupoid_def nil)
    (member const-decl "bool" sets nil)
    (finite_groupoid? const-decl "bool" groupoid_def nil))
   shostak
   (finite_commutative_groupoid? subtype
    "restrict[[groupoid_def.T, groupoid_def.T], [(groupoid_def.S), (groupoid_def.S)], groupoid_def.T].restrict(groupoid_def.*)"
    "[[(groupoid_def.S), (groupoid_def.S)] -> (groupoid_def.S)]"))))

