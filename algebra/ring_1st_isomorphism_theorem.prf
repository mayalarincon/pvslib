(ring_1st_isomorphism_theorem
 (IMP_ring_homomorphism_lemmas_TCC1 0
  (IMP_ring_homomorphism_lemmas_TCC1-1 nil 3793737447
   ("" (rewrite "fullsetT_is_ring") nil nil)
   ((fullsetT_is_ring formula-decl nil ring_1st_isomorphism_theorem
     nil))
   nil
   (IMP_ring_homomorphism_lemmas assuming
    "ring_homomorphism_lemmas[ring_1st_isomorphism_theorem.T, ring_1st_isomorphism_theorem.+, ring_1st_isomorphism_theorem.*, ring_1st_isomorphism_theorem.zero, ring_1st_isomorphism_theorem.D, ring_1st_isomorphism_theorem.s, ring_1st_isomorphism_theorem.p, ring_1st_isomorphism_theorem.zerod].ring_homomorphism_lemmas"
    "R1_is_ring: ASSUMPTION ring_def[ring_homomorphism_lemmas.T1, ring_homomorphism_lemmas.s1, ring_homomorphism_lemmas.p1, ring_homomorphism_lemmas.zero1].ring?(sets[ring_homomorphism_lemmas.T1].fullset)")))
 (IMP_ring_homomorphism_lemmas_TCC2 0
  (IMP_ring_homomorphism_lemmas_TCC2-1 nil 3793737447
   ("" (rewrite "fullsetD_is_ring") nil nil)
   ((fullsetD_is_ring formula-decl nil ring_1st_isomorphism_theorem
     nil))
   nil
   (IMP_ring_homomorphism_lemmas assuming
    "ring_homomorphism_lemmas[ring_1st_isomorphism_theorem.T, ring_1st_isomorphism_theorem.+, ring_1st_isomorphism_theorem.*, ring_1st_isomorphism_theorem.zero, ring_1st_isomorphism_theorem.D, ring_1st_isomorphism_theorem.s, ring_1st_isomorphism_theorem.p, ring_1st_isomorphism_theorem.zerod].ring_homomorphism_lemmas"
    "R2_is_ring: ASSUMPTION ring_def[ring_homomorphism_lemmas.T2, ring_homomorphism_lemmas.s2, ring_homomorphism_lemmas.p2, ring_homomorphism_lemmas.zero2].ring?(sets[ring_homomorphism_lemmas.T2].fullset)")))
 (first_isomorphism_th_aux_1_TCC1 0
  (first_isomorphism_th_aux_1_TCC1-1 nil 3757773086
   ("" (skosimp*)
    (("" (expand "/")
      (("" (rewrite "lcoset_iff_coset" :dir rl)
        (("" (expand "left_coset?") (("" (inst 1 "x!1") nil nil)) nil))
        nil))
      nil))
    nil)
   ((/ const-decl "setof[set[T]]" cosets_def nil)
    (left_coset? const-decl "bool" cosets_def nil)
    (zero formal-const-decl "T" ring_1st_isomorphism_theorem nil)
    (* formal-const-decl "[T, T -> T]" ring_1st_isomorphism_theorem
       nil)
    (+ formal-const-decl "[T, T -> T]" ring_1st_isomorphism_theorem
       nil)
    (T formal-nonempty-type-decl nil ring_1st_isomorphism_theorem nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (ring? const-decl "bool" ring_def nil)
    (+ const-decl "set[T]" cosets_def nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (lcoset_iff_coset formula-decl nil ring_cosets_lemmas nil))
   nil
   (first_isomorphism_th_aux_1 subtype
    "(cosets_def[ring_1st_isomorphism_theorem.T, ring_1st_isomorphism_theorem.+].+)(ring_1st_isomorphism_theorem.x, ring_1st_isomorphism_theorem.I)"
    "(cosets_def[ring_1st_isomorphism_theorem.T, ring_1st_isomorphism_theorem.+]./(ring_1st_isomorphism_theorem.R, ring_1st_isomorphism_theorem.I))")))
 (first_isomorphism_th_aux_1_TCC2 0
  (first_isomorphism_th_aux_1_TCC2-1 nil 3757773086
   ("" (skosimp*)
    (("" (hide -)
      (("" (inst 1 "I!1")
        (("" (expand "coset?")
          (("" (lemma "lcoset_iff_rcoset")
            (("" (inst -1 "I!1" "I!1" "R!1")
              (("" (case "left_coset?(R!1, I!1)(I!1)")
                (("1" (assert) nil nil)
                 ("2" (hide -1 2)
                  (("2" (expand "left_coset?")
                    (("2" (inst 1 "zero")
                      (("1" (rewrite "left_zero") nil nil)
                       ("2" (lemma "zero_is_member_R[T,+,*,zero]")
                        (("2" (inst -1 "R!1")
                          (("2" (expand "member")
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((left_zero formula-decl nil ring_cosets_lemmas nil)
    (member const-decl "bool" sets nil)
    (zero_is_member_R formula-decl nil ring_basic_properties nil)
    (left_coset? const-decl "bool" cosets_def nil)
    (lcoset_iff_rcoset formula-decl nil ring_cosets_lemmas nil)
    (R!1 skolem-const-decl "ring[T, +, *, zero]"
     ring_1st_isomorphism_theorem nil)
    (I!1 skolem-const-decl "ideal[T, +, *, zero](R!1)"
     ring_1st_isomorphism_theorem nil)
    (coset type-eq-decl nil cosets_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (ring? const-decl "bool" ring_def nil)
    (zero formal-const-decl "T" ring_1st_isomorphism_theorem nil)
    (* formal-const-decl "[T, T -> T]" ring_1st_isomorphism_theorem
       nil)
    (coset? const-decl "bool" cosets_def nil)
    (+ formal-const-decl "[T, T -> T]" ring_1st_isomorphism_theorem
       nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-nonempty-type-decl nil ring_1st_isomorphism_theorem nil))
   nil
   (first_isomorphism_th_aux_1 existence ""
    "cosets_def[ring_1st_isomorphism_theorem.T, ring_1st_isomorphism_theorem.+].coset(ring_1st_isomorphism_theorem.R, ring_1st_isomorphism_theorem.I)")))
 (first_isomorphism_th_aux_1_TCC3 0
  (first_isomorphism_th_aux_1_TCC3-1 nil 3757773086
   ("" (skosimp*)
    (("" (lemma "coset_add")
      (("" (inst -1 "R!1" "I!1" "x1!1`1" "x1!1`2")
        (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((zero formal-const-decl "T" ring_1st_isomorphism_theorem nil)
    (* formal-const-decl "[T, T -> T]" ring_1st_isomorphism_theorem
       nil)
    (+ formal-const-decl "[T, T -> T]" ring_1st_isomorphism_theorem
       nil)
    (T formal-nonempty-type-decl nil ring_1st_isomorphism_theorem nil)
    (coset_add formula-decl nil quotient_rings nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (coset type-eq-decl nil cosets_def nil)
    (coset? const-decl "bool" cosets_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (ring? const-decl "bool" ring_def nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (first_isomorphism_th_aux_1 subtype
    "cosets_def[ring_1st_isomorphism_theorem.T, ring_1st_isomorphism_theorem.+].add(ring_1st_isomorphism_theorem.R, ring_1st_isomorphism_theorem.I)"
    "[[cosets_def[ring_1st_isomorphism_theorem.T, ring_1st_isomorphism_theorem.+].coset(ring_1st_isomorphism_theorem.R, ring_1st_isomorphism_theorem.I), cosets_def[ring_1st_isomorphism_theorem.T, ring_1st_isomorphism_theorem.+].coset(ring_1st_isomorphism_theorem.R, ring_1st_isomorphism_theorem.I)] -> cosets_def[ring_1st_isomorphism_theorem.T, ring_1st_isomorphism_theorem.+].coset(ring_1st_isomorphism_theorem.R, ring_1st_isomorphism_theorem.I)]")))
 (first_isomorphism_th_aux_1_TCC4 0
  (first_isomorphism_th_aux_1_TCC4-1 nil 3757773086
   ("" (skosimp*)
    (("" (lemma "coset_product")
      (("" (inst -1 "R!1" "I!1" "x1!1`1" "x1!1`2")
        (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((zero formal-const-decl "T" ring_1st_isomorphism_theorem nil)
    (* formal-const-decl "[T, T -> T]" ring_1st_isomorphism_theorem
       nil)
    (+ formal-const-decl "[T, T -> T]" ring_1st_isomorphism_theorem
       nil)
    (T formal-nonempty-type-decl nil ring_1st_isomorphism_theorem nil)
    (coset_product formula-decl nil quotient_rings nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (coset type-eq-decl nil cosets_def nil)
    (coset? const-decl "bool" cosets_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (ring? const-decl "bool" ring_def nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (first_isomorphism_th_aux_1 subtype
    "product_coset_def[ring_1st_isomorphism_theorem.T, ring_1st_isomorphism_theorem.+, ring_1st_isomorphism_theorem.*].product(ring_1st_isomorphism_theorem.R, ring_1st_isomorphism_theorem.I)"
    "[[cosets_def[ring_1st_isomorphism_theorem.T, ring_1st_isomorphism_theorem.+].coset(ring_1st_isomorphism_theorem.R, ring_1st_isomorphism_theorem.I), cosets_def[ring_1st_isomorphism_theorem.T, ring_1st_isomorphism_theorem.+].coset(ring_1st_isomorphism_theorem.R, ring_1st_isomorphism_theorem.I)] -> cosets_def[ring_1st_isomorphism_theorem.T, ring_1st_isomorphism_theorem.+].coset(ring_1st_isomorphism_theorem.R, ring_1st_isomorphism_theorem.I)]")))
 (first_isomorphism_th_aux_1_TCC5 0
  (first_isomorphism_th_aux_1_TCC5-1 nil 3757773086
   ("" (skosimp*) (("" (rewrite "ideal_is_coset") nil nil)) nil)
   ((ideal_is_coset formula-decl nil ring_cosets_lemmas nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (ring? const-decl "bool" ring_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (T formal-nonempty-type-decl nil ring_1st_isomorphism_theorem nil)
    (+ formal-const-decl "[T, T -> T]" ring_1st_isomorphism_theorem
       nil)
    (* formal-const-decl "[T, T -> T]" ring_1st_isomorphism_theorem
       nil)
    (zero formal-const-decl "T" ring_1st_isomorphism_theorem nil))
   nil
   (first_isomorphism_th_aux_1 subtype "ring_1st_isomorphism_theorem.I"
    "cosets_def[ring_1st_isomorphism_theorem.T, ring_1st_isomorphism_theorem.+].coset(ring_1st_isomorphism_theorem.R, ring_1st_isomorphism_theorem.I)")))
 (first_isomorphism_th_aux_1 0
  (first_isomorphism_th_aux_1-2 nil 3758808639
   ("" (skosimp)
    (("" (name "f" "(lambda(A:(R!1 / I!1)):  phi!1( gen(R!1,I!1)(A)))")
      (("1" (inst 1 "f")
        (("1" (prop)
          (("1" (skosimp)
            (("1" (decompose-equality -1)
              (("1" (inst -1 "x!1+ I!1")
                (("1" (replace -1 1 rl)
                  (("1" (hide -1)
                    (("1" (lemma "gen_is_any")
                      (("1" (inst -1 "R!1" "I!1" "x!1 + I!1" "x!1")
                        (("1" (lemma "lcos_eq")
                          (("1"
                            (inst -1 "I!1" "gen(R!1, I!1)(x!1 + I!1)"
                             "x!1")
                            (("1" (typepred "I!1")
                              (("1"
                                (expand "ideal?")
                                (("1"
                                  (expand "left_ideal?")
                                  (("1"
                                    (expand "subring?")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (hide -1 -3 -4)
                                        (("1"
                                          (lemma
                                           "zero_is_member_R[T,+,*, zero]")
                                          (("1"
                                            (inst -1 "I!1")
                                            (("1"
                                              (expand "member")
                                              (("1"
                                                (expand "gen")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (skosimp)
                                                    (("1"
                                                      (replace -3 1)
                                                      (("1"
                                                        (hide
                                                         -1
                                                         -2
                                                         -3
                                                         -4)
                                                        (("1"
                                                          (typepred
                                                           "phi!1")
                                                          (("1"
                                                            (expand
                                                             "R_homomorphism?")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (hide-all-but
                                                                 (-5
                                                                  -7
                                                                  1))
                                                                (("1"
                                                                  (expand
                                                                   "homomorphism?")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "x!1"
                                                                     "h!1")
                                                                    (("1"
                                                                      (replaces
                                                                       -1)
                                                                      (("1"
                                                                        (expand
                                                                         "subset?")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "h!1")
                                                                          (("1"
                                                                            (expand
                                                                             "member")
                                                                            (("1"
                                                                              (expand
                                                                               "R_kernel")
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (hide
                                                                                   -1
                                                                                   -2)
                                                                                  (("1"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       -1
                                                                       2)
                                                                      (("2"
                                                                        (typepred
                                                                         "h!1"
                                                                         "I!1")
                                                                        (("2"
                                                                          (expand
                                                                           "ideal?")
                                                                          (("2"
                                                                            (expand
                                                                             "left_ideal?")
                                                                            (("2"
                                                                              (expand
                                                                               "subring?")
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (hide
                                                                                   -3
                                                                                   -4)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "subset?")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -2
                                                                                       "h!1")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide -1 2)
                          (("2" (expand "+")
                            (("2" (inst 1 "zero")
                              (("1" (assert) nil nil)
                               ("2"
                                (typepred "I!1")
                                (("2"
                                  (expand "ideal?")
                                  (("2"
                                    (expand "left_ideal?")
                                    (("2"
                                      (expand "subring?")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (hide -1 -3 -4)
                                          (("2"
                                            (lemma
                                             "zero_is_member_R[T,+,*,zero]")
                                            (("2"
                                              (inst -1 "I!1")
                                              (("2"
                                                (expand "member")
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (hide -1 2)
                          (("3" (expand "left_coset?")
                            (("3" (inst 1 "x!1") nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "gen")
                (("2" (expand "lc_gen") (("2" (propax) nil nil)) nil))
                nil)
               ("3" (expand "/" -1) (("3" (propax) nil nil)) nil))
              nil))
            nil)
           ("2" (expand "R_homomorphism?")
            (("2" (prop)
              (("1" (expand "star_closed?")
                (("1" (skosimp)
                  (("1" (expand "member")
                    (("1" (expand "restrict")
                      (("1" (expand "/")
                        (("1" (rewrite "coset_add") nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "star_closed?")
                (("2" (skosimp)
                  (("2" (expand* "member" "restrict" "/")
                    (("2" (rewrite "coset_product") nil nil)) nil))
                  nil))
                nil)
               ("3" (expand "star_closed?")
                (("3" (skosimp)
                  (("3" (hide -)
                    (("3" (rewrite "R_sum_star_closed[D,s,p,zerod]")
                      nil nil))
                    nil))
                  nil))
                nil)
               ("4" (expand "star_closed?")
                (("4" (skosimp)
                  (("4" (rewrite "R_prod_star_closed[D,s,p,zerod]") nil
                    nil))
                  nil))
                nil)
               ("5" (expand "homomorphism?")
                (("5" (skosimp)
                  (("5" (decompose-equality -1)
                    (("1" (typepred "a!1" "b!1")
                      (("1" (expand "coset?")
                        (("1" (flatten)
                          (("1" (hide -2 -3 -5 -6)
                            (("1" (expand "left_coset?")
                              (("1"
                                (skosimp*)
                                (("1"
                                  (lemma "add_charac")
                                  (("1"
                                    (inst -1 "R!1" "I!1" "a!2" "a!3")
                                    (("1"
                                      (replace -2 -1 rl)
                                      (("1"
                                        (replace -3 -1 rl)
                                        (("1"
                                          (replace -1 1)
                                          (("1"
                                            (inst-cp -4 "a!1")
                                            (("1"
                                              (inst-cp -4 "b!1")
                                              (("1"
                                                (inst
                                                 -4
                                                 "(a!2+a!3) + I!1")
                                                (("1"
                                                  (lemma "gen_is_any")
                                                  (("1"
                                                    (lemma "lcos_eq")
                                                    (("1"
                                                      (inst-cp
                                                       -2
                                                       "R!1"
                                                       "I!1"
                                                       "a!1"
                                                       "a!2")
                                                      (("1"
                                                        (inst-cp
                                                         -2
                                                         "R!1"
                                                         "I!1"
                                                         "b!1"
                                                         "a!3")
                                                        (("1"
                                                          (inst
                                                           -2
                                                           "R!1"
                                                           "I!1"
                                                           "(a!2 + a!3) + I!1"
                                                           "a!2+a!3")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (inst-cp
                                                               -1
                                                               "I!1"
                                                               "lc_gen(R!1, I!1)(a!1)"
                                                               "a!2")
                                                              (("1"
                                                                (inst-cp
                                                                 -1
                                                                 "I!1"
                                                                 "lc_gen(R!1, I!1)(b!1)"
                                                                 "a!3")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "I!1"
                                                                   "lc_gen(R!1, I!1)((a!2 + a!3) + I!1)"
                                                                   "a!2+a!3")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (typepred
                                                                       "I!1")
                                                                      (("1"
                                                                        (expand
                                                                         "ideal?")
                                                                        (("1"
                                                                          (expand
                                                                           "left_ideal?")
                                                                          (("1"
                                                                            (expand
                                                                             "subring?")
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (hide
                                                                                 -1
                                                                                 -3
                                                                                 -4)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "zero_is_member_R[T,+,*,zero]")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "I!1")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "member")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (skosimp*)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "gen")
                                                                                            (("1"
                                                                                              (replaces
                                                                                               -3)
                                                                                              (("1"
                                                                                                (replaces
                                                                                                 -3)
                                                                                                (("1"
                                                                                                  (replaces
                                                                                                   -3)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -9
                                                                                                     1
                                                                                                     rl)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -10
                                                                                                       1
                                                                                                       rl)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -11
                                                                                                         1
                                                                                                         rl)
                                                                                                        (("1"
                                                                                                          (hide
                                                                                                           -3
                                                                                                           -4
                                                                                                           -5
                                                                                                           -6
                                                                                                           -7
                                                                                                           -8
                                                                                                           -9
                                                                                                           -10
                                                                                                           -11)
                                                                                                          (("1"
                                                                                                            (typepred
                                                                                                             "phi!1")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "R_homomorphism?")
                                                                                                              (("1"
                                                                                                                (flatten)
                                                                                                                (("1"
                                                                                                                  (hide
                                                                                                                   -1
                                                                                                                   -2
                                                                                                                   -3
                                                                                                                   -4
                                                                                                                   -6)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "homomorphism?")
                                                                                                                    (("1"
                                                                                                                      (inst-cp
                                                                                                                       -1
                                                                                                                       "a!2+a!3"
                                                                                                                       "h!1")
                                                                                                                      (("1"
                                                                                                                        (inst-cp
                                                                                                                         -1
                                                                                                                         "a!2"
                                                                                                                         "h!3")
                                                                                                                        (("1"
                                                                                                                          (inst-cp
                                                                                                                           -1
                                                                                                                           "a!3"
                                                                                                                           "h!2")
                                                                                                                          (("1"
                                                                                                                            (inst
                                                                                                                             -1
                                                                                                                             "a!2"
                                                                                                                             "a!3")
                                                                                                                            (("1"
                                                                                                                              (replaces
                                                                                                                               -4)
                                                                                                                              (("1"
                                                                                                                                (replaces
                                                                                                                                 -1)
                                                                                                                                (("1"
                                                                                                                                  (replaces
                                                                                                                                   -1)
                                                                                                                                  (("1"
                                                                                                                                    (replaces
                                                                                                                                     -1)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "subset?")
                                                                                                                                      (("1"
                                                                                                                                        (inst-cp
                                                                                                                                         -3
                                                                                                                                         "h!1")
                                                                                                                                        (("1"
                                                                                                                                          (inst-cp
                                                                                                                                           -3
                                                                                                                                           "h!2")
                                                                                                                                          (("1"
                                                                                                                                            (inst
                                                                                                                                             -3
                                                                                                                                             "h!3")
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "R_kernel")
                                                                                                                                                (("1"
                                                                                                                                                  (flatten)
                                                                                                                                                  (("1"
                                                                                                                                                    (hide
                                                                                                                                                     -3
                                                                                                                                                     -4
                                                                                                                                                     -6
                                                                                                                                                     -7
                                                                                                                                                     -9
                                                                                                                                                     -10)
                                                                                                                                                    (("1"
                                                                                                                                                      (replaces
                                                                                                                                                       -3)
                                                                                                                                                      (("1"
                                                                                                                                                        (replaces
                                                                                                                                                         -3)
                                                                                                                                                        (("1"
                                                                                                                                                          (replaces
                                                                                                                                                           -3)
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (hide-all-but
                                                                                                                             1)
                                                                                                                            (("2"
                                                                                                                              (typepred
                                                                                                                               "I!1")
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "ideal?")
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "left_ideal?")
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "subring?")
                                                                                                                                    (("2"
                                                                                                                                      (flatten)
                                                                                                                                      (("2"
                                                                                                                                        (hide
                                                                                                                                         -2
                                                                                                                                         -3)
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "subset?")
                                                                                                                                          (("2"
                                                                                                                                            (inst
                                                                                                                                             -1
                                                                                                                                             "h!2")
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (hide-all-but
                                                                                                                           1)
                                                                                                                          (("2"
                                                                                                                            (typepred
                                                                                                                             "I!1")
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "ideal?")
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "left_ideal?")
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "subring?")
                                                                                                                                  (("2"
                                                                                                                                    (flatten)
                                                                                                                                    (("2"
                                                                                                                                      (hide
                                                                                                                                       -2
                                                                                                                                       -3)
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         "subset?")
                                                                                                                                        (("2"
                                                                                                                                          (inst
                                                                                                                                           -1
                                                                                                                                           "h!3")
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (hide-all-but
                                                                                                                         1)
                                                                                                                        (("2"
                                                                                                                          (typepred
                                                                                                                           "I!1")
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "ideal?")
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "left_ideal?")
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "subring?")
                                                                                                                                (("2"
                                                                                                                                  (flatten)
                                                                                                                                  (("2"
                                                                                                                                    (hide
                                                                                                                                     -2
                                                                                                                                     -3)
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "subset?")
                                                                                                                                      (("2"
                                                                                                                                        (inst
                                                                                                                                         -1
                                                                                                                                         "h!1")
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("3"
                                                                                                                        (hide-all-but
                                                                                                                         1)
                                                                                                                        (("3"
                                                                                                                          (lemma
                                                                                                                           "R_sum_star_closed[T,+,*,zero]")
                                                                                                                          (("3"
                                                                                                                            (inst
                                                                                                                             -1
                                                                                                                             "R!1"
                                                                                                                             "a!2"
                                                                                                                             "a!3")
                                                                                                                            (("3"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             1)
                                                            (("2"
                                                              (expand
                                                               "+")
                                                              (("2"
                                                                (inst
                                                                 1
                                                                 "zero")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (typepred
                                                                   "I!1")
                                                                  (("2"
                                                                    (expand
                                                                     "ideal?")
                                                                    (("2"
                                                                      (expand
                                                                       "left_ideal?")
                                                                      (("2"
                                                                        (expand
                                                                         "subring?")
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (hide
                                                                             -1
                                                                             -3
                                                                             -4)
                                                                            (("2"
                                                                              (lemma
                                                                               "zero_is_member_R[T,+,*,zero]")
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "I!1")
                                                                                (("2"
                                                                                  (expand
                                                                                   "member")
                                                                                  (("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (hide-all-but
                                                             1)
                                                            (("3"
                                                              (expand
                                                               "left_coset?")
                                                              (("3"
                                                                (inst
                                                                 1
                                                                 "a!2+a!3")
                                                                (("3"
                                                                  (lemma
                                                                   "R_sum_star_closed[T,+,*,zero]")
                                                                  (("3"
                                                                    (inst
                                                                     -1
                                                                     "R!1"
                                                                     "a!2"
                                                                     "a!3")
                                                                    (("3"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (-5 1))
                                                          (("2"
                                                            (replaces
                                                             -1)
                                                            (("2"
                                                              (expand
                                                               "+")
                                                              (("2"
                                                                (inst
                                                                 1
                                                                 "zero")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (typepred
                                                                   "I!1")
                                                                  (("2"
                                                                    (expand
                                                                     "ideal?")
                                                                    (("2"
                                                                      (expand
                                                                       "left_ideal?")
                                                                      (("2"
                                                                        (expand
                                                                         "subring?")
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (hide
                                                                             -1
                                                                             -3
                                                                             -4)
                                                                            (("2"
                                                                              (lemma
                                                                               "zero_is_member_R[T,+,*,zero]")
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "I!1")
                                                                                (("2"
                                                                                  (expand
                                                                                   "member")
                                                                                  (("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (hide-all-but
                                                           (-5 1))
                                                          (("3"
                                                            (replaces
                                                             -1)
                                                            (("3"
                                                              (expand
                                                               "left_coset?")
                                                              (("3"
                                                                (inst
                                                                 1
                                                                 "a!3")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         (-3 1))
                                                        (("2"
                                                          (replaces -1)
                                                          (("2"
                                                            (expand
                                                             "+")
                                                            (("2"
                                                              (inst
                                                               1
                                                               "zero")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (typepred
                                                                 "I!1")
                                                                (("2"
                                                                  (expand
                                                                   "ideal?")
                                                                  (("2"
                                                                    (expand
                                                                     "left_ideal?")
                                                                    (("2"
                                                                      (expand
                                                                       "subring?")
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (hide
                                                                           -1
                                                                           -3
                                                                           -4)
                                                                          (("2"
                                                                            (lemma
                                                                             "zero_is_member_R[T,+,*,zero]")
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "I!1")
                                                                              (("2"
                                                                                (expand
                                                                                 "member")
                                                                                (("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (hide-all-but
                                                         (-3 1))
                                                        (("3"
                                                          (replaces -1)
                                                          (("3"
                                                            (expand
                                                             "left_coset?")
                                                            (("3"
                                                              (inst
                                                               1
                                                               "a!2")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but 1)
                      (("2" (expand "gen")
                        (("2" (expand "lc_gen")
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil)
                     ("3" (hide-all-but (-1 1))
                      (("3" (expand "/") (("3" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("6" (expand "homomorphism?")
                (("6" (skosimp)
                  (("6" (decompose-equality -1)
                    (("1" (typepred "a!1" "b!1")
                      (("1" (expand "coset?")
                        (("1" (flatten)
                          (("1" (hide -2 -3 -5 -6)
                            (("1" (expand "left_coset?")
                              (("1"
                                (skosimp*)
                                (("1"
                                  (lemma "product_charac")
                                  (("1"
                                    (inst -1 "R!1" "I!1" "a!2" "a!3")
                                    (("1"
                                      (replace -2 -1 rl)
                                      (("1"
                                        (replace -3 -1 rl)
                                        (("1"
                                          (replace -1 1)
                                          (("1"
                                            (inst-cp -4 "a!1")
                                            (("1"
                                              (inst-cp -4 "b!1")
                                              (("1"
                                                (inst
                                                 -4
                                                 "(a!2*a!3) + I!1")
                                                (("1"
                                                  (lemma "gen_is_any")
                                                  (("1"
                                                    (lemma "lcos_eq")
                                                    (("1"
                                                      (inst-cp
                                                       -2
                                                       "R!1"
                                                       "I!1"
                                                       "a!1"
                                                       "a!2")
                                                      (("1"
                                                        (inst-cp
                                                         -2
                                                         "R!1"
                                                         "I!1"
                                                         "b!1"
                                                         "a!3")
                                                        (("1"
                                                          (inst
                                                           -2
                                                           "R!1"
                                                           "I!1"
                                                           "(a!2 * a!3) + I!1"
                                                           "a!2*a!3")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (inst-cp
                                                               -1
                                                               "I!1"
                                                               "lc_gen(R!1, I!1)(a!1)"
                                                               "a!2")
                                                              (("1"
                                                                (inst-cp
                                                                 -1
                                                                 "I!1"
                                                                 "lc_gen(R!1, I!1)(b!1)"
                                                                 "a!3")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "I!1"
                                                                   "lc_gen(R!1, I!1)((a!2 * a!3) + I!1)"
                                                                   "a!2*a!3")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (typepred
                                                                       "I!1")
                                                                      (("1"
                                                                        (expand
                                                                         "ideal?")
                                                                        (("1"
                                                                          (expand
                                                                           "left_ideal?")
                                                                          (("1"
                                                                            (expand
                                                                             "subring?")
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (hide
                                                                                 -1
                                                                                 -3
                                                                                 -4)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "zero_is_member_R[T,+,*,zero]")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "I!1")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "member")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (skosimp*)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "gen")
                                                                                            (("1"
                                                                                              (replaces
                                                                                               -3)
                                                                                              (("1"
                                                                                                (replaces
                                                                                                 -3)
                                                                                                (("1"
                                                                                                  (replaces
                                                                                                   -3)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -9
                                                                                                     1
                                                                                                     rl)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -10
                                                                                                       1
                                                                                                       rl)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -11
                                                                                                         1
                                                                                                         rl)
                                                                                                        (("1"
                                                                                                          (hide
                                                                                                           -3
                                                                                                           -4
                                                                                                           -5
                                                                                                           -6
                                                                                                           -7
                                                                                                           -8
                                                                                                           -9
                                                                                                           -10
                                                                                                           -11)
                                                                                                          (("1"
                                                                                                            (typepred
                                                                                                             "phi!1")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "R_homomorphism?")
                                                                                                              (("1"
                                                                                                                (flatten)
                                                                                                                (("1"
                                                                                                                  (hide
                                                                                                                   -1
                                                                                                                   -2
                                                                                                                   -3
                                                                                                                   -4)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "homomorphism?")
                                                                                                                    (("1"
                                                                                                                      (inst-cp
                                                                                                                       -1
                                                                                                                       "a!2*a!3"
                                                                                                                       "h!1")
                                                                                                                      (("1"
                                                                                                                        (inst-cp
                                                                                                                         -1
                                                                                                                         "a!2"
                                                                                                                         "h!3")
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           -1
                                                                                                                           "a!3"
                                                                                                                           "h!2")
                                                                                                                          (("1"
                                                                                                                            (inst
                                                                                                                             -4
                                                                                                                             "a!2"
                                                                                                                             "a!3")
                                                                                                                            (("1"
                                                                                                                              (replaces
                                                                                                                               -3)
                                                                                                                              (("1"
                                                                                                                                (replaces
                                                                                                                                 -1)
                                                                                                                                (("1"
                                                                                                                                  (replaces
                                                                                                                                   -1)
                                                                                                                                  (("1"
                                                                                                                                    (replaces
                                                                                                                                     -1)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "subset?")
                                                                                                                                      (("1"
                                                                                                                                        (inst-cp
                                                                                                                                         -3
                                                                                                                                         "h!1")
                                                                                                                                        (("1"
                                                                                                                                          (inst-cp
                                                                                                                                           -3
                                                                                                                                           "h!2")
                                                                                                                                          (("1"
                                                                                                                                            (inst
                                                                                                                                             -3
                                                                                                                                             "h!3")
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "R_kernel")
                                                                                                                                                (("1"
                                                                                                                                                  (flatten)
                                                                                                                                                  (("1"
                                                                                                                                                    (hide
                                                                                                                                                     -3
                                                                                                                                                     -4
                                                                                                                                                     -6
                                                                                                                                                     -7
                                                                                                                                                     -9
                                                                                                                                                     -10)
                                                                                                                                                    (("1"
                                                                                                                                                      (replaces
                                                                                                                                                       -3)
                                                                                                                                                      (("1"
                                                                                                                                                        (replaces
                                                                                                                                                         -3)
                                                                                                                                                        (("1"
                                                                                                                                                          (replaces
                                                                                                                                                           -3)
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (hide-all-but
                                                                                                                             1)
                                                                                                                            (("2"
                                                                                                                              (typepred
                                                                                                                               "I!1")
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "ideal?")
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "left_ideal?")
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "subring?")
                                                                                                                                    (("2"
                                                                                                                                      (flatten)
                                                                                                                                      (("2"
                                                                                                                                        (hide
                                                                                                                                         -2
                                                                                                                                         -3)
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "subset?")
                                                                                                                                          (("2"
                                                                                                                                            (inst
                                                                                                                                             -1
                                                                                                                                             "h!2")
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (hide-all-but
                                                                                                                           1)
                                                                                                                          (("2"
                                                                                                                            (typepred
                                                                                                                             "I!1")
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "ideal?")
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "left_ideal?")
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "subring?")
                                                                                                                                  (("2"
                                                                                                                                    (flatten)
                                                                                                                                    (("2"
                                                                                                                                      (hide
                                                                                                                                       -2
                                                                                                                                       -3)
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         "subset?")
                                                                                                                                        (("2"
                                                                                                                                          (inst
                                                                                                                                           -1
                                                                                                                                           "h!3")
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (hide-all-but
                                                                                                                         1)
                                                                                                                        (("2"
                                                                                                                          (typepred
                                                                                                                           "I!1")
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "ideal?")
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "left_ideal?")
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "subring?")
                                                                                                                                (("2"
                                                                                                                                  (flatten)
                                                                                                                                  (("2"
                                                                                                                                    (hide
                                                                                                                                     -2
                                                                                                                                     -3)
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "subset?")
                                                                                                                                      (("2"
                                                                                                                                        (inst
                                                                                                                                         -1
                                                                                                                                         "h!1")
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("3"
                                                                                                                        (hide-all-but
                                                                                                                         1)
                                                                                                                        (("3"
                                                                                                                          (lemma
                                                                                                                           "R_prod_star_closed[T,+,*,zero]")
                                                                                                                          (("3"
                                                                                                                            (inst
                                                                                                                             -1
                                                                                                                             "R!1"
                                                                                                                             "a!2"
                                                                                                                             "a!3")
                                                                                                                            (("3"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             1)
                                                            (("2"
                                                              (expand
                                                               "+")
                                                              (("2"
                                                                (inst
                                                                 1
                                                                 "zero")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (typepred
                                                                   "I!1")
                                                                  (("2"
                                                                    (expand
                                                                     "ideal?")
                                                                    (("2"
                                                                      (expand
                                                                       "left_ideal?")
                                                                      (("2"
                                                                        (expand
                                                                         "subring?")
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (hide
                                                                             -1
                                                                             -3
                                                                             -4)
                                                                            (("2"
                                                                              (lemma
                                                                               "zero_is_member_R[T,+,*,zero]")
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "I!1")
                                                                                (("2"
                                                                                  (expand
                                                                                   "member")
                                                                                  (("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (hide-all-but
                                                             1)
                                                            (("3"
                                                              (expand
                                                               "left_coset?")
                                                              (("3"
                                                                (inst
                                                                 1
                                                                 "a!2*a!3")
                                                                (("3"
                                                                  (lemma
                                                                   "R_prod_star_closed[T,+,*,zero]")
                                                                  (("3"
                                                                    (inst
                                                                     -1
                                                                     "R!1"
                                                                     "a!2"
                                                                     "a!3")
                                                                    (("3"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (-5 1))
                                                          (("2"
                                                            (replaces
                                                             -1)
                                                            (("2"
                                                              (expand
                                                               "+")
                                                              (("2"
                                                                (inst
                                                                 1
                                                                 "zero")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (typepred
                                                                   "I!1")
                                                                  (("2"
                                                                    (expand
                                                                     "ideal?")
                                                                    (("2"
                                                                      (expand
                                                                       "left_ideal?")
                                                                      (("2"
                                                                        (expand
                                                                         "subring?")
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (hide
                                                                             -1
                                                                             -3
                                                                             -4)
                                                                            (("2"
                                                                              (lemma
                                                                               "zero_is_member_R[T,+,*,zero]")
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "I!1")
                                                                                (("2"
                                                                                  (expand
                                                                                   "member")
                                                                                  (("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (hide-all-but
                                                           (-5 1))
                                                          (("3"
                                                            (replaces
                                                             -1)
                                                            (("3"
                                                              (expand
                                                               "left_coset?")
                                                              (("3"
                                                                (inst
                                                                 1
                                                                 "a!3")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         (-3 1))
                                                        (("2"
                                                          (replaces -1)
                                                          (("2"
                                                            (expand
                                                             "+")
                                                            (("2"
                                                              (inst
                                                               1
                                                               "zero")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (typepred
                                                                 "I!1")
                                                                (("2"
                                                                  (expand
                                                                   "ideal?")
                                                                  (("2"
                                                                    (expand
                                                                     "left_ideal?")
                                                                    (("2"
                                                                      (expand
                                                                       "subring?")
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (hide
                                                                           -1
                                                                           -3
                                                                           -4)
                                                                          (("2"
                                                                            (lemma
                                                                             "zero_is_member_R[T,+,*,zero]")
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "I!1")
                                                                              (("2"
                                                                                (expand
                                                                                 "member")
                                                                                (("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (hide-all-but
                                                         (-3 1))
                                                        (("3"
                                                          (replaces -1)
                                                          (("3"
                                                            (expand
                                                             "left_coset?")
                                                            (("3"
                                                              (inst
                                                               1
                                                               "a!2")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but 1)
                      (("2" (expand "gen")
                        (("2" (expand "lc_gen")
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil)
                     ("3" (hide-all-but (-1 1))
                      (("3" (expand "/") (("3" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide -1 2)
        (("2" (skosimp)
          (("2" (expand "gen")
            (("2" (expand "lc_gen") (("2" (propax) nil nil)) nil))
            nil))
          nil))
        nil)
       ("3" (hide -1 2)
        (("3" (skosimp)
          (("3" (typepred "A!1")
            (("3" (expand "/") (("3" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((gen const-decl "T" cosets_def nil)
    (coset type-eq-decl nil cosets_def nil)
    (coset? const-decl "bool" cosets_def nil)
    (R_homomorphism type-eq-decl nil ring_homomorphisms_def nil)
    (R_homomorphism? const-decl "bool" ring_homomorphisms_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (zerod formal-const-decl "D" ring_1st_isomorphism_theorem nil)
    (p formal-const-decl "[D, D -> D]" ring_1st_isomorphism_theorem
     nil)
    (s formal-const-decl "[D, D -> D]" ring_1st_isomorphism_theorem
     nil)
    (D formal-nonempty-type-decl nil ring_1st_isomorphism_theorem nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (ring? const-decl "bool" ring_def nil)
    (zero formal-const-decl "T" ring_1st_isomorphism_theorem nil)
    (* formal-const-decl "[T, T -> T]" ring_1st_isomorphism_theorem
       nil)
    (/ const-decl "setof[set[T]]" cosets_def nil)
    (+ formal-const-decl "[T, T -> T]" ring_1st_isomorphism_theorem
       nil)
    (setof type-eq-decl nil defined_types nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-nonempty-type-decl nil ring_1st_isomorphism_theorem nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (gen_is_any formula-decl nil ring_cosets_lemmas nil)
    (lcos_eq formula-decl nil ring_cosets_lemmas nil)
    (left_ideal? const-decl "bool" ring_ideal_def nil)
    (zero_is_member_R formula-decl nil ring_basic_properties nil)
    (member const-decl "bool" sets nil)
    (homomorphism? const-decl "bool" homomorphisms_def nil)
    (TRUE const-decl "bool" booleans nil)
    (R_kernel const-decl "set[T1]" ring_homomorphisms_def nil)
    (right_identity formula-decl nil monad nil)
    (subset? const-decl "bool" sets nil) nil
    (subring? const-decl "bool" ring_def nil)
    (left_coset type-eq-decl nil cosets_def nil) nil nil nil
    (left_coset? const-decl "bool" cosets_def nil) nil
    (lc_gen const-decl "T" cosets_def nil)
    (restrict const-decl "R" restrict nil)
    (coset_add formula-decl nil quotient_rings nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (coset_product formula-decl nil quotient_rings nil)
    (R_sum_star_closed formula-decl nil ring_basic_properties nil)
    (R_prod_star_closed formula-decl nil ring_basic_properties nil)
    (add_charac formula-decl nil quotient_rings nil) nil nil nil nil
    nil nil nil (product_charac formula-decl nil quotient_rings nil)
    nil nil nil nil nil nil nil)
   nil)
  (first_isomorphism_th_aux_1-1 nil 3758808597 ("" (postpone) nil nil)
   nil shostak))
 (first_isomorphism_th_aux_2 0
  (first_isomorphism_th_aux_2-1 nil 3758808685
   ("" (skosimp)
    (("" (expand "restrict")
      (("" (lemma "first_isomorphism_th_aux_1")
        (("" (inst -1 "R!1" "S!1" "phi!1" "I!1")
          (("" (assert)
            (("" (skosimp)
              (("" (inst 1 "f!1")
                (("" (prop)
                  (("" (expand "image")
                    (("" (expand "image")
                      (("" (decompose-equality 1)
                        (("" (iff 1)
                          (("" (prop)
                            (("1" (skosimp)
                              (("1"
                                (typepred "x!2 ")
                                (("1"
                                  (expand "/")
                                  (("1"
                                    (expand "coset?")
                                    (("1"
                                      (expand "left_coset?")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (hide -2 -5)
                                          (("1"
                                            (skosimp)
                                            (("1"
                                              (inst 1 "a!1")
                                              (("1"
                                                (inst -3 "a!1")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide -3)
                              (("2"
                                (skosimp)
                                (("2"
                                  (inst -2 "x!2")
                                  (("2"
                                    (inst 1 "x!2 + I!1")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((restrict const-decl "R" restrict nil)
    (T formal-nonempty-type-decl nil ring_1st_isomorphism_theorem nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" ring_1st_isomorphism_theorem
       nil)
    (* formal-const-decl "[T, T -> T]" ring_1st_isomorphism_theorem
       nil)
    (zero formal-const-decl "T" ring_1st_isomorphism_theorem nil)
    (ring? const-decl "bool" ring_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (D formal-nonempty-type-decl nil ring_1st_isomorphism_theorem nil)
    (s formal-const-decl "[D, D -> D]" ring_1st_isomorphism_theorem
     nil)
    (p formal-const-decl "[D, D -> D]" ring_1st_isomorphism_theorem
     nil)
    (zerod formal-const-decl "D" ring_1st_isomorphism_theorem nil)
    (R_homomorphism? const-decl "bool" ring_homomorphisms_def nil)
    (R_homomorphism type-eq-decl nil ring_homomorphisms_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil) nil nil
    (left_coset? const-decl "bool" cosets_def nil)
    (coset? const-decl "bool" cosets_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil) nil
    (setof type-eq-decl nil defined_types nil)
    (/ const-decl "setof[set[T]]" cosets_def nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (first_isomorphism_th_aux_1 formula-decl nil
     ring_1st_isomorphism_theorem nil))
   nil))
 (first_isomorphism_th_aux_3_TCC1 0
  (first_isomorphism_th_aux_3_TCC1-1 nil 3757773086
   ("" (skosimp)
    (("" (lemma "first_isomorphism_th_aux_1")
      (("" (inst -1 "R!1" "S!1" "phi!1" "I!1")
        (("" (assert)
          (("" (skosimp)
            (("" (skosimp)
              (("" (split)
                (("1" (skosimp)
                  (("1" (expand "restrict")
                    (("1" (expand "/" 1) (("1" (grind) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (case-replace "f!1 = f!2")
                  (("2" (hide 2)
                    (("2" (decompose-equality 1)
                      (("2" (typepred "x!1")
                        (("2" (expand "/" -1)
                          (("2" (expand "coset?" -1)
                            (("2" (flatten)
                              (("2"
                                (hide -2)
                                (("2"
                                  (expand "left_coset?")
                                  (("2"
                                    (skosimp)
                                    (("2"
                                      (inst -2 "a!1")
                                      (("2"
                                        (inst -5 "a!1")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((first_isomorphism_th_aux_1 formula-decl nil
     ring_1st_isomorphism_theorem nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (setof type-eq-decl nil defined_types nil)
    (left_coset? const-decl "bool" cosets_def nil)
    (coset? const-decl "bool" cosets_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (/ const-decl "setof[set[T]]" cosets_def nil)
    (restrict const-decl "R" restrict nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (R_homomorphism type-eq-decl nil ring_homomorphisms_def nil)
    (R_homomorphism? const-decl "bool" ring_homomorphisms_def nil)
    (zerod formal-const-decl "D" ring_1st_isomorphism_theorem nil)
    (p formal-const-decl "[D, D -> D]" ring_1st_isomorphism_theorem
     nil)
    (s formal-const-decl "[D, D -> D]" ring_1st_isomorphism_theorem
     nil)
    (D formal-nonempty-type-decl nil ring_1st_isomorphism_theorem nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (ring? const-decl "bool" ring_def nil)
    (zero formal-const-decl "T" ring_1st_isomorphism_theorem nil)
    (* formal-const-decl "[T, T -> T]" ring_1st_isomorphism_theorem
       nil)
    (+ formal-const-decl "[T, T -> T]" ring_1st_isomorphism_theorem
       nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-nonempty-type-decl nil ring_1st_isomorphism_theorem nil))
   nil
   (first_isomorphism_th_aux_3 subtype "ring_1st_isomorphism_theorem.f"
    "ring_homomorphisms_def[cosets_def[ring_1st_isomorphism_theorem.T, ring_1st_isomorphism_theorem.+].coset(ring_1st_isomorphism_theorem.R, ring_1st_isomorphism_theorem.I), cosets_def[ring_1st_isomorphism_theorem.T, ring_1st_isomorphism_theorem.+].add(ring_1st_isomorphism_theorem.R, ring_1st_isomorphism_theorem.I), product_coset_def[ring_1st_isomorphism_theorem.T, ring_1st_isomorphism_theorem.+, ring_1st_isomorphism_theorem.*].product(ring_1st_isomorphism_theorem.R, ring_1st_isomorphism_theorem.I), ring_1st_isomorphism_theorem.I, ring_1st_isomorphism_theorem.D, ring_1st_isomorphism_theorem.s, ring_1st_isomorphism_theorem.p, ring_1st_isomorphism_theorem.zerod].R_homomorphism(restrict[set[T], cosets_def[ring_1st_isomorphism_theorem.T, ring_1st_isomorphism_theorem.+].coset(ring_1st_isomorphism_theorem.R, ring_1st_isomorphism_theorem.I), booleans.bool].restrict(cosets_def[ring_1st_isomorphism_theorem.T, ring_1st_isomorphism_theorem.+]./(ring_1st_isomorphism_theorem.R, ring_1st_isomorphism_theorem.I)), ring_1st_isomorphism_theorem.S)")))
 (first_isomorphism_th_aux_3 0
  (first_isomorphism_th_aux_3-2 nil 3800372732
   ("" (skosimp)
    (("" (lemma "first_isomorphism_th_aux_1")
      (("" (inst -1 "R!1" "S!1" "phi!1" "I!1")
        (("" (assert)
          (("" (skosimp)
            (("" (inst 1 "f!1")
              (("" (prop)
                (("" (decompose-equality)
                  (("1" (iff)
                    (("1" (prop)
                      (("1" (expand "restrict")
                        (("1" (expand "R_kernel" -1)
                          (("1" (flatten)
                            (("1" (expand "/")
                              (("1"
                                (expand "coset?")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (hide -2)
                                    (("1"
                                      (lemma "lcoset_iff_rcoset")
                                      (("1"
                                        (inst
                                         -1
                                         "x!1"
                                         "I!1"
                                         "R_kernel(R!1, S!1)(phi!1)")
                                        (("1"
                                          (case
                                           "left_coset?(R_kernel(R!1, S!1)(phi!1), I!1)(x!1)")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (hide -1 2)
                                            (("2"
                                              (expand "left_coset?")
                                              (("2"
                                                (skosimp)
                                                (("2"
                                                  (inst -4 "a!1")
                                                  (("2"
                                                    (replace -1 -3)
                                                    (("2"
                                                      (replaces -3 -4)
                                                      (("2"
                                                        (inst 1 "a!1")
                                                        (("2"
                                                          (expand
                                                           "R_kernel")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "restrict")
                        (("2" (expand "/" -1)
                          (("2" (expand "coset?")
                            (("2" (flatten)
                              (("2"
                                (hide -2)
                                (("2"
                                  (expand "left_coset?")
                                  (("2"
                                    (skosimp)
                                    (("2"
                                      (expand "R_kernel")
                                      (("2"
                                        (typepred "a!1")
                                        (("2"
                                          (expand "R_kernel")
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (split)
                                                (("1"
                                                  (expand "/" 1)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but
                                                   (-3 -4 -5 1))
                                                  (("2"
                                                    (inst -3 "a!1")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide -)
                    (("2" (expand "coset?")
                      (("2" (lemma "lcoset_iff_rcoset")
                        (("2" (inst -1 "I!1" "I!1" "R!1")
                          (("2" (case "left_coset?(R!1, I!1)(I!1)")
                            (("1" (assert) nil nil)
                             ("2" (hide -1 2)
                              (("2"
                                (expand "left_coset?")
                                (("2"
                                  (inst 1 "zero")
                                  (("1" (rewrite "left_zero") nil nil)
                                   ("2"
                                    (lemma
                                     "zero_is_member_R[T,+,*,zero]")
                                    (("2"
                                      (inst -1 "R!1")
                                      (("2"
                                        (expand "member")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (hide -)
                    (("3" (skosimp)
                      (("3" (expand "coset?")
                        (("3" (lemma "lcoset_iff_rcoset")
                          (("3"
                            (inst -1 "product[T, +, *](R!1, I!1)(x1!1)"
                             "I!1" "R!1")
                            (("3"
                              (case "left_coset?(R!1, I!1)(product[T, +, *](R!1, I!1)(x1!1))")
                              (("1" (assert) nil nil)
                               ("2"
                                (hide -1 2)
                                (("2"
                                  (expand "left_coset?")
                                  (("2"
                                    (expand "product")
                                    (("2"
                                      (typepred "x1!1`1" "x1!1`2")
                                      (("2"
                                        (expand "coset?")
                                        (("2"
                                          (expand "left_coset?")
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (hide -2 -4)
                                              (("2"
                                                (skosimp*)
                                                (("2"
                                                  (lemma
                                                   "product_charac")
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "R!1"
                                                     "I!1"
                                                     "a!1"
                                                     "a!2")
                                                    (("2"
                                                      (expand
                                                       "product")
                                                      (("2"
                                                        (inst
                                                         1
                                                         "a!1*a!2")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (hide -)
                                                          (("2"
                                                            (lemma
                                                             "R_prod_star_closed[T,+,*,zero]")
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "R!1"
                                                               "a!1"
                                                               "a!2")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("4" (hide -)
                    (("4" (skosimp)
                      (("4" (expand "coset?")
                        (("4" (lemma "lcoset_iff_rcoset")
                          (("4"
                            (inst -1 "add[T, +](R!1, I!1)(x1!1)" "I!1"
                             "R!1")
                            (("4"
                              (case "left_coset?(R!1, I!1)(add[T, +](R!1, I!1)(x1!1))")
                              (("1" (assert) nil nil)
                               ("2"
                                (hide -1 2)
                                (("2"
                                  (expand "left_coset?")
                                  (("2"
                                    (expand "add")
                                    (("2"
                                      (typepred "x1!1`1" "x1!1`2")
                                      (("2"
                                        (expand "coset?")
                                        (("2"
                                          (expand "left_coset?")
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (hide -2 -4)
                                              (("2"
                                                (skosimp*)
                                                (("2"
                                                  (lemma "add_charac")
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "R!1"
                                                     "I!1"
                                                     "a!1"
                                                     "a!2")
                                                    (("2"
                                                      (expand "add")
                                                      (("2"
                                                        (inst
                                                         1
                                                         "a!1 + a!2")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (hide -)
                                                          (("2"
                                                            (lemma
                                                             "R_sum_star_closed[T,+,*,zero]")
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "R!1"
                                                               "a!1"
                                                               "a!2")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("5" (hide -)
                    (("5" (inst 1 "I!1")
                      (("5" (expand "coset?")
                        (("5" (lemma "lcoset_iff_rcoset")
                          (("5" (inst -1 "I!1" "I!1" "R!1")
                            (("5" (case "left_coset?(R!1, I!1)(I!1)")
                              (("1" (assert) nil nil)
                               ("2"
                                (hide -1 2)
                                (("2"
                                  (expand "left_coset?")
                                  (("2"
                                    (inst 1 "zero")
                                    (("1"
                                      (rewrite "left_zero")
                                      nil
                                      nil)
                                     ("2"
                                      (lemma
                                       "zero_is_member_R[T,+,*,zero]")
                                      (("2"
                                        (inst -1 "R!1")
                                        (("2"
                                          (expand "member")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((first_isomorphism_th_aux_1 formula-decl nil
     ring_1st_isomorphism_theorem nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (/ const-decl "setof[set[T]]" cosets_def nil)
    (setof type-eq-decl nil defined_types nil) nil nil
    (TRUE const-decl "bool" booleans nil)
    (add const-decl "set[T]" cosets_def nil)
    (product const-decl "set[T]" product_coset_def nil)
    (R_kernel const-decl "set[T1]" ring_homomorphisms_def nil)
    (restrict const-decl "R" restrict nil)
    (coset? const-decl "bool" cosets_def nil)
    (coset type-eq-decl nil cosets_def nil)
    (lcoset_iff_rcoset formula-decl nil ring_cosets_lemmas nil)
    (left_coset? const-decl "bool" cosets_def nil) nil nil nil
    (NOT const-decl "[bool -> bool]" booleans nil)
    (left_zero formula-decl nil ring_cosets_lemmas nil)
    (member const-decl "bool" sets nil)
    (zero_is_member_R formula-decl nil ring_basic_properties nil)
    (product_charac formula-decl nil quotient_rings nil)
    (R_prod_star_closed formula-decl nil ring_basic_properties nil) nil
    nil (add_charac formula-decl nil quotient_rings nil)
    (R_sum_star_closed formula-decl nil ring_basic_properties nil) nil
    nil (ideal type-eq-decl nil ring_ideal_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (R_homomorphism type-eq-decl nil ring_homomorphisms_def nil)
    (R_homomorphism? const-decl "bool" ring_homomorphisms_def nil)
    (zerod formal-const-decl "D" ring_1st_isomorphism_theorem nil)
    (p formal-const-decl "[D, D -> D]" ring_1st_isomorphism_theorem
     nil)
    (s formal-const-decl "[D, D -> D]" ring_1st_isomorphism_theorem
     nil)
    (D formal-nonempty-type-decl nil ring_1st_isomorphism_theorem nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (ring? const-decl "bool" ring_def nil)
    (zero formal-const-decl "T" ring_1st_isomorphism_theorem nil)
    (* formal-const-decl "[T, T -> T]" ring_1st_isomorphism_theorem
       nil)
    (+ formal-const-decl "[T, T -> T]" ring_1st_isomorphism_theorem
       nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-nonempty-type-decl nil ring_1st_isomorphism_theorem nil))
   nil)
  (first_isomorphism_th_aux_3-1 nil 3758808727
   ("" (skosimp)
    (("" (lemma "first_isomorphism_th_aux_1")
      (("" (inst -1 "R!1" "S!1" "phi!1" "I!1")
        (("" (assert)
          (("" (skosimp)
            (("" (inst 1 "f!1")
              (("" (prop)
                (("" (decompose-equality)
                  (("1" (iff)
                    (("1" (prop)
                      (("1" (expand "restrict")
                        (("1" (expand "R_kernel" -1)
                          (("1" (flatten)
                            (("1" (expand "/")
                              (("1"
                                (expand "coset?")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (hide -2)
                                    (("1"
                                      (lemma "lcoset_iff_rcoset")
                                      (("1"
                                        (inst
                                         -1
                                         "x!1"
                                         "I!1"
                                         "R_kernel(R!1, S!1)(phi!1)")
                                        (("1"
                                          (case
                                           "left_coset?(R_kernel(R!1, S!1)(phi!1), I!1)(x!1)")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (hide -1 2)
                                            (("2"
                                              (expand "left_coset?")
                                              (("2"
                                                (skosimp)
                                                (("2"
                                                  (inst -4 "a!1")
                                                  (("2"
                                                    (replace -1 -3)
                                                    (("2"
                                                      (replaces -3 -4)
                                                      (("2"
                                                        (inst 1 "a!1")
                                                        (("2"
                                                          (expand
                                                           "R_kernel")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "restrict")
                        (("2" (expand "/" -1)
                          (("2" (expand "coset?")
                            (("2" (flatten)
                              (("2"
                                (hide -2)
                                (("2"
                                  (expand "left_coset?")
                                  (("2"
                                    (skosimp)
                                    (("2"
                                      (expand "R_kernel")
                                      (("2"
                                        (typepred "a!1")
                                        (("2"
                                          (expand "R_kernel")
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (split)
                                                (("1"
                                                  (expand "/" 1)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but
                                                   (-3 -4 -5 1))
                                                  (("2"
                                                    (inst -3 "a!1")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide -)
                    (("2" (expand "coset?")
                      (("2" (lemma "lcoset_iff_rcoset")
                        (("2" (inst -1 "I!1" "I!1" "R!1")
                          (("2" (case "left_coset?(R!1, I!1)(I!1)")
                            (("1" (assert) nil nil)
                             ("2" (hide -1 2)
                              (("2"
                                (expand "left_coset?")
                                (("2"
                                  (inst 1 "zero")
                                  (("1" (rewrite "left_zero") nil nil)
                                   ("2"
                                    (lemma
                                     "zero_is_member_R[T,+,*,zero]")
                                    (("2"
                                      (inst -1 "R!1")
                                      (("2"
                                        (expand "member")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (hide -)
                    (("3" (skosimp)
                      (("3" (expand "coset?")
                        (("3" (lemma "lcoset_iff_rcoset")
                          (("3"
                            (inst -1 "product[T, +, *](R!1, I!1)(x1!1)"
                             "I!1" "R!1")
                            (("3"
                              (case "left_coset?(R!1, I!1)(product[T, +, *](R!1, I!1)(x1!1))")
                              (("1" (assert) nil nil)
                               ("2"
                                (hide -1 2)
                                (("2"
                                  (expand "left_coset?")
                                  (("2"
                                    (expand "product")
                                    (("2"
                                      (typepred "x1!1`1" "x1!1`2")
                                      (("2"
                                        (expand "coset?")
                                        (("2"
                                          (expand "left_coset?")
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (hide -2 -4)
                                              (("2"
                                                (skosimp*)
                                                (("2"
                                                  (lemma
                                                   "product_charac")
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "R!1"
                                                     "I!1"
                                                     "a!1"
                                                     "a!2")
                                                    (("2"
                                                      (expand
                                                       "product")
                                                      (("2"
                                                        (inst
                                                         1
                                                         "a!1*a!2")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (hide -)
                                                          (("2"
                                                            (lemma
                                                             "R_prod_star_closed[T,+,*,zero]")
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "R!1"
                                                               "a!1"
                                                               "a!2")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("4" (hide -)
                    (("4" (skosimp)
                      (("4" (expand "coset?")
                        (("4" (lemma "lcoset_iff_rcoset")
                          (("4"
                            (inst -1 "add[T, +, *](R!1, I!1)(x1!1)"
                             "I!1" "R!1")
                            (("4"
                              (case "left_coset?(R!1, I!1)(add[T, +, *](R!1, I!1)(x1!1))")
                              (("1" (assert) nil nil)
                               ("2"
                                (hide -1 2)
                                (("2"
                                  (expand "left_coset?")
                                  (("2"
                                    (expand "add")
                                    (("2"
                                      (typepred "x1!1`1" "x1!1`2")
                                      (("2"
                                        (expand "coset?")
                                        (("2"
                                          (expand "left_coset?")
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (hide -2 -4)
                                              (("2"
                                                (skosimp*)
                                                (("2"
                                                  (lemma "add_charac")
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "R!1"
                                                     "I!1"
                                                     "a!1"
                                                     "a!2")
                                                    (("2"
                                                      (expand "add")
                                                      (("2"
                                                        (inst
                                                         1
                                                         "a!1 + a!2")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (hide -)
                                                          (("2"
                                                            (lemma
                                                             "R_sum_star_closed[T,+,*,zero]")
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "R!1"
                                                               "a!1"
                                                               "a!2")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("5" (hide -)
                    (("5" (inst 1 "I!1")
                      (("5" (expand "coset?")
                        (("5" (lemma "lcoset_iff_rcoset")
                          (("5" (inst -1 "I!1" "I!1" "R!1")
                            (("5" (case "left_coset?(R!1, I!1)(I!1)")
                              (("1" (assert) nil nil)
                               ("2"
                                (hide -1 2)
                                (("2"
                                  (expand "left_coset?")
                                  (("2"
                                    (inst 1 "zero")
                                    (("1"
                                      (rewrite "left_zero")
                                      nil
                                      nil)
                                     ("2"
                                      (lemma
                                       "zero_is_member_R[T,+,*,zero]")
                                      (("2"
                                        (inst -1 "R!1")
                                        (("2"
                                          (expand "member")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((first_isomorphism_th_aux_1 formula-decl nil
     ring_1st_isomorphism_theorem nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (setof type-eq-decl nil defined_types nil)
    (TRUE const-decl "bool" booleans nil)
    (product const-decl "set[T]" product_coset_def nil)
    (R_kernel const-decl "set[T1]" ring_homomorphisms_def nil)
    (restrict const-decl "R" restrict nil)
    (coset? const-decl "bool" cosets_def nil)
    (coset type-eq-decl nil cosets_def nil)
    (lcoset_iff_rcoset formula-decl nil ring_cosets_lemmas nil)
    (left_coset? const-decl "bool" cosets_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (left_zero formula-decl nil ring_cosets_lemmas nil)
    (member const-decl "bool" sets nil)
    (zero_is_member_R formula-decl nil ring_basic_properties nil)
    (product_charac formula-decl nil quotient_rings nil)
    (R_prod_star_closed formula-decl nil ring_basic_properties nil)
    (add_charac formula-decl nil quotient_rings nil)
    (R_sum_star_closed formula-decl nil ring_basic_properties nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (R_homomorphism type-eq-decl nil ring_homomorphisms_def nil)
    (R_homomorphism? const-decl "bool" ring_homomorphisms_def nil)
    (zerod formal-const-decl "D" ring_1st_isomorphism_theorem nil)
    (p formal-const-decl "[D, D -> D]" ring_1st_isomorphism_theorem
     nil)
    (s formal-const-decl "[D, D -> D]" ring_1st_isomorphism_theorem
     nil)
    (D formal-nonempty-type-decl nil ring_1st_isomorphism_theorem nil)
    (zero formal-const-decl "T" ring_1st_isomorphism_theorem nil)
    (* formal-const-decl "[T, T -> T]" ring_1st_isomorphism_theorem
       nil)
    (+ formal-const-decl "[T, T -> T]" ring_1st_isomorphism_theorem
       nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-nonempty-type-decl nil ring_1st_isomorphism_theorem nil))
   nil))
 (first_isomorphism_th_aux_4_TCC1 0
  (first_isomorphism_th_aux_4_TCC1-1 nil 3757773086
   ("" (skosimp*)
    (("" (expand "restrict")
      (("" (expand "/") (("" (grind) nil nil)) nil)) nil))
    nil)
   ((restrict const-decl "R" restrict nil)
    (/ const-decl "setof[set[T]]" cosets_def nil))
   nil
   (first_isomorphism_th_aux_4 subtype "ring_1st_isomorphism_theorem.f"
    "[(restrict[set[T], cosets_def[ring_1st_isomorphism_theorem.T, ring_1st_isomorphism_theorem.+].coset(ring_1st_isomorphism_theorem.R, ring_1st_isomorphism_theorem.I), booleans.bool].restrict(cosets_def[ring_1st_isomorphism_theorem.T, ring_1st_isomorphism_theorem.+]./(ring_1st_isomorphism_theorem.R, ring_1st_isomorphism_theorem.I))) -> (ring_1st_isomorphism_theorem.S)]")))
 (first_isomorphism_th_aux_4 0
  (first_isomorphism_th_aux_4-1 nil 3758808765
   ("" (skosimp)
    (("" (lemma "first_isomorphism_th_aux_1")
      (("" (inst -1 "R!1" "S!1" "phi!1" "I!1")
        (("" (assert)
          (("" (skosimp)
            (("" (inst 1 "f!1")
              (("" (prop)
                (("1" (expand "R_epimorphism?")
                  (("1" (flatten)
                    (("1" (hide -2)
                      (("1" (expand "surjective?")
                        (("1" (skosimp)
                          (("1" (inst -1 "y!1")
                            (("1" (skosimp)
                              (("1"
                                (typepred "x!1")
                                (("1"
                                  (expand "coset?")
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (hide -2)
                                      (("1"
                                        (expand "left_coset?")
                                        (("1"
                                          (skosimp)
                                          (("1"
                                            (hide -2)
                                            (("1"
                                              (inst -3 "a!1")
                                              (("1"
                                                (inst 1 "a!1")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "R_epimorphism?")
                  (("2" (prop)
                    (("2" (expand "surjective?")
                      (("2" (skosimp)
                        (("2" (inst -1 "y!1")
                          (("2" (skosimp)
                            (("2" (inst -2 "x!1")
                              (("2"
                                (inst 1 "x!1+I!1")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (hide -)
                                  (("2"
                                    (expand "restrict")
                                    (("2"
                                      (expand "/")
                                      (("2"
                                        (expand "coset?")
                                        (("2"
                                          (lemma "lcoset_iff_rcoset")
                                          (("2"
                                            (inst
                                             -1
                                             "x!1 + I!1"
                                             "I!1"
                                             "R!1")
                                            (("2"
                                              (case
                                               "left_coset?(R!1, I!1)(x!1 + I!1)")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (hide -1 2)
                                                (("2"
                                                  (expand
                                                   "left_coset?")
                                                  (("2"
                                                    (inst 1 "x!1")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((first_isomorphism_th_aux_1 formula-decl nil
     ring_1st_isomorphism_theorem nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (/ const-decl "setof[set[T]]" cosets_def nil)
    (setof type-eq-decl nil defined_types nil)
    (lcoset_iff_rcoset formula-decl nil ring_cosets_lemmas nil) nil nil
    nil nil (AND const-decl "[bool, bool -> bool]" booleans nil)
    (R_epimorphism? const-decl "bool" ring_homomorphisms_def nil)
    (left_coset? const-decl "bool" cosets_def nil)
    (restrict const-decl "R" restrict nil)
    (coset type-eq-decl nil cosets_def nil)
    (coset? const-decl "bool" cosets_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (surjective? const-decl "bool" functions nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (R_homomorphism type-eq-decl nil ring_homomorphisms_def nil)
    (R_homomorphism? const-decl "bool" ring_homomorphisms_def nil)
    (zerod formal-const-decl "D" ring_1st_isomorphism_theorem nil)
    (p formal-const-decl "[D, D -> D]" ring_1st_isomorphism_theorem
     nil)
    (s formal-const-decl "[D, D -> D]" ring_1st_isomorphism_theorem
     nil)
    (D formal-nonempty-type-decl nil ring_1st_isomorphism_theorem nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (ring? const-decl "bool" ring_def nil)
    (zero formal-const-decl "T" ring_1st_isomorphism_theorem nil)
    (* formal-const-decl "[T, T -> T]" ring_1st_isomorphism_theorem
       nil)
    (+ formal-const-decl "[T, T -> T]" ring_1st_isomorphism_theorem
       nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-nonempty-type-decl nil ring_1st_isomorphism_theorem nil))
   nil))
 (first_isomorphism_th_aux_5 0
  (first_isomorphism_th_aux_5-2 nil 3800372877
   ("" (skosimp)
    (("" (lemma "first_isomorphism_th_aux_3")
      (("" (inst -1 "R!1" "S!1" "phi!1" "I!1")
        (("" (assert)
          (("" (skosimp)
            (("" (inst 1 "f!1")
              (("" (prop)
                (("1"
                  (rewrite
                   "monomorphism_charac[coset(R!1,I!1),add(R!1,I!1), product(R!1,I!1),I!1,D,s,p,zerod]")
                  (("1" (decompose-equality 1)
                    (("1" (replace -3 -1)
                      (("1" (hide -3)
                        (("1" (iff 1)
                          (("1" (prop)
                            (("1" (expand "singleton")
                              (("1"
                                (lemma "self_coset[T,+,*,zero]")
                                (("1"
                                  (decompose-equality -3)
                                  (("1"
                                    (inst -1 "x!1+I!1")
                                    (("1"
                                      (expand "restrict")
                                      (("1"
                                        (inst -2 "I!1" "R!1" "x!1")
                                        (("1"
                                          (typepred "I!1")
                                          (("1"
                                            (expand "ideal?")
                                            (("1"
                                              (expand "left_ideal?")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide
                                                     -1
                                                     -2
                                                     -3
                                                     -6
                                                     -7
                                                     2)
                                                    (("1"
                                                      (iff -1)
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (hide 1 3)
                                                          (("1"
                                                            (expand
                                                             "/")
                                                            (("1"
                                                              (expand
                                                               "coset?")
                                                              (("1"
                                                                (lemma
                                                                 "lcoset_iff_rcoset")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "x!1+I!1"
                                                                   "I!1"
                                                                   "R_kernel(R!1, S!1)(phi!1)")
                                                                  (("1"
                                                                    (case
                                                                     "left_coset?(R_kernel(R!1, S!1)(phi!1), I!1)(x!1 + I!1)")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       -1
                                                                       2)
                                                                      (("2"
                                                                        (expand
                                                                         "left_coset?")
                                                                        (("2"
                                                                          (inst
                                                                           1
                                                                           "x!1")
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide -1 -3 -4 2)
                                      (("2"
                                        (lemma "lcoset_iff_rcoset")
                                        (("2"
                                          (expand "coset?")
                                          (("2"
                                            (inst
                                             -1
                                             "x!1+I!1"
                                             "I!1"
                                             "R!1")
                                            (("2"
                                              (case
                                               "left_coset?(R!1, I!1)(x!1 + I!1)")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (hide -1 2)
                                                (("2"
                                                  (expand
                                                   "left_coset?")
                                                  (("2"
                                                    (inst 1 "x!1")
                                                    (("2"
                                                      (expand
                                                       "R_kernel")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide -2 -3)
                              (("2"
                                (expand "subset?")
                                (("2"
                                  (inst -2 "x!1")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide - 2)
                    (("2" (lemma "quotient_group_is_ring")
                      (("2" (inst -1 "R!1" "I!1") nil nil)) nil))
                    nil)
                   ("3" (hide - 2)
                    (("3" (rewrite "fullsetD_is_ring") nil nil)) nil)
                   ("4" (hide-all-but 1)
                    (("4" (lemma "quotient_group_is_ring[T,+,*,zero]")
                      (("4" (inst -1 "R!1" "I!1")
                        (("4" (expand "/" -1)
                          (("4" (expand "fullset")
                            (("4" (expand "restrict")
                              (("4" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("5" (hide - 2)
                    (("5" (expand "coset?")
                      (("5" (lemma "lcoset_iff_rcoset")
                        (("5" (inst -1 "I!1" "I!1" "R!1")
                          (("5" (case "left_coset?(R!1, I!1)(I!1)")
                            (("1" (assert) nil nil)
                             ("2" (hide -1 2)
                              (("2"
                                (expand "left_coset?")
                                (("2"
                                  (inst 1 "zero")
                                  (("1" (rewrite "left_zero") nil nil)
                                   ("2"
                                    (lemma
                                     "zero_is_member_R[T,+,*,zero]")
                                    (("2"
                                      (inst -1 "R!1")
                                      (("2"
                                        (expand "member")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("6" (hide - 2)
                    (("6" (skosimp)
                      (("6" (lemma "product_is_coset")
                        (("6" (inst -1 "R!1" "I!1" "x1!1`1" "x1!1`2")
                          (("6" (skosimp)
                            (("6" (expand "product")
                              (("6"
                                (replaces -1)
                                (("6"
                                  (expand "coset?")
                                  (("6"
                                    (lemma "lcoset_iff_rcoset")
                                    (("6"
                                      (inst -1 "a!1 + I!1" "I!1" "R!1")
                                      (("6"
                                        (case
                                         "left_coset?(R!1, I!1)(a!1 + I!1)")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (hide -1 2)
                                          (("2"
                                            (expand "left_coset?")
                                            (("2"
                                              (inst 1 "a!1")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("7" (hide - 2)
                    (("7" (skosimp)
                      (("7" (lemma "add_is_coset")
                        (("7" (inst -1 "R!1" "I!1" "x1!1`1" "x1!1`2")
                          (("7" (skosimp)
                            (("7" (expand "add")
                              (("7"
                                (replaces -1)
                                (("7"
                                  (expand "coset?")
                                  (("7"
                                    (lemma "lcoset_iff_rcoset")
                                    (("7"
                                      (inst -1 "a!1 + I!1" "I!1" "R!1")
                                      (("7"
                                        (case
                                         "left_coset?(R!1, I!1)(a!1 + I!1)")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (hide -1 2)
                                          (("2"
                                            (expand "left_coset?")
                                            (("2"
                                              (inst 1 "a!1")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("8" (hide - 2)
                    (("8" (inst 1 "I!1")
                      (("8" (expand "coset?")
                        (("8" (lemma "lcoset_iff_rcoset")
                          (("8" (inst -1 "I!1" "I!1" "R!1")
                            (("8" (case "left_coset?(R!1, I!1)(I!1)")
                              (("1" (assert) nil nil)
                               ("2"
                                (hide -1 2)
                                (("2"
                                  (expand "left_coset?")
                                  (("2"
                                    (inst 1 "zero")
                                    (("1"
                                      (rewrite "left_zero")
                                      nil
                                      nil)
                                     ("2"
                                      (lemma
                                       "zero_is_member_R[T,+,*,zero]")
                                      (("2"
                                        (inst -1 "R!1")
                                        (("2"
                                          (expand "member")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (rewrite "monomorphism_charac" 1)
                  (("1" (replace -3 1)
                    (("1" (hide -2 -3)
                      (("1" (decompose-equality 1)
                        (("1" (iff)
                          (("1" (prop)
                            (("1" (expand "restrict")
                              (("1"
                                (expand "singleton")
                                (("1"
                                  (replaces -2)
                                  (("1"
                                    (expand "/")
                                    (("1"
                                      (expand "coset?")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand "left_coset?")
                                          (("1"
                                            (skosimp)
                                            (("1"
                                              (typepred "a!1")
                                              (("1"
                                                (lemma "self_coset")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "I!1"
                                                   "R!1"
                                                   "a!1")
                                                  (("1"
                                                    (typepred "I!1")
                                                    (("1"
                                                      (expand "ideal?")
                                                      (("1"
                                                        (expand
                                                         "left_ideal?")
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "singleton")
                              (("2"
                                (expand "restrict")
                                (("2"
                                  (replaces -2)
                                  (("2"
                                    (expand "/")
                                    (("2"
                                      (expand "coset?")
                                      (("2"
                                        (expand "left_coset?")
                                        (("2"
                                          (expand "right_coset?")
                                          (("2"
                                            (split)
                                            (("1"
                                              (inst 1 "zero")
                                              (("1"
                                                (rewrite "left_zero")
                                                nil
                                                nil)
                                               ("2"
                                                (lemma
                                                 "zero_is_member_R[T,+,*,zero]")
                                                (("2"
                                                  (typepred "I!1")
                                                  (("2"
                                                    (expand "ideal?")
                                                    (("2"
                                                      (expand
                                                       "left_ideal?")
                                                      (("2"
                                                        (expand
                                                         "subring?")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (hide
                                                             -1
                                                             -3
                                                             -4)
                                                            (("2"
                                                              (inst
                                                               -2
                                                               "I!1")
                                                              (("2"
                                                                (expand
                                                                 "member")
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (inst 1 "zero")
                                              (("1"
                                                (rewrite "right_zero")
                                                nil
                                                nil)
                                               ("2"
                                                (lemma
                                                 "zero_is_member_R[T,+,*,zero]")
                                                (("2"
                                                  (typepred "I!1")
                                                  (("2"
                                                    (expand "ideal?")
                                                    (("2"
                                                      (expand
                                                       "left_ideal?")
                                                      (("2"
                                                        (expand
                                                         "subring?")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (hide
                                                             -1
                                                             -3
                                                             -4)
                                                            (("2"
                                                              (inst
                                                               -2
                                                               "I!1")
                                                              (("2"
                                                                (expand
                                                                 "member")
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but 1)
                    (("2" (lemma "quotient_group_is_ring")
                      (("2" (inst -1 "R!1" "I!1") nil nil)) nil))
                    nil)
                   ("3" (hide-all-but 1)
                    (("3" (rewrite "fullsetD_is_ring") nil nil)) nil)
                   ("4" (hide-all-but 1)
                    (("4" (expand "fullset")
                      (("4" (lemma "quotient_group_is_ring")
                        (("4" (inst -1 "R!1" "I!1")
                          (("4" (expand "restrict")
                            (("4" (expand "/") (("4" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("5" (hide-all-but 1)
                    (("5" (expand "coset?")
                      (("5" (lemma "lcoset_iff_rcoset")
                        (("5" (inst -1 "I!1" "I!1" "R!1")
                          (("5" (case "left_coset?(R!1, I!1)(I!1)")
                            (("1" (assert) nil nil)
                             ("2" (hide -1 2)
                              (("2"
                                (expand "left_coset?")
                                (("2"
                                  (inst 1 "zero")
                                  (("1" (rewrite "left_zero") nil nil)
                                   ("2"
                                    (lemma
                                     "zero_is_member_R[T,+,*,zero]")
                                    (("2"
                                      (inst -1 "R!1")
                                      (("2"
                                        (expand "member")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("6" (hide-all-but 1)
                    (("6" (skosimp)
                      (("6" (expand "coset?")
                        (("6" (lemma "lcoset_iff_rcoset")
                          (("6"
                            (inst -1 "product[T, +, *](R!1, I!1)(x1!1)"
                             "I!1" "R!1")
                            (("6"
                              (case "left_coset?(R!1, I!1)(product[T, +, *](R!1, I!1)(x1!1))")
                              (("1" (assert) nil nil)
                               ("2"
                                (hide -1 2)
                                (("2"
                                  (expand "left_coset?")
                                  (("2"
                                    (typepred "x1!1`1" "x1!1`2")
                                    (("2"
                                      (expand "coset?")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (hide -2 -4)
                                          (("2"
                                            (expand "left_coset?")
                                            (("2"
                                              (skosimp*)
                                              (("2"
                                                (lemma
                                                 "product_charac")
                                                (("2"
                                                  (inst
                                                   -1
                                                   "R!1"
                                                   "I!1"
                                                   "a!1"
                                                   "a!2")
                                                  (("2"
                                                    (inst 1 "a!1*a!2")
                                                    (("1"
                                                      (expand
                                                       "product")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide -)
                                                      (("2"
                                                        (lemma
                                                         "R_prod_star_closed[T,+,*,zero]")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "R!1"
                                                           "a!1"
                                                           "a!2")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("7" (hide-all-but 1)
                    (("7" (skosimp)
                      (("7" (expand "coset?")
                        (("7" (lemma "lcoset_iff_rcoset")
                          (("7"
                            (inst -1 "add(R!1, I!1)(x1!1)" "I!1" "R!1")
                            (("7"
                              (case "left_coset?(R!1, I!1)(add(R!1, I!1)(x1!1))")
                              (("1" (assert) nil nil)
                               ("2"
                                (hide -1 2)
                                (("2"
                                  (expand "left_coset?")
                                  (("2"
                                    (typepred "x1!1`1" "x1!1`2")
                                    (("2"
                                      (expand "coset?")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (hide -2 -4)
                                          (("2"
                                            (expand "left_coset?")
                                            (("2"
                                              (skosimp*)
                                              (("2"
                                                (lemma "add_charac")
                                                (("2"
                                                  (inst
                                                   -1
                                                   "R!1"
                                                   "I!1"
                                                   "a!1"
                                                   "a!2")
                                                  (("2"
                                                    (inst 1 "a!1+a!2")
                                                    (("1"
                                                      (expand "add")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide -)
                                                      (("2"
                                                        (lemma
                                                         "R_sum_star_closed[T,+,*,zero]")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "R!1"
                                                           "a!1"
                                                           "a!2")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("8" (hide-all-but 1)
                    (("8" (inst 1 "I!1")
                      (("8" (expand "coset?")
                        (("8" (lemma "lcoset_iff_rcoset")
                          (("8" (inst -1 "I!1" "I!1" "R!1")
                            (("8" (case "left_coset?(R!1, I!1)(I!1)")
                              (("1" (assert) nil nil)
                               ("2"
                                (hide -1 2)
                                (("2"
                                  (expand "left_coset?")
                                  (("2"
                                    (inst 1 "zero")
                                    (("1"
                                      (rewrite "left_zero")
                                      nil
                                      nil)
                                     ("2"
                                      (lemma
                                       "zero_is_member_R[T,+,*,zero]")
                                      (("2"
                                        (inst -1 "R!1")
                                        (("2"
                                          (expand "member")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((first_isomorphism_th_aux_3 formula-decl nil
     ring_1st_isomorphism_theorem nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (/ const-decl "setof[set[T]]" cosets_def nil)
    (setof type-eq-decl nil defined_types nil)
    (right_coset? const-decl "bool" cosets_def nil)
    (right_zero formula-decl nil ring_cosets_lemmas nil)
    (subring? const-decl "bool" ring_def nil)
    (singleton? const-decl "bool" sets nil)
    (R_prod_star_closed formula-decl nil ring_basic_properties nil) nil
    nil (product_charac formula-decl nil quotient_rings nil)
    (R_sum_star_closed formula-decl nil ring_basic_properties nil) nil
    nil (add_charac formula-decl nil quotient_rings nil)
    (fullset const-decl "set" sets nil)
    (TRUE const-decl "bool" booleans nil)
    (monomorphism_charac formula-decl nil ring_homomorphism_lemmas nil)
    (restrict const-decl "R" restrict nil)
    (coset? const-decl "bool" cosets_def nil)
    (coset type-eq-decl nil cosets_def nil)
    (add const-decl "set[T]" cosets_def nil)
    (product const-decl "set[T]" product_coset_def nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (subset? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (left_ideal? const-decl "bool" ring_ideal_def nil)
    (member const-decl "bool" sets nil)
    (left_coset? const-decl "bool" cosets_def nil)
    (lcoset_iff_rcoset formula-decl nil ring_cosets_lemmas nil) nil nil
    nil nil (self_coset formula-decl nil ring_cosets_lemmas nil)
    (R_kernel const-decl "set[T1]" ring_homomorphisms_def nil)
    (quotient_group_is_ring formula-decl nil quotient_rings nil)
    (fullsetD_is_ring formula-decl nil ring_1st_isomorphism_theorem
     nil)
    (left_zero formula-decl nil ring_cosets_lemmas nil)
    (zero_is_member_R formula-decl nil ring_basic_properties nil)
    (product_is_coset formula-decl nil quotient_rings nil)
    (add_is_coset formula-decl nil quotient_rings nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (R_homomorphism type-eq-decl nil ring_homomorphisms_def nil)
    (R_homomorphism? const-decl "bool" ring_homomorphisms_def nil)
    (zerod formal-const-decl "D" ring_1st_isomorphism_theorem nil)
    (p formal-const-decl "[D, D -> D]" ring_1st_isomorphism_theorem
     nil)
    (s formal-const-decl "[D, D -> D]" ring_1st_isomorphism_theorem
     nil)
    (D formal-nonempty-type-decl nil ring_1st_isomorphism_theorem nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (ring? const-decl "bool" ring_def nil)
    (zero formal-const-decl "T" ring_1st_isomorphism_theorem nil)
    (* formal-const-decl "[T, T -> T]" ring_1st_isomorphism_theorem
       nil)
    (+ formal-const-decl "[T, T -> T]" ring_1st_isomorphism_theorem
       nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-nonempty-type-decl nil ring_1st_isomorphism_theorem nil))
   nil)
  (first_isomorphism_th_aux_5-1 nil 3758808799
   ("" (skosimp)
    (("" (lemma "first_isomorphism_th_aux_3")
      (("" (inst -1 "R!1" "S!1" "phi!1" "I!1")
        (("" (assert)
          (("" (skosimp)
            (("" (inst 1 "f!1")
              (("" (prop)
                (("1"
                  (rewrite
                   "monomorphism_charac[coset(R!1,I!1),add(R!1,I!1), product(R!1,I!1),I!1,D,s,p,zerod]")
                  (("1" (decompose-equality 1)
                    (("1" (replace -3 -1)
                      (("1" (hide -3)
                        (("1" (iff 1)
                          (("1" (prop)
                            (("1" (expand "singleton")
                              (("1"
                                (lemma "self_coset[T,+,*,zero]")
                                (("1"
                                  (decompose-equality -3)
                                  (("1"
                                    (inst -1 "x!1+I!1")
                                    (("1"
                                      (expand "restrict")
                                      (("1"
                                        (inst -2 "I!1" "R!1" "x!1")
                                        (("1"
                                          (typepred "I!1")
                                          (("1"
                                            (expand "ideal?")
                                            (("1"
                                              (expand "left_ideal?")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide
                                                     -1
                                                     -2
                                                     -3
                                                     -6
                                                     -7
                                                     2)
                                                    (("1"
                                                      (iff -1)
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (hide 1 3)
                                                          (("1"
                                                            (expand
                                                             "/")
                                                            (("1"
                                                              (expand
                                                               "coset?")
                                                              (("1"
                                                                (lemma
                                                                 "lcoset_iff_rcoset")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "x!1+I!1"
                                                                   "I!1"
                                                                   "R_kernel(R!1, S!1)(phi!1)")
                                                                  (("1"
                                                                    (case
                                                                     "left_coset?(R_kernel(R!1, S!1)(phi!1), I!1)(x!1 + I!1)")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       -1
                                                                       2)
                                                                      (("2"
                                                                        (expand
                                                                         "left_coset?")
                                                                        (("2"
                                                                          (inst
                                                                           1
                                                                           "x!1")
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide -1 -3 -4 2)
                                      (("2"
                                        (lemma "lcoset_iff_rcoset")
                                        (("2"
                                          (expand "coset?")
                                          (("2"
                                            (inst
                                             -1
                                             "x!1+I!1"
                                             "I!1"
                                             "R!1")
                                            (("2"
                                              (case
                                               "left_coset?(R!1, I!1)(x!1 + I!1)")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (hide -1 2)
                                                (("2"
                                                  (expand
                                                   "left_coset?")
                                                  (("2"
                                                    (inst 1 "x!1")
                                                    (("2"
                                                      (expand
                                                       "R_kernel")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide -2 -3)
                              (("2"
                                (expand "subset?")
                                (("2"
                                  (inst -2 "x!1")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide - 2)
                    (("2" (lemma "quotient_group_is_ring")
                      (("2" (inst -1 "R!1" "I!1") nil nil)) nil))
                    nil)
                   ("3" (hide - 2)
                    (("3" (rewrite "fullsetD_is_ring") nil nil)) nil)
                   ("4" (hide-all-but 1)
                    (("4" (lemma "quotient_group_is_ring[T,+,*,zero]")
                      (("4" (inst -1 "R!1" "I!1")
                        (("4" (expand "/" -1)
                          (("4" (expand "fullset")
                            (("4" (expand "restrict")
                              (("4" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("5" (hide - 2)
                    (("5" (expand "coset?")
                      (("5" (lemma "lcoset_iff_rcoset")
                        (("5" (inst -1 "I!1" "I!1" "R!1")
                          (("5" (case "left_coset?(R!1, I!1)(I!1)")
                            (("1" (assert) nil nil)
                             ("2" (hide -1 2)
                              (("2"
                                (expand "left_coset?")
                                (("2"
                                  (inst 1 "zero")
                                  (("1" (rewrite "left_zero") nil nil)
                                   ("2"
                                    (lemma
                                     "zero_is_member_R[T,+,*,zero]")
                                    (("2"
                                      (inst -1 "R!1")
                                      (("2"
                                        (expand "member")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("6" (hide - 2)
                    (("6" (skosimp)
                      (("6" (lemma "product_is_coset")
                        (("6" (inst -1 "R!1" "I!1" "x1!1`1" "x1!1`2")
                          (("6" (skosimp)
                            (("6" (expand "product")
                              (("6"
                                (replaces -1)
                                (("6"
                                  (expand "coset?")
                                  (("6"
                                    (lemma "lcoset_iff_rcoset")
                                    (("6"
                                      (inst -1 "a!1 + I!1" "I!1" "R!1")
                                      (("6"
                                        (case
                                         "left_coset?(R!1, I!1)(a!1 + I!1)")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (hide -1 2)
                                          (("2"
                                            (expand "left_coset?")
                                            (("2"
                                              (inst 1 "a!1")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("7" (hide - 2)
                    (("7" (skosimp)
                      (("7" (lemma "add_is_coset")
                        (("7" (inst -1 "R!1" "I!1" "x1!1`1" "x1!1`2")
                          (("7" (skosimp)
                            (("7" (expand "add")
                              (("7"
                                (replaces -1)
                                (("7"
                                  (expand "coset?")
                                  (("7"
                                    (lemma "lcoset_iff_rcoset")
                                    (("7"
                                      (inst -1 "a!1 + I!1" "I!1" "R!1")
                                      (("7"
                                        (case
                                         "left_coset?(R!1, I!1)(a!1 + I!1)")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (hide -1 2)
                                          (("2"
                                            (expand "left_coset?")
                                            (("2"
                                              (inst 1 "a!1")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("8" (hide - 2)
                    (("8" (inst 1 "I!1")
                      (("8" (expand "coset?")
                        (("8" (lemma "lcoset_iff_rcoset")
                          (("8" (inst -1 "I!1" "I!1" "R!1")
                            (("8" (case "left_coset?(R!1, I!1)(I!1)")
                              (("1" (assert) nil nil)
                               ("2"
                                (hide -1 2)
                                (("2"
                                  (expand "left_coset?")
                                  (("2"
                                    (inst 1 "zero")
                                    (("1"
                                      (rewrite "left_zero")
                                      nil
                                      nil)
                                     ("2"
                                      (lemma
                                       "zero_is_member_R[T,+,*,zero]")
                                      (("2"
                                        (inst -1 "R!1")
                                        (("2"
                                          (expand "member")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (rewrite "monomorphism_charac" 1)
                  (("1" (replace -3 1)
                    (("1" (hide -2 -3)
                      (("1" (decompose-equality 1)
                        (("1" (iff)
                          (("1" (prop)
                            (("1" (expand "restrict")
                              (("1"
                                (expand "singleton")
                                (("1"
                                  (replaces -2)
                                  (("1"
                                    (expand "/")
                                    (("1"
                                      (expand "coset?")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand "left_coset?")
                                          (("1"
                                            (skosimp)
                                            (("1"
                                              (typepred "a!1")
                                              (("1"
                                                (lemma "self_coset")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "I!1"
                                                   "R!1"
                                                   "a!1")
                                                  (("1"
                                                    (typepred "I!1")
                                                    (("1"
                                                      (expand "ideal?")
                                                      (("1"
                                                        (expand
                                                         "left_ideal?")
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "singleton")
                              (("2"
                                (expand "restrict")
                                (("2"
                                  (replaces -2)
                                  (("2"
                                    (expand "/")
                                    (("2"
                                      (expand "coset?")
                                      (("2"
                                        (expand "left_coset?")
                                        (("2"
                                          (expand "right_coset?")
                                          (("2"
                                            (split)
                                            (("1"
                                              (inst 1 "zero")
                                              (("1"
                                                (rewrite "left_zero")
                                                nil
                                                nil)
                                               ("2"
                                                (lemma
                                                 "zero_is_member_R[T,+,*,zero]")
                                                (("2"
                                                  (typepred "I!1")
                                                  (("2"
                                                    (expand "ideal?")
                                                    (("2"
                                                      (expand
                                                       "left_ideal?")
                                                      (("2"
                                                        (expand
                                                         "subring?")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (hide
                                                             -1
                                                             -3
                                                             -4)
                                                            (("2"
                                                              (inst
                                                               -2
                                                               "I!1")
                                                              (("2"
                                                                (expand
                                                                 "member")
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (inst 1 "zero")
                                              (("1"
                                                (rewrite "right_zero")
                                                nil
                                                nil)
                                               ("2"
                                                (lemma
                                                 "zero_is_member_R[T,+,*,zero]")
                                                (("2"
                                                  (typepred "I!1")
                                                  (("2"
                                                    (expand "ideal?")
                                                    (("2"
                                                      (expand
                                                       "left_ideal?")
                                                      (("2"
                                                        (expand
                                                         "subring?")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (hide
                                                             -1
                                                             -3
                                                             -4)
                                                            (("2"
                                                              (inst
                                                               -2
                                                               "I!1")
                                                              (("2"
                                                                (expand
                                                                 "member")
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but 1)
                    (("2" (lemma "quotient_group_is_ring")
                      (("2" (inst -1 "R!1" "I!1") nil nil)) nil))
                    nil)
                   ("3" (hide-all-but 1)
                    (("3" (rewrite "fullsetD_is_ring") nil nil)) nil)
                   ("4" (hide-all-but 1)
                    (("4" (expand "fullset")
                      (("4" (lemma "quotient_group_is_ring")
                        (("4" (inst -1 "R!1" "I!1")
                          (("4" (expand "restrict")
                            (("4" (expand "/") (("4" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("5" (hide-all-but 1)
                    (("5" (expand "coset?")
                      (("5" (lemma "lcoset_iff_rcoset")
                        (("5" (inst -1 "I!1" "I!1" "R!1")
                          (("5" (case "left_coset?(R!1, I!1)(I!1)")
                            (("1" (assert) nil nil)
                             ("2" (hide -1 2)
                              (("2"
                                (expand "left_coset?")
                                (("2"
                                  (inst 1 "zero")
                                  (("1" (rewrite "left_zero") nil nil)
                                   ("2"
                                    (lemma
                                     "zero_is_member_R[T,+,*,zero]")
                                    (("2"
                                      (inst -1 "R!1")
                                      (("2"
                                        (expand "member")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("6" (hide-all-but 1)
                    (("6" (skosimp)
                      (("6" (expand "coset?")
                        (("6" (lemma "lcoset_iff_rcoset")
                          (("6"
                            (inst -1 "product[T, +, *](R!1, I!1)(x1!1)"
                             "I!1" "R!1")
                            (("6"
                              (case "left_coset?(R!1, I!1)(product[T, +, *](R!1, I!1)(x1!1))")
                              (("1" (assert) nil nil)
                               ("2"
                                (hide -1 2)
                                (("2"
                                  (expand "left_coset?")
                                  (("2"
                                    (typepred "x1!1`1" "x1!1`2")
                                    (("2"
                                      (expand "coset?")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (hide -2 -4)
                                          (("2"
                                            (expand "left_coset?")
                                            (("2"
                                              (skosimp*)
                                              (("2"
                                                (lemma
                                                 "product_charac")
                                                (("2"
                                                  (inst
                                                   -1
                                                   "R!1"
                                                   "I!1"
                                                   "a!1"
                                                   "a!2")
                                                  (("2"
                                                    (inst 1 "a!1*a!2")
                                                    (("1"
                                                      (expand
                                                       "product")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide -)
                                                      (("2"
                                                        (lemma
                                                         "R_prod_star_closed[T,+,*,zero]")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "R!1"
                                                           "a!1"
                                                           "a!2")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("7" (hide-all-but 1)
                    (("7" (skosimp)
                      (("7" (expand "coset?")
                        (("7" (lemma "lcoset_iff_rcoset")
                          (("7"
                            (inst -1 "add[T, +, *](R!1, I!1)(x1!1)"
                             "I!1" "R!1")
                            (("7"
                              (case "left_coset?(R!1, I!1)(add[T, +, *](R!1, I!1)(x1!1))")
                              (("1" (assert) nil nil)
                               ("2"
                                (hide -1 2)
                                (("2"
                                  (expand "left_coset?")
                                  (("2"
                                    (typepred "x1!1`1" "x1!1`2")
                                    (("2"
                                      (expand "coset?")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (hide -2 -4)
                                          (("2"
                                            (expand "left_coset?")
                                            (("2"
                                              (skosimp*)
                                              (("2"
                                                (lemma "add_charac")
                                                (("2"
                                                  (inst
                                                   -1
                                                   "R!1"
                                                   "I!1"
                                                   "a!1"
                                                   "a!2")
                                                  (("2"
                                                    (inst 1 "a!1+a!2")
                                                    (("1"
                                                      (expand "add")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide -)
                                                      (("2"
                                                        (lemma
                                                         "R_sum_star_closed[T,+,*,zero]")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "R!1"
                                                           "a!1"
                                                           "a!2")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("8" (hide-all-but 1)
                    (("8" (inst 1 "I!1")
                      (("8" (expand "coset?")
                        (("8" (lemma "lcoset_iff_rcoset")
                          (("8" (inst -1 "I!1" "I!1" "R!1")
                            (("8" (case "left_coset?(R!1, I!1)(I!1)")
                              (("1" (assert) nil nil)
                               ("2"
                                (hide -1 2)
                                (("2"
                                  (expand "left_coset?")
                                  (("2"
                                    (inst 1 "zero")
                                    (("1"
                                      (rewrite "left_zero")
                                      nil
                                      nil)
                                     ("2"
                                      (lemma
                                       "zero_is_member_R[T,+,*,zero]")
                                      (("2"
                                        (inst -1 "R!1")
                                        (("2"
                                          (expand "member")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((first_isomorphism_th_aux_3 formula-decl nil
     ring_1st_isomorphism_theorem nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (setof type-eq-decl nil defined_types nil)
    (right_coset? const-decl "bool" cosets_def nil)
    (right_zero formula-decl nil ring_cosets_lemmas nil)
    (singleton? const-decl "bool" sets nil)
    (R_prod_star_closed formula-decl nil ring_basic_properties nil)
    (product_charac formula-decl nil quotient_rings nil)
    (R_sum_star_closed formula-decl nil ring_basic_properties nil)
    (add_charac formula-decl nil quotient_rings nil)
    (fullset const-decl "set" sets nil)
    (TRUE const-decl "bool" booleans nil)
    (monomorphism_charac formula-decl nil ring_homomorphism_lemmas nil)
    (restrict const-decl "R" restrict nil)
    (coset? const-decl "bool" cosets_def nil)
    (coset type-eq-decl nil cosets_def nil)
    (product const-decl "set[T]" product_coset_def nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (subset? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (left_ideal? const-decl "bool" ring_ideal_def nil)
    (member const-decl "bool" sets nil)
    (left_coset? const-decl "bool" cosets_def nil)
    (lcoset_iff_rcoset formula-decl nil ring_cosets_lemmas nil)
    (self_coset formula-decl nil ring_cosets_lemmas nil)
    (R_kernel const-decl "set[T1]" ring_homomorphisms_def nil)
    (quotient_group_is_ring formula-decl nil quotient_rings nil)
    (fullsetD_is_ring formula-decl nil ring_1st_isomorphism_theorem
     nil)
    (left_zero formula-decl nil ring_cosets_lemmas nil)
    (zero_is_member_R formula-decl nil ring_basic_properties nil)
    (product_is_coset formula-decl nil quotient_rings nil)
    (add_is_coset formula-decl nil quotient_rings nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (R_homomorphism type-eq-decl nil ring_homomorphisms_def nil)
    (R_homomorphism? const-decl "bool" ring_homomorphisms_def nil)
    (zerod formal-const-decl "D" ring_1st_isomorphism_theorem nil)
    (p formal-const-decl "[D, D -> D]" ring_1st_isomorphism_theorem
     nil)
    (s formal-const-decl "[D, D -> D]" ring_1st_isomorphism_theorem
     nil)
    (D formal-nonempty-type-decl nil ring_1st_isomorphism_theorem nil)
    (zero formal-const-decl "T" ring_1st_isomorphism_theorem nil)
    (* formal-const-decl "[T, T -> T]" ring_1st_isomorphism_theorem
       nil)
    (+ formal-const-decl "[T, T -> T]" ring_1st_isomorphism_theorem
       nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-nonempty-type-decl nil ring_1st_isomorphism_theorem nil))
   nil))
 (first_isomorphism_th_aux_6 0
  (first_isomorphism_th_aux_6-1 nil 3758808837
   ("" (skosimp)
    (("" (lemma "first_isomorphism_th_aux_4")
      (("" (lemma "first_isomorphism_th_aux_5")
        (("" (inst -1 "R!1" "S!1" "phi!1" "I!1")
          (("" (inst -2 "R!1" "S!1" "phi!1" "I!1")
            (("" (assert)
              (("" (skosimp*)
                (("" (case-replace "f!2 = f!1")
                  (("1" (hide -1 -5)
                    (("1" (inst 1 "f!1")
                      (("1" (split 1)
                        (("1" (propax) nil nil)
                         ("2" (flatten)
                          (("2" (expand "R_isomorphism?")
                            (("2" (flatten)
                              (("2"
                                (hide -5 -7)
                                (("2"
                                  (assert)
                                  (("2" (prop) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (flatten)
                          (("3" (hide -4 -6)
                            (("3" (expand "R_isomorphism?")
                              (("3" (prop) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but (-1 -4 1))
                    (("2" (decompose-equality)
                      (("2" (typepred "x!1")
                        (("2" (expand "/")
                          (("2" (expand "coset?")
                            (("2" (flatten)
                              (("2"
                                (expand "left_coset?")
                                (("2"
                                  (hide -2)
                                  (("2"
                                    (skosimp)
                                    (("2"
                                      (inst -2 "a!1")
                                      (("2"
                                        (inst -3 "a!1")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((first_isomorphism_th_aux_4 formula-decl nil
     ring_1st_isomorphism_theorem nil)
    (T formal-nonempty-type-decl nil ring_1st_isomorphism_theorem nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" ring_1st_isomorphism_theorem
       nil)
    (* formal-const-decl "[T, T -> T]" ring_1st_isomorphism_theorem
       nil)
    (zero formal-const-decl "T" ring_1st_isomorphism_theorem nil)
    (ring? const-decl "bool" ring_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (D formal-nonempty-type-decl nil ring_1st_isomorphism_theorem nil)
    (s formal-const-decl "[D, D -> D]" ring_1st_isomorphism_theorem
     nil)
    (p formal-const-decl "[D, D -> D]" ring_1st_isomorphism_theorem
     nil)
    (zerod formal-const-decl "D" ring_1st_isomorphism_theorem nil)
    (R_homomorphism? const-decl "bool" ring_homomorphisms_def nil)
    (R_homomorphism type-eq-decl nil ring_homomorphisms_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/ const-decl "setof[set[T]]" cosets_def nil)
    (setof type-eq-decl nil defined_types nil)
    (R_isomorphism? const-decl "bool" ring_homomorphisms_def nil)
    (left_coset? const-decl "bool" cosets_def nil)
    (coset? const-decl "bool" cosets_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (first_isomorphism_th_aux_5 formula-decl nil
     ring_1st_isomorphism_theorem nil))
   nil))
 (first_isomorphism_th_TCC1 0
  (first_isomorphism_th_TCC1-1 nil 3757773086
   ("" (skosimp)
    ((""
      (inst 1
       " R_kernel[T, +, *, zero, D, s, p, zerod] (R!1, S!1)(phi!1)")
      (("" (lemma "R_kernel_is_ideal")
        (("" (inst -1 "R!1" "S!1" "phi!1")
          (("" (rewrite "ideal_is_coset") nil nil)) nil))
        nil))
      nil))
    nil)
   ((T formal-nonempty-type-decl nil ring_1st_isomorphism_theorem nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" ring_1st_isomorphism_theorem
       nil)
    (coset? const-decl "bool" cosets_def nil)
    (* formal-const-decl "[T, T -> T]" ring_1st_isomorphism_theorem
       nil)
    (zero formal-const-decl "T" ring_1st_isomorphism_theorem nil)
    (ring? const-decl "bool" ring_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (D formal-nonempty-type-decl nil ring_1st_isomorphism_theorem nil)
    (s formal-const-decl "[D, D -> D]" ring_1st_isomorphism_theorem
     nil)
    (p formal-const-decl "[D, D -> D]" ring_1st_isomorphism_theorem
     nil)
    (zerod formal-const-decl "D" ring_1st_isomorphism_theorem nil)
    (R_homomorphism? const-decl "bool" ring_homomorphisms_def nil)
    (R_homomorphism type-eq-decl nil ring_homomorphisms_def nil)
    (R_kernel const-decl "set[T1]" ring_homomorphisms_def nil)
    (coset type-eq-decl nil cosets_def nil)
    (phi!1 skolem-const-decl
     "R_homomorphism[T, +, *, zero, D, s, p, zerod](R!1, S!1)"
     ring_1st_isomorphism_theorem nil)
    (S!1 skolem-const-decl "ring[D, s, p, zerod]"
     ring_1st_isomorphism_theorem nil)
    (R!1 skolem-const-decl "ring[T, +, *, zero]"
     ring_1st_isomorphism_theorem nil)
    (ideal_is_coset formula-decl nil ring_cosets_lemmas nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (R_kernel_is_ideal formula-decl nil ring_homomorphism_lemmas nil))
   nil
   (first_isomorphism_th existence ""
    "cosets_def[ring_1st_isomorphism_theorem.T, ring_1st_isomorphism_theorem.+].coset(ring_1st_isomorphism_theorem.R, ring_homomorphisms_def[ring_1st_isomorphism_theorem.T, ring_1st_isomorphism_theorem.+, ring_1st_isomorphism_theorem.*, ring_1st_isomorphism_theorem.zero, ring_1st_isomorphism_theorem.D, ring_1st_isomorphism_theorem.s, ring_1st_isomorphism_theorem.p, ring_1st_isomorphism_theorem.zerod].R_kernel(ring_1st_isomorphism_theorem.R, ring_1st_isomorphism_theorem.S)(ring_1st_isomorphism_theorem.phi))")))
 (first_isomorphism_th_TCC2 0
  (first_isomorphism_th_TCC2-1 nil 3757773086
   ("" (skosimp*)
    (("" (lemma "coset_add")
      (("" (inst -1 "R!1" "R_kernel(R!1,S!1)(phi!1)" "x1!1`1" "x1!1`2")
        (("1" (assert) nil nil)
         ("2" (hide 2) (("2" (rewrite "R_kernel_is_ideal") nil nil))
          nil))
        nil))
      nil))
    nil)
   ((zero formal-const-decl "T" ring_1st_isomorphism_theorem nil)
    (* formal-const-decl "[T, T -> T]" ring_1st_isomorphism_theorem
       nil)
    (+ formal-const-decl "[T, T -> T]" ring_1st_isomorphism_theorem
       nil)
    (T formal-nonempty-type-decl nil ring_1st_isomorphism_theorem nil)
    (coset_add formula-decl nil quotient_rings nil)
    (R_kernel_is_ideal formula-decl nil ring_homomorphism_lemmas nil)
    (coset type-eq-decl nil cosets_def nil)
    (coset? const-decl "bool" cosets_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (ring? const-decl "bool" ring_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (D formal-nonempty-type-decl nil ring_1st_isomorphism_theorem nil)
    (s formal-const-decl "[D, D -> D]" ring_1st_isomorphism_theorem
     nil)
    (p formal-const-decl "[D, D -> D]" ring_1st_isomorphism_theorem
     nil)
    (zerod formal-const-decl "D" ring_1st_isomorphism_theorem nil)
    (R_homomorphism? const-decl "bool" ring_homomorphisms_def nil)
    (R_homomorphism type-eq-decl nil ring_homomorphisms_def nil)
    (R_kernel const-decl "set[T1]" ring_homomorphisms_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (R!1 skolem-const-decl "ring[T, +, *, zero]"
     ring_1st_isomorphism_theorem nil)
    (S!1 skolem-const-decl "ring[D, s, p, zerod]"
     ring_1st_isomorphism_theorem nil)
    (phi!1 skolem-const-decl
     "R_homomorphism[T, +, *, zero, D, s, p, zerod](R!1, S!1)"
     ring_1st_isomorphism_theorem nil))
   nil
   (first_isomorphism_th subtype
    "cosets_def[ring_1st_isomorphism_theorem.T, ring_1st_isomorphism_theorem.+].add(ring_1st_isomorphism_theorem.R, ring_homomorphisms_def[ring_1st_isomorphism_theorem.T, ring_1st_isomorphism_theorem.+, ring_1st_isomorphism_theorem.*, ring_1st_isomorphism_theorem.zero, ring_1st_isomorphism_theorem.D, ring_1st_isomorphism_theorem.s, ring_1st_isomorphism_theorem.p, ring_1st_isomorphism_theorem.zerod].R_kernel(ring_1st_isomorphism_theorem.R, ring_1st_isomorphism_theorem.S)(ring_1st_isomorphism_theorem.phi))"
    "[[cosets_def[ring_1st_isomorphism_theorem.T, ring_1st_isomorphism_theorem.+].coset(ring_1st_isomorphism_theorem.R, ring_homomorphisms_def[ring_1st_isomorphism_theorem.T, ring_1st_isomorphism_theorem.+, ring_1st_isomorphism_theorem.*, ring_1st_isomorphism_theorem.zero, ring_1st_isomorphism_theorem.D, ring_1st_isomorphism_theorem.s, ring_1st_isomorphism_theorem.p, ring_1st_isomorphism_theorem.zerod].R_kernel(ring_1st_isomorphism_theorem.R, ring_1st_isomorphism_theorem.S)(ring_1st_isomorphism_theorem.phi)), cosets_def[ring_1st_isomorphism_theorem.T, ring_1st_isomorphism_theorem.+].coset(ring_1st_isomorphism_theorem.R, ring_homomorphisms_def[ring_1st_isomorphism_theorem.T, ring_1st_isomorphism_theorem.+, ring_1st_isomorphism_theorem.*, ring_1st_isomorphism_theorem.zero, ring_1st_isomorphism_theorem.D, ring_1st_isomorphism_theorem.s, ring_1st_isomorphism_theorem.p, ring_1st_isomorphism_theorem.zerod].R_kernel(ring_1st_isomorphism_theorem.R, ring_1st_isomorphism_theorem.S)(ring_1st_isomorphism_theorem.phi))] -> cosets_def[ring_1st_isomorphism_theorem.T, ring_1st_isomorphism_theorem.+].coset(ring_1st_isomorphism_theorem.R, ring_homomorphisms_def[ring_1st_isomorphism_theorem.T, ring_1st_isomorphism_theorem.+, ring_1st_isomorphism_theorem.*, ring_1st_isomorphism_theorem.zero, ring_1st_isomorphism_theorem.D, ring_1st_isomorphism_theorem.s, ring_1st_isomorphism_theorem.p, ring_1st_isomorphism_theorem.zerod].R_kernel(ring_1st_isomorphism_theorem.R, ring_1st_isomorphism_theorem.S)(ring_1st_isomorphism_theorem.phi))]")))
 (first_isomorphism_th_TCC3 0
  (first_isomorphism_th_TCC3-1 nil 3757773086
   ("" (skosimp*)
    (("" (lemma "coset_product")
      (("" (inst -1 "R!1" "R_kernel(R!1,S!1)(phi!1)" "x1!1`1" "x1!1`2")
        (("1" (assert) nil nil)
         ("2" (hide 2) (("2" (rewrite "R_kernel_is_ideal") nil nil))
          nil))
        nil))
      nil))
    nil)
   ((zero formal-const-decl "T" ring_1st_isomorphism_theorem nil)
    (* formal-const-decl "[T, T -> T]" ring_1st_isomorphism_theorem
       nil)
    (+ formal-const-decl "[T, T -> T]" ring_1st_isomorphism_theorem
       nil)
    (T formal-nonempty-type-decl nil ring_1st_isomorphism_theorem nil)
    (coset_product formula-decl nil quotient_rings nil)
    (R_kernel_is_ideal formula-decl nil ring_homomorphism_lemmas nil)
    (coset type-eq-decl nil cosets_def nil)
    (coset? const-decl "bool" cosets_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (ring? const-decl "bool" ring_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (D formal-nonempty-type-decl nil ring_1st_isomorphism_theorem nil)
    (s formal-const-decl "[D, D -> D]" ring_1st_isomorphism_theorem
     nil)
    (p formal-const-decl "[D, D -> D]" ring_1st_isomorphism_theorem
     nil)
    (zerod formal-const-decl "D" ring_1st_isomorphism_theorem nil)
    (R_homomorphism? const-decl "bool" ring_homomorphisms_def nil)
    (R_homomorphism type-eq-decl nil ring_homomorphisms_def nil)
    (R_kernel const-decl "set[T1]" ring_homomorphisms_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (R!1 skolem-const-decl "ring[T, +, *, zero]"
     ring_1st_isomorphism_theorem nil)
    (S!1 skolem-const-decl "ring[D, s, p, zerod]"
     ring_1st_isomorphism_theorem nil)
    (phi!1 skolem-const-decl
     "R_homomorphism[T, +, *, zero, D, s, p, zerod](R!1, S!1)"
     ring_1st_isomorphism_theorem nil))
   nil
   (first_isomorphism_th subtype
    "product_coset_def[ring_1st_isomorphism_theorem.T, ring_1st_isomorphism_theorem.+, ring_1st_isomorphism_theorem.*].product(ring_1st_isomorphism_theorem.R, ring_homomorphisms_def[ring_1st_isomorphism_theorem.T, ring_1st_isomorphism_theorem.+, ring_1st_isomorphism_theorem.*, ring_1st_isomorphism_theorem.zero, ring_1st_isomorphism_theorem.D, ring_1st_isomorphism_theorem.s, ring_1st_isomorphism_theorem.p, ring_1st_isomorphism_theorem.zerod].R_kernel(ring_1st_isomorphism_theorem.R, ring_1st_isomorphism_theorem.S)(ring_1st_isomorphism_theorem.phi))"
    "[[cosets_def[ring_1st_isomorphism_theorem.T, ring_1st_isomorphism_theorem.+].coset(ring_1st_isomorphism_theorem.R, ring_homomorphisms_def[ring_1st_isomorphism_theorem.T, ring_1st_isomorphism_theorem.+, ring_1st_isomorphism_theorem.*, ring_1st_isomorphism_theorem.zero, ring_1st_isomorphism_theorem.D, ring_1st_isomorphism_theorem.s, ring_1st_isomorphism_theorem.p, ring_1st_isomorphism_theorem.zerod].R_kernel(ring_1st_isomorphism_theorem.R, ring_1st_isomorphism_theorem.S)(ring_1st_isomorphism_theorem.phi)), cosets_def[ring_1st_isomorphism_theorem.T, ring_1st_isomorphism_theorem.+].coset(ring_1st_isomorphism_theorem.R, ring_homomorphisms_def[ring_1st_isomorphism_theorem.T, ring_1st_isomorphism_theorem.+, ring_1st_isomorphism_theorem.*, ring_1st_isomorphism_theorem.zero, ring_1st_isomorphism_theorem.D, ring_1st_isomorphism_theorem.s, ring_1st_isomorphism_theorem.p, ring_1st_isomorphism_theorem.zerod].R_kernel(ring_1st_isomorphism_theorem.R, ring_1st_isomorphism_theorem.S)(ring_1st_isomorphism_theorem.phi))] -> cosets_def[ring_1st_isomorphism_theorem.T, ring_1st_isomorphism_theorem.+].coset(ring_1st_isomorphism_theorem.R, ring_homomorphisms_def[ring_1st_isomorphism_theorem.T, ring_1st_isomorphism_theorem.+, ring_1st_isomorphism_theorem.*, ring_1st_isomorphism_theorem.zero, ring_1st_isomorphism_theorem.D, ring_1st_isomorphism_theorem.s, ring_1st_isomorphism_theorem.p, ring_1st_isomorphism_theorem.zerod].R_kernel(ring_1st_isomorphism_theorem.R, ring_1st_isomorphism_theorem.S)(ring_1st_isomorphism_theorem.phi))]")))
 (first_isomorphism_th_TCC4 0
  (first_isomorphism_th_TCC4-1 nil 3757773086
   ("" (skosimp)
    (("" (lemma "R_kernel_is_ideal")
      (("" (inst -1 "R!1" "S!1" "phi!1")
        (("" (rewrite "ideal_is_coset") nil nil)) nil))
      nil))
    nil)
   ((zerod formal-const-decl "D" ring_1st_isomorphism_theorem nil)
    (p formal-const-decl "[D, D -> D]" ring_1st_isomorphism_theorem
     nil)
    (s formal-const-decl "[D, D -> D]" ring_1st_isomorphism_theorem
     nil)
    (D formal-nonempty-type-decl nil ring_1st_isomorphism_theorem nil)
    (zero formal-const-decl "T" ring_1st_isomorphism_theorem nil)
    (* formal-const-decl "[T, T -> T]" ring_1st_isomorphism_theorem
       nil)
    (+ formal-const-decl "[T, T -> T]" ring_1st_isomorphism_theorem
       nil)
    (T formal-nonempty-type-decl nil ring_1st_isomorphism_theorem nil)
    (R_kernel_is_ideal formula-decl nil ring_homomorphism_lemmas nil)
    (ideal_is_coset formula-decl nil ring_cosets_lemmas nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (R_kernel const-decl "set[T1]" ring_homomorphisms_def nil)
    (R_homomorphism type-eq-decl nil ring_homomorphisms_def nil)
    (R_homomorphism? const-decl "bool" ring_homomorphisms_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (ring? const-decl "bool" ring_def nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (first_isomorphism_th subtype
    "ring_homomorphisms_def[ring_1st_isomorphism_theorem.T, ring_1st_isomorphism_theorem.+, ring_1st_isomorphism_theorem.*, ring_1st_isomorphism_theorem.zero, ring_1st_isomorphism_theorem.D, ring_1st_isomorphism_theorem.s, ring_1st_isomorphism_theorem.p, ring_1st_isomorphism_theorem.zerod].R_kernel(ring_1st_isomorphism_theorem.R, ring_1st_isomorphism_theorem.S)(ring_1st_isomorphism_theorem.phi)"
    "cosets_def[ring_1st_isomorphism_theorem.T, ring_1st_isomorphism_theorem.+].coset(ring_1st_isomorphism_theorem.R, ring_homomorphisms_def[ring_1st_isomorphism_theorem.T, ring_1st_isomorphism_theorem.+, ring_1st_isomorphism_theorem.*, ring_1st_isomorphism_theorem.zero, ring_1st_isomorphism_theorem.D, ring_1st_isomorphism_theorem.s, ring_1st_isomorphism_theorem.p, ring_1st_isomorphism_theorem.zerod].R_kernel(ring_1st_isomorphism_theorem.R, ring_1st_isomorphism_theorem.S)(ring_1st_isomorphism_theorem.phi))")))
 (first_isomorphism_th 0
  (first_isomorphism_th-1 nil 3758808872
   ("" (skosimp)
    (("" (name-replace "K" "R_kernel(R!1, S!1)(phi!1)" :hide? nil)
      ((""
        (name-replace "Im"
         "image(phi!1)(restrict[T, (R!1), boolean](R!1))" :hide? nil)
        (("" (lemma "first_isomorphism_th_aux_6")
          (("" (inst -1 "R!1" "Im" "phi!1" "K")
            (("1" (split -1)
              (("1" (skosimp)
                (("1" (expand "R_isomorphic?")
                  (("1" (inst 1 "f!1")
                    (("1" (hide -2)
                      (("1" (split -2)
                        (("1" (hide -2)
                          (("1" (expand "R_isomorphism?")
                            (("1" (expand "R_monomorphism?")
                              (("1"
                                (expand "R_epimorphism?")
                                (("1"
                                  (flatten -1)
                                  (("1"
                                    (hide -2)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (hide-all-but (-1 1))
                                        (("1"
                                          (expand "injective?")
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (inst -2 "x1" "x2")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (hide -1 2)
                                                (("2"
                                                  (typepred "x2")
                                                  (("2"
                                                    (expand*
                                                     "restrict"
                                                     "K")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (hide -1 2)
                                                (("3"
                                                  (typepred "x1")
                                                  (("3"
                                                    (expand*
                                                     "restrict"
                                                     "K")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but (-3 1))
                                        (("2"
                                          (expand "R_homomorphism?")
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (split)
                                              (("1"
                                                (hide-all-but (-1 1))
                                                (("1"
                                                  (expand
                                                   "star_closed?")
                                                  (("1"
                                                    (skosimp)
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "x!1"
                                                       "y!1")
                                                      (("1"
                                                        (expand
                                                         "member")
                                                        (("1"
                                                          (expand
                                                           "restrict")
                                                          (("1"
                                                            (expand
                                                             "K")
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (typepred
                                                           "y!1")
                                                          (("2"
                                                            (expand*
                                                             "restrict"
                                                             "K")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (hide 2)
                                                        (("3"
                                                          (typepred
                                                           "x!1")
                                                          (("3"
                                                            (expand*
                                                             "restrict"
                                                             "K")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but (-2 1))
                                                (("2"
                                                  (expand
                                                   "star_closed?")
                                                  (("2"
                                                    (skosimp)
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "x!1"
                                                       "y!1")
                                                      (("1"
                                                        (expand*
                                                         "member"
                                                         "restrict"
                                                         "K")
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (typepred
                                                           "y!1")
                                                          (("2"
                                                            (expand*
                                                             "restrict"
                                                             "K")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (hide 2)
                                                        (("3"
                                                          (typepred
                                                           "x!1")
                                                          (("3"
                                                            (expand*
                                                             "restrict"
                                                             "K")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3" (propax) nil nil)
                                               ("4" (propax) nil nil)
                                               ("5"
                                                (hide-all-but (-5 1))
                                                (("5"
                                                  (expand
                                                   "homomorphism?")
                                                  (("5"
                                                    (skeep)
                                                    (("5"
                                                      (inst -1 "a" "b")
                                                      (("1"
                                                        (expand "K")
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (typepred
                                                           "b")
                                                          (("2"
                                                            (expand*
                                                             "restrict"
                                                             "K")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (hide 2)
                                                        (("3"
                                                          (typepred
                                                           "a")
                                                          (("3"
                                                            (expand*
                                                             "restrict"
                                                             "K")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("6"
                                                (hide-all-but (-6 1))
                                                (("6"
                                                  (expand
                                                   "homomorphism?")
                                                  (("6"
                                                    (skeep)
                                                    (("6"
                                                      (inst -1 "a" "b")
                                                      (("1"
                                                        (expand "K")
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (typepred
                                                           "b")
                                                          (("2"
                                                            (expand*
                                                             "restrict"
                                                             "K")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (hide 2)
                                                        (("3"
                                                          (typepred
                                                           "a")
                                                          (("3"
                                                            (expand*
                                                             "restrict"
                                                             "K")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (hide-all-but (-2 1))
                                        (("3"
                                          (expand "surjective?")
                                          (("3"
                                            (skeep)
                                            (("3"
                                              (inst -1 "y")
                                              (("3"
                                                (skeep)
                                                (("3"
                                                  (inst 1 "x")
                                                  (("3"
                                                    (typepred "x")
                                                    (("3"
                                                      (expand*
                                                       "restrict"
                                                       "K")
                                                      (("3"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("4"
                                        (hide-all-but (-3 1))
                                        (("4"
                                          (expand*
                                           "R_homomorphism?"
                                           "K")
                                          (("4"
                                            (flatten)
                                            (("4"
                                              (split)
                                              (("1"
                                                (hide-all-but (-1 1))
                                                (("1"
                                                  (reveal -9)
                                                  (("1"
                                                    (expand "restrict")
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but (-2 1))
                                                (("2"
                                                  (reveal -9)
                                                  (("2"
                                                    (expand "restrict")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3" (propax) nil nil)
                                               ("4" (propax) nil nil)
                                               ("5"
                                                (hide-all-but (-5 1))
                                                (("5"
                                                  (expand
                                                   "homomorphism?")
                                                  (("5"
                                                    (skeep)
                                                    (("5"
                                                      (inst -1 "a" "b")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand "K")
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (typepred
                                                           "b")
                                                          (("2"
                                                            (expand*
                                                             "restrict"
                                                             "K")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (hide 2)
                                                        (("3"
                                                          (typepred
                                                           "a")
                                                          (("3"
                                                            (expand*
                                                             "restrict"
                                                             "K")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("6"
                                                (hide-all-but (-6 1))
                                                (("6"
                                                  (expand
                                                   "homomorphism?")
                                                  (("6"
                                                    (skeep)
                                                    (("6"
                                                      (inst -1 "a" "b")
                                                      (("1"
                                                        (expand "K")
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (typepred
                                                           "b")
                                                          (("2"
                                                            (expand*
                                                             "restrict"
                                                             "K")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (hide 2)
                                                        (("3"
                                                          (typepred
                                                           "a")
                                                          (("3"
                                                            (expand*
                                                             "restrict"
                                                             "K")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but 1)
                          (("2" (typepred "phi!1")
                            (("2" (expand "R_epimorphism?")
                              (("2"
                                (expand "surjective?")
                                (("2"
                                  (split)
                                  (("1"
                                    (skosimp)
                                    (("1"
                                      (typepred "y!1")
                                      (("1"
                                        (expand "extend")
                                        (("1"
                                          (prop)
                                          (("1"
                                            (expand*
                                             "Im"
                                             "image"
                                             "image")
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (inst 1 "x")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (grind)
                                    (("1"
                                      (hide-all-but (-2 -4 -8 1))
                                      (("1"
                                        (expand* "Im" "image" "image")
                                        (("1"
                                          (skosimp*)
                                          (("1"
                                            (inst 1 "x!2*x!3")
                                            (("1"
                                              (inst -3 "x!2" "x!3")
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (hide -)
                                              (("2"
                                                (lemma
                                                 "R_prod_star_closed[T,+,*,zero]")
                                                (("2"
                                                  (inst
                                                   -1
                                                   "R!1"
                                                   "x!2"
                                                   "x!3")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but (-2 -4 -7 1))
                                      (("2"
                                        (expand* "Im" "image" "image")
                                        (("2"
                                          (skosimp*)
                                          (("2"
                                            (inst 1 "x!2 + x!3")
                                            (("1"
                                              (inst -3 "x!2" "x!3")
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (hide -)
                                              (("2"
                                                (lemma
                                                 "R_sum_star_closed[T,+,*,zero]")
                                                (("2"
                                                  (inst
                                                   -1
                                                   "R!1"
                                                   "x!2"
                                                   "x!3")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (hide-all-but 1)
                          (("3" (expand "K")
                            (("3" (decompose-equality)
                              (("3"
                                (expand "R_kernel")
                                (("3"
                                  (expand "extend")
                                  (("3"
                                    (iff)
                                    (("3"
                                      (prop)
                                      (("3"
                                        (expand* "Im" "image" "image")
                                        (("3"
                                          (inst 1 "zero")
                                          (("1"
                                            (lemma "zero_to_zero")
                                            (("1"
                                              (inst
                                               -1
                                               "R!1"
                                               "S!1"
                                               "phi!1")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "restrict")
                                            (("2"
                                              (lemma
                                               "zero_is_member_R[T,+,*,zero]")
                                              (("2"
                                                (inst -1 "R!1")
                                                (("2"
                                                  (expand "member")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide -)
                      (("2" (skosimp)
                        (("2" (expand "restrict")
                          (("2" (prop)
                            (("2" (expand* "/" "K") nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but 1)
                (("2" (expand "subset?")
                  (("2" (skeep)
                    (("2" (expand* "member" "K" "R_kernel")
                      (("2" (expand "extend")
                        (("2" (prop)
                          (("2" (expand* "Im" "image" "image")
                            (("2" (inst 1 "zero")
                              (("1"
                                (lemma "zero_to_zero")
                                (("1"
                                  (inst -1 "R!1" "S!1" "phi!1")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "restrict")
                                (("2"
                                  (lemma
                                   "zero_is_member_R[T,+,*,zero]")
                                  (("2"
                                    (inst -1 "R!1")
                                    (("2"
                                      (expand "member")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide -1 2)
              (("2" (replace -1 1 rl)
                (("2" (rewrite "R_kernel_is_ideal") nil nil)) nil))
              nil)
             ("3" (hide - 2)
              (("3" (prop)
                (("1" (skosimp)
                  (("1" (expand "extend")
                    (("1" (expand* "Im" "image" "image")
                      (("1" (inst 1 "x1!1")
                        (("1" (expand "restrict")
                          (("1" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (typepred "phi!1")
                  (("2" (grind)
                    (("1" (hide-all-but (-2 -4 -10 1))
                      (("1" (expand* "Im" "image" "image")
                        (("1" (skosimp*)
                          (("1" (inst 1 "x!2*x!3")
                            (("1" (inst -3 "x!2" "x!3")
                              (("1" (assert) nil nil)) nil)
                             ("2" (hide -)
                              (("2"
                                (lemma
                                 "R_prod_star_closed[T,+,*,zero]")
                                (("2"
                                  (inst -1 "R!1" "x!2" "x!3")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but (-2 -4 -9 1))
                      (("2" (expand* "Im" "image" "image")
                        (("2" (skosimp*)
                          (("2" (inst 1 "x!2+x!3")
                            (("1" (inst -3 "x!2" "x!3")
                              (("1" (assert) nil nil)) nil)
                             ("2" (hide -)
                              (("2"
                                (lemma "R_sum_star_closed[T,+,*,zero]")
                                (("2"
                                  (inst -1 "R!1" "x!2" "x!3")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("4" (hide -2 2)
              (("4" (lemma "image_homo_is_subring")
                (("4" (inst -1 "R!1" "S!1" "phi!1")
                  (("4" (expand "subring?")
                    (("4" (flatten) (("4" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((T formal-nonempty-type-decl nil ring_1st_isomorphism_theorem nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (D formal-nonempty-type-decl nil ring_1st_isomorphism_theorem nil)
    (+ formal-const-decl "[T, T -> T]" ring_1st_isomorphism_theorem
       nil)
    (* formal-const-decl "[T, T -> T]" ring_1st_isomorphism_theorem
       nil)
    (zero formal-const-decl "T" ring_1st_isomorphism_theorem nil)
    (s formal-const-decl "[D, D -> D]" ring_1st_isomorphism_theorem
     nil)
    (p formal-const-decl "[D, D -> D]" ring_1st_isomorphism_theorem
     nil)
    (zerod formal-const-decl "D" ring_1st_isomorphism_theorem nil)
    (R_homomorphism? const-decl "bool" ring_homomorphisms_def nil)
    (R_homomorphism type-eq-decl nil ring_homomorphisms_def nil)
    (R_kernel const-decl "set[T1]" ring_homomorphisms_def nil)
    (ring? const-decl "bool" ring_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (first_isomorphism_th_aux_6 formula-decl nil
     ring_1st_isomorphism_theorem nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subring? const-decl "bool" ring_def nil)
    (image_homo_is_subring formula-decl nil ring_homomorphism_lemmas
     nil)
    nil nil nil nil nil
    (R_kernel_is_ideal formula-decl nil ring_homomorphism_lemmas nil)
    (R_isomorphic? const-decl "bool" ring_homomorphisms_def nil)
    (zero_to_zero formula-decl nil ring_homomorphism_lemmas nil)
    (zero_is_member_R formula-decl nil ring_basic_properties nil) nil
    (R_sum_star_closed formula-decl nil ring_basic_properties nil) nil
    nil (R_prod_star_closed formula-decl nil ring_basic_properties nil)
    nil nil
    (R_monomorphism? const-decl "bool" ring_homomorphisms_def nil)
    (injective? const-decl "bool" functions nil) nil nil
    (NOT const-decl "[bool -> bool]" booleans nil)
    (star_closed? const-decl "bool" groupoid_def nil) nil nil
    (member const-decl "bool" sets nil) nil nil
    (homomorphism? const-decl "bool" homomorphisms_def nil) nil nil nil
    nil (surjective? const-decl "bool" functions nil) nil
    (lc_gen const-decl "T" cosets_def nil)
    (add const-decl "set[T]" cosets_def nil)
    (lproduct const-decl "set[T]" product_coset_def nil)
    (product const-decl "set[T]" product_coset_def nil) nil nil nil nil
    (R_epimorphism? const-decl "bool" ring_homomorphisms_def nil)
    (R_isomorphism? const-decl "bool" ring_homomorphisms_def nil)
    (coset type-eq-decl nil cosets_def nil)
    (coset? const-decl "bool" cosets_def nil)
    (/ const-decl "setof[set[T]]" cosets_def nil)
    (setof type-eq-decl nil defined_types nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (subset? const-decl "bool" sets nil)
    (ideal type-eq-decl nil ring_ideal_def nil) nil
    (ideal? const-decl "bool" ring_ideal_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil nil nil
    (extend const-decl "R" extend nil)
    (FALSE const-decl "bool" booleans nil) nil
    (restrict const-decl "R" restrict nil) nil)
   nil)))
