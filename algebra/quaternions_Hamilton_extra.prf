(quaternions_Hamilton_extra
 (IMP_quaternions_TCC1 0
  (IMP_quaternions_TCC1-1 nil 3907404476 ("" (subtype-tcc) nil nil)
   ((minus_odd_is_odd application-judgement "odd_int" integers nil)
    (remove const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (fullset const-decl "set" sets nil))
   nil
   (IMP_quaternions subtype "(number_fields.-)(1)"
    "(sets[real].remove(0, sets[real].fullset))")))
 (IMP_quaternions_TCC2 0
  (IMP_quaternions_TCC2-1 nil 3907411643
   ("" (expand "field?")
    (("" (prop)
      (("1" (expand "division_ring?")
        (("1" (prop)
          (("1" (expand "ring_with_one?")
            (("1" (prop)
              (("1" (expand "ring?")
                (("1" (prop)
                  (("1" (expand "abelian_group?")
                    (("1" (prop)
                      (("1" (expand "group?")
                        (("1" (prop)
                          (("1" (expand "monoid?")
                            (("1" (prop)
                              (("1"
                                (expand "monad?")
                                (("1"
                                  (prop)
                                  (("1"
                                    (expand "star_closed?")
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (expand "member")
                                        (("1"
                                          (expand "fullset")
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "member")
                                    (("2"
                                      (expand "fullset")
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (expand "identity?")
                                    (("3"
                                      (skeep)
                                      (("3"
                                        (expand "restrict")
                                        (("3" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "associative?")
                                (("2"
                                  (skeep)
                                  (("2"
                                    (expand "restrict")
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "inv_exists?")
                            (("2" (skeep)
                              (("2"
                                (inst 1 "-x")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (expand "fullset")
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "commutative?")
                        (("2" (skeep)
                          (("2" (expand "restrict")
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "star_closed?")
                    (("2" (skeep)
                      (("2" (expand "member")
                        (("2" (expand "fullset")
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("3" (expand "associative?")
                    (("3" (skeep)
                      (("3" (expand "restrict")
                        (("3" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("4" (expand "left_distributive?")
                    (("4" (skeep)
                      (("4" (expand "restrict")
                        (("4" (propax) nil nil)) nil))
                      nil))
                    nil)
                   ("5" (expand "right_distributive?")
                    (("5" (skeep)
                      (("5" (expand "restrict")
                        (("5" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "monoid?")
                (("2" (prop)
                  (("1" (expand "monad?")
                    (("1" (prop)
                      (("1" (expand "star_closed?")
                        (("1" (skeep)
                          (("1" (expand "member")
                            (("1" (expand "fullset")
                              (("1" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "member")
                        (("2" (expand "fullset")
                          (("2" (propax) nil nil)) nil))
                        nil)
                       ("3" (expand "identity?")
                        (("3" (skeep)
                          (("3" (expand "restrict")
                            (("3" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "associative?")
                    (("2" (skeep)
                      (("2" (expand "restrict")
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "group?")
            (("2" (prop)
              (("1" (expand "monoid?")
                (("1" (prop)
                  (("1" (expand "monad?")
                    (("1" (prop)
                      (("1" (expand "star_closed?")
                        (("1" (skeep)
                          (("1" (typepred "x" "y")
                            (("1" (expand "remove")
                              (("1"
                                (expand "member")
                                (("1"
                                  (expand "fullset")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "member")
                        (("2" (expand "remove")
                          (("2" (expand "member")
                            (("2" (expand "fullset")
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("3" (expand "identity?")
                        (("3" (skeep)
                          (("3" (expand "restrict")
                            (("3" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "associative?")
                    (("2" (skeep)
                      (("2" (expand "restrict")
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "inv_exists?")
                (("2" (skeep)
                  (("2" (inst 1 "1/x")
                    (("1" (assert) nil nil)
                     ("2" (typepred "x")
                      (("2" (expand "remove")
                        (("2" (expand "member")
                          (("2" (expand "fullset")
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("3" (typepred "x")
                      (("3" (expand "remove") (("3" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "commutative?")
        (("2" (skeep)
          (("2" (expand "restrict") (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((fullset const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (restrict const-decl "R" restrict nil)
    (identity? const-decl "bool" operator_defs nil)
    (monad? const-decl "bool" monad_def nil)
    (associative? const-decl "bool" operator_defs nil)
    (monoid? const-decl "bool" monoid_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (x skolem-const-decl "(fullset[real])" quaternions_Hamilton_extra
     nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (inv_exists? const-decl "bool" group_def nil)
    (group? const-decl "bool" group_def nil)
    (commutative? const-decl "bool" operator_defs nil)
    (abelian_group? const-decl "bool" group_def nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (left_distributive? const-decl "bool" operator_defs_more nil)
    (right_distributive? const-decl "bool" operator_defs_more nil)
    (ring? const-decl "bool" ring_def nil)
    (ring_with_one? const-decl "bool" ring_with_one_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (remove const-decl "set" sets nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (x skolem-const-decl "(remove(0, fullset[real]))"
     quaternions_Hamilton_extra nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (division_ring? const-decl "bool" division_ring_def nil)
    (field? const-decl "bool" field_def nil))
   nil
   (IMP_quaternions assuming
    "quaternions[real, restrict[[numfield, numfield], [real, real], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [real, real], numfield].restrict(number_fields.*), 0, 1, (number_fields.-)(1), (number_fields.-)(1)].quaternions"
    "fullset_is_field: ASSUMPTION field_def[quaternions.T, quaternions.+, quaternions.*, quaternions.zero, quaternions.one].field?(sets[quaternions.T].fullset)")))
 (sc_part_red_norm_nnegreal 0
  (sc_part_red_norm_nnegreal-1 nil 3907407865
   ("" (skeep)
    (("" (lemma "red_norm_charac")
      (("" (inst?)
        (("" (decompose-equality)
          (("" (replaces -2)
            (("" (hide -)
              (("" (case-replace "inv(-1) = 1")
                (("1" (typepred "1")
                  (("1" (rewrite "identity_mult")
                    (("1" (rewrite "identity_mult")
                      (("1" (typepred "q`t * q`t")
                        (("1" (typepred "(q`y * q`y) + (q`z * q`z) ")
                          (("1" (lemma "nnreal_plus_nnreal_is_nnreal")
                            (("1" (inst -1 "q`y * q`y" "q`z * q`z")
                              (("1"
                                (name-replace
                                 "a"
                                 "q`y * q`y + q`z * q`z")
                                (("1"
                                  (lemma
                                   "nnreal_plus_nnreal_is_nnreal")
                                  (("1"
                                    (inst -1 "a" "q`t * q`t")
                                    (("1"
                                      (name-replace
                                       "b"
                                       "a + q`t * q`t")
                                      (("1"
                                        (lemma
                                         "nnreal_plus_nnreal_is_nnreal")
                                        (("1"
                                          (inst -1 "b" "q`x*q`x")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2) (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((- const-decl "[numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (red_norm_charac formula-decl nil quaternions nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (red_norm const-decl "quat" quaternions_def nil)
    (inv const-decl "{y | x * y = one AND y * x = one}" group nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    nil (NOT const-decl "[bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (odd? const-decl "bool" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil) nil nil
    (nnreal_plus_nnreal_is_nnreal judgement-tcc nil real_types nil)
    (identity_mult formula-decl nil number_fields nil)
    (TRUE const-decl "bool" booleans nil)
    (quat type-eq-decl nil quaternions_def nil))
   shostak))
 (QH_norm_TCC1 0
  (QH_norm_TCC1-1 nil 3907404476
   ("" (skeep)
    (("" (lemma "red_norm_charac")
      (("" (inst?)
        (("" (decompose-equality)
          (("" (replaces -2)
            (("" (hide -)
              (("" (case-replace "inv(-1) = 1" :hide? T)
                (("1" (rewrite* "one_times")
                  (("1" (lemma "nnreal_plus_nnreal_is_nnreal")
                    (("1" (inst-cp -1 "(q`y * q`y)" "(q`z * q`z)")
                      (("1" (inst-cp -1 "(q`t * q`t)" "(q`x * q`x)")
                        (("1" (lemma "associative_add")
                          (("1"
                            (inst -1 "(q`y * q`y) + (q`z * q`z)"
                             "(q`t * q`t)" "(q`x * q`x)")
                            (("1" (replace -1 1 rl)
                              (("1"
                                (hide -1)
                                (("1"
                                  (name-replace
                                   "yz"
                                   "(q`y * q`y) + (q`z * q`z)")
                                  (("1"
                                    (name-replace
                                     "tx"
                                     "(q`t * q`t) + (q`x * q`x)")
                                    (("1" (inst?) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((- const-decl "[numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (red_norm_charac formula-decl nil quaternions nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (red_norm const-decl "quat" quaternions_def nil)
    (inv const-decl "{y | x * y = one AND y * x = one}" group nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (negate_nz_T_is_nz_T application-judgement
     "nz_T[real, restrict[[numfield, numfield], [real, real], numfield](+),
     restrict[[numfield, numfield], [real, real], numfield](*), 0]"
     quaternions_Hamilton_extra nil)
    (one_times formula-decl nil ring_with_one nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (associative_add formula-decl nil number_fields nil)
    (yz skolem-const-decl "real" quaternions_Hamilton_extra nil)
    (tx skolem-const-decl "real" quaternions_Hamilton_extra nil)
    (nnreal_plus_nnreal_is_nnreal judgement-tcc nil real_types nil)
    (TRUE const-decl "bool" booleans nil)
    (quat type-eq-decl nil quaternions_def nil))
   nil
   (QH_norm subtype
    "quaternions_def[real, restrict[[numfield, numfield], [real, real], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [real, real], numfield].restrict(number_fields.*), 0, 1, (number_fields.-)(1), (number_fields.-)(1)].red_norm(quaternions_Hamilton_extra.q)`x"
    "nonneg_real")))
 (sq_QHnorm_charac 0
  (sq_QHnorm_charac-1 nil 3907407941
   ("" (skeep)
    (("" (expand "sq_QHnorm")
      (("" (expand "QH_norm")
        (("" (assert)
          (("" (name-replace "A" "red_norm(q)`x")
            (("" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((sq_QHnorm const-decl "nnreal" quaternions_Hamilton_extra nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sq const-decl "nonneg_real" sq reals) nil
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (red_norm const-decl "quat" quaternions_def nil)
    (quat type-eq-decl nil quaternions_def nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (QH_norm const-decl "nnreal" quaternions_Hamilton_extra nil))
   shostak))
 (red_norm_QH1 0
  (red_norm_QH1-1 nil 3907407964
   ("" (skeep)
    (("" (typepred "q")
      (("" (expand "QH_1")
        (("" (expand "QH_norm")
          (("" (name-replace "A" "red_norm(q)`x")
            (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((QH_1 const-decl
     "set[quat[real, restrict[[numfield, numfield], [real, real], numfield](+),
         restrict[[numfield, numfield], [real, real], numfield](*), 0, 1,
         -1, -1]]" quaternions_Hamilton_extra nil)
    (set type-eq-decl nil sets nil)
    (quat type-eq-decl nil quaternions_def nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (QH_norm const-decl "nnreal" quaternions_Hamilton_extra nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (red_norm const-decl "quat" quaternions_def nil))
   shostak))
 (norm_decomp 0
  (norm_decomp-1 nil 3907407985
   ("" (skeep)
    (("" (expand "sq_QHnorm")
      (("" (expand "QH_norm")
        (("" (rewrite* "sq_sqrt")
          (("1" (lemma "red_norm_charac")
            (("1" (inst-cp -1 "q")
              (("1" (inst-cp -1 "pure_part(q)")
                (("1" (inst -1 "sc_part(q)")
                  (("1" (decompose-equality)
                    (("1" (decompose-equality)
                      (("1" (decompose-equality)
                        (("1" (replaces -2)
                          (("1" (replaces -9)
                            (("1" (replaces -5)
                              (("1"
                                (hide -)
                                (("1"
                                  (expand "pure_part")
                                  (("1"
                                    (expand "sc_part")
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2) (("2" (rewrite "QH_norm_TCC1") nil nil)) nil)
           ("3" (hide 2) (("3" (rewrite "QH_norm_TCC1") nil nil)) nil)
           ("4" (hide 2) (("4" (rewrite "QH_norm_TCC1") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((sq_QHnorm const-decl "nnreal" quaternions_Hamilton_extra nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (red_norm const-decl "quat" quaternions_def nil)
    (quat type-eq-decl nil quaternions_def nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sq_sqrt formula-decl nil sqrt reals)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (pure_part const-decl "quat" quaternions_def nil)
    (sc_part const-decl "quat" quaternions_def nil) nil
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (inv const-decl "{y | x * y = one AND y * x = one}" group nil)
    (red_norm_charac formula-decl nil quaternions nil)
    (QH_norm_TCC1 subtype-tcc nil quaternions_Hamilton_extra nil)
    (QH_norm const-decl "nnreal" quaternions_Hamilton_extra nil))
   shostak))
 (norm_decomp_1 0
  (norm_decomp_1-1 nil 3907408027
   ("" (skeep)
    (("" (lemma "sq_QHnorm_charac")
      (("" (inst -1 "q")
        (("" (lemma "norm_decomp")
          (("" (inst -1 "q")
            (("" (replace -2 -1)
              (("" (hide -2)
                (("" (replaces -1)
                  ((""
                    (case-replace
                     "sq_QHnorm(sc_part(q)) = reals@sq.sq(q`x)")
                    (("" (hide 2)
                      (("" (expand "sq_QHnorm")
                        (("" (expand "sc_part")
                          (("" (expand "QH_norm")
                            (("" (rewrite "red_norm_charac")
                              ((""
                                (case-replace
                                 "(# x := q`x * q`x, y := 0, z := 0, t := 0 #)`x = q`x * q`x")
                                (("1"
                                  (hide -1)
                                  (("1" (grind) nil nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sq_QHnorm_charac formula-decl nil quaternions_Hamilton_extra nil)
    (norm_decomp formula-decl nil quaternions_Hamilton_extra nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (red_norm_charac formula-decl nil quaternions nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    nil
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (QH_norm const-decl "nnreal" quaternions_Hamilton_extra nil)
    (sq const-decl "nonneg_real" sq reals)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (sc_part const-decl "quat" quaternions_def nil)
    (sq_QHnorm const-decl "nnreal" quaternions_Hamilton_extra nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (quat type-eq-decl nil quaternions_def nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (QH_nzquat_nznorm 0
  (QH_nzquat_nznorm-1 nil 3907408053
   ("" (skeep)
    (("" (lemma "red_norm_charac")
      (("" (inst -1 "q")
        (("" (replaces -1)
          (("" (expand "zero_q")
            (("" (case-replace "inv(-1) = 1")
              (("1" (case-replace "1 * (q`y * q`y) = (q`y * q`y)")
                (("1" (case-replace "1 * (q`z * q`z) = (q`z * q`z)")
                  (("1" (lemma "sq_plus_pos")
                    (("1" (inst-cp -1 "q`y" "q`z")
                      (("1" (expand "sq" -2)
                        (("1"
                          (name-replace "A" " q`y * q`y + q`z * q`z")
                          (("1" (lemma "associative_add")
                            (("1" (inst?)
                              (("1"
                                (replace -1 -7 rl)
                                (("1"
                                  (hide -1)
                                  (("1"
                                    (inst -1 "q`t" "q`x")
                                    (("1"
                                      (expand "sq")
                                      (("1"
                                        (name-replace
                                         "B"
                                         "q`t * q`t + q`x * q`x")
                                        (("1"
                                          (hide -3 -4 -5)
                                          (("1"
                                            (lemma
                                             "nonneg_real_add_closed")
                                            (("1"
                                              (inst -1 "A" "B")
                                              (("1"
                                                (expand ">=")
                                                (("1"
                                                  (expand "<=")
                                                  (("1"
                                                    (split -1)
                                                    (("1"
                                                      (hide -2 -3)
                                                      (("1"
                                                        (name-replace
                                                         "C"
                                                         "A+B")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (prop)
                                                      (("1"
                                                        (hide -3)
                                                        (("1"
                                                          (lemma
                                                           "posreal_add_closed")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "A"
                                                             "B")
                                                            (("1"
                                                              (prop)
                                                              (("1"
                                                                (name-replace
                                                                 "C"
                                                                 "A+B")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("3"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (replace
                                                         -1
                                                         -4
                                                         rl)
                                                        (("2"
                                                          (hide -1 -3)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (replace
                                                         -2
                                                         -4
                                                         rl)
                                                        (("3"
                                                          (hide -2 -3)
                                                          (("3"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("4"
                                                        (expand "A" -1)
                                                        (("4"
                                                          (hide -3 -4)
                                                          (("4"
                                                            (typepred
                                                             "q")
                                                            (("4"
                                                              (expand
                                                               "zero_q")
                                                              (("4"
                                                                (case
                                                                 "q`y /=0")
                                                                (("1"
                                                                  (lemma
                                                                   "sq_eq_0")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "q`y")
                                                                    (("1"
                                                                      (prop)
                                                                      (("1"
                                                                        (expand
                                                                         "sq")
                                                                        (("1"
                                                                          (lemma
                                                                           "sq_pos")
                                                                          (("1"
                                                                            (inst-cp
                                                                             -1
                                                                             "q`z")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "q`y")
                                                                              (("1"
                                                                                (expand
                                                                                 "sq")
                                                                                (("1"
                                                                                  (expand
                                                                                   ">=")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "<=")
                                                                                    (("1"
                                                                                      (prop)
                                                                                      (("1"
                                                                                        (hide-all-but
                                                                                         (-1
                                                                                          -2
                                                                                          -3))
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "posreal_add_closed")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             "q`y * q`y"
                                                                                             "q`z * q`z")
                                                                                            (("1"
                                                                                              (prop)
                                                                                              (("1"
                                                                                                (hide
                                                                                                 -2
                                                                                                 -3)
                                                                                                (("1"
                                                                                                  (name-replace
                                                                                                   "D"
                                                                                                   "q`y * q`y + q`z * q`z")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide
                                                                                                 -1
                                                                                                 -3)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("3"
                                                                                                (hide
                                                                                                 -2
                                                                                                 -3)
                                                                                                (("3"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (replace
                                                                                         -1
                                                                                         -3)
                                                                                        (("2"
                                                                                          (replace
                                                                                           -1
                                                                                           -3
                                                                                           rl)
                                                                                          (("2"
                                                                                            (hide-all-but
                                                                                             (-2
                                                                                              -3))
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil)
                                                                                       ("4"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (prop)
                                                                  (("2"
                                                                    (replace
                                                                     -1
                                                                     -2)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (lemma
                                                                         "sq_eq_0")
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "q`z")
                                                                          (("2"
                                                                            (expand
                                                                             "sq")
                                                                            (("2"
                                                                              (hide
                                                                               -3)
                                                                              (("2"
                                                                                (expand
                                                                                 "B")
                                                                                (("2"
                                                                                  (case
                                                                                   "q`t/=0")
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "sq_eq_0")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "q`t")
                                                                                      (("1"
                                                                                        (prop)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "sq")
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "sq_pos")
                                                                                            (("1"
                                                                                              (inst-cp
                                                                                               -1
                                                                                               "q`t")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "q`x")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "sq")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     ">=")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "<=")
                                                                                                      (("1"
                                                                                                        (prop)
                                                                                                        (("1"
                                                                                                          (hide
                                                                                                           +)
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             "posreal_add_closed")
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "q`t * q`t"
                                                                                                               "q`x * q`x")
                                                                                                              (("1"
                                                                                                                (prop)
                                                                                                                (("1"
                                                                                                                  (name-replace
                                                                                                                   "E"
                                                                                                                   "q`t * q`t + q`x * q`x")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (hide-all-but
                                                                                                                   (-1
                                                                                                                    1))
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("3"
                                                                                                                  (hide-all-but
                                                                                                                   (-2
                                                                                                                    1))
                                                                                                                  (("3"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil)
                                                                                                         ("3"
                                                                                                          (lemma
                                                                                                           "sq_eq_0")
                                                                                                          (("3"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "q`x")
                                                                                                            (("3"
                                                                                                              (expand
                                                                                                               "sq")
                                                                                                              (("3"
                                                                                                                (prop)
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -4
                                                                                                                   -7
                                                                                                                   rl)
                                                                                                                  (("1"
                                                                                                                    (hide-all-but
                                                                                                                     (-7
                                                                                                                      2))
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("4"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (prop)
                                                                                    (("2"
                                                                                      (replace
                                                                                       -1
                                                                                       -4)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (lemma
                                                                                           "sq_eq_0")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -1
                                                                                             "q`x")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "sq")
                                                                                              (("2"
                                                                                                (hide
                                                                                                 -5)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (grind)
                                                                                                    (("2"
                                                                                                      (decompose-equality)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil)
                 ("2" (assert) nil nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((- const-decl "[numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (red_norm_charac formula-decl nil quaternions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (inv const-decl "{y | x * y = one AND y * x = one}" group nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (>= const-decl "bool" reals nil) nil nil
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (posreal_add_closed formula-decl nil real_axioms nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (sq_eq_0 formula-decl nil sq reals)
    (sq_pos formula-decl nil sq reals)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_real_add_closed formula-decl nil real_types nil)
    (associative_add formula-decl nil number_fields nil)
    (sq const-decl "nonneg_real" sq reals)
    (sq_plus_pos formula-decl nil sq reals)
    (left_identity formula-decl nil monad nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    nil (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nz_quat nonempty-type-eq-decl nil quaternions nil)
    (zero_q const-decl "quat" quaternions_def nil)
    (/= const-decl "boolean" notequal nil)
    (quat type-eq-decl nil quaternions_def nil))
   shostak))
 (QH_times_is_zero_q 0
  (QH_times_is_zero_q-1 nil 3907408160
   ("" (skeep)
    (("" (lemma "ring_nz_closed[quat,+,*,zero_q].times_is_zero")
      (("1" (inst?) (("1" (assert) nil nil)) nil)
       ("2" (hide (-1 2))
        (("2" (lemma "div_ring_iff_nz_rednorm")
          (("2" (prop)
            (("1" (hide -2)
              (("1" (expand "division_ring?")
                (("1" (expand "ring_nz_closed?")
                  (("1" (expand "ring_with_one?")
                    (("1" (expand "group?")
                      (("1" (expand "monoid?")
                        (("1" (expand "monad?")
                          (("1" (flatten)
                            (("1" (expand "star_closed?")
                              (("1"
                                (expand "nz_closed?")
                                (("1"
                                  (split)
                                  (("1" (propax) nil nil)
                                   ("2"
                                    (expand "star_closed?")
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide (2 3 4))
              (("2" (skeep)
                (("2" (lemma "QH_nzquat_nznorm")
                  (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((zero_q const-decl "quat" quaternions_def nil)
    (* const-decl "[quat, quat -> quat]" quaternions_def nil)
    (+ const-decl "quat" quaternions_def nil)
    (quat type-eq-decl nil quaternions_def nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (times_is_zero formula-decl nil ring_nz_closed nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (fullset const-decl "set" sets nil)
    (ring_nz_closed? const-decl "bool" ring_nz_closed_def nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (/= const-decl "boolean" notequal nil)
    (nz_quat nonempty-type-eq-decl nil quaternions nil)
    (div_ring_iff_nz_rednorm formula-decl nil quaternions nil)
    (QH_nzquat_nznorm formula-decl nil quaternions_Hamilton_extra nil)
    (group? const-decl "bool" group_def nil)
    (monad? const-decl "bool" monad_def nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (nz_closed? const-decl "bool" ring_nz_closed_def nil)
    (monoid? const-decl "bool" monoid_def nil)
    (ring_with_one? const-decl "bool" ring_with_one_def nil)
    (division_ring? const-decl "bool" division_ring_def nil))
   shostak))
 (QH_inv_red_norm_TCC1 0
  (QH_inv_red_norm_TCC1-1 nil 3907404476
   ("" (skeep)
    (("" (lemma "QH_nzquat_nznorm")
      (("" (inst?) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((QH_nzquat_nznorm formula-decl nil quaternions_Hamilton_extra nil)
    (nz_quat nonempty-type-eq-decl nil quaternions nil)
    (zero_q const-decl "quat" quaternions_def nil)
    (/= const-decl "boolean" notequal nil)
    (quat type-eq-decl nil quaternions_def nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (QH_inv_red_norm subtype
    "quaternions_def[real, restrict[[numfield, numfield], [real, real], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [real, real], numfield].restrict(number_fields.*), 0, 1, (number_fields.-)(1), (number_fields.-)(1)].red_norm(quaternions_Hamilton_extra.q)"
    "nz_quat[real, restrict[[numfield, numfield], [real, real], numfield](+), restrict[[numfield, numfield], [real, real], numfield](*), 0, 1, -1, -1]")))
 (QH_inv_red_norm_TCC2 0
  (QH_inv_red_norm_TCC2-1 nil 3907404476
   ("" (skeep)
    (("" (lemma "inv_q_prod_charac_TCC1")
      (("" (assert)
        (("" (prop)
          (("1" (inst?) (("1" (assert) nil nil)) nil)
           ("2" (hide -1)
            (("2" (lemma "div_ring_iff_nz_rednorm")
              (("2" (assert)
                (("2" (hide 2)
                  (("2" (skeep)
                    (("2" (lemma "QH_nzquat_nznorm")
                      (("2" (inst?) (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((- const-decl "[numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (inv_q_prod_charac_TCC1 subtype-tcc nil quaternions nil)
    (nz_quat nonempty-type-eq-decl nil quaternions nil)
    (zero_q const-decl "quat" quaternions_def nil)
    (/= const-decl "boolean" notequal nil)
    (quat type-eq-decl nil quaternions_def nil)
    (div_ring_iff_nz_rednorm formula-decl nil quaternions nil)
    (QH_nzquat_nznorm formula-decl nil quaternions_Hamilton_extra nil))
   nil
   (QH_inv_red_norm subtype
    "restrict[[quat[real, restrict[[numfield, numfield], [real, real], numfield](+), restrict[[numfield, numfield], [real, real], numfield](*), 0, 1, -1, -1], quat[real, restrict[[numfield, numfield], [real, real], numfield](+), restrict[[numfield, numfield], [real, real], numfield](*), 0, 1, -1, -1]], [nz_quat[real, restrict[[numfield, numfield], [real, real], numfield](+), restrict[[numfield, numfield], [real, real], numfield](*), 0, 1, -1, -1], nz_quat[real, restrict[[numfield, numfield], [real, real], numfield](+), restrict[[numfield, numfield], [real, real], numfield](*), 0, 1, -1, -1]], quat[real, restrict[[numfield, numfield], [real, real], numfield](+), restrict[[numfield, numfield], [real, real], numfield](*), 0, 1, -1, -1]].restrict(quaternions_def[real, restrict[[numfield, numfield], [real, real], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [real, real], numfield].restrict(number_fields.*), 0, 1, (number_fields.-)(1), (number_fields.-)(1)].*)"
    "[[nz_quat[real, restrict[[numfield, numfield], [real, real], numfield](+), restrict[[numfield, numfield], [real, real], numfield](*), 0, 1, -1, -1], nz_quat[real, restrict[[numfield, numfield], [real, real], numfield](+), restrict[[numfield, numfield], [real, real], numfield](*), 0, 1, -1, -1]] -> nz_quat[real, restrict[[numfield, numfield], [real, real], numfield](+), restrict[[numfield, numfield], [real, real], numfield](*), 0, 1, -1, -1]]")))
 (QH_inv_red_norm_TCC3 0
  (QH_inv_red_norm_TCC3-1 nil 3907404476
   ("" (lemma "inv_q_prod_charac_TCC2")
    (("" (assert)
      (("" (hide 2)
        (("" (lemma "div_ring_iff_nz_rednorm")
          (("" (assert)
            (("" (hide 2)
              (("" (skeep)
                (("" (lemma "QH_nzquat_nznorm")
                  (("" (inst?) (("" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((div_ring_iff_nz_rednorm formula-decl nil quaternions nil)
    (QH_nzquat_nznorm formula-decl nil quaternions_Hamilton_extra nil)
    (nz_quat nonempty-type-eq-decl nil quaternions nil)
    (zero_q const-decl "quat" quaternions_def nil)
    (/= const-decl "boolean" notequal nil)
    (quat type-eq-decl nil quaternions_def nil)
    (inv_q_prod_charac_TCC2 subtype-tcc nil quaternions nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil))
   nil
   (QH_inv_red_norm subtype
    "quaternions_def[real, restrict[[numfield, numfield], [real, real], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [real, real], numfield].restrict(number_fields.*), 0, 1, (number_fields.-)(1), (number_fields.-)(1)].one_q"
    "nz_quat[real, restrict[[numfield, numfield], [real, real], numfield](+), restrict[[numfield, numfield], [real, real], numfield](*), 0, 1, -1, -1]")))
 (QH_inv_red_norm_TCC4 0
  (QH_inv_red_norm_TCC4-1 nil 3907404476
   ("" (lemma "inv_q_prod_charac_TCC3")
    (("" (assert)
      (("" (hide 2)
        (("" (lemma "div_ring_iff_nz_rednorm")
          (("" (assert)
            (("" (hide 2)
              (("" (skeep)
                (("" (lemma "QH_nzquat_nznorm")
                  (("" (inst?) (("" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((div_ring_iff_nz_rednorm formula-decl nil quaternions nil)
    (QH_nzquat_nznorm formula-decl nil quaternions_Hamilton_extra nil)
    (nz_quat nonempty-type-eq-decl nil quaternions nil)
    (zero_q const-decl "quat" quaternions_def nil)
    (/= const-decl "boolean" notequal nil)
    (quat type-eq-decl nil quaternions_def nil)
    (inv_q_prod_charac_TCC3 assuming-tcc nil quaternions nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil))
   nil
   (QH_inv_red_norm assuming
    "group[nz_quat[real, restrict[[numfield, numfield], [real, real], numfield](+), restrict[[numfield, numfield], [real, real], numfield](*), 0, 1, -1, -1], restrict[[quat[real, restrict[[numfield, numfield], [real, real], numfield](+), restrict[[numfield, numfield], [real, real], numfield](*), 0, 1, -1, -1], quat[real, restrict[[numfield, numfield], [real, real], numfield](+), restrict[[numfield, numfield], [real, real], numfield](*), 0, 1, -1, -1]], [nz_quat[real, restrict[[numfield, numfield], [real, real], numfield](+), restrict[[numfield, numfield], [real, real], numfield](*), 0, 1, -1, -1], nz_quat[real, restrict[[numfield, numfield], [real, real], numfield](+), restrict[[numfield, numfield], [real, real], numfield](*), 0, 1, -1, -1]], quat[real, restrict[[numfield, numfield], [real, real], numfield](+), restrict[[numfield, numfield], [real, real], numfield](*), 0, 1, -1, -1]].restrict(quaternions_def[real, restrict[[numfield, numfield], [real, real], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [real, real], numfield].restrict(number_fields.*), 0, 1, (number_fields.-)(1), (number_fields.-)(1)].*), quaternions_def[real, restrict[[numfield, numfield], [real, real], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [real, real], numfield].restrict(number_fields.*), 0, 1, (number_fields.-)(1), (number_fields.-)(1)].one_q].group"
    "fullset_is_group: ASSUMPTION group_def[group.T, group.*, group.one].group?(sets[group.T].fullset)")))
 (QH_inv_red_norm_TCC5 0
  (QH_inv_red_norm_TCC5-1 nil 3907404476
   ("" (skeep)
    (("" (lemma "QH_nzquat_nznorm")
      (("" (inst?)
        (("" (lemma "red_norm_charac")
          (("" (inst?)
            (("" (replaces -1)
              (("" (beta)
                (("" (expand "zero_q")
                  (("" (rewrite "neg_one_times")
                    (("" (case-replace "inv(-1) = 1" :hide? T)
                      (("1" (rewrite* "one_times")
                        (("1" (name-replace "a" "q`x * q`x")
                          (("1" (name-replace "b" "q`y * q`y")
                            (("1" (name-replace "c" " (q`z * q`z)")
                              (("1"
                                (name-replace "d" "(q`t * q`t)")
                                (("1"
                                  (lemma "associative_add")
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (replaces -1)
                                      (("1"
                                        (lemma "commutative_add")
                                        (("1"
                                          (inst -1 "(b + c) + d" "a")
                                          (("1" (replaces -1) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide (-1 2)) (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((QH_nzquat_nznorm formula-decl nil quaternions_Hamilton_extra nil)
    (red_norm_charac formula-decl nil quaternions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (negate_nz_T_is_nz_T application-judgement
     "nz_T[real, restrict[[numfield, numfield], [real, real], numfield](+),
     restrict[[numfield, numfield], [real, real], numfield](*), 0]"
     quaternions_Hamilton_extra nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (inv const-decl "{y | x * y = one AND y * x = one}" group nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (associative_add formula-decl nil number_fields nil)
    (commutative_add formula-decl nil number_fields nil)
    (one_times formula-decl nil ring_with_one nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (neg_one_times formula-decl nil extra_tegies nil)
    (nz_quat nonempty-type-eq-decl nil quaternions nil)
    (zero_q const-decl "quat" quaternions_def nil)
    (/= const-decl "boolean" notequal nil)
    (quat type-eq-decl nil quaternions_def nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (QH_inv_red_norm subtype
    "(quaternions_def[real, restrict[[numfield, numfield], [real, real], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [real, real], numfield].restrict(number_fields.*), 0, 1, (number_fields.-)(1), (number_fields.-)(1)].red_norm(quaternions_Hamilton_extra.q)`x)"
    "nz_T[real, restrict[[numfield, numfield], [real, real], numfield](+), restrict[[numfield, numfield], [real, real], numfield](*), 0]")))
 (QH_inv_red_norm_TCC6 0
  (QH_inv_red_norm_TCC6-1 nil 3907404476
   ("" (skeep) (("" (expand "restrict") (("" (assert) nil nil)) nil))
    nil)
   ((restrict const-decl "R" restrict nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (negate_nz_T_is_nz_T application-judgement
     "nz_T[real, restrict[[numfield, numfield], [real, real], numfield](+),
     restrict[[numfield, numfield], [real, real], numfield](*), 0]"
     quaternions_Hamilton_extra nil))
   nil
   (QH_inv_red_norm subtype
    "restrict[[real, real], [nz_T[real, restrict[[numfield, numfield], [real, real], numfield](+), restrict[[numfield, numfield], [real, real], numfield](*), 0], nz_T[real, restrict[[numfield, numfield], [real, real], numfield](+), restrict[[numfield, numfield], [real, real], numfield](*), 0]], real].restrict(restrict[[numfield, numfield], [real, real], numfield].restrict(number_fields.*))"
    "[[nz_T[real, restrict[[numfield, numfield], [real, real], numfield](+), restrict[[numfield, numfield], [real, real], numfield](*), 0], nz_T[real, restrict[[numfield, numfield], [real, real], numfield](+), restrict[[numfield, numfield], [real, real], numfield](*), 0]] -> nz_T[real, restrict[[numfield, numfield], [real, real], numfield](+), restrict[[numfield, numfield], [real, real], numfield](*), 0]]")))
 (QH_inv_red_norm 0
  (QH_inv_red_norm-1 nil 3907408183
   ("" (skeep)
    (("" (lemma "unique_inv[nz_quat,*,one_q]")
      (("1"
        (inst -1 "red_norm(q)"
         "1 * inv[nz_T[real, restrict[[numfield, numfield], [real, real], numfield](+), restrict[[numfield, numfield], [real, real], numfield](*), 0], restrict [[real, real], [nz_T[real, restrict [[numfield, numfield], [real, real], numfield] (+), restrict [[numfield, numfield], [real, real], numfield] (*), 0], nz_T[real, restrict [[numfield, numfield], [real, real], numfield] (+), restrict [[numfield, numfield], [real, real], numfield] (*), 0]], real] (restrict[[numfield, numfield], [real, real], numfield] (*)), 1] ((red_norm(q)`x)) * one_q")
        (("1" (prop)
          (("1" (replace -3 1 rl) (("1" (propax) nil nil)) nil)
           ("2" (hide 1 3)
            (("2" (lemma "sc_comm")
              (("2"
                (inst -1
                 "1 * inv[nz_T[real, restrict[[numfield, numfield], [real, real], numfield] (+) , restrict[[numfield, numfield], [real, real], numfield] (*), 0], restrict [[real, real], [nz_T[real, restrict [[numfield, numfield], [real, real], numfield] (+), restrict [[numfield, numfield], [real, real], numfield] (*), 0], nz_T[real, restrict [[numfield, numfield], [real, real], numfield] (+), restrict [[numfield, numfield], [real, real], numfield] (*), 0]], real] (restrict[[numfield, numfield], [real, real], numfield] (*)), 1] ((red_norm(q)`x))"
                 "red_norm(q)" "one_q")
                (("1" (replace -1 1 rl)
                  (("1" (hide -1)
                    (("1" (rewrite "times_one_q")
                      (("1" (expand "*")
                        (("1" (expand "one_q")
                          (("1" (assert)
                            (("1" (split)
                              (("1"
                                (assert)
                                (("1"
                                  (lemma
                                   "inv_left[nz_T[real, restrict[[numfield, numfield], [real, real], numfield](+), restrict[[numfield, numfield], [real, real], numfield](*), 0], restrict [[real, real], [nz_T[real, restrict[[numfield, numfield], [real, real], numfield] (+), restrict[[numfield, numfield], [real, real], numfield] (*), 0], nz_T[real, restrict[[numfield, numfield], [real, real], numfield] (+) , restrict[[numfield, numfield], [real, real], numfield] (*), 0]], real] (restrict[[numfield, numfield], [real, real], numfield](*)), 1]")
                                  (("1"
                                    (inst -1 "red_norm(q)`x")
                                    (("1"
                                      (expand "restrict")
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma "red_norm_charac")
                                (("2"
                                  (inst -1 "q")
                                  (("2"
                                    (case-replace "red_norm(q)`y = 0")
                                    (("1"
                                      (name-replace
                                       "A"
                                       "inv[nz_T[real, restrict[[numfield, numfield], [real, real], numfield](+), restrict[[numfield, numfield], [real, real], numfield](*), 0], restrict [[real, real], [nz_T[real, restrict[[numfield, numfield], [real, real], numfield] (+), restrict[[numfield, numfield], [real, real], numfield] (*), 0], nz_T[real, restrict[[numfield, numfield], [real, real], numfield] (+) , restrict[[numfield, numfield], [real, real], numfield] (*), 0]], real] (restrict[[numfield, numfield], [real, real], numfield](*)), 1] ((red_norm(q)`x))")
                                      (("1"
                                        (hide -)
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (expand "restrict")
                                            (("2"
                                              (lemma
                                               " nzreal_times_nzreal_is_nzreal ")
                                              (("2"
                                                (inst -1 "x1`1" "x1`2")
                                                (("2"
                                                  (hide -3 -4)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (hide 2)
                                        (("3" (inst 1 "1") nil nil))
                                        nil)
                                       ("4"
                                        (hide 2)
                                        (("4"
                                          (skeep)
                                          (("4"
                                            (hide -)
                                            (("4" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("5"
                                        (hide 2)
                                        (("5"
                                          (skeep)
                                          (("5"
                                            (hide -)
                                            (("5"
                                              (expand "restrict")
                                              (("5" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (name-replace
                                         "B"
                                         "q`x * q`x + inv(-1) * (q`y * q`y) + inv(-1) * (q`z * q`z) + (-1 * -1) * (q`t * q`t)")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (lemma "red_norm_charac")
                                (("3"
                                  (inst -1 "q")
                                  (("3"
                                    (case-replace "red_norm(q)`z = 0")
                                    (("1"
                                      (name-replace
                                       "A"
                                       "inv[nz_T[real, restrict[[numfield, numfield], [real, real], numfield](+), restrict[[numfield, numfield], [real, real], numfield](*), 0], restrict [[real, real], [nz_T[real, restrict[[numfield, numfield], [real, real], numfield] (+), restrict[[numfield, numfield], [real, real], numfield] (*), 0], nz_T[real, restrict[[numfield, numfield], [real, real], numfield] (+) , restrict[[numfield, numfield], [real, real], numfield] (*), 0]], real] (restrict[[numfield, numfield], [real, real], numfield](*)), 1] ((red_norm(q)`x))")
                                      (("1"
                                        (hide -)
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (expand "restrict")
                                            (("2"
                                              (lemma
                                               " nzreal_times_nzreal_is_nzreal ")
                                              (("2"
                                                (inst -1 "x1`1" "x1`2")
                                                (("2"
                                                  (hide -3 -4)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (hide 2)
                                        (("3" (inst 1 "1") nil nil))
                                        nil)
                                       ("4"
                                        (hide 2)
                                        (("4"
                                          (skeep)
                                          (("4"
                                            (hide -)
                                            (("4" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("5"
                                        (hide 2)
                                        (("5"
                                          (skeep)
                                          (("5"
                                            (hide -)
                                            (("5"
                                              (expand "restrict")
                                              (("5" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (name-replace
                                         "B"
                                         "q`x * q`x + inv(-1) * (q`y * q`y) + inv(-1) * (q`z * q`z) + (-1 * -1) * (q`t * q`t)")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("4"
                                (lemma "red_norm_charac")
                                (("4"
                                  (inst -1 "q")
                                  (("4"
                                    (case-replace "red_norm(q)`t = 0")
                                    (("1"
                                      (name-replace
                                       "A"
                                       "inv[nz_T[real, restrict[[numfield, numfield], [real, real], numfield](+), restrict[[numfield, numfield], [real, real], numfield](*), 0], restrict [[real, real], [nz_T[real, restrict[[numfield, numfield], [real, real], numfield] (+), restrict[[numfield, numfield], [real, real], numfield] (*), 0], nz_T[real, restrict[[numfield, numfield], [real, real], numfield] (+) , restrict[[numfield, numfield], [real, real], numfield] (*), 0]], real] (restrict[[numfield, numfield], [real, real], numfield](*)), 1] ((red_norm(q)`x))")
                                      (("1"
                                        (hide -)
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (expand "restrict")
                                            (("2"
                                              (lemma
                                               " nzreal_times_nzreal_is_nzreal ")
                                              (("2"
                                                (inst -1 "x1`1" "x1`2")
                                                (("2"
                                                  (hide -3 -4)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (hide 2)
                                        (("3" (inst 1 "1") nil nil))
                                        nil)
                                       ("4"
                                        (hide 2)
                                        (("4"
                                          (skeep)
                                          (("4"
                                            (hide -)
                                            (("4" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("5"
                                        (hide 2)
                                        (("5"
                                          (skeep)
                                          (("5"
                                            (hide -)
                                            (("5"
                                              (expand "restrict")
                                              (("5" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (name-replace
                                         "B"
                                         "q`x * q`x + inv(-1) * (q`y * q`y) + inv(-1) * (q`z * q`z) + (-1 * -1) * (q`t * q`t)")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (skeep)
                          (("2" (expand "restrict")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("3" (hide 2)
                        (("3" (skeep) (("3" (grind) nil nil)) nil))
                        nil)
                       ("4" (hide 2) (("4" (inst 1 "1") nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (skeep)
                    (("2" (expand "restrict") (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil)
                 ("3" (hide 2) (("3" (inst 1 "1") nil nil)) nil)
                 ("4" (hide 2)
                  (("4" (skeep) (("4" (grind) nil nil)) nil)) nil)
                 ("5" (hide 2)
                  (("5" (skeep)
                    (("5" (expand "restrict") (("5" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (hide 1 3)
            (("3" (lemma "sc_comm")
              (("3"
                (inst -1
                 "1 * inv[nz_T[real, restrict[[numfield, numfield], [real, real], numfield] (+) , restrict[[numfield, numfield], [real, real], numfield] (*), 0], restrict [[real, real], [nz_T[real, restrict [[numfield, numfield], [real, real], numfield] (+), restrict [[numfield, numfield], [real, real], numfield] (*), 0], nz_T[real, restrict [[numfield, numfield], [real, real], numfield] (+), restrict [[numfield, numfield], [real, real], numfield] (*), 0]], real] (restrict[[numfield, numfield], [real, real], numfield] (*)), 1] ((red_norm(q)`x))"
                 "one_q" "red_norm(q)")
                (("1" (replace -1 1)
                  (("1" (hide -1)
                    (("1" (rewrite "one_q_times")
                      (("1" (expand "*")
                        (("1" (expand "one_q")
                          (("1" (assert)
                            (("1" (split)
                              (("1"
                                (assert)
                                (("1"
                                  (lemma
                                   "inv_left[nz_T[real, restrict[[numfield, numfield], [real, real], numfield](+), restrict[[numfield, numfield], [real, real], numfield](*), 0], restrict [[real, real], [nz_T[real, restrict[[numfield, numfield], [real, real], numfield] (+), restrict[[numfield, numfield], [real, real], numfield] (*), 0], nz_T[real, restrict[[numfield, numfield], [real, real], numfield] (+) , restrict[[numfield, numfield], [real, real], numfield] (*), 0]], real] (restrict[[numfield, numfield], [real, real], numfield](*)), 1]")
                                  (("1"
                                    (inst -1 "red_norm(q)`x")
                                    (("1"
                                      (expand "restrict")
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma "red_norm_charac")
                                (("2"
                                  (inst -1 "q")
                                  (("2"
                                    (case-replace "red_norm(q)`y = 0")
                                    (("1"
                                      (name-replace
                                       "A"
                                       "inv[nz_T[real, restrict[[numfield, numfield], [real, real], numfield](+), restrict[[numfield, numfield], [real, real], numfield](*), 0], restrict [[real, real], [nz_T[real, restrict[[numfield, numfield], [real, real], numfield] (+), restrict[[numfield, numfield], [real, real], numfield] (*), 0], nz_T[real, restrict[[numfield, numfield], [real, real], numfield] (+) , restrict[[numfield, numfield], [real, real], numfield] (*), 0]], real] (restrict[[numfield, numfield], [real, real], numfield](*)), 1] ((red_norm(q)`x))")
                                      (("1"
                                        (hide -)
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (expand "restrict")
                                            (("2"
                                              (lemma
                                               " nzreal_times_nzreal_is_nzreal ")
                                              (("2"
                                                (inst -1 "x1`1" "x1`2")
                                                (("2"
                                                  (hide -3 -4)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (hide 2)
                                        (("3" (inst 1 "1") nil nil))
                                        nil)
                                       ("4"
                                        (hide 2)
                                        (("4"
                                          (skeep)
                                          (("4"
                                            (hide -)
                                            (("4" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("5"
                                        (hide 2)
                                        (("5"
                                          (skeep)
                                          (("5"
                                            (hide -)
                                            (("5"
                                              (expand "restrict")
                                              (("5" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (name-replace
                                         "B"
                                         "q`x * q`x + inv(-1) * (q`y * q`y) + inv(-1) * (q`z * q`z) + (-1 * -1) * (q`t * q`t)")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (lemma "red_norm_charac")
                                (("3"
                                  (inst -1 "q")
                                  (("3"
                                    (case-replace "red_norm(q)`z = 0")
                                    (("1"
                                      (name-replace
                                       "A"
                                       "inv[nz_T[real, restrict[[numfield, numfield], [real, real], numfield](+), restrict[[numfield, numfield], [real, real], numfield](*), 0], restrict [[real, real], [nz_T[real, restrict[[numfield, numfield], [real, real], numfield] (+), restrict[[numfield, numfield], [real, real], numfield] (*), 0], nz_T[real, restrict[[numfield, numfield], [real, real], numfield] (+) , restrict[[numfield, numfield], [real, real], numfield] (*), 0]], real] (restrict[[numfield, numfield], [real, real], numfield](*)), 1] ((red_norm(q)`x))")
                                      (("1"
                                        (hide -)
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (expand "restrict")
                                            (("2"
                                              (lemma
                                               " nzreal_times_nzreal_is_nzreal ")
                                              (("2"
                                                (inst -1 "x1`1" "x1`2")
                                                (("2"
                                                  (hide -3 -4)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (hide 2)
                                        (("3" (inst 1 "1") nil nil))
                                        nil)
                                       ("4"
                                        (hide 2)
                                        (("4"
                                          (skeep)
                                          (("4"
                                            (hide -)
                                            (("4" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("5"
                                        (hide 2)
                                        (("5"
                                          (skeep)
                                          (("5"
                                            (hide -)
                                            (("5"
                                              (expand "restrict")
                                              (("5" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (name-replace
                                         "B"
                                         "q`x * q`x + inv(-1) * (q`y * q`y) + inv(-1) * (q`z * q`z) + (-1 * -1) * (q`t * q`t)")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("4"
                                (lemma "red_norm_charac")
                                (("4"
                                  (inst -1 "q")
                                  (("4"
                                    (case-replace "red_norm(q)`t = 0")
                                    (("1"
                                      (name-replace
                                       "A"
                                       "inv[nz_T[real, restrict[[numfield, numfield], [real, real], numfield](+), restrict[[numfield, numfield], [real, real], numfield](*), 0], restrict [[real, real], [nz_T[real, restrict[[numfield, numfield], [real, real], numfield] (+), restrict[[numfield, numfield], [real, real], numfield] (*), 0], nz_T[real, restrict[[numfield, numfield], [real, real], numfield] (+) , restrict[[numfield, numfield], [real, real], numfield] (*), 0]], real] (restrict[[numfield, numfield], [real, real], numfield](*)), 1] ((red_norm(q)`x))")
                                      (("1"
                                        (hide -)
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (expand "restrict")
                                            (("2"
                                              (lemma
                                               " nzreal_times_nzreal_is_nzreal ")
                                              (("2"
                                                (inst -1 "x1`1" "x1`2")
                                                (("2"
                                                  (hide -3 -4)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (hide 2)
                                        (("3" (inst 1 "1") nil nil))
                                        nil)
                                       ("4"
                                        (hide 2)
                                        (("4"
                                          (skeep)
                                          (("4"
                                            (hide -)
                                            (("4" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("5"
                                        (hide 2)
                                        (("5"
                                          (skeep)
                                          (("5"
                                            (hide -)
                                            (("5"
                                              (expand "restrict")
                                              (("5" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (name-replace
                                         "B"
                                         "q`x * q`x + inv(-1) * (q`y * q`y) + inv(-1) * (q`z * q`z) + (-1 * -1) * (q`t * q`t)")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (skeep)
                          (("2" (expand "restrict")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("3" (hide 2)
                        (("3" (skeep) (("3" (grind) nil nil)) nil))
                        nil)
                       ("4" (hide 2) (("4" (inst 1 "1") nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (skeep)
                    (("2" (expand "restrict") (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil)
                 ("3" (hide 2) (("3" (inst 1 "1") nil nil)) nil)
                 ("4" (hide 2)
                  (("4" (skeep) (("4" (grind) nil nil)) nil)) nil)
                 ("5" (hide 2)
                  (("5" (skeep)
                    (("5" (expand "restrict") (("5" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 1)
          (("2" (expand "*")
            (("2" (expand "one_q")
              (("2" (expand "zero_q")
                (("2" (lemma "QH_nzquat_nznorm")
                  (("2" (inst -1 "q")
                    (("2" (lemma "quotient_pos_lt")
                      (("2"
                        (inst -1
                         "(red_norm [real, restrict[[numfield, numfield], [real, real], numfield](+), restrict[[numfield, numfield], [real, real], numfield](*), 0, 1, -1, -1] (q)`x)")
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (hide 2)
          (("3" (skeep)
            (("3" (expand "restrict") (("3" (assert) nil nil)) nil))
            nil))
          nil)
         ("4" (hide 2) (("4" (inst 1 "1") nil nil)) nil)
         ("5" (hide 2)
          (("5" (skeep)
            (("5" (expand "restrict") (("5" (propax) nil nil)) nil))
            nil))
          nil)
         ("6" (hide 2)
          (("6" (skeep)
            (("6" (expand "restrict") (("6" (propax) nil nil)) nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (expand "one_q")
          (("2" (expand "zero_q") (("2" (propax) nil nil)) nil)) nil))
        nil)
       ("3" (hide 2)
        (("3" (skeep)
          (("3" (lemma "QH_nzquat_nznorm")
            (("3" (lemma "div_ring_iff_nz_rednorm")
              (("3" (prop)
                (("3" (hide -2)
                  (("3" (expand "division_ring?")
                    (("3" (expand "group?")
                      (("3" (expand "monoid?")
                        (("3" (expand "monad?")
                          (("3" (flatten)
                            (("3" (hide -1 -3 -4 -5 -6)
                              (("3"
                                (expand "star_closed?")
                                (("3"
                                  (inst -1 "x1`1" "x1`2")
                                  (("1"
                                    (expand "member")
                                    (("1"
                                      (expand "remove")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (hide -1 -2)
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "remove")
                                    (("2"
                                      (expand "member")
                                      (("2"
                                        (expand "fullset")
                                        (("2"
                                          (hide -)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (expand "remove")
                                    (("3"
                                      (expand "member")
                                      (("3"
                                        (expand "fullset")
                                        (("3"
                                          (hide -)
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((one_q const-decl "quat" quaternions_def nil)
    (* const-decl "[quat, quat -> quat]" quaternions_def nil)
    (nz_quat nonempty-type-eq-decl nil quaternions nil)
    (zero_q const-decl "quat" quaternions_def nil)
    (/= const-decl "boolean" notequal nil)
    (quat type-eq-decl nil quaternions_def nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (unique_inv formula-decl nil group nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (QH_nzquat_nznorm formula-decl nil quaternions_Hamilton_extra nil)
    (quotient_pos_lt formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (sc_comm formula-decl nil quaternions_def nil)
    (times_one_q formula-decl nil quaternions_def nil)
    (inv_left formula-decl nil group nil)
    (nzreal_times_nzreal_is_nzreal judgement-tcc nil real_types nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (red_norm_charac formula-decl nil quaternions nil) nil
    (one_q_times formula-decl nil quaternions_def nil)
    (left_identity formula-decl nil monad nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (* const-decl "quat" quaternions_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (inv const-decl "{y | x * y = one AND y * x = one}" group nil)
    (red_norm const-decl "quat" quaternions_def nil) nil
    (TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (nz_T type-eq-decl nil ring_nz_closed_def nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (div_ring_iff_nz_rednorm formula-decl nil quaternions nil)
    (group? const-decl "bool" group_def nil)
    (monad? const-decl "bool" monad_def nil)
    (set type-eq-decl nil sets nil) (remove const-decl "set" sets nil)
    (fullset const-decl "set" sets nil) nil
    (member const-decl "bool" sets nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (monoid? const-decl "bool" monoid_def nil)
    (division_ring? const-decl "bool" division_ring_def nil))
   shostak))
 (QH_inv_q_prod_charac 0
  (QH_inv_q_prod_charac-1 nil 3907408492
   ("" (skeep)
    (("" (assert)
      (("" (lemma "inv_q_prod_charac")
        (("" (prop)
          (("1" (inst -1 "q")
            (("1" (replaces -1)
              (("1" (lemma "QH_inv_red_norm")
                (("1" (inst -1 "q")
                  (("1" (replaces -1)
                    (("1" (assert)
                      (("1" (lemma "sc_comm")
                        (("1"
                          (inst -1
                           " inv[nz_T[real, restrict[[numfield, numfield], [real, real], numfield](+), restrict[[numfield, numfield], [real, real], numfield](*), 0], restrict [[real, real], [nz_T[real, restrict[[numfield, numfield], [real, real], numfield] (+), restrict[[numfield, numfield], [real, real], numfield] (*), 0] , nz_T[real, restrict[[numfield, numfield], [real, real], numfield] (+), restrict[[numfield, numfield], [real, real], numfield] (*), 0]], real] (restrict[[numfield, numfield], [real, real], numfield](*)), 1] ((red_norm(q)`x))"
                           "conjugate(q)" "one_q")
                          (("1" (replace -1 1 rl)
                            (("1" (rewrite "sc_quat_assoc" :dir rl)
                              (("1" (rewrite "times_one_q") nil nil)
                               ("2"
                                (hide -1 2)
                                (("2"
                                  (skeep)
                                  (("2"
                                    (expand "restrict")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (hide -1 2)
                                (("3"
                                  (skeep)
                                  (("3"
                                    (expand "restrict")
                                    (("3" (propax) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("4"
                                (hide -1 2)
                                (("4" (inst 1 "1") nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide -1 2)
                            (("2" (skeep)
                              (("2"
                                (expand "restrict")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide -1 2)
                            (("3" (inst 1 "1") nil nil)) nil)
                           ("4" (hide -1 2)
                            (("4" (skeep)
                              (("4"
                                (expand "restrict")
                                (("4" (propax) nil nil))
                                nil))
                              nil))
                            nil)
                           ("5" (hide -1 2)
                            (("5" (skeep)
                              (("5"
                                (expand "restrict")
                                (("5" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide -1 2)
            (("2" (lemma "div_ring_iff_nz_rednorm")
              (("2" (lemma "QH_nzquat_nznorm") (("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (left_identity formula-decl nil monad nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nz_T type-eq-decl nil ring_nz_closed_def nil)
    (one_q const-decl "quat" quaternions_def nil)
    (conjugate const-decl "quat" quaternions_def nil)
    (red_norm const-decl "quat" quaternions_def nil)
    (inv const-decl "{y | x * y = one AND y * x = one}" group nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (sc_quat_assoc formula-decl nil quaternions_def nil)
    (times_one_q formula-decl nil quaternions_def nil) nil
    (sc_comm formula-decl nil quaternions_def nil)
    (QH_inv_red_norm formula-decl nil quaternions_Hamilton_extra nil)
    (nz_quat nonempty-type-eq-decl nil quaternions nil)
    (zero_q const-decl "quat" quaternions_def nil)
    (/= const-decl "boolean" notequal nil)
    (quat type-eq-decl nil quaternions_def nil)
    (div_ring_iff_nz_rednorm formula-decl nil quaternions nil)
    (QH_nzquat_nznorm formula-decl nil quaternions_Hamilton_extra nil)
    (inv_q_prod_charac formula-decl nil quaternions nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil))
   shostak))
 (quat_trig_form_aux 0
  (quat_trig_form_aux-1 nil 3907411117
   ("" (skeep)
    (("" (lemma "arc_sin_cos")
      (("" (inst -1 "q`x" "QH_norm(pure_part(q))" "1")
        (("" (prop)
          (("1" (skeep)
            (("1" (inst 1 "d") (("1" (assert) nil nil)) nil)) nil)
           ("2" (hide 2)
            (("2" (typepred "q")
              (("2" (lemma "norm_decomp_1")
                (("2" (inst -1 "q")
                  (("2" (rewrite "red_norm_QH1")
                    (("2" (expand "sq" 1 3)
                      (("2" (replaces -1) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((arc_sin_cos formula-decl nil trig_inverses trig)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (left_identity formula-decl nil monad nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (sq const-decl "nonneg_real" sq reals)
    (conjugate const-decl "quat" quaternions_def nil)
    (red_norm const-decl "quat" quaternions_def nil)
    (sq_QHnorm const-decl "nnreal" quaternions_Hamilton_extra nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    nil
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (TRUE const-decl "bool" booleans nil)
    (red_norm_QH1 formula-decl nil quaternions_Hamilton_extra nil)
    (norm_decomp_1 formula-decl nil quaternions_Hamilton_extra nil)
    (pure_part const-decl "quat" quaternions_def nil)
    (QH_norm const-decl "nnreal" quaternions_Hamilton_extra nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (QH_1 const-decl
     "set[quat[real, restrict[[numfield, numfield], [real, real], numfield](+),
         restrict[[numfield, numfield], [real, real], numfield](*), 0, 1,
         -1, -1]]" quaternions_Hamilton_extra nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (quat type-eq-decl nil quaternions_def nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   shostak))
 (quat_trig_form 0
  (quat_trig_form-1 nil 3907411149
   ("" (skeep)
    (("" (lemma "quat_trig_form_aux")
      (("" (inst -1 "q")
        (("" (skeep)
          (("" (lemma "trig_eq_prep")
            (("" (inst -1 "t")
              (("" (skosimp)
                (("" (case-replace "t+2*i!1*pi = 2*pi")
                  (("1" (inst 1 "0")
                    (("1" (prop)
                      (("1" (lemma "cos_period")
                        (("1" (inst -1 "t" "i!1")
                          (("1" (replace -2 -1)
                            (("1" (lemma "cos_2k_pi")
                              (("1"
                                (inst-cp -1 "1")
                                (("1"
                                  (inst -1 "0")
                                  (("1"
                                    (hide (-4 -5 -6 -8))
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (lemma "sin_period")
                        (("2" (inst -1 "t" "i!1")
                          (("2" (replace -2 -1)
                            (("2" (lemma "sin_k_pi")
                              (("2"
                                (inst -1 "0")
                                (("2"
                                  (lemma "sin_2pi")
                                  (("2"
                                    (hide (-4 -5 -6 -7))
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil)
                   ("2" (name-replace "a" "t + 2 * i!1 * pi")
                    (("2" (inst 2 "a")
                      (("1" (expand "a")
                        (("1" (prop)
                          (("1" (lemma "cos_period")
                            (("1" (inst -1 "t" "i!1")
                              (("1"
                                (hide (-2 -3 -5))
                                (("1"
                                  (name-replace "b" "t + 2 * i!1 * pi")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (lemma "sin_period")
                            (("2" (inst -1 "t" "i!1")
                              (("2"
                                (name-replace "c" "t + 2 * i!1 * pi" _)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((quat_trig_form_aux formula-decl nil quaternions_Hamilton_extra
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (cos const-decl "real" sincos_def trig)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (real_times_real_is_real application-judgement "real" reals nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (integer nonempty-type-from-decl nil integers nil)
    (cos_2k_pi formula-decl nil sincos trig)
    (zero_times formula-decl nil ring nil) nil
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (cos_period formula-decl nil sincos trig)
    (sin_k_pi formula-decl nil sincos trig)
    (sin_2pi formula-decl nil sincos trig)
    (pure_part const-decl "quat" quaternions_def nil)
    (conjugate const-decl "quat" quaternions_def nil)
    (red_norm const-decl "quat" quaternions_def nil)
    (QH_norm const-decl "nnreal" quaternions_Hamilton_extra nil)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (sin_period formula-decl nil sincos trig)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (nnreal_lt_2pi nonempty-type-eq-decl nil trig_types trig)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    nil
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (trig_eq_prep formula-decl nil trig_basic trig)
    (QH_1 const-decl
     "set[quat[real, restrict[[numfield, numfield], [real, real], numfield](+),
         restrict[[numfield, numfield], [real, real], numfield](*), 0, 1,
         -1, -1]]" quaternions_Hamilton_extra nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (quat type-eq-decl nil quaternions_def nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (QH_norm_is_norm 0
  (QH_norm_is_norm-1 nil 3907411233
   ("" (skeep)
    (("" (expand "QH_norm")
      (("" (expand "norm")
        (("" (lemma "red_norm_charac")
          (("" (inst?)
            (("" (replace -1 1)
              (("" (hide -1)
                (("" (beta)
                  (("" (expand "sqv")
                    (("" (expand "*")
                      (("" (case-replace "inv(-1) = 1" :hide? T)
                        (("1" (typepred "q")
                          (("1" (expand "pure_quat")
                            (("1" (replaces -1)
                              (("1"
                                (rewrite* "one_times")
                                (("1"
                                  (rewrite* "zero_times")
                                  (("1"
                                    (case-replace
                                     " (q`y * q`y) + (q`z * q`z) + q`t * q`t + 0 = (q`y * q`y) + (q`z * q`z) + q`t * q`t ")
                                    (("1"
                                      (hide 2)
                                      (("1"
                                        (lemma "plus_zero")
                                        (("1" (inst?) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((QH_norm const-decl "nnreal" quaternions_Hamilton_extra nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (red_norm_charac formula-decl nil quaternions nil) nil
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (* const-decl "real" vectors_3D vectors)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (zero_times formula-decl nil ring nil)
    (plus_zero formula-decl nil ring nil)
    (one_times formula-decl nil ring_with_one nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (inv const-decl "{y | x * y = one AND y * x = one}" group nil)
    (sqv const-decl "nnreal" vectors_3D vectors)
    (pure_quat const-decl "set[quat]" quaternions_def nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (quat type-eq-decl nil quaternions_def nil)
    (norm const-decl "nnreal" vectors_3D vectors))
   shostak)))

