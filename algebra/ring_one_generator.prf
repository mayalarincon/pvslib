(ring_one_generator
 (IMP_ring_basic_properties_TCC1 0
  (IMP_ring_basic_properties_TCC1-1 nil 3842434630
   ("" (lemma "fullset_is_ring") (("" (propax) nil nil)) nil)
   ((fullset_is_ring formula-decl nil ring_one_generator nil)) nil
   (IMP_ring_basic_properties assuming
    "ring_basic_properties[ring_one_generator.T, ring_one_generator.+, ring_one_generator.*, ring_one_generator.zero].ring_basic_properties"
    "fullset_is_ring: ASSUMPTION ring_def[ring_basic_properties.T, ring_basic_properties.+, ring_basic_properties.*, ring_basic_properties.zero].ring?(sets[ring_basic_properties.T].fullset)")))
 (F_one_gen_TCC1 0
  (F_one_gen_TCC1-1 nil 3777300102
   ("" (skeep)
    (("" (typepred "R" "F(i)" "a" "G(i)")
      (("" (lemma "R_prod_star_closed")
        (("" (inst -1 "R" "F(i)" "a")
          (("" (assert)
            (("" (lemma "R_prod_star_closed")
              (("" (inst -1 "R" "F(i)*a" "G(i)")
                (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (ring? const-decl "bool" ring_def nil)
    (zero formal-const-decl "T" ring_one_generator nil)
    (* formal-const-decl "[T, T -> T]" ring_one_generator nil)
    (+ formal-const-decl "[T, T -> T]" ring_one_generator nil)
    (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil ring_one_generator nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (member const-decl "bool" sets nil)
    (R_prod_star_closed formula-decl nil ring_basic_properties nil))
   nil
   (F_one_gen subtype
    "ring_one_generator.*(ring_one_generator.*(ring_one_generator.F(ring_one_generator.i), ring_one_generator.a), ring_one_generator.G(ring_one_generator.i))"
    "(ring_one_generator.R)")))
 (gen_is_member_one_gen 0
  (gen_is_member_one_gen-1 nil 3800198020
   ("" (skosimp)
    (("" (expand "member")
      (("" (expand "one_gen")
        ((""
          (inst 1 "zero" "zero" "1" "(LAMBDA (i : nat) : zero)"
           "(LAMBDA (i : nat) : zero)" "1")
          (("1" (expand "F_one_gen")
            (("1" (expand "R_sigma")
              (("1" (rewrite zero_times)
                (("1" (rewrite times_zero)
                  (("1" (rewrite times_zero)
                    (("1" (expand "R_sigma")
                      (("1" (rewrite times_int_one)
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (typepred "R!1")
            (("2" (lemma zero_is_member_R)
              (("2" (inst -1 "R!1")
                (("2" (expand "member") (("2" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member const-decl "bool" sets nil) nil
    (ring nonempty-type-eq-decl nil ring nil)
    (ring? const-decl "bool" ring_def nil)
    (zero formal-const-decl "T" ring_one_generator nil)
    (* formal-const-decl "[T, T -> T]" ring_one_generator nil)
    (+ formal-const-decl "[T, T -> T]" ring_one_generator nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-nonempty-type-decl nil ring_one_generator nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (R_sigma def-decl "T" ring_basic_properties nil)
    (times_zero formula-decl nil ring nil)
    (plus_zero formula-decl nil ring nil)
    (zero_plus formula-decl nil ring nil)
    (times_int_one formula-decl nil ring_basic_properties nil)
    (zero_times formula-decl nil ring nil)
    (F_one_gen const-decl "[nat -> (R)]" ring_one_generator nil)
    (zero_is_member_R formula-decl nil ring_basic_properties nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (one_gen const-decl "set[(R)]" ring_one_generator nil))
   shostak))
 (one_gen_is_sum_closed_TCC1 0
  (one_gen_is_sum_closed_TCC1-1 nil 3778519654
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil ring_one_generator nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" ring_one_generator nil)
    (* formal-const-decl "[T, T -> T]" ring_one_generator nil)
    (zero formal-const-decl "T" ring_one_generator nil)
    (ring? const-decl "bool" ring_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (one_gen const-decl "set[(R)]" ring_one_generator nil)
    (member const-decl "bool" sets nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (plus_zero formula-decl nil ring nil)
    (restrict const-decl "R" restrict nil)
    (zero_plus formula-decl nil ring nil)
    (identity? const-decl "bool" operator_defs nil)
    (monad? const-decl "bool" monad_def nil)
    (associative? const-decl "bool" operator_defs nil)
    (monoid? const-decl "bool" monoid_def nil)
    (inv_exists? const-decl "bool" group_def nil)
    (group? const-decl "bool" group_def nil)
    (commutative? const-decl "bool" operator_defs nil)
    (abelian_group? const-decl "bool" group_def nil)
    (left_distributive? const-decl "bool" operator_defs_more nil)
    (right_distributive? const-decl "bool" operator_defs_more nil)
    (times const-decl "T" ring_basic_properties nil))
   nil
   (one_gen_is_sum_closed subtype
    "(ring_one_generator.+)(ring_one_generator.x, ring_one_generator.y)"
    "(ring_one_generator.R)")))
 (one_gen_is_sum_closed 0
  (one_gen_is_sum_closed-1 nil 3778519754
   ("" (skeep)
    (("" (typepred "x" "y")
      (("" (expand "one_gen")
        (("" (skeep)
          (("" (skeep)
            (("" (lemma "R_sigma_R_sigma")
              ((""
                (inst -1 "F_one_gen(R, a, F, G)"
                 " F_one_gen(R, a, F!1, G!1)" "0" "0" "m" "m!1")
                ((""
                  (inst 1 "r+r!1" "s + s!1" "n+n!1"
                   "LAMBDA(i:nat): IF (i >= 0 AND i <= m) THEN F(i)
                 ELSIF (i > m AND i <= m + (m!1 - 0) + 1)
                   THEN  F!1(i - m + 0 - 1)
                 ELSE zero ENDIF"
                   "LAMBDA(i:nat): IF (i >= 0 AND i <= m) THEN G(i)
                 ELSIF (i > m AND i <= m + (m!1 - 0) + 1)
                   THEN  G!1(i - m + 0 - 1)
                 ELSE zero ENDIF" "m+m!1+1")
                  (("1" (expand "F_one_gen")
                    (("1"
                      (case-replace "(LAMBDA (i_1: nat):
                  IF i_1 <= m THEN F(i_1)
                  ELSIF i_1 <= 1 + m!1 + m THEN F!1(i_1 - 1 - m)
                  ELSE zero
                  ENDIF
                   * a
                   *
                   IF i_1 <= m THEN G(i_1)
                   ELSIF i_1 <= 1 + m!1 + m THEN G!1(i_1 - 1 - m)
                   ELSE zero
                   ENDIF) = (LAMBDA (i: nat):
                 IF i <= m THEN F(i) * a * G(i)
                 ELSIF i <= 1 + m!1 + m
                   THEN F!1(i - 1 - m) * a * G!1(i - 1 - m)
                 ELSE zero
                 ENDIF)")
                      (("1" (hide -1)
                        (("1" (replaces -3)
                          (("1" (replaces -4)
                            (("1" (replace -1 1 rl)
                              (("1"
                                (hide -1)
                                (("1"
                                  (hide -)
                                  (("1"
                                    (name-replace
                                     "A"
                                     "R_sigma(0, m, LAMBDA (i: nat): F(i) * a * G(i))")
                                    (("1"
                                      (name-replace
                                       "B"
                                       " R_sigma(0, m!1, LAMBDA (i: nat): F!1(i) * a * G!1(i))")
                                      (("1"
                                        (rewrite "times_sum" :dir rl)
                                        (("1"
                                          (rewrite "left_distributive")
                                          (("1"
                                            (rewrite
                                             "right_distributive")
                                            (("1"
                                              (lemma
                                               "plus_associative")
                                              (("1"
                                                (inst
                                                 -1
                                                 "(r * a) + (r!1 * a)"
                                                 "(a * s)"
                                                 "(a * s!1)")
                                                (("1"
                                                  (replace -1 1 rl)
                                                  (("1"
                                                    (hide -1)
                                                    (("1"
                                                      (lemma
                                                       "plus_associative")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "(r * a)"
                                                         "(r!1 * a)"
                                                         "(a * s)")
                                                        (("1"
                                                          (replaces -1)
                                                          (("1"
                                                            (lemma
                                                             "plus_commutative")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "(r!1 * a)"
                                                               "(a * s)")
                                                              (("1"
                                                                (replaces
                                                                 -1)
                                                                (("1"
                                                                  (lemma
                                                                   "plus_associative")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "r * a + a * s"
                                                                     "times(a, n)"
                                                                     "A")
                                                                    (("1"
                                                                      (replaces
                                                                       -1)
                                                                      (("1"
                                                                        (lemma
                                                                         "plus_commutative")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "(times(a, n) + A)"
                                                                           "(r!1 * a + a * s!1 + times(a, n!1) + B)")
                                                                          (("1"
                                                                            (lemma
                                                                             "plus_associative")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "r * a + a * s"
                                                                               "(times(a, n) + A) "
                                                                               "(r!1 * a + a * s!1 + times(a, n!1) + B)")
                                                                              (("1"
                                                                                (replaces
                                                                                 -1)
                                                                                (("1"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "plus_associative")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "(r!1 * a + a * s!1 + times(a, n!1))"
                                                                                       "B"
                                                                                       "(times(a, n) + A)")
                                                                                      (("1"
                                                                                        (replaces
                                                                                         -1)
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "plus_commutative")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             "B"
                                                                                             "(times(a, n) + A)")
                                                                                            (("1"
                                                                                              (replaces
                                                                                               -1)
                                                                                              (("1"
                                                                                                (rewrite
                                                                                                 "plus_associative")
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "plus_associative")
                                                                                                  (("1"
                                                                                                    (rewrite
                                                                                                     "plus_associative")
                                                                                                    (("1"
                                                                                                      (rewrite
                                                                                                       "plus_associative")
                                                                                                      (("1"
                                                                                                        (rewrite
                                                                                                         "plus_associative")
                                                                                                        (("1"
                                                                                                          (rewrite
                                                                                                           "plus_associative")
                                                                                                          (("1"
                                                                                                            (rewrite
                                                                                                             "plus_associative")
                                                                                                            (("1"
                                                                                                              (rewrite
                                                                                                               "plus_associative")
                                                                                                              (("1"
                                                                                                                (rewrite
                                                                                                                 "plus_associative")
                                                                                                                (("1"
                                                                                                                  (rewrite
                                                                                                                   "plus_associative")
                                                                                                                  (("1"
                                                                                                                    (rewrite
                                                                                                                     "plus_associative")
                                                                                                                    (("1"
                                                                                                                      (rewrite
                                                                                                                       "plus_associative")
                                                                                                                      (("1"
                                                                                                                        (rewrite
                                                                                                                         "plus_associative")
                                                                                                                        (("1"
                                                                                                                          (rewrite
                                                                                                                           "plus_associative")
                                                                                                                          (("1"
                                                                                                                            (rewrite
                                                                                                                             "plus_associative")
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1)
                        (("2" (decompose-equality)
                          (("1" (grind) nil nil) ("2" (grind) nil nil))
                          nil))
                        nil)
                       ("3" (hide-all-but 1) (("3" (grind) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but 1)
                    (("2" (skosimp)
                      (("2" (lemma "zero_is_member_R")
                        (("2" (inst?) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil)
                   ("4" (hide-all-but 1)
                    (("4" (lemma "R_sum_star_closed")
                      (("4" (inst -1 "R" "s" "s!1")
                        (("4" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("5" (hide-all-but 1)
                    (("5" (lemma "R_sum_star_closed")
                      (("5" (inst -1 "R" "r" "r!1")
                        (("5" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((one_gen const-decl "set[(R)]" ring_one_generator nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (ring? const-decl "bool" ring_def nil)
    (zero formal-const-decl "T" ring_one_generator nil)
    (* formal-const-decl "[T, T -> T]" ring_one_generator nil)
    (+ formal-const-decl "[T, T -> T]" ring_one_generator nil)
    (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil ring_one_generator nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (R_sigma_R_sigma formula-decl nil ring_basic_properties nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil) nil
    nil nil nil nil
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) nil
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    nil
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (TRUE const-decl "bool" booleans nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (left_distributive formula-decl nil ring nil)
    (plus_associative formula-decl nil ring nil)
    (times const-decl "T" ring_basic_properties nil)
    (plus_commutative formula-decl nil ring nil)
    (right_distributive formula-decl nil ring nil)
    (times_sum formula-decl nil ring_basic_properties nil)
    (R_sigma def-decl "T" ring_basic_properties nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (times_zero formula-decl nil ring nil)
    (zero_times formula-decl nil ring nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (member const-decl "bool" sets nil)
    (zero_is_member_R formula-decl nil ring_basic_properties nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (R_sum_star_closed formula-decl nil ring_basic_properties nil)
    (F_one_gen const-decl "[nat -> (R)]" ring_one_generator nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (inv_one_gen_TCC1 0
  (inv_one_gen_TCC1-1 nil 3779125258
   ("" (skeep)
    (("" (lemma "inv_is_member_R")
      (("" (inst -1 "R" "x") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((zero formal-const-decl "T" ring_one_generator nil)
    (* formal-const-decl "[T, T -> T]" ring_one_generator nil)
    (+ formal-const-decl "[T, T -> T]" ring_one_generator nil)
    (T formal-nonempty-type-decl nil ring_one_generator nil)
    (inv_is_member_R formula-decl nil ring_basic_properties nil)
    (member const-decl "bool" sets nil)
    (one_gen const-decl "set[(R)]" ring_one_generator nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (ring? const-decl "bool" ring_def nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (inv_one_gen subtype
    "group[ring_one_generator.T, ring_one_generator.+, ring_one_generator.zero].inv(ring_one_generator.x)"
    "(ring_one_generator.R)")))
 (inv_one_gen 0
  (inv_one_gen-3 nil 3807036739
   ("" (skeep)
    (("" (typepred "x")
      (("" (expand "one_gen")
        (("" (skeep)
          ((""
            (inst 1 "inv(r)" "inv(s)" "-n" "LAMBDA(i:nat): inv(F(i))"
             "G" "m")
            (("1" (expand "F_one_gen")
              (("1" (replaces -2)
                (("1" (rewrite "negate_plus")
                  (("1" (rewrite "negate_plus")
                    (("1" (rewrite "negate_plus")
                      (("1" (hide -1)
                        (("1" (rewrite "R_sigma_inv")
                          (("1"
                            (case-replace
                             " (LAMBDA (i_1: nat): inv(F(i_1) * a * G(i_1))) = (LAMBDA (i_1: nat): inv(F(i_1)) * a * G(i_1))")
                            (("1"
                              (name-replace "S" "R_sigma(0, m,
                                (LAMBDA (i_1: nat): inv[T, +, zero](F(i_1)) * a * G(i_1)))")
                              (("1"
                                (hide -1)
                                (("1"
                                  (lemma "inv_times_neg")
                                  (("1"
                                    (inst -1 "-n" "a")
                                    (("1"
                                      (replaces -1)
                                      (("1"
                                        (case-replace "--n =n")
                                        (("1"
                                          (rewrite "plus_commutative")
                                          (("1"
                                            (lemma "plus_commutative")
                                            (("1"
                                              (inst
                                               -1
                                               "inv(times(a, n))"
                                               " (inv[T, +, zero](r * a) + inv(a * s))")
                                              (("1"
                                                (replaces -1)
                                                (("1"
                                                  (lemma
                                                   "plus_commutative")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "S"
                                                     "((inv[T, +, zero](r * a) + inv[T, +, zero](a * s)) +
                                 inv[T, +, zero](times(a, n)))")
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (rewrite
                                                         "negative_times")
                                                        (("1"
                                                          (rewrite
                                                           "times_negative")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2)
                              (("2"
                                (case
                                 "FORALL (i_1: nat):
                   inv(F(i_1) * a * G(i_1)) =  inv(F(i_1)) * a * G(i_1)")
                                (("1"
                                  (decompose-equality)
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (split)
                                      (("1"
                                        (inst -1 "i_1")
                                        (("1"
                                          (replace -1 1 rl)
                                          (("1"
                                            (rewrite
                                             "negate_is_right_inv")
                                            nil
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (inst -1 "i_1")
                                        (("2"
                                          (replace -1 1 rl)
                                          (("2"
                                            (rewrite
                                             "negate_is_left_inv")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (rewrite "negative_times")
                                      (("2"
                                        (rewrite "negative_times")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide -)
              (("2" (skosimp)
                (("2" (typepred "F(i!1)")
                  (("2" (lemma "inv_is_member_R")
                    (("2" (inst -1 "R" "F(i!1)")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (hide -)
              (("3" (lemma "inv_is_member_R")
                (("3" (inst -1 "R" "s") (("3" (grind) nil nil)) nil))
                nil))
              nil)
             ("4" (lemma "inv_is_member_R")
              (("4" (inst -1 "R" "r")
                (("4" (hide -2 -3) (("4" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((one_gen const-decl "set[(R)]" ring_one_generator nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (ring? const-decl "bool" ring_def nil)
    (zero formal-const-decl "T" ring_one_generator nil)
    (* formal-const-decl "[T, T -> T]" ring_one_generator nil)
    (+ formal-const-decl "[T, T -> T]" ring_one_generator nil)
    (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil ring_one_generator nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (member const-decl "bool" sets nil)
    (inv_is_member_R formula-decl nil ring_basic_properties nil)
    (F_one_gen const-decl "[nat -> (R)]" ring_one_generator nil)
    (R_sigma def-decl "T" ring_basic_properties nil)
    (times const-decl "T" ring_basic_properties nil)
    (negate_plus formula-decl nil ring nil)
    (R_sigma_inv formula-decl nil ring_basic_properties nil) nil nil
    (negate_is_right_inv formula-decl nil ring nil)
    (negate_is_left_inv formula-decl nil ring nil)
    (inv_times_neg formula-decl nil ring_basic_properties nil)
    (plus_commutative formula-decl nil ring nil)
    (times_negative formula-decl nil ring nil)
    (negative_times formula-decl nil ring nil)
    (TRUE const-decl "bool" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil) nil nil nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (inv const-decl "{y | x * y = one AND y * x = one}" group nil) nil
    (minus_int_is_int application-judgement "int" integers nil))
   nil)
  (inv_one_gen-2 nil 3779127143
   ("" (skeep)
    (("" (typepred "x")
      (("" (expand "one_gen")
        (("" (skeep)
          (("" (inst 1 "-r" "-s" "-n" "LAMBDA(i:nat): -F(i)" "G" "m")
            (("1" (expand "F_one_gen")
              (("1" (replaces -2)
                (("1" (rewrite "negate_plus")
                  (("1" (rewrite "negate_plus")
                    (("1" (rewrite "negate_plus")
                      (("1" (hide -1)
                        (("1" (rewrite "R_sigma_inv")
                          (("1"
                            (case-replace
                             " (LAMBDA (i_1: nat): inv(F(i_1) * a * G(i_1))) = (LAMBDA (i_1: nat): inv(F(i_1)) * a * G(i_1))")
                            (("1"
                              (name-replace "S" "R_sigma(0, m,
                          (LAMBDA (i_1: nat): inv[T, +, zero](F(i_1)) * a * G(i_1)))")
                              (("1"
                                (hide -1)
                                (("1"
                                  (lemma "inv_times_neg")
                                  (("1"
                                    (inst -1 "-n" "a")
                                    (("1"
                                      (replaces -1)
                                      (("1"
                                        (case-replace "--n =n")
                                        (("1"
                                          (rewrite "plus_commutative")
                                          (("1"
                                            (lemma "plus_commutative")
                                            (("1"
                                              (inst
                                               -1
                                               "inv(times(a, n))"
                                               " (inv[T, +, zero](r * a) + inv(a * s))")
                                              (("1"
                                                (replaces -1)
                                                (("1"
                                                  (lemma
                                                   "plus_commutative")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "S"
                                                     "((inv[T, +, zero](r * a) + inv[T, +, zero](a * s)) +
                         inv[T, +, zero](times(a, n)))")
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (rewrite
                                                         "negative_times")
                                                        (("1"
                                                          (rewrite
                                                           "times_negative")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2)
                              (("2"
                                (case
                                 "FORALL (i_1: nat):
        inv(F(i_1) * a * G(i_1)) =  inv(F(i_1)) * a * G(i_1)")
                                (("1"
                                  (decompose-equality)
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (split)
                                      (("1"
                                        (inst -1 "i_1")
                                        (("1"
                                          (replace -1 1 rl)
                                          (("1"
                                            (rewrite
                                             "negate_is_right_inv")
                                            nil
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (inst -1 "i_1")
                                        (("2"
                                          (replace -1 1 rl)
                                          (("2"
                                            (rewrite
                                             "negate_is_left_inv")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (rewrite "negative_times")
                                      (("2"
                                        (rewrite "negative_times")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide -)
              (("2" (skosimp)
                (("2" (typepred "F(i!1)")
                  (("2" (lemma "inv_is_member_R")
                    (("2" (inst -1 "R" "F(i!1)")
                      (("2" (assert)
                        (("2" (expand "-") (("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (hide -)
              (("3" (lemma "inv_is_member_R")
                (("3" (inst -1 "R" "s") (("3" (grind) nil nil)) nil))
                nil))
              nil)
             ("4" (lemma "inv_is_member_R")
              (("4" (inst -1 "R" "r")
                (("4" (hide -2 -3) (("4" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((inv_is_member_R formula-decl nil ring_basic_properties nil)
    (R_sigma def-decl "T" ring_basic_properties nil)
    (times const-decl "T" ring_basic_properties nil)
    (R_sigma_inv formula-decl nil ring_basic_properties nil)
    (inv_times_neg formula-decl nil ring_basic_properties nil))
   nil)
  (inv_one_gen-1 nil 3779125259
   ("" (skeep)
    (("" (typepred "x")
      (("" (expand "one_gen")
        (("" (skeep)
          (("" (inst 1 "-r" "-s" "-n" "LAMBDA(i:nat): -F(i)" "G" "m")
            (("1" (expand "F_one_gen")
              (("1" (replaces -2)
                (("1" (rewrite "negate_plus")
                  (("1" (rewrite "negate_plus")
                    (("1" (rewrite "negate_plus")
                      (("1" (hide -1)
                        (("1" (rewrite "R_sigma_inv")
                          (("1"
                            (case-replace
                             " (LAMBDA (i_1: nat): inv(F(i_1) * a * G(i_1))) = (LAMBDA (i_1: nat): inv(F(i_1)) * a * G(i_1))")
                            (("1"
                              (name-replace "S" "R_sigma(0, m,
              (LAMBDA (i_1: nat): inv[T, +, zero](F(i_1)) * a * G(i_1)))")
                              (("1"
                                (hide -1)
                                (("1"
                                  (lemma "inv_times_neg")
                                  (("1"
                                    (inst -1 "-n" "a")
                                    (("1"
                                      (replaces -1)
                                      (("1"
                                        (case-replace "--n =n")
                                        (("1"
                                          (rewrite "plus_commutative")
                                          (("1"
                                            (lemma "plus_commutative")
                                            (("1"
                                              (inst
                                               -1
                                               "inv(times(a, n))"
                                               " (inv[T, +, zero](r * a) + inv(a * s))")
                                              (("1"
                                                (replaces -1)
                                                (("1"
                                                  (lemma
                                                   "plus_commutative")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "S"
                                                     "((inv[T, +, zero](r * a) + inv[T, +, zero](a * s)) +
         inv[T, +, zero](times(a, n)))")
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (rewrite
                                                         "negative_times"
                                                         :dir
                                                         rl)
                                                        (("1"
                                                          (rewrite
                                                           "times_negative"
                                                           :dir
                                                           rl)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2)
                              (("2"
                                (decompose-equality)
                                (("2"
                                  (rewrite "negative_times")
                                  (("2"
                                    (rewrite "negative_times")
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide -)
              (("2" (skosimp)
                (("2" (typepred "F(i!1)")
                  (("2" (lemma "inv_is_member_R")
                    (("2" (inst -1 "R" "F(i!1)")
                      (("2" (assert)
                        (("2" (expand "-") (("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (hide -)
              (("3" (lemma "inv_is_member_R")
                (("3" (inst -1 "R" "s") (("3" (grind) nil nil)) nil))
                nil))
              nil)
             ("4" (lemma "inv_is_member_R")
              (("4" (inst -1 "R" "r")
                (("4" (hide -2 -3) (("4" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((inv_is_member_R formula-decl nil ring_basic_properties nil)
    (inv_times_neg formula-decl nil ring_basic_properties nil)
    (R_sigma_inv formula-decl nil ring_basic_properties nil)
    (times const-decl "T" ring_basic_properties nil)
    (R_sigma def-decl "T" ring_basic_properties nil))
   shostak))
 (one_gen_is_ideal 0
  (one_gen_is_ideal-1 nil 3779211333
   ("" (skeep)
    (("" (rewrite "ideal_equiv")
      (("" (split)
        (("1" (expand "nonempty?")
          (("1" (expand "empty?")
            (("1" (inst -1 "a")
              (("1" (expand "member")
                (("1" (expand "extend")
                  (("1" (expand "one_gen")
                    (("1"
                      (inst 1 "zero" "zero" "1" "LAMBDA(i:nat): zero"
                       "LAMBDA(i:nat): zero" "0")
                      (("1" (expand "R_sigma")
                        (("1" (expand "F_one_gen")
                          (("1" (rewrite "times_int_one")
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (typepred "R")
                        (("2" (lemma "zero_is_member_R")
                          (("2" (inst?) (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "subset?")
          (("2" (skeep)
            (("2" (expand "member")
              (("2" (expand "extend") (("2" (prop) nil nil)) nil))
              nil))
            nil))
          nil)
         ("3" (skeep)
          (("3" (expand "extend")
            (("3" (prop)
              (("1" (typepred "x" "y")
                (("1" (expand "extend")
                  (("1" (prop)
                    (("1" (lemma "inv_one_gen")
                      (("1" (inst -1 "R" "a" "y")
                        (("1" (lemma "one_gen_is_sum_closed")
                          (("1" (inst -1 "R" "a" "x" "inv(y)")
                            (("1" (split)
                              (("1"
                                (hide-all-but (-2 1))
                                (("1"
                                  (typepred "R")
                                  (("1"
                                    (lemma "inv_is_member_R")
                                    (("1"
                                      (inst -1 "R" "y")
                                      (("1"
                                        (expand "member")
                                        (("1"
                                          (hide -2)
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but (-1 1))
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "x" "y")
                (("2" (expand "extend")
                  (("2" (prop)
                    (("2" (hide -2 -4)
                      (("2" (lemma "R_sum_star_closed")
                        (("2" (inst -1 "R" "x" "inv(y)")
                          (("2" (assert)
                            (("2" (hide -2 2)
                              (("2"
                                (lemma "inv_is_member_R")
                                (("2"
                                  (inst -1 "R" "y")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (typepred "x" "r")
                (("3" (expand "extend")
                  (("3" (prop)
                    (("3" (expand "one_gen")
                      (("3" (skeep)
                        (("3"
                          (inst 1 "zero" "s * r + times(r,n)" "0"
                           "LAMBDA (i: nat):
                            IF i <= m THEN F(i)
                            ELSIF i = 1 + m THEN r!1
                            ELSE zero
                            ENDIF" " LAMBDA (i: nat):
                            IF i <= m THEN G(i) * r
                            ELSIF i = 1 + m THEN r
                            ELSE zero
                            ENDIF" "m+1")
                          (("1" (assert)
                            (("1" (replaces -2)
                              (("1"
                                (rewrite "left_distributive")
                                (("1"
                                  (rewrite "right_distributive")
                                  (("1"
                                    (expand "times" 1 3)
                                    (("1"
                                      (expand "^")
                                      (("1"
                                        (expand "power")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "R_sigma" 1 2)
                                            (("1"
                                              (expand "F_one_gen" 1 3)
                                              (("1"
                                                (hide -1 -3)
                                                (("1"
                                                  (rewrite
                                                   "left_distributive")
                                                  (("1"
                                                    (rewrite
                                                     "left_distributive")
                                                    (("1"
                                                      (rewrite
                                                       "left_times")
                                                      (("1"
                                                        (rewrite
                                                         "right_times"
                                                         :dir
                                                         rl)
                                                        (("1"
                                                          (rewrite
                                                           "R_sigma_ast")
                                                          (("1"
                                                            (case-replace
                                                             "R_sigma(0, m,
                 F_one_gen(R, a,
                           LAMBDA (i: nat):
                             IF i <= m THEN F(i)
                             ELSIF i = 1 + m THEN r!1
                             ELSE zero
                             ENDIF,
                           LAMBDA (i: nat):
                             IF i <= m THEN G(i) * r
                             ELSIF i = 1 + m THEN r
                             ELSE zero
                             ENDIF))  = R_sigma(0, m, LAMBDA i: F_one_gen(R, a, F, G)(i) * r)")
                                                            (("1"
                                                              (hide -1)
                                                              (("1"
                                                                (rewrite
                                                                 "plus_associative")
                                                                (("1"
                                                                  (lemma
                                                                   "plus_commutative")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "(r!1 * a * r)"
                                                                     "(a * s * r) + a * times(r, n)")
                                                                    (("1"
                                                                      (replaces
                                                                       -1)
                                                                      (("1"
                                                                        (lemma
                                                                         "plus_commutative")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "R_sigma(0, m, LAMBDA i: F_one_gen(R, a, F, G)(i) * r)"
                                                                           " r!1 * a * r")
                                                                          (("1"
                                                                            (replaces
                                                                             -1)
                                                                            (("1"
                                                                              (rewrite
                                                                               "plus_associative")
                                                                              (("1"
                                                                                (rewrite
                                                                                 "plus_associative")
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "plus_associative")
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "plus_associative")
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       "times_associative")
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (lemma
                                                                 "R_sigma_eq")
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   " F_one_gen(R, a,
                        LAMBDA (i: nat):
                          IF i <= m THEN F(i)
                          ELSIF i = 1 + m THEN r!1
                          ELSE zero
                          ENDIF,
                        LAMBDA (i: nat):
                          IF i <= m THEN G(i) * r
                          ELSIF i = 1 + m THEN r
                          ELSE zero
                          ENDIF)"
                                                                   "LAMBDA i: F_one_gen(R, a, F, G)(i) * r"
                                                                   "m"
                                                                   "0")
                                                                  (("1"
                                                                    (case
                                                                     " (FORALL (n: subrange(0, m)):
         F_one_gen(R, a,
                   LAMBDA (i: nat):
                     IF i <= m THEN F(i)
                     ELSIF i = 1 + m THEN r!1
                     ELSE zero
                     ENDIF,
                   LAMBDA (i: nat):
                     IF i <= m THEN G(i) * r
                     ELSIF i = 1 + m THEN r
                     ELSE zero
                     ENDIF)
                  (n)
          = F_one_gen(R, a, F, G)(n) * r)")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       -1
                                                                       2)
                                                                      (("2"
                                                                        (skeep)
                                                                        (("2"
                                                                          (grind)
                                                                          (("2"
                                                                            (rewrite
                                                                             "times_associative")
                                                                            (("2"
                                                                              (rewrite
                                                                               "times_associative")
                                                                              (("2"
                                                                                (rewrite
                                                                                 "times_associative")
                                                                                (("2"
                                                                                  (rewrite
                                                                                   "times_associative")
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (hide-all-but
                                                                       (-2
                                                                        1))
                                                                      (("3"
                                                                        (skeep)
                                                                        (("3"
                                                                          (typepred
                                                                           "G(i)")
                                                                          (("3"
                                                                            (lemma
                                                                             "R_prod_star_closed")
                                                                            (("3"
                                                                              (inst
                                                                               -1
                                                                               "R"
                                                                               "G(i)"
                                                                               "r")
                                                                              (("3"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("4"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("4"
                                                                        (skeep)
                                                                        (("4"
                                                                          (lemma
                                                                           "zero_is_member_R")
                                                                          (("4"
                                                                            (inst
                                                                             -1
                                                                             "R")
                                                                            (("4"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     2)
                                                                    (("2"
                                                                      (lemma
                                                                       "R_prod_star_closed")
                                                                      (("2"
                                                                        (skeep)
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "R"
                                                                           "G(i)"
                                                                           "r")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (hide
                                                                     -1
                                                                     2)
                                                                    (("3"
                                                                      (skeep)
                                                                      (("3"
                                                                        (lemma
                                                                         "zero_is_member_R")
                                                                        (("3"
                                                                          (inst
                                                                           -1
                                                                           "R")
                                                                          (("3"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (hide 2)
                                                              (("3"
                                                                (skeep)
                                                                (("3"
                                                                  (lemma
                                                                   "R_prod_star_closed")
                                                                  (("3"
                                                                    (inst
                                                                     -1
                                                                     "R"
                                                                     "G(i)"
                                                                     "r")
                                                                    (("3"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("4"
                                                              (hide
                                                               -1
                                                               2)
                                                              (("4"
                                                                (skeep)
                                                                (("4"
                                                                  (lemma
                                                                   "zero_is_member_R")
                                                                  (("4"
                                                                    (inst
                                                                     -1
                                                                     "R")
                                                                    (("4"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skeep)
                            (("2" (hide-all-but (-4 1))
                              (("2"
                                (lemma "R_prod_star_closed")
                                (("2"
                                  (inst -1 "R" "G(i)" "r")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide-all-but 1)
                            (("3" (skeep)
                              (("3"
                                (lemma "zero_is_member_R")
                                (("3"
                                  (inst?)
                                  (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("4" (typepred "s")
                            (("4" (hide-all-but (-1 -4 1))
                              (("4"
                                (case
                                 "R(s*r) AND R(times[T, +, *, zero](r, n))")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (lemma "R_sum_star_closed")
                                    (("1"
                                      (inst
                                       -1
                                       "R"
                                       "s * r"
                                       "times[T, +, *, zero](r, n)")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (lemma "R_prod_star_closed")
                                    (("2"
                                      (inst -1 "R" "s" "r")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (lemma "times_member")
                                          (("2"
                                            (inst -1 "R" "n" "r")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("5" (hide-all-but 1)
                            (("5" (lemma "zero_is_member_R")
                              (("5"
                                (inst?)
                                (("5" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (typepred "x" "r")
                (("4" (expand "extend")
                  (("4" (prop)
                    (("4" (hide -2)
                      (("4" (lemma "R_prod_star_closed")
                        (("4" (inst -1 "R" "x" "r")
                          (("4" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("5" (typepred "x")
                (("5" (expand "extend")
                  (("5" (prop)
                    (("5" (expand "one_gen")
                      (("5" (skeep)
                        (("5" (hide -1 -3)
                          (("5" (replaces -1)
                            (("5"
                              (case "FORALL (i: nat): i <= m IMPLIES R(r * F(i))")
                              (("1"
                                (case "R(zero)")
                                (("1"
                                  (inst
                                   1
                                   "r*r!1 + times(r,n)"
                                   "zero"
                                   "0"
                                   "LAMBDA (i:nat): IF i>= 0 AND i<=m THEN r* F(i)
                                                ELSIF i = m+1 THEN r ELSE zero ENDIF"
                                   "LAMBDA (i:nat): IF i>= 0 AND i<=m THEN G(i)
          ELSIF i = m+1 THEN s ELSE zero ENDIF"
                                   "m+1")
                                  (("1"
                                    (rewrite "right_distributive")
                                    (("1"
                                      (rewrite "right_distributive")
                                      (("1"
                                        (rewrite "right_distributive")
                                        (("1"
                                          (rewrite "left_distributive")
                                          (("1"
                                            (expand "times" 1 3)
                                            (("1"
                                              (expand "^")
                                              (("1"
                                                (expand "power")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand
                                                     "R_sigma"
                                                     1
                                                     2)
                                                    (("1"
                                                      (expand
                                                       "F_one_gen"
                                                       1
                                                       3)
                                                      (("1"
                                                        (rewrite
                                                         "ast_R_sigma")
                                                        (("1"
                                                          (case-replace
                                                           "R_sigma(0, m,
                 F_one_gen(R, a,
                           LAMBDA (i: nat):
                             IF i <= m THEN r * F(i)
                             ELSIF i = 1 + m THEN r
                             ELSE zero
                             ENDIF,
                           LAMBDA (i: nat):
                             IF i <= m THEN G(i)
                             ELSIF i = 1 + m THEN s
                             ELSE zero
                             ENDIF)) =  R_sigma(0, m, LAMBDA i: r * F_one_gen(R, a, F, G)(i))")
                                                          (("1"
                                                            (hide -1)
                                                            (("1"
                                                              (rewrite
                                                               "plus_associative")
                                                              (("1"
                                                                (lemma
                                                                 "plus_commutative")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "(r * (a * s))"
                                                                   "(r * times(a, n))")
                                                                  (("1"
                                                                    (replaces
                                                                     -1)
                                                                    (("1"
                                                                      (lemma
                                                                       "plus_commutative")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "R_sigma(0, m, LAMBDA i: r * F_one_gen(R, a, F, G)(i))"
                                                                         " r * a * s")
                                                                        (("1"
                                                                          (replaces
                                                                           -1)
                                                                          (("1"
                                                                            (rewrite
                                                                             "right_times")
                                                                            (("1"
                                                                              (rewrite
                                                                               "left_times"
                                                                               :dir
                                                                               rl)
                                                                              (("1"
                                                                                (rewrite
                                                                                 "plus_associative")
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "plus_associative")
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "plus_associative")
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       "times_associative")
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "times_associative")
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (lemma
                                                               "R_sigma_eq")
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "F_one_gen(R, a,
                        LAMBDA (i: nat):
                          IF i <= m THEN r * F(i)
                          ELSIF i = 1 + m THEN r
                          ELSE zero
                          ENDIF,
                        LAMBDA (i: nat):
                          IF i <= m THEN G(i)
                          ELSIF i = 1 + m THEN s
                          ELSE zero
                          ENDIF)"
                                                                 "LAMBDA i: r * F_one_gen(R, a, F, G)(i)"
                                                                 "m"
                                                                 "0")
                                                                (("2"
                                                                  (case
                                                                   "(FORALL (n: subrange(0, m)):
         F_one_gen(R, a,
                   LAMBDA (i: nat):
                     IF i <= m THEN r * F(i)
                     ELSIF i = 1 + m THEN r
                     ELSE zero
                     ENDIF,
                   LAMBDA (i: nat):
                     IF i <= m THEN G(i)
                     ELSIF i = 1 + m THEN s
                     ELSE zero
                     ENDIF)
                  (n)
          = r * F_one_gen(R, a, F, G)(n))")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     -1
                                                                     2)
                                                                    (("2"
                                                                      (skeep)
                                                                      (("2"
                                                                        (expand
                                                                         "F_one_gen")
                                                                        (("2"
                                                                          (rewrite
                                                                           "times_associative")
                                                                          (("2"
                                                                            (rewrite
                                                                             "times_associative")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (hide
                                                                     -1
                                                                     2)
                                                                    (("3"
                                                                      (skeep)
                                                                      (("3"
                                                                        (inst
                                                                         -3
                                                                         "i")
                                                                        (("3"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (skeep) nil nil)
                                   ("3"
                                    (hide -)
                                    (("3"
                                      (case
                                       "R(r*r!1) AND R(times[T, +, *, zero](r, n))")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (lemma "R_sum_star_closed")
                                          (("1"
                                            (inst
                                             -1
                                             "R"
                                             "r * r!1"
                                             " times[T, +, *, zero](r, n)")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (typepred "r" "r!1")
                                          (("2"
                                            (lemma
                                             "R_prod_star_closed")
                                            (("2"
                                              (inst -1 "R" "r" "r!1")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (lemma
                                                   "times_member")
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "R"
                                                     "n"
                                                     "r")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide -1 2)
                                  (("2"
                                    (lemma "zero_is_member_R")
                                    (("2"
                                      (inst?)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (skeep)
                                  (("2"
                                    (lemma "R_prod_star_closed")
                                    (("2"
                                      (inst -1 "R" "r" "F(i)")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("6" (typepred "r" "x")
                (("6" (expand "extend")
                  (("6" (prop)
                    (("6" (lemma "R_prod_star_closed")
                      (("6" (inst -1 "R" "r" "x")
                        (("6" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ideal_equiv formula-decl nil ring_ideal nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (ring? const-decl "bool" ring_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (FALSE const-decl "bool" booleans nil)
    (extend const-decl "R" extend nil)
    (one_gen const-decl "set[(R)]" ring_one_generator nil)
    (T formal-nonempty-type-decl nil ring_one_generator nil)
    (+ formal-const-decl "[T, T -> T]" ring_one_generator nil)
    (* formal-const-decl "[T, T -> T]" ring_one_generator nil)
    (zero formal-const-decl "T" ring_one_generator nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (inv_one_gen formula-decl nil ring_one_generator nil)
    (one_gen_is_sum_closed formula-decl nil ring_one_generator nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (inv const-decl "{y | x * y = one AND y * x = one}" group nil) nil
    nil (inv_is_member_R formula-decl nil ring_basic_properties nil)
    (R_sum_star_closed formula-decl nil ring_basic_properties nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    nil (times const-decl "T" ring_basic_properties nil) nil nil
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil) nil
    (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) nil
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (TRUE const-decl "bool" booleans nil)
    (right_distributive formula-decl nil ring nil)
    (^ const-decl "T" group nil)
    (left_times formula-decl nil ring_basic_properties nil)
    (R_sigma_ast formula-decl nil ring_basic_properties nil)
    (R_prod_star_closed formula-decl nil ring_basic_properties nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (subrange type-eq-decl nil integers nil)
    (R_sigma_eq formula-decl nil ring_basic_properties nil)
    (plus_commutative formula-decl nil ring nil)
    (times_associative formula-decl nil ring nil)
    (plus_associative formula-decl nil ring nil)
    (right_times formula-decl nil ring_basic_properties nil)
    (power def-decl "T" monoid_def nil)
    (left_distributive formula-decl nil ring nil)
    (times_member formula-decl nil ring_basic_properties nil) nil nil
    nil nil (ast_R_sigma formula-decl nil ring_basic_properties nil)
    (subset? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil) nil
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (F_one_gen const-decl "[nat -> (R)]" ring_one_generator nil)
    (zero_times formula-decl nil ring nil)
    (times_zero formula-decl nil ring nil)
    (plus_zero formula-decl nil ring nil)
    (zero_plus formula-decl nil ring nil)
    (times_int_one formula-decl nil ring_basic_properties nil)
    (R_sigma def-decl "T" ring_basic_properties nil)
    (zero_is_member_R formula-decl nil ring_basic_properties nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil))
   shostak))
 (R_sigma_of_comm_factor_of_gen 0
  (R_sigma_of_comm_factor_of_gen-1 nil 3779127882
   ("" (skeep)
    (("" (expand "F_one_gen")
      ((""
        (case-replace
         "(LAMBDA (i: nat): F(i) * a * G(i)) = (LAMBDA (i: nat): F(i) * G(i)* a)")
        (("1" (rewrite "R_sigma_ast" :dir rl)
          (("1"
            (inst 1 "  R_sigma(0, m, LAMBDA (i: nat): F(i) * G(i))")
            (("1" (hide -)
              (("1" (generalize "m" "m")
                (("1" (induct "m")
                  (("1" (expand "R_sigma")
                    (("1" (lemma "R_prod_star_closed")
                      (("1" (inst -1 "R" "F(0)" "G(0)")
                        (("1" (assert) nil nil)
                         ("2" (typepred "R")
                          (("2" (expand "commutative_ring?")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skosimp)
                    (("2" (expand "R_sigma" 1)
                      (("2" (lemma "R_sum_star_closed")
                        (("2"
                          (inst -1 "R"
                           "R_sigma(0, j!1, LAMBDA (i: nat): F(i) * G(i))"
                           " F(1 + j!1) * G(1 + j!1)")
                          (("1" (assert)
                            (("1" (hide -1 2)
                              (("1"
                                (lemma "R_prod_star_closed")
                                (("1"
                                  (inst
                                   -1
                                   "R"
                                   "F(1 + j!1)"
                                   "G(1 + j!1)")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (typepred "R")
                                      (("2"
                                        (expand "commutative_ring?")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (typepred "R")
                            (("2" (expand "commutative_ring?")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (decompose-equality)
            (("2" (typepred "R")
              (("2" (expand "commutative_ring?")
                (("2" (flatten)
                  (("2" (expand "commutative?")
                    (("2" (inst -2 "a" "G(x!1)")
                      (("2" (expand "restrict")
                        (("2" (rewrite "times_associative")
                          (("2" (replaces -2)
                            (("2" (rewrite "times_associative") nil
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((F_one_gen const-decl "[nat -> (R)]" ring_one_generator nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (times_associative formula-decl nil ring nil)
    (TRUE const-decl "bool" booleans nil)
    (restrict const-decl "R" restrict nil)
    (commutative? const-decl "bool" operator_defs nil)
    (R_sigma_ast formula-decl nil ring_basic_properties nil)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (R_prod_star_closed formula-decl nil ring_basic_properties nil)
    (member const-decl "bool" sets nil)
    (ring? const-decl "bool" ring_def nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (R_sum_star_closed formula-decl nil ring_basic_properties nil) nil
    nil nil nil (R_sigma def-decl "T" ring_basic_properties nil)
    (commutative_ring? const-decl "bool" ring_def nil)
    (zero formal-const-decl "T" ring_one_generator nil)
    (+ formal-const-decl "[T, T -> T]" ring_one_generator nil)
    (set type-eq-decl nil sets nil)
    (* formal-const-decl "[T, T -> T]" ring_one_generator nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (T formal-nonempty-type-decl nil ring_one_generator nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (commutative_one_gen_charac 0
  (commutative_one_gen_charac-2 nil 3779129429
   ("" (skosimp)
    (("" (decompose-equality)
      (("" (iff)
        (("" (expand "one_gen")
          (("" (expand "commutative_one_gen")
            (("" (prop)
              (("1" (skeep)
                (("1" (lemma "R_sigma_of_comm_factor_of_gen")
                  (("1" (inst -1 "R!1" "a!1" "F" "G" "m")
                    (("1" (skeep)
                      (("1" (replaces -1)
                        (("1" (inst 1 "r + s + b" "n")
                          (("1" (rewrite "left_distributive")
                            (("1" (rewrite "left_distributive")
                              (("1"
                                (typepred "R!1")
                                (("1"
                                  (expand "commutative_ring?")
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand "commutative?")
                                      (("1"
                                        (inst -2 "s" "a!1")
                                        (("1"
                                          (expand "restrict")
                                          (("1"
                                            (replace -2 -3 rl)
                                            (("1"
                                              (lemma
                                               "plus_commutative")
                                              (("1"
                                                (inst
                                                 -1
                                                 "times(a!1, n)"
                                                 "b * a!1")
                                                (("1"
                                                  (rewrite
                                                   "plus_associative"
                                                   -4)
                                                  (("1"
                                                    (rewrite
                                                     "plus_associative"
                                                     -4)
                                                    (("1"
                                                      (rewrite
                                                       "plus_associative"
                                                       -4)
                                                      (("1"
                                                        (replaces -1)
                                                        (("1"
                                                          (hide-all-but
                                                           (-3 1))
                                                          (("1"
                                                            (rewrite
                                                             "plus_associative")
                                                            (("1"
                                                              (rewrite
                                                               "plus_associative")
                                                              (("1"
                                                                (rewrite
                                                                 "plus_associative")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (lemma "R_sum_star_closed")
                            (("2" (hide -2)
                              (("2"
                                (inst -1 "R!1" "r+s" "b")
                                (("1"
                                  (assert)
                                  (("1"
                                    (hide 2)
                                    (("1"
                                      (lemma "R_sum_star_closed")
                                      (("1"
                                        (inst -1 "R!1" "r" "s")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (typepred "R!1")
                                            (("2"
                                              (expand
                                               "commutative_ring?")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (typepred "R!1")
                                  (("2"
                                    (expand "commutative_ring?")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "R!1")
                (("2" (expand "commutative_ring?")
                  (("2" (flatten)
                    (("2" (skeep)
                      (("2"
                        (inst 1 "r" "zero" "n" "LAMBDA (i:nat): zero"
                         "LAMBDA (i:nat): zero" "0")
                        (("1" (expand "R_sigma")
                          (("1" (expand "F_one_gen")
                            (("1" (assert) nil nil)) nil))
                          nil)
                         ("2" (hide -2 -3)
                          (("2" (lemma "zero_is_member_R")
                            (("2" (inst?) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ring nonempty-type-eq-decl nil ring nil)
    (ring? const-decl "bool" ring_def nil)
    (one_gen const-decl "set[(R)]" ring_one_generator nil)
    (commutative_one_gen const-decl "set[(R)]" ring_one_generator nil)
    (commutative_ring? const-decl "bool" ring_def nil)
    (zero formal-const-decl "T" ring_one_generator nil)
    (* formal-const-decl "[T, T -> T]" ring_one_generator nil)
    (+ formal-const-decl "[T, T -> T]" ring_one_generator nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-nonempty-type-decl nil ring_one_generator nil)
    (R_sigma_of_comm_factor_of_gen formula-decl nil ring_one_generator
     nil)
    nil nil nil nil (commutative? const-decl "bool" operator_defs nil)
    (restrict const-decl "R" restrict nil)
    (plus_commutative formula-decl nil ring nil)
    (plus_associative formula-decl nil ring nil)
    (times const-decl "T" ring_basic_properties nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (left_distributive formula-decl nil ring nil)
    (member const-decl "bool" sets nil)
    (R_sum_star_closed formula-decl nil ring_basic_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (zero_is_member_R formula-decl nil ring_basic_properties nil)
    (R_sigma def-decl "T" ring_basic_properties nil)
    (times_zero formula-decl nil ring nil)
    (plus_zero formula-decl nil ring nil)
    (zero_times formula-decl nil ring nil)
    (F_one_gen const-decl "[nat -> (R)]" ring_one_generator nil))
   nil)
  (commutative_one_gen_charac-1 nil 3779129050 ("" (postpone) nil nil)
   nil shostak))
 (commutative_one_gen_is_ideal 0
  (commutative_one_gen_is_ideal-1 nil 3779131340
   ("" (skosimp)
    (("" (lemma "commutative_one_gen_charac")
      (("" (inst?)
        (("" (replace -1 1 rl)
          (("" (rewrite "one_gen_is_ideal") nil nil)) nil))
        nil))
      nil))
    nil)
   ((commutative_one_gen_charac formula-decl nil ring_one_generator
     nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (ring? const-decl "bool" ring_def nil)
    (one_gen_is_ideal formula-decl nil ring_one_generator nil)
    (commutative_ring? const-decl "bool" ring_def nil)
    (zero formal-const-decl "T" ring_one_generator nil)
    (* formal-const-decl "[T, T -> T]" ring_one_generator nil)
    (+ formal-const-decl "[T, T -> T]" ring_one_generator nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-nonempty-type-decl nil ring_one_generator nil))
   nil))
 (F_one_gen_r_comm 0
  (F_one_gen_r_comm-1 nil 3808754879
   ("" (skosimp)
    (("" (expand "member")
      (("" (expand "center")
        (("" (expand "extend")
          (("" (decompose-equality)
            (("1" (inst -1 "G!1(x!1)")
              (("1" (rewrite times_associative)
                (("1" (replaces -1 1)
                  (("1" (expand "F_one_gen")
                    (("1" (rewrite times_associative) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp)
              (("2" (typepred "F!1(i!1)" "G!1(i!1)" "a!1")
                (("2" (lemma R_prod_star_closed)
                  (("2" (inst -1 "R!1" "F!1(i!1) * G!1(i!1)" "a!1")
                    (("2" (lemma R_prod_star_closed)
                      (("2" (inst -1 "R!1" "F!1(i!1)" "G!1(i!1)")
                        (("2" (expand "member")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member const-decl "bool" sets nil)
    (extend const-decl "R" extend nil)
    (R_prod_star_closed formula-decl nil ring_basic_properties nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (times_associative formula-decl nil ring nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-nonempty-type-decl nil ring_one_generator nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" ring_one_generator nil)
    (* formal-const-decl "[T, T -> T]" ring_one_generator nil)
    (zero formal-const-decl "T" ring_one_generator nil)
    (ring? const-decl "bool" ring_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (F_one_gen const-decl "[nat -> (R)]" ring_one_generator nil) nil
    nil nil nil (center const-decl "set[T]" center_def nil))
   nil))
 (R_sigma_over_center_l 0
  (R_sigma_over_center_l-1 nil 3808754947
   ("" (induct "high")
    (("1" (skosimp)
      (("1" (lemma F_one_gen_r_comm)
        (("1" (inst -1 "R!1" "a!1" "F!1" "G!1")
          (("1" (assert) nil nil)) nil))
        nil))
      nil)
     ("2" (skosimp)
      (("2" (skosimp)
        (("2" (inst -1 "R!1" "a!1" "F!1" "G!1" "low!1")
          (("2" (assert)
            (("2" (expand "R_sigma" 1)
              (("2" (replaces -1 1)
                (("2" (lemma F_one_gen_r_comm)
                  (("2" (inst -1 "R!1" "a!1" "F!1" "G!1")
                    (("2" (expand "member") (("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (F_one_gen_r_comm formula-decl nil ring_one_generator nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (F_one_gen const-decl "[nat -> (R)]" ring_one_generator nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (R_sigma def-decl "T" ring_basic_properties nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (center const-decl "set[T]" center_def nil)
    (member const-decl "bool" sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (ring? const-decl "bool" ring_def nil)
    (zero formal-const-decl "T" ring_one_generator nil)
    (* formal-const-decl "[T, T -> T]" ring_one_generator nil)
    (+ formal-const-decl "[T, T -> T]" ring_one_generator nil)
    (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil ring_one_generator nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (F_one_gen_l_comm 0
  (F_one_gen_l_comm-1 nil 3808755047
   ("" (skosimp)
    (("" (expand "member")
      (("" (expand "center")
        (("" (expand "extend")
          (("" (decompose-equality)
            (("1" (inst -1 " F!1(x!1)")
              (("1" (replace -1 1 rl)
                (("1" (expand "F_one_gen") (("1" (propax) nil nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp)
              (("2" (typepred "F!1(i!1)" "G!1(i!1)" "a!1")
                (("2" (lemma R_prod_star_closed)
                  (("2" (inst -1 "R!1" "a!1 * F!1(i!1)" "G!1(i!1)")
                    (("2" (lemma R_prod_star_closed)
                      (("2" (inst -1 "R!1" "a!1" "F!1(i!1)")
                        (("2" (expand "member")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member const-decl "bool" sets nil)
    (extend const-decl "R" extend nil)
    (R_prod_star_closed formula-decl nil ring_basic_properties nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-nonempty-type-decl nil ring_one_generator nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" ring_one_generator nil)
    (* formal-const-decl "[T, T -> T]" ring_one_generator nil)
    (zero formal-const-decl "T" ring_one_generator nil)
    (ring? const-decl "bool" ring_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (F_one_gen const-decl "[nat -> (R)]" ring_one_generator nil) nil
    nil nil nil (center const-decl "set[T]" center_def nil))
   nil))
 (R_sigma_over_center_r 0
  (R_sigma_over_center_r-1 nil 3808755149
   ("" (induct "high")
    (("1" (skosimp)
      (("1" (lemma F_one_gen_l_comm)
        (("1" (inst -1 "R!1" "a!1" "F!1" "G!1")
          (("1" (assert) nil nil)) nil))
        nil))
      nil)
     ("2" (skosimp)
      (("2" (skosimp)
        (("2" (inst -1 "R!1" "a!1" "F!1" "G!1" "low!1")
          (("2" (assert)
            (("2" (expand "R_sigma" 1)
              (("2" (replaces -1 1)
                (("2" (lemma F_one_gen_l_comm)
                  (("2" (inst -1 "R!1" "a!1" "F!1" "G!1")
                    (("2" (expand "member") (("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (F_one_gen_l_comm formula-decl nil ring_one_generator nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (F_one_gen const-decl "[nat -> (R)]" ring_one_generator nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (R_sigma def-decl "T" ring_basic_properties nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (center const-decl "set[T]" center_def nil)
    (member const-decl "bool" sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (ring? const-decl "bool" ring_def nil)
    (zero formal-const-decl "T" ring_one_generator nil)
    (* formal-const-decl "[T, T -> T]" ring_one_generator nil)
    (+ formal-const-decl "[T, T -> T]" ring_one_generator nil)
    (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil ring_one_generator nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (subset_product_one_gen_TCC1 0
  (subset_product_one_gen_TCC1-1 nil 3779131370
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil ring_one_generator nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" ring_one_generator nil)
    (* formal-const-decl "[T, T -> T]" ring_one_generator nil)
    (zero formal-const-decl "T" ring_one_generator nil)
    (commutative_ring? const-decl "bool" ring_def nil)
    (R!1 skolem-const-decl "(commutative_ring?[T, +, *, zero])"
     ring_one_generator nil)
    (member const-decl "bool" sets nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (plus_zero formula-decl nil ring nil)
    (restrict const-decl "R" restrict nil)
    (zero_plus formula-decl nil ring nil)
    (identity? const-decl "bool" operator_defs nil)
    (monad? const-decl "bool" monad_def nil)
    (associative? const-decl "bool" operator_defs nil)
    (monoid? const-decl "bool" monoid_def nil)
    (inv_exists? const-decl "bool" group_def nil)
    (group? const-decl "bool" group_def nil)
    (commutative? const-decl "bool" operator_defs nil)
    (abelian_group? const-decl "bool" group_def nil)
    (left_distributive? const-decl "bool" operator_defs_more nil)
    (right_distributive? const-decl "bool" operator_defs_more nil)
    (ring? const-decl "bool" ring_def nil))
   nil
   (subset_product_one_gen subtype
    "ring_one_generator.*(ring_one_generator.a, ring_one_generator.b)"
    "(ring_one_generator.R)")))
 (subset_product_one_gen 0
  (subset_product_one_gen-1 nil 3779131487
   ("" (skosimp)
    (("" (expand "subset?")
      (("" (skosimp)
        (("" (expand "member")
          (("" (expand "sum")
            (("" (skosimp)
              (("" (expand "extend")
                (("" (prop)
                  (("1" (expand "commutative_one_gen")
                    (("1" (typepred "h!1" "k!1")
                      (("1" (expand "extend")
                        (("1" (prop)
                          (("1" (hide -1 -3)
                            (("1" (expand "commutative_one_gen")
                              (("1"
                                (skosimp*)
                                (("1"
                                  (typepred "R!1")
                                  (("1"
                                    (expand "commutative_ring?")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (inst
                                         1
                                         "r!2*r!1 + times(r!2,n!1) + times(r!1,n!2)"
                                         "n!2*n!1")
                                        (("1"
                                          (replaces -6)
                                          (("1"
                                            (replace -4 1)
                                            (("1"
                                              (replace -3 1)
                                              (("1"
                                                (rewrite
                                                 "left_distributive")
                                                (("1"
                                                  (rewrite
                                                   "right_distributive")
                                                  (("1"
                                                    (rewrite
                                                     "right_distributive")
                                                    (("1"
                                                      (case-replace
                                                       "r!2 * a!1 * (r!1 * b!1) = (r!2*r!1)*(a!1*b!1)")
                                                      (("1"
                                                        (case-replace
                                                         " r!2 * a!1 * times(b!1, n!1)= times(r!2,n!1)* (a!1*b!1)")
                                                        (("1"
                                                          (case-replace
                                                           "(times(a!1, n!2) * (r!1 * b!1)) = times(r!1,n!2)*(a!1*b!1) ")
                                                          (("1"
                                                            (case-replace
                                                             "times(a!1, n!2) * times(b!1, n!1) = times(a!1*b!1, n!2*n!1)")
                                                            (("1"
                                                              (rewrite
                                                               "left_distributive"
                                                               :dir
                                                               rl)
                                                              (("1"
                                                                (lemma
                                                                 "left_distributive")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "r!2 * r!1 + times(r!2, n!1)"
                                                                   "times(r!1, n!2)"
                                                                   "a!1 * b!1")
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     1)
                                                                    (("1"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("1"
                                                                        (rewrite
                                                                         "plus_associative")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               1)
                                                              (("2"
                                                                (rewrite
                                                                 "times_product")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             (-3 -4 1))
                                                            (("2"
                                                              (copy -2)
                                                              (("2"
                                                                (expand
                                                                 "commutative?")
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "r!1"
                                                                   "b!1")
                                                                  (("2"
                                                                    (expand
                                                                     "restrict")
                                                                    (("2"
                                                                      (replaces
                                                                       -1)
                                                                      (("2"
                                                                        (rewrite
                                                                         "left_times")
                                                                        (("2"
                                                                          (rewrite
                                                                           "times_associative"
                                                                           :dir
                                                                           rl)
                                                                          (("2"
                                                                            (rewrite
                                                                             "right_times"
                                                                             :dir
                                                                             rl)
                                                                            (("2"
                                                                              (inst
                                                                               -2
                                                                               "a!1*b!1"
                                                                               "times(r!1, n!2)")
                                                                              (("1"
                                                                                (lemma
                                                                                 "times_member")
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "R!1"
                                                                                   "n!2"
                                                                                   "r!1")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (typepred
                                                                                 "a!1"
                                                                                 "b!1")
                                                                                (("2"
                                                                                  (lemma
                                                                                   "R_prod_star_closed")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -1
                                                                                     "R!1"
                                                                                     "a!1"
                                                                                     "b!1")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (-2 -3 1))
                                                          (("2"
                                                            (rewrite
                                                             "right_times")
                                                            (("2"
                                                              (rewrite
                                                               "times_associative")
                                                              (("2"
                                                                (rewrite
                                                                 "left_times"
                                                                 :dir
                                                                 rl)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         (-1 -2 1))
                                                        (("2"
                                                          (rewrite
                                                           "times_associative")
                                                          (("2"
                                                            (rewrite
                                                             "times_associative"
                                                             :dir
                                                             rl)
                                                            (("2"
                                                              (expand
                                                               "commutative?")
                                                              (("2"
                                                                (inst
                                                                 -2
                                                                 "a!1"
                                                                 "r!1")
                                                                (("2"
                                                                  (expand
                                                                   "restrict")
                                                                  (("2"
                                                                    (replaces
                                                                     -2)
                                                                    (("2"
                                                                      (rewrite
                                                                       "times_associative")
                                                                      (("2"
                                                                        (rewrite
                                                                         "times_associative")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but (-1 1))
                                          (("2"
                                            (case
                                             "R!1(r!2 * r!1 + times[T, +, *, zero](r!2, n!1)) AND R!1(times[T, +, *, zero](r!1, n!2))")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (lemma
                                                 "R_sum_star_closed")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "R!1"
                                                   "r!2 * r!1 + times[T, +, *, zero](r!2, n!1)"
                                                   "  times[T, +, *, zero](r!1, n!2)")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (split)
                                              (("1"
                                                (hide 2)
                                                (("1"
                                                  (case
                                                   "R!1(r!2 * r!1) AND R!1(times[T, +, *, zero](r!2, n!1))")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (lemma
                                                       "R_sum_star_closed")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "R!1"
                                                         "r!2 * r!1"
                                                         "times[T, +, *, zero](r!2, n!1)")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (split)
                                                    (("1"
                                                      (hide 2)
                                                      (("1"
                                                        (typepred
                                                         "r!2"
                                                         "r!1")
                                                        (("1"
                                                          (lemma
                                                           "R_prod_star_closed")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "R!1"
                                                             "r!2"
                                                             "r!1")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (typepred
                                                         "r!2")
                                                        (("2"
                                                          (lemma
                                                           "times_member")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "R!1"
                                                             "n!1"
                                                             "r!2")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (typepred "r!1")
                                                  (("2"
                                                    (lemma
                                                     "times_member")
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "R!1"
                                                       "n!2"
                                                       "r!1")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (typepred "h!1" "k!1")
                    (("2" (expand "extend")
                      (("2" (prop)
                        (("2" (typepred "R!1")
                          (("2" (expand "commutative_ring?")
                            (("2" (flatten)
                              (("2"
                                (hide -2 -4 -6)
                                (("2"
                                  (lemma "R_prod_star_closed")
                                  (("2"
                                    (inst -1 "R!1" "h!1" "k!1")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (ring? const-decl "bool" ring_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (FALSE const-decl "bool" booleans nil)
    (commutative_ring? const-decl "bool" ring_def nil)
    (zero formal-const-decl "T" ring_one_generator nil)
    (* formal-const-decl "[T, T -> T]" ring_one_generator nil)
    (+ formal-const-decl "[T, T -> T]" ring_one_generator nil)
    (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil ring_one_generator nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (R_sum_star_closed formula-decl nil ring_basic_properties nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (right_distributive formula-decl nil ring nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (times_product formula-decl nil ring_basic_properties nil)
    (plus_associative formula-decl nil ring nil)
    (times_associative formula-decl nil ring nil) nil nil
    (times_member formula-decl nil ring_basic_properties nil)
    (R_prod_star_closed formula-decl nil ring_basic_properties nil)
    (right_times formula-decl nil ring_basic_properties nil)
    (left_times formula-decl nil ring_basic_properties nil)
    (restrict const-decl "R" restrict nil)
    (commutative? const-decl "bool" operator_defs nil)
    (left_distributive formula-decl nil ring nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil) nil nil nil
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (times const-decl "T" ring_basic_properties nil) nil nil
    (int_times_int_is_int application-judgement "int" integers nil)
    (commutative_one_gen const-decl "set[(R)]" ring_one_generator nil)
    (extend const-decl "R" extend nil)
    (sum const-decl "set[T]" cosets_def nil))
   nil))
 (subset_prod_one_gen_ideal_prop1 0
  (subset_prod_one_gen_ideal_prop1-1 nil 3779131555
   ("" (skosimp)
    (("" (lemma "subset_product_one_gen")
      (("" (inst -1 "R!1" "a!1" "b!1")
        (("" (expand "subset?")
          (("" (skosimp)
            (("" (inst -1 "x!1")
              (("" (expand "member")
                (("" (assert)
                  (("" (expand "extend" -1)
                    (("" (prop)
                      (("" (hide -5)
                        (("" (expand "commutative_one_gen")
                          (("" (skosimp)
                            ((""
                              (case "M!1(r!1 * (a!1 * b!1)) AND M!1(times(a!1 * b!1, n!1))")
                              (("1"
                                (flatten)
                                (("1"
                                  (expand "ideal?")
                                  (("1"
                                    (expand "left_ideal?")
                                    (("1"
                                      (expand "subring?")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (hide-all-but
                                           (-1 -2 -4 -6 1))
                                          (("1"
                                            (lemma "R_sum_star_closed")
                                            (("1"
                                              (inst
                                               -1
                                               "M!1"
                                               "r!1 * (a!1 * b!1)"
                                               "times(a!1 * b!1, n!1)")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (split)
                                (("1"
                                  (expand "ideal?")
                                  (("1"
                                    (expand "left_ideal?")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (expand "left_swallow?")
                                        (("1"
                                          (inst -4 "r!1" "a!1*b!1")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma "times_member")
                                  (("2"
                                    (inst -1 "M!1" "n!1" "a!1*b!1")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (expand "ideal?")
                                      (("2"
                                        (expand "left_ideal?")
                                        (("2"
                                          (expand "subring?")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset_product_one_gen formula-decl nil ring_one_generator nil)
    (subset? const-decl "bool" sets nil)
    (commutative_one_gen const-decl "set[(R)]" ring_one_generator nil)
    (times const-decl "T" ring_basic_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (subring? const-decl "bool" ring_def nil)
    (ring? const-decl "bool" ring_def nil) nil
    (R_sum_star_closed formula-decl nil ring_basic_properties nil)
    (left_ideal? const-decl "bool" ring_ideal_def nil)
    (times_member formula-decl nil ring_basic_properties nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (left_swallow? const-decl "bool" ring_ideal_def nil)
    (extend const-decl "R" extend nil)
    (member const-decl "bool" sets nil)
    (commutative_ring? const-decl "bool" ring_def nil)
    (zero formal-const-decl "T" ring_one_generator nil)
    (* formal-const-decl "[T, T -> T]" ring_one_generator nil)
    (+ formal-const-decl "[T, T -> T]" ring_one_generator nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-nonempty-type-decl nil ring_one_generator nil))
   nil))
 (subset_prod_one_gen_ideal_prop2 0
  (subset_prod_one_gen_ideal_prop2-1 nil 3779131612
   ("" (skosimp)
    (("" (expand "subset?")
      (("" (skosimp)
        (("" (expand "member")
          (("" (expand "sum")
            (("" (skosimp)
              (("" (typepred "h!1" "k!1")
                (("" (skosimp*)
                  (("" (typepred "h!2" "k!2" "h!3" "k!3")
                    (("" (expand "extend")
                      (("" (prop)
                        (("" (expand "commutative_one_gen")
                          (("" (skosimp*)
                            (("" (replaces -2)
                              ((""
                                (replaces -3)
                                ((""
                                  (replaces -5)
                                  ((""
                                    (replaces -5)
                                    ((""
                                      (rewrite "left_distributive")
                                      ((""
                                        (lemma "right_distributive")
                                        ((""
                                          (inst
                                           -1
                                           "(r!2 * a!1 + times(a!1, n!2))"
                                           "h!3"
                                           "(r!1 * b!1 + times(b!1, n!1))")
                                          ((""
                                            (replaces -1)
                                            ((""
                                              (case
                                               "M!1((h!2 * (h!3 + (r!1 * b!1 + times(b!1, n!1))))) AND M!1((((r!2 * a!1 + times(a!1, n!2)) * h!3) +
                        ((r!2 * a!1 + times(a!1, n!2)) * (r!1 * b!1 + times(b!1, n!1)))))")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (lemma
                                                   "R_sum_star_closed")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "M!1"
                                                     "(h!2 * (h!3 + (r!1 * b!1 + times(b!1, n!1))))"
                                                     "(((r!2 * a!1 + times(a!1, n!2)) * h!3) +
                    ((r!2 * a!1 + times(a!1, n!2)) *
                      (r!1 * b!1 + times(b!1, n!1))))")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (hide-all-but
                                                       (-7 1))
                                                      (("2"
                                                        (expand
                                                         "ideal?")
                                                        (("2"
                                                          (expand
                                                           "left_ideal?")
                                                          (("2"
                                                            (expand
                                                             "subring?")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (split)
                                                (("1"
                                                  (hide -7 2)
                                                  (("1"
                                                    (expand "ideal?")
                                                    (("1"
                                                      (expand
                                                       "right_ideal?")
                                                      (("1"
                                                        (expand
                                                         "right_swallow?")
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (hide -5)
                                                            (("1"
                                                              (inst
                                                               -6
                                                               "(h!3 + (r!1 * b!1 + times(b!1, n!1)))"
                                                               "h!2")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (case
                                                                 "R!1(h!3)")
                                                                (("1"
                                                                  (lemma
                                                                   "R_sum_star_closed")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "R!1"
                                                                     "h!3"
                                                                     "(r!1 * b!1 + times[T, +, *, zero](b!1, n!1))")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   (-4
                                                                    -5
                                                                    1))
                                                                  (("2"
                                                                    (expand
                                                                     "subring?")
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (expand
                                                                         "subset?")
                                                                        (("2"
                                                                          (inst
                                                                           -2
                                                                           "h!3")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide -7)
                                                  (("2"
                                                    (case
                                                     "M!1(((r!2 * a!1 + times(a!1, n!2)) * h!3)) AND M!1(((r!2 * a!1 + times(a!1, n!2)) *
                                    (r!1 * b!1 + times(b!1, n!1))))")
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (lemma
                                                         "R_sum_star_closed")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "M!1"
                                                           "((r!2 * a!1 + times(a!1, n!2)) * h!3)"
                                                           "((r!2 * a!1 + times(a!1, n!2)) * (r!1 * b!1 + times(b!1, n!1)))")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "ideal?")
                                                            (("2"
                                                              (expand
                                                               "left_ideal?")
                                                              (("2"
                                                                (expand
                                                                 "subring?")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (split)
                                                      (("1"
                                                        (hide-all-but
                                                         (-2 -4 -5 1))
                                                        (("1"
                                                          (expand
                                                           "ideal?")
                                                          (("1"
                                                            (expand
                                                             "left_ideal?")
                                                            (("1"
                                                              (expand
                                                               "left_swallow?")
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (inst
                                                                   -4
                                                                   "(r!2 * a!1 + times(a!1, n!2))"
                                                                   "h!3")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2 3)
                                                        (("2"
                                                          (rewrite
                                                           "left_distributive")
                                                          (("2"
                                                            (rewrite
                                                             "right_distributive")
                                                            (("2"
                                                              (rewrite
                                                               "right_distributive")
                                                              (("2"
                                                                (typepred
                                                                 "R!1")
                                                                (("2"
                                                                  (expand
                                                                   "commutative_ring?")
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (case
                                                                       "(r!2 * a!1 * (r!1 * b!1)) = (r!2 * r!1)*(a!1*b!1) AND (r!2 * a!1 * times(b!1, n!1)) = times(r!2,n!1)*(a!1*b!1)")
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (replaces
                                                                           -1)
                                                                          (("1"
                                                                            (replaces
                                                                             -1)
                                                                            (("1"
                                                                              (rewrite
                                                                               "left_distributive"
                                                                               :dir
                                                                               rl)
                                                                              (("1"
                                                                                (case
                                                                                 "(times(a!1, n!2) * (r!1 * b!1)) = times(r!1,n!2)*(a!1*b!1)")
                                                                                (("1"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "plus_associative"
                                                                                     :dir
                                                                                     rl)
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       "left_distributive"
                                                                                       :dir
                                                                                       rl)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "ideal?")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "left_ideal?")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "left_swallow?")
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -8
                                                                                                 "(((r!2 * r!1) + times(r!2, n!1)) + times(r!1, n!2))"
                                                                                                 "a!1*b!1")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "subring?")
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (hide-all-but
                                                                                                         (-8
                                                                                                          -9
                                                                                                          -11
                                                                                                          1))
                                                                                                        (("1"
                                                                                                          (rewrite
                                                                                                           "times_product")
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             "R_sum_star_closed")
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "M!1"
                                                                                                               "(((r!2 * r!1) + times(r!2, n!1)) + times(r!1, n!2)) * (a!1 * b!1)"
                                                                                                               "times(a!1 * b!1, n!2 * n!1)")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (hide
                                                                                                                   -2
                                                                                                                   2)
                                                                                                                  (("1"
                                                                                                                    (lemma
                                                                                                                     "times_member")
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -1
                                                                                                                       "M!1"
                                                                                                                       "n!2*n!1"
                                                                                                                       "a!1*b!1")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide
                                                                                                   2)
                                                                                                  (("2"
                                                                                                    (case
                                                                                                     "R!1(((r!2 * r!1) + times[T, +, *, zero](r!2, n!1))) AND R!1((times[T, +, *, zero](r!1, n!2)))")
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "R_sum_star_closed")
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "R!1"
                                                                                                           "((r!2 * r!1) + times[T, +, *, zero](r!2, n!1))"
                                                                                                           "(times[T, +, *, zero](r!1, n!2))")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (hide
                                                                                                       2)
                                                                                                      (("2"
                                                                                                        (split)
                                                                                                        (("1"
                                                                                                          (case
                                                                                                           "R!1(r!2*r!1) AND R!1(times(r!2,n!1))")
                                                                                                          (("1"
                                                                                                            (flatten)
                                                                                                            (("1"
                                                                                                              (lemma
                                                                                                               "R_sum_star_closed")
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "R!1"
                                                                                                                 "r!2 * r!1"
                                                                                                                 " times[T, +, *, zero](r!2, n!1)")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (split)
                                                                                                            (("1"
                                                                                                              (hide
                                                                                                               2)
                                                                                                              (("1"
                                                                                                                (lemma
                                                                                                                 "R_prod_star_closed")
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   "R!1"
                                                                                                                   "r!2"
                                                                                                                   "r!1")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (lemma
                                                                                                               "times_member")
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "R!1"
                                                                                                                 "n!1"
                                                                                                                 "r!2")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (lemma
                                                                                                           "times_member")
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "R!1"
                                                                                                             "n!2"
                                                                                                             "r!1")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   2)
                                                                                  (("2"
                                                                                    (rewrite
                                                                                     "left_times")
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       "times_associative"
                                                                                       :dir
                                                                                       rl)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "commutative?")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "restrict")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -2
                                                                                             "a!1"
                                                                                             "r!1")
                                                                                            (("2"
                                                                                              (replaces
                                                                                               -2)
                                                                                              (("2"
                                                                                                (rewrite
                                                                                                 "times_associative")
                                                                                                (("2"
                                                                                                  (rewrite
                                                                                                   "left_times"
                                                                                                   :dir
                                                                                                   rl)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         2)
                                                                        (("2"
                                                                          (split)
                                                                          (("1"
                                                                            (rewrite
                                                                             "times_associative")
                                                                            (("1"
                                                                              (copy
                                                                               -2)
                                                                              (("1"
                                                                                (expand
                                                                                 "commutative?")
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "r!1"
                                                                                   "b!1")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "restrict")
                                                                                    (("1"
                                                                                      (replaces
                                                                                       -1)
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "times_associative"
                                                                                         :dir
                                                                                         rl)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -2
                                                                                           "a!1*b!1"
                                                                                           "r!1")
                                                                                          (("1"
                                                                                            (replaces
                                                                                             -2)
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "times_associative")
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (expand
                                                                                             "ideal?")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "left_ideal?")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "subring?")
                                                                                                (("2"
                                                                                                  (flatten)
                                                                                                  (("2"
                                                                                                    (hide-all-but
                                                                                                     (-6
                                                                                                      -10
                                                                                                      1))
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "subset?")
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "a!1*b!1")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (rewrite
                                                                             "right_times")
                                                                            (("2"
                                                                              (rewrite
                                                                               "times_associative")
                                                                              (("2"
                                                                                (rewrite
                                                                                 "left_times"
                                                                                 :dir
                                                                                 rl)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (TRUE const-decl "bool" booleans nil)
    (left_distributive formula-decl nil ring nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (times const-decl "T" ring_basic_properties nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (R_sum_star_closed formula-decl nil ring_basic_properties nil)
    (left_ideal? const-decl "bool" ring_ideal_def nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subring? const-decl "bool" ring_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil) nil
    (left_swallow? const-decl "bool" ring_ideal_def nil) nil nil nil
    (times_associative formula-decl nil ring nil)
    (restrict const-decl "R" restrict nil)
    (commutative? const-decl "bool" operator_defs nil)
    (left_times formula-decl nil ring_basic_properties nil)
    (R_prod_star_closed formula-decl nil ring_basic_properties nil)
    (times_product formula-decl nil ring_basic_properties nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (times_member formula-decl nil ring_basic_properties nil)
    (plus_associative formula-decl nil ring nil)
    (right_times formula-decl nil ring_basic_properties nil)
    (right_ideal? const-decl "bool" ring_ideal_def nil) nil nil nil nil
    nil (right_swallow? const-decl "bool" ring_ideal_def nil)
    (right_distributive formula-decl nil ring nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil ring_one_generator nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" ring_one_generator nil)
    (* formal-const-decl "[T, T -> T]" ring_one_generator nil)
    (zero formal-const-decl "T" ring_one_generator nil)
    (commutative_ring? const-decl "bool" ring_def nil)
    (FALSE const-decl "bool" booleans nil)
    (extend const-decl "R" extend nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (ring? const-decl "bool" ring_def nil)
    (commutative_one_gen const-decl "set[(R)]" ring_one_generator nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sum const-decl "set[T]" cosets_def nil))
   nil))
 (sum_strict_subset_one_gen 0
  (sum_strict_subset_one_gen-1 nil 3779131686
   ("" (skosimp)
    (("" (expand "strict_subset?")
      (("" (split)
        (("1" (expand "subset?")
          (("1" (skosimp)
            (("1" (expand "member")
              (("1" (expand "sum")
                (("1" (inst 1 "x!1" "zero")
                  (("1" (assert) nil nil)
                   ("2" (expand "extend")
                    (("2" (prop)
                      (("1" (expand "one_gen")
                        (("1"
                          (inst 1 "zero" "zero" "0"
                           "LAMBDA(i:nat): zero" "LAMBDA(i:nat): zero"
                           "0")
                          (("1" (assert)
                            (("1" (expand "R_sigma")
                              (("1"
                                (expand "F_one_gen")
                                (("1"
                                  (expand "times")
                                  (("1"
                                    (expand "^")
                                    (("1"
                                      (expand "power")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1)
                        (("2" (lemma "zero_is_member_R")
                          (("2" (inst?) (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "/=")
          (("2" (decompose-equality -1)
            (("2" (inst -1 "a!1")
              (("2" (expand "sum")
                (("2" (iff)
                  (("2" (prop)
                    (("1" (assert) nil nil)
                     ("2" (inst 1 "zero" "a!1")
                      (("1" (assert) nil nil)
                       ("2" (expand "extend")
                        (("2" (expand "one_gen")
                          (("2"
                            (inst 1 "zero" "zero" "1"
                             "LAMBDA(i:nat): zero"
                             "LAMBDA(i:nat): zero" "0")
                            (("1" (assert)
                              (("1"
                                (expand "R_sigma")
                                (("1"
                                  (expand "F_one_gen")
                                  (("1"
                                    (rewrite "times_int_one")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2"
                                (lemma "zero_is_member_R")
                                (("2"
                                  (inst?)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((strict_subset? const-decl "bool" sets nil)
    (/= const-decl "boolean" notequal nil)
    (times_int_one formula-decl nil ring_basic_properties nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil) nil nil
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-nonempty-type-decl nil ring_one_generator nil) nil
    (one_gen const-decl "set[(R)]" ring_one_generator nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (extend const-decl "R" extend nil)
    (FALSE const-decl "bool" booleans nil) nil
    (ring? const-decl "bool" ring_def nil)
    (zero formal-const-decl "T" ring_one_generator nil)
    (* formal-const-decl "[T, T -> T]" ring_one_generator nil)
    (+ formal-const-decl "[T, T -> T]" ring_one_generator nil)
    (plus_zero formula-decl nil ring nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (R_sigma def-decl "T" ring_basic_properties nil)
    (times const-decl "T" ring_basic_properties nil)
    (power def-decl "T" monoid_def nil) (^ const-decl "T" group nil)
    (F_one_gen const-decl "[nat -> (R)]" ring_one_generator nil)
    (zero_plus formula-decl nil ring nil)
    (times_zero formula-decl nil ring nil)
    (zero_times formula-decl nil ring nil)
    (zero_is_member_R formula-decl nil ring_basic_properties nil)
    (sum const-decl "set[T]" cosets_def nil))
   nil)))

