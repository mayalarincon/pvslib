(ring_prime_and_irreducible_element
 (IMP_ring_with_id_one_generator_TCC1 0
  (IMP_ring_with_id_one_generator_TCC1-1 nil 3856625615
   ("" (rewrite "fullset_is_ring_with_one") nil nil)
   ((fullset_is_ring_with_one formula-decl nil ring_prime_element nil))
   nil
   (IMP_ring_with_id_one_generator assuming
    "ring_with_id_one_generator[ring_prime_element.T, ring_prime_element.+, ring_prime_element.*, ring_prime_element.zero, ring_prime_element.one].ring_with_id_one_generator"
    "fullset_is_ring_with_one: ASSUMPTION ring_with_one_def[ring_with_id_one_generator.T, ring_with_id_one_generator.+, ring_with_id_one_generator.*, ring_with_id_one_generator.zero, ring_with_id_one_generator.one].ring_with_one?(sets[ring_with_id_one_generator.T].fullset)")))
 (IMP_ring_prime_ideal_TCC1 0
  (IMP_ring_prime_ideal_TCC1-1 nil 3856625615
   ("" (lemma "fullset_is_ring_with_one")
    (("" (expand "ring_with_one?") (("" (assert) nil nil)) nil)) nil)
   ((ring_with_one? const-decl "bool" ring_with_one_def nil)
    (fullset_is_ring_with_one formula-decl nil ring_prime_element nil))
   nil
   (IMP_ring_prime_ideal assuming
    "ring_prime_ideal[ring_prime_element.T, ring_prime_element.+, ring_prime_element.*, ring_prime_element.zero].ring_prime_ideal"
    "fullset_is_ring: ASSUMPTION ring_def[ring_prime_ideal.T, ring_prime_ideal.+, ring_prime_ideal.*, ring_prime_ideal.zero].ring?(sets[ring_prime_ideal.T].fullset)")))
 (prime_el_iff_prime_ideal 0
  (prime_el_iff_prime_ideal-1 nil 3825773359
   ("" (skosimp)
    (("" (prop)
      (("1" (decompose-equality)
        (("1" (inst -1 "p!1")
          (("1" (iff)
            (("1" (flatten)
              (("1" (hide -2)
                (("1" (prop)
                  (("1" (expand "R_prime_element?")
                    (("1" (expand "restrict")
                      (("1" (expand "singleton")
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (hide -1)
                    (("2" (lemma "gen_is_member_one_gen")
                      (("2" (inst -1 "R!1" "p!1")
                        (("2" (expand "member")
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred "R!1")
        (("2" (rewrite "prime_ideal_prop1")
          (("1" (hide 2) (("1" (rewrite "one_gen_is_ideal") nil nil))
            nil)
           ("2" (decompose-equality 1)
            (("2" (inst -1 "one")
              (("2" (iff)
                (("2" (prop)
                  (("1" (expand "extend" -1)
                    (("1" (assert)
                      (("1" (rewrite "commutative_id_one_gen_charac")
                        (("1" (expand "restrict")
                          (("1" (expand "+" -1)
                            (("1" (skosimp)
                              (("1"
                                (expand "R_prime_element?")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (hide-all-but (-1 -3 -4 3))
                                    (("1"
                                      (expand "unit?")
                                      (("1"
                                        (expand "l_invertible?")
                                        (("1"
                                          (expand "r_invertible?")
                                          (("1"
                                            (split)
                                            (("1"
                                              (inst 1 "h!1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand
                                                   "commutative_ring_with_one?")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (hide-all-but
                                                       (-1 -3 1))
                                                      (("1"
                                                        (expand
                                                         "commutative?")
                                                        (("1"
                                                          (inst
                                                           -2
                                                           "h!1"
                                                           "p!1")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "restrict")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (inst 1 "h!1")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "commutative_ring_with_one?")
                          (("2" (flatten)
                            (("2" (expand "ring_with_one?")
                              (("2"
                                (flatten)
                                (("2"
                                  (hide-all-but (-3 -5 1))
                                  (("2"
                                    (expand "commutative_ring?")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "commutative_ring_with_one?")
                    (("2" (expand "ring_with_one?")
                      (("2" (expand "monoid?")
                        (("2" (expand "monad?")
                          (("2" (expand "member")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (skosimp)
            (("3" (expand "extend")
              (("3" (expand "R_prime_element?")
                (("3" (flatten)
                  (("3" (case "R!1(a!1 * b!1)")
                    (("1" (assert)
                      (("1" (rewrite "commutative_id_one_gen_charac")
                        (("1" (expand "restrict")
                          (("1" (hide 3)
                            (("1" (expand "+")
                              (("1"
                                (skosimp)
                                (("1"
                                  (expand "divides?")
                                  (("1"
                                    (inst -4 "a!1" "b!1")
                                    (("1"
                                      (split)
                                      (("1"
                                        (skosimp)
                                        (("1"
                                          (inst 1 "x!1")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skosimp)
                                        (("2"
                                          (inst 2 "x!1")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (inst 1 "h!1")
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "commutative_ring_with_one?")
                          (("2" (expand "ring_with_one?")
                            (("2" (flatten)
                              (("2"
                                (hide-all-but (-3 -5 1))
                                (("2"
                                  (expand "commutative_ring?")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (typepred "a!1" "b!1")
                      (("2" (hide-all-but (-1 -2 -4 1))
                        (("2" (lemma "R_prod_star_closed")
                          (("2" (inst?)
                            (("2" (inst -1 "R!1")
                              (("2"
                                (expand "member")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (expand "R_prime_element?")
        (("3" (split)
          (("1" (decompose-equality 2)
            (("1" (iff)
              (("1" (prop)
                (("1" (typepred "R!1")
                  (("1" (rewrite "commutative_id_one_gen_charac")
                    (("1" (expand "restrict")
                      (("1" (expand "+")
                        (("1" (skosimp)
                          (("1" (assert)
                            (("1" (expand "singleton")
                              (("1"
                                (hide -1 -4)
                                (("1"
                                  (replaces -2)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "commutative_ring_with_one?")
                      (("2" (expand "ring_with_one?")
                        (("2" (flatten)
                          (("2" (hide-all-but (-1 -3 1))
                            (("2" (expand "commutative_ring?")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "restrict")
                  (("2" (expand "singleton")
                    (("2" (replaces -1)
                      (("2" (rewrite "commutative_id_one_gen_charac")
                        (("1" (expand "restrict")
                          (("1" (expand "+")
                            (("1" (inst 1 "zero")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (lemma "gen_is_member_one_gen")
                          (("2" (inst -1 "R!1" "zero")
                            (("2" (expand "member")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "prime_ideal?")
            (("2" (flatten)
              (("2" (hide -3)
                (("2" (expand "unit?")
                  (("2" (flatten)
                    (("2" (expand "l_invertible?")
                      (("2" (skosimp)
                        (("2" (lemma "commutative_id_one_gen_charac")
                          (("2" (inst -1 "R!1" "p!1")
                            (("2" (assert)
                              (("2"
                                (lemma "ideal_w_one_is_R")
                                (("2"
                                  (inst -1 "R!1" "one_gen(R!1)(p!1)")
                                  (("2"
                                    (prop)
                                    (("1"
                                      (expand "extend")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (case "R!1(one)")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (hide 2 3 -4)
                                              (("1"
                                                (hide 2)
                                                (("1"
                                                  (replaces -2)
                                                  (("1"
                                                    (expand "restrict")
                                                    (("1"
                                                      (expand "+")
                                                      (("1"
                                                        (inst 1 "y!1")
                                                        (("1"
                                                          (typepred
                                                           "R!1")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "commutative_ring_with_one?")
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (hide-all-but
                                                                   (-2
                                                                    -4
                                                                    1))
                                                                  (("1"
                                                                    (expand
                                                                     "commutative?")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "p!1"
                                                                       "y!1")
                                                                      (("1"
                                                                        (expand
                                                                         "restrict")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (typepred "R!1")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand
                                                 "commutative_ring_with_one?")
                                                (("2"
                                                  (expand
                                                   "ring_with_one?")
                                                  (("2"
                                                    (expand "monoid?")
                                                    (("2"
                                                      (expand "monad?")
                                                      (("2"
                                                        (expand
                                                         "member")
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (typepred "R!1")
                                      (("2"
                                        (expand
                                         "commutative_ring_with_one?")
                                        (("2"
                                          (expand "ring_with_one?")
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (hide-all-but (-1 -3 1))
                                              (("2"
                                                (expand
                                                 "commutative_ring?")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (skosimp)
            (("3" (lemma "prime_ideal_prop2")
              (("3"
                (inst -1
                 "extend[T, (R!1), bool, FALSE](one_gen(R!1)(p!1))"
                 "R!1")
                (("3" (assert)
                  (("3" (expand "extend")
                    (("3" (case "R!1(a!1 * b!1)")
                      (("1" (assert)
                        (("1" (lemma "commutative_id_one_gen_charac")
                          (("1" (inst -1 "R!1" "p!1")
                            (("1" (hide -4 3)
                              (("1"
                                (expand "restrict")
                                (("1"
                                  (expand "divides?")
                                  (("1"
                                    (expand "+")
                                    (("1"
                                      (split)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (typepred "R!1")
                                          (("1"
                                            (expand
                                             "commutative_ring_with_one?")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand
                                                   "ring_with_one?")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "commutative_ring?")
                                                        (("1"
                                                          (inst
                                                           -6
                                                           "a!1"
                                                           "b!1")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (split)
                                                              (("1"
                                                                (decompose-equality)
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "a!1")
                                                                  (("1"
                                                                    (iff)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (skosimp)
                                                                        (("1"
                                                                          (inst
                                                                           1
                                                                           "h!1")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (decompose-equality)
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "b!1")
                                                                  (("2"
                                                                    (iff)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (skosimp)
                                                                        (("2"
                                                                          (inst
                                                                           2
                                                                           "h!1")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (replace
                                                                 -4
                                                                 1)
                                                                (("3"
                                                                  (reveal
                                                                   -2)
                                                                  (("3"
                                                                    (beta)
                                                                    (("3"
                                                                      (expand
                                                                       "divides?")
                                                                      (("3"
                                                                        (skosimp)
                                                                        (("3"
                                                                          (inst
                                                                           1
                                                                           "x!1")
                                                                          (("3"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (hide-all-but 1)
                                          (("2"
                                            (typepred "R!1")
                                            (("2"
                                              (expand
                                               "commutative_ring_with_one?")
                                              (("2"
                                                (expand
                                                 "commutative_ring?")
                                                (("2"
                                                  (expand
                                                   "ring_with_one?")
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1)
                        (("2" (typepred "R!1")
                          (("2" (lemma "R_prod_star_closed")
                            (("2" (inst -1 "R!1" "a!1" "b!1")
                              (("2"
                                (expand "member")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((R_prime_element? const-decl "bool" ring_prime_element_def nil)
    (gen_is_member_one_gen formula-decl nil ring_one_generator nil)
    (member const-decl "bool" sets nil)
    (finite_restrict application-judgement "finite_set[S]"
     restrict_set_props nil)
    (singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (restrict const-decl "R" restrict nil)
    (one_gen const-decl "set[(R)]" ring_one_generator nil)
    (ring? const-decl "bool" ring_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (commutative_ring_with_one? const-decl "bool" ring_with_one_def
     nil)
    (one formal-const-decl "T" ring_prime_element nil)
    (zero formal-const-decl "T" ring_prime_element nil)
    (* formal-const-decl "[T, T -> T]" ring_prime_element nil)
    (+ formal-const-decl "[T, T -> T]" ring_prime_element nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-nonempty-type-decl nil ring_prime_element nil)
    (prime_ideal_prop1 formula-decl nil ring_prime_ideal nil)
    (FALSE const-decl "bool" booleans nil)
    (extend const-decl "R" extend nil)
    (one_gen_is_ideal formula-decl nil ring_one_generator nil)
    (commutative_ring? const-decl "bool" ring_def nil)
    (unit? const-decl "bool" ring_unit_def nil)
    (r_invertible? const-decl "bool" ring_unit_def nil)
    (commutative? const-decl "bool" operator_defs nil)
    (l_invertible? const-decl "bool" ring_unit_def nil)
    (commutative_id_one_gen_charac formula-decl nil
     ring_with_id_one_generator nil)
    (ring_with_one? const-decl "bool" ring_with_one_def nil)
    (monad? const-decl "bool" monad_def nil)
    (monoid? const-decl "bool" monoid_def nil)
    (R_prod_star_closed formula-decl nil ring_basic_properties nil)
    (divides? const-decl "bool" ring_divides_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (times_zero formula-decl nil ring nil)
    (TRUE const-decl "bool" booleans nil)
    (zero_times formula-decl nil ring nil)
    (ring_with_one nonempty-type-eq-decl nil ring_with_one nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (ideal_w_one_is_R formula-decl nil ring_with_one_ideal nil)
    (prime_ideal? const-decl "bool" ring_prime_ideal_def nil)
    (prime_ideal_prop2 formula-decl nil ring_prime_ideal nil))
   shostak))
 (el_irred_iff_one_gen_maximal_TCC1 0
  (el_irred_iff_one_gen_maximal_TCC1-1 nil 3830005761
   ("" (tcc) nil nil)
   ((integral_domain_w_one? const-decl "bool"
     integral_domain_with_one_def nil)
    (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (commutative_ring? const-decl "bool" ring_def nil)
    (remove const-decl "set" sets nil)
    (nz_closed? const-decl "bool" ring_nz_closed_def nil)
    (integral_domain? const-decl "bool" integral_domain_def nil)
    (member const-decl "bool" sets nil)
    (zero formal-const-decl "T" ring_prime_element nil)
    (* formal-const-decl "[T, T -> T]" ring_prime_element nil)
    (+ formal-const-decl "[T, T -> T]" ring_prime_element nil)
    (T formal-nonempty-type-decl nil ring_prime_element nil)
    (fam_ideal const-decl "setof[set[T]]" ring_principal_ideal_def nil)
    (principal_ideal const-decl "set[T]" ring_principal_ideal_def nil)
    (/= const-decl "boolean" notequal nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (plus_zero formula-decl nil ring nil)
    (restrict const-decl "R" restrict nil)
    (zero_plus formula-decl nil ring nil)
    (identity? const-decl "bool" operator_defs nil)
    (monad? const-decl "bool" monad_def nil)
    (associative? const-decl "bool" operator_defs nil)
    (monoid? const-decl "bool" monoid_def nil)
    (inv_exists? const-decl "bool" group_def nil)
    (group? const-decl "bool" group_def nil)
    (commutative? const-decl "bool" operator_defs nil)
    (abelian_group? const-decl "bool" group_def nil)
    (left_distributive? const-decl "bool" operator_defs_more nil)
    (right_distributive? const-decl "bool" operator_defs_more nil)
    (ring? const-decl "bool" ring_def nil)
    (one formal-const-decl "T" ring_prime_element nil)
    (right_identity formula-decl nil monad nil)
    (left_identity formula-decl nil monad nil)
    (ring_with_one? const-decl "bool" ring_with_one_def nil))
   nil
   (el_irred_iff_one_gen_maximal subtype "ring_prime_element.R"
    "(ring_with_one_def[ring_prime_element.T, ring_prime_element.+, ring_prime_element.*, ring_prime_element.zero, ring_prime_element.one].ring_with_one?)")))
 (el_irred_iff_one_gen_maximal 0
  (el_irred_iff_one_gen_maximal-1 nil 3826985801
   ("" (skosimp)
    ((""
      (name-replace "S"
       "{X: set[T] | EXISTS (a: (R!1)): X = principal_ideal(R!1)(a) AND X /= singleton(zero) AND X /= R!1}"
       :hide? nil)
      (("" (assert)
        (("" (prop)
          (("1" (inst 1 "c!1")
            (("1" (rewrite principal_ideal_charac) nil nil)) nil)
           ("2" (decompose-equality -1)
            (("2" (inst -1 "c!1")
              (("2" (iff)
                (("2" (flatten)
                  (("2" (hide -2)
                    (("2" (split)
                      (("1" (expand "singleton")
                        (("1" (expand "R_irreducible_element?")
                          (("1" (assert) nil nil)) nil))
                        nil)
                       ("2" (expand "extend")
                        (("2" (lemma gen_is_member_one_gen)
                          (("2" (inst -1 "R!1" "c!1")
                            (("2" (expand "member")
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (lemma "one_gen_unit_R")
            (("3" (inst -1 "R!1" "c!1")
              (("1" (expand "R_irreducible_element?")
                (("1" (flatten)
                  (("1" (assert)
                    (("1" (split)
                      (("1" (propax) nil nil)
                       ("2" (decompose-equality)
                        (("2" (decompose-equality)
                          (("2" (inst -1 "x!1") (("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "remove")
                (("2" (expand "R_irreducible_element?")
                  (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
                nil)
               ("3" (typepred "R!1")
                (("3" (expand "integral_domain_w_one?")
                  (("3" (expand "integral_domain?")
                    (("3" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("4" (skosimp)
            (("4" (decompose-equality 1)
              (("4" (iff)
                (("4" (prop)
                  (("1" (expand "subset?")
                    (("1" (expand "member")
                      (("1" (inst -2 "x!1") (("1" (assert) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand restrict -1)
                    (("2" (expand "R_irreducible_element?")
                      (("2" (flatten)
                        (("2" (typepred "X!1")
                          (("2" (skosimp)
                            (("2" (rewrite "principal_ideal_charac")
                              (("2"
                                (lemma
                                 " commutative_id_one_gen_charac")
                                (("2"
                                  (inst -1 "R!1" "a!1")
                                  (("2"
                                    (split)
                                    (("1"
                                      (copy -2)
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (replace -2 -4)
                                          (("1"
                                            (replace -1 -4)
                                            (("1"
                                              (expand "subset?")
                                              (("1"
                                                (inst -4 "c!1")
                                                (("1"
                                                  (rewrite
                                                   gen_is_member_one_gen)
                                                  (("1"
                                                    (expand "member")
                                                    (("1"
                                                      (expand
                                                       "restrict"
                                                       -4)
                                                      (("1"
                                                        (expand
                                                         extend
                                                         -4)
                                                        (("1"
                                                          (expand + -4)
                                                          (("1"
                                                            (skosimp)
                                                            (("1"
                                                              (inst
                                                               -5
                                                               "a!1"
                                                               "h!1")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (split)
                                                                  (("1"
                                                                    (lemma
                                                                     "one_gen_unit_R")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "R!1"
                                                                       "a!1")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (hide-all-but
                                                                           (-1
                                                                            -4
                                                                            2))
                                                                          (("1"
                                                                            (decompose-equality)
                                                                            (("1"
                                                                              (decompose-equality)
                                                                              (("1"
                                                                                (decompose-equality)
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   x!2)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -2
                                                                                     x!2)
                                                                                    (("1"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (iff)
                                                                                      (("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "remove")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (prop)
                                                                            (("2"
                                                                              (replace
                                                                               -1
                                                                               -6
                                                                               rl)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (typepred
                                                                         "R!1")
                                                                        (("3"
                                                                          (expand
                                                                           "integral_domain_w_one?")
                                                                          (("3"
                                                                            (expand
                                                                             "integral_domain?")
                                                                            (("3"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (lemma
                                                                     quot_unit_associates)
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "R!1"
                                                                       "c!1"
                                                                       "a!1"
                                                                       "h!1")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (lemma
                                                                           "divides_equal")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "R!1"
                                                                             "c!1"
                                                                             "a!1")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (decompose-equality
                                                                                 -1)
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "x!1")
                                                                                  (("1"
                                                                                    (iff)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (hide
                                                                                         -2)
                                                                                        (("1"
                                                                                          (split)
                                                                                          (("1"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide-all-but
                                                                                             (-4
                                                                                              -5
                                                                                              1))
                                                                                            (("2"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (typepred
                                                                               "R!1")
                                                                              (("2"
                                                                                (expand
                                                                                 "integral_domain_w_one?")
                                                                                (("2"
                                                                                  (expand
                                                                                   "integral_domain?")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "remove")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (prop)
                                                                            (("2"
                                                                              (replace
                                                                               -1
                                                                               -6
                                                                               rl)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (expand
                                                                         "remove")
                                                                        (("3"
                                                                          (expand
                                                                           "member")
                                                                          (("3"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("4"
                                                                        (typepred
                                                                         "R!1")
                                                                        (("4"
                                                                          (expand
                                                                           "integral_domain_w_one?")
                                                                          (("4"
                                                                            (expand
                                                                             "integral_domain?")
                                                                            (("4"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (typepred "R!1")
                                      (("2"
                                        (expand
                                         "integral_domain_w_one?")
                                        (("2"
                                          (expand "integral_domain?")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("5" (expand "R_irreducible_element?")
            (("5" (case "commutative_ring?(R!1)")
              (("1" (split)
                (("1" (prop)
                  (("1" (rewrite "commutative_id_one_gen_charac" 1)
                    (("1" (replace -1 1)
                      (("1" (decompose-equality 1)
                        (("1" (iff)
                          (("1" (prop)
                            (("1" (expand "extend" -1)
                              (("1"
                                (assert)
                                (("1"
                                  (prop)
                                  (("1"
                                    (expand "restrict")
                                    (("1"
                                      (hide-all-but (-2 1))
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but (-1 1))
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (typepred "R!1")
                      (("2" (expand "integral_domain_w_one?")
                        (("2" (expand "ring_with_one?")
                          (("2" (expand "commutative_ring?")
                            (("2" (flatten)
                              (("2"
                                (assert)
                                (("2"
                                  (expand "monoid?")
                                  (("2"
                                    (expand "ring?")
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "monad?")
                                          (("2"
                                            (hide-all-but (-2 1))
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (expand "member")
                                                (("2"
                                                  (expand "remove")
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (expand "member")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "identity?")
                                                          (("2"
                                                            (skosimp)
                                                            (("2"
                                                              (case
                                                               "x!1 = zero")
                                                              (("1"
                                                                (replaces
                                                                 -1)
                                                                (("1"
                                                                  (expand
                                                                   "restrict")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (inst
                                                                 -3
                                                                 "x!1")
                                                                (("1"
                                                                  (hide
                                                                   -1)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "remove")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (lemma "one_gen_unit_R")
                  (("2" (inst -1 "R!1" "c!1")
                    (("1" (assert)
                      (("1" (hide-all-but (-1 2))
                        (("1" (decompose-equality)
                          (("1" (decompose-equality)
                            (("1" (inst -1 x!1)
                              (("1" (grind) nil nil)
                               ("2"
                                (assert)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "remove")
                      (("2" (assert)
                        (("2" (prop)
                          (("2" (lemma "commutative_id_one_gen_charac")
                            (("2" (inst -1 "R!1" "c!1")
                              (("2"
                                (assert)
                                (("2"
                                  (replace -1 1)
                                  (("2"
                                    (decompose-equality 1)
                                    (("2"
                                      (iff)
                                      (("2"
                                        (replace -2 1)
                                        (("2"
                                          (replace -2 1 rl)
                                          (("2"
                                            (hide-all-but 1)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (skosimp)
                  (("3" (case "a!1 /=zero")
                    (("1" (inst -5 "one_gen(R!1)(a!1)")
                      (("1" (lemma "divides_subset")
                        (("1" (inst -1 "R!1" "a!1" "c!1")
                          (("1" (expand "divides?")
                            (("1" (flatten)
                              (("1"
                                (hide -2)
                                (("1"
                                  (split)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (case
                                       "subset?(one_gen(R!1)(c!1),
              restrict[T, (R!1), bool]
                  (extend[T, (R!1), bool, FALSE](one_gen(R!1)(a!1))))")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide -1 -2)
                                          (("1"
                                            (case-replace
                                             "restrict[T, (R!1), bool]
           (extend[T, (R!1), bool, FALSE](one_gen(R!1)(a!1))) = one_gen(R!1)(a!1)")
                                            (("1"
                                              (rewrite
                                               "divides_equal"
                                               :dir
                                               rl)
                                              (("1"
                                                (lemma
                                                 "int_domain_assoc_quot_unit")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "R!1"
                                                   "c!1"
                                                   "a!1"
                                                   "b!1")
                                                  (("1"
                                                    (expand
                                                     "associates?")
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "remove")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (prop)
                                                    (("2"
                                                      (replace -1 4 rl)
                                                      (("2"
                                                        (rewrite
                                                         commutative_id_one_gen_charac
                                                         4)
                                                        (("2"
                                                          (decompose-equality
                                                           4)
                                                          (("2"
                                                            (hide-all-but
                                                             1)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (expand "remove")
                                                (("3"
                                                  (expand "member")
                                                  (("3"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (decompose-equality 1)
                                              (("2"
                                                (hide-all-but 1)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but (-1 1))
                                        (("2"
                                          (expand "subset?")
                                          (("2"
                                            (skosimp)
                                            (("2"
                                              (inst -2 "x!1")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (inst 1 "b!1")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "remove")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (split)
                        (("1" (inst 1 "a!1")
                          (("1" (rewrite "principal_ideal_charac") nil
                            nil))
                          nil)
                         ("2" (prop)
                          (("2" (decompose-equality -1)
                            (("2" (inst -1 "a!1")
                              (("2"
                                (lemma "gen_is_member_one_gen")
                                (("2"
                                  (inst -1 "R!1" "a!1")
                                  (("2"
                                    (expand "member")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (iff -2)
                                        (("2"
                                          (expand "singleton")
                                          (("2"
                                            (hide-all-but (-1 1))
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (lemma "one_gen_unit_R")
                          (("3" (inst -1 "R!1" "a!1")
                            (("1" (assert)
                              (("1"
                                (hide-all-but (1 2))
                                (("1"
                                  (decompose-equality)
                                  (("1"
                                    (decompose-equality)
                                    (("1"
                                      (inst -1 "x!1")
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "remove")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (prop)
                      (("2" (replace -1 -2)
                        (("2" (assert)
                          (("2" (replace -2 3)
                            (("2"
                              (rewrite "commutative_id_one_gen_charac")
                              (("2"
                                (lemma "commutative_id_one_gen_charac")
                                (("2"
                                  (inst -1 "R!1" "zero")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (replace -1 3)
                                      (("2"
                                        (hide-all-but 3)
                                        (("2"
                                          (decompose-equality)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but 1)
                (("2" (typepred "R!1")
                  (("2" (expand "integral_domain_w_one?")
                    (("2" (expand "integral_domain?")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((T formal-nonempty-type-decl nil ring_prime_element nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ formal-const-decl "[T, T -> T]" ring_prime_element nil)
    (* formal-const-decl "[T, T -> T]" ring_prime_element nil)
    (zero formal-const-decl "T" ring_prime_element nil)
    (one formal-const-decl "T" ring_prime_element nil)
    (integral_domain_w_one? const-decl "bool"
     integral_domain_with_one_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ring? const-decl "bool" ring_def nil)
    (principal_ideal const-decl "set[T]" ring_principal_ideal_def nil)
    (/= const-decl "boolean" notequal nil)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (principal_ideal_charac formula-decl nil ring_principal_ideal nil)
    (R_irreducible_element? const-decl "bool"
     ring_irreducible_element_def nil)
    (gen_is_member_one_gen formula-decl nil ring_one_generator nil)
    (FALSE const-decl "bool" booleans nil)
    (extend const-decl "R" extend nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (one_gen const-decl "set[(R)]" ring_one_generator nil)
    (commutative_ring? const-decl "bool" ring_def nil)
    (remove const-decl "set" sets nil)
    (ring_with_one nonempty-type-eq-decl nil ring_with_one nil)
    (ring_with_one? const-decl "bool" ring_with_one_def nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (F_one_gen const-decl "[nat -> (R)]" ring_one_generator nil)
    (R_sigma def-decl "T" ring_basic_properties nil)
    (times const-decl "T" ring_basic_properties nil)
    (^ const-decl "T" group nil) (power def-decl "T" monoid_def nil)
    (fam_ideal const-decl "setof[set[T]]" ring_principal_ideal_def nil)
    (unit? const-decl "bool" ring_unit_def nil)
    (r_invertible? const-decl "bool" ring_unit_def nil)
    (l_invertible? const-decl "bool" ring_unit_def nil)
    (restrict const-decl "R" restrict nil)
    (integral_domain? const-decl "bool" integral_domain_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (one_gen_unit_R formula-decl nil ring_divides nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset? const-decl "bool" sets nil)
    (zero_times formula-decl nil ring nil)
    (divides_equal formula-decl nil ring_divides nil)
    (quot_unit_associates formula-decl nil ring_divides nil)
    (commutative_id_one_gen_charac formula-decl nil
     ring_with_id_one_generator nil)
    (associates? const-decl "bool" ring_divides_def nil)
    (int_domain_assoc_quot_unit formula-decl nil ring_divides nil)
    (divides? const-decl "bool" ring_divides_def nil)
    (divides_subset formula-decl nil ring_divides nil)
    (monoid? const-decl "bool" monoid_def nil)
    (monad? const-decl "bool" monad_def nil)
    (identity? const-decl "bool" operator_defs nil)
    (times_zero formula-decl nil ring nil)
    (left_identity formula-decl nil monad nil)
    (right_identity formula-decl nil monad nil)
    (TRUE const-decl "bool" booleans nil)
    (member const-decl "bool" sets nil))
   shostak))
 (prime_el_is_irreducible_TCC1 0
  (prime_el_is_irreducible_TCC1-1 nil 3826296708 ("" (tcc) nil nil)
   ((integral_domain_w_one? const-decl "bool"
     integral_domain_with_one_def nil)
    (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (commutative_ring? const-decl "bool" ring_def nil)
    (/= const-decl "boolean" notequal nil)
    (remove const-decl "set" sets nil)
    (nz_closed? const-decl "bool" ring_nz_closed_def nil)
    (integral_domain? const-decl "bool" integral_domain_def nil)
    (member const-decl "bool" sets nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (zero formal-const-decl "T" ring_prime_element nil)
    (* formal-const-decl "[T, T -> T]" ring_prime_element nil)
    (+ formal-const-decl "[T, T -> T]" ring_prime_element nil)
    (T formal-nonempty-type-decl nil ring_prime_element nil)
    (plus_zero formula-decl nil ring nil)
    (restrict const-decl "R" restrict nil)
    (zero_plus formula-decl nil ring nil)
    (identity? const-decl "bool" operator_defs nil)
    (monad? const-decl "bool" monad_def nil)
    (associative? const-decl "bool" operator_defs nil)
    (monoid? const-decl "bool" monoid_def nil)
    (inv_exists? const-decl "bool" group_def nil)
    (group? const-decl "bool" group_def nil)
    (commutative? const-decl "bool" operator_defs nil)
    (abelian_group? const-decl "bool" group_def nil)
    (left_distributive? const-decl "bool" operator_defs_more nil)
    (right_distributive? const-decl "bool" operator_defs_more nil)
    (ring? const-decl "bool" ring_def nil)
    (one formal-const-decl "T" ring_prime_element nil)
    (right_identity formula-decl nil monad nil)
    (left_identity formula-decl nil monad nil)
    (ring_with_one? const-decl "bool" ring_with_one_def nil))
   nil
   (prime_el_is_irreducible subtype "ring_prime_element.R"
    "(ring_with_one_def[ring_prime_element.T, ring_prime_element.+, ring_prime_element.*, ring_prime_element.zero, ring_prime_element.one].ring_with_one?)")))
 (prime_el_is_irreducible 0
  (prime_el_is_irreducible-1 nil 3826293573
   ("" (skosimp)
    (("" (expand "R_prime_element?")
      (("" (expand "R_irreducible_element?")
        (("" (flatten)
          (("" (assert)
            (("" (skosimp)
              (("" (inst -1 "a!1" "b!1")
                (("" (replace -2 -1 rl)
                  (("" (rewrite "x_divides_x")
                    (("1" (split)
                      (("1" (expand "divides?")
                        (("1" (skosimp)
                          (("1" (replace -1 -2 rl)
                            (("1" (lemma "cancel_right_minus")
                              (("1"
                                (inst
                                 -1
                                 "p!1"
                                 "p!1 * x!1 * b!1"
                                 "p!1 * x!1 * b!1")
                                (("1"
                                  (assert)
                                  (("1"
                                    (rewrite "times_associative" -1)
                                    (("1"
                                      (rewrite
                                       "times_negative"
                                       :dir
                                       rl)
                                      (("1"
                                        (lemma "times_one")
                                        (("1"
                                          (inst -1 "p!1")
                                          (("1"
                                            (replace -1 -2 rl)
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (rewrite
                                                 "times_associative"
                                                 -1)
                                                (("1"
                                                  (rewrite
                                                   "right_distributive"
                                                   :dir
                                                   rl)
                                                  (("1"
                                                    (lemma
                                                     "nz_times_is_zero")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "R!1"
                                                       "p!1"
                                                       "(one + (inv((x!1 * b!1))))")
                                                      (("1"
                                                        (typepred
                                                         "R!1")
                                                        (("1"
                                                          (expand
                                                           "integral_domain_w_one?")
                                                          (("1"
                                                            (expand
                                                             "integral_domain?")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (case
                                                                   "R!1(one + (inv((x!1 * b!1))))")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (lemma
                                                                       "cancel_right_plus")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "one + (inv((x!1 * b!1)))"
                                                                         "zero"
                                                                         "x!1 * b!1")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (rewrite
                                                                             "plus_associative")
                                                                            (("1"
                                                                              (expand
                                                                               "unit?"
                                                                               4)
                                                                              (("1"
                                                                                (expand
                                                                                 "l_invertible?")
                                                                                (("1"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (inst
                                                                                     1
                                                                                     "x!1")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (expand
                                                                                     "r_invertible?")
                                                                                    (("2"
                                                                                      (inst
                                                                                       1
                                                                                       "x!1")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "commutative_ring?")
                                                                                        (("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "commutative?")
                                                                                            (("2"
                                                                                              (inst
                                                                                               -4
                                                                                               "b!1"
                                                                                               "x!1")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "restrict")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (lemma
                                                                     "R_sum_star_closed")
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "R!1"
                                                                       "one"
                                                                       "(inv((x!1 * b!1)))")
                                                                      (("2"
                                                                        (expand
                                                                         "member")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (split)
                                                                            (("1"
                                                                              (expand
                                                                               "monad?")
                                                                              (("1"
                                                                                (expand
                                                                                 "member")
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "remove")
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "member")
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (lemma
                                                                               "inv_is_member_R")
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "R!1"
                                                                                 "x!1*b!1")
                                                                                (("2"
                                                                                  (expand
                                                                                   "member")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (lemma
                                                                                       "R_prod_star_closed")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -1
                                                                                         "R!1"
                                                                                         "x!1"
                                                                                         "b!1")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "member")
                                                                                          (("2"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "divides?")
                        (("2" (skosimp)
                          (("2" (replace -1 -2 rl)
                            (("2" (rewrite "times_associative" :dir rl)
                              (("2"
                                (typepred "R!1")
                                (("2"
                                  (expand "integral_domain_w_one?")
                                  (("2"
                                    (expand "integral_domain?")
                                    (("2"
                                      (expand "commutative_ring?")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (expand "commutative?")
                                          (("2"
                                            (inst -2 "a!1" "p!1")
                                            (("2"
                                              (expand "restrict")
                                              (("2"
                                                (replaces -2)
                                                (("2"
                                                  (rewrite
                                                   "times_associative")
                                                  (("2"
                                                    (lemma
                                                     "cancel_right_minus")
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "p!1"
                                                       "p!1 * (a!1 * x!1)"
                                                       "p!1 * (a!1 * x!1)")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (rewrite
                                                           "times_negative"
                                                           :dir
                                                           rl)
                                                          (("2"
                                                            (lemma
                                                             "times_one")
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "p!1")
                                                              (("2"
                                                                (replace
                                                                 -1
                                                                 -2
                                                                 rl)
                                                                (("2"
                                                                  (rewrite
                                                                   "times_associative")
                                                                  (("2"
                                                                    (rewrite
                                                                     "right_distributive"
                                                                     :dir
                                                                     rl)
                                                                    (("2"
                                                                      (hide
                                                                       -1)
                                                                      (("2"
                                                                        (lemma
                                                                         "nz_times_is_zero")
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "R!1"
                                                                           "p!1"
                                                                           "(one + (inv((a!1 * x!1))))")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (case
                                                                               "R!1((one + (inv((a!1 * x!1)))))")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "cancel_right_plus")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "(one + (inv((a!1 * x!1))))"
                                                                                     "zero"
                                                                                     "a!1 * x!1")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "plus_associative")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "unit?")
                                                                                          (("1"
                                                                                            (hide-all-but
                                                                                             (-1
                                                                                              -5
                                                                                              -6
                                                                                              3))
                                                                                            (("1"
                                                                                              (expand
                                                                                               "l_invertible?")
                                                                                              (("1"
                                                                                                (split)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   1
                                                                                                   "x!1")
                                                                                                  (("1"
                                                                                                    (typepred
                                                                                                     "R!1")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "integral_domain_w_one?")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "integral_domain?")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "commutative_ring?")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "commutative?")
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "x!1"
                                                                                                               "a!1")
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "restrict")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (expand
                                                                                                   "r_invertible?")
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     1
                                                                                                     "x!1")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide-all-but
                                                                                 (-3
                                                                                  -5
                                                                                  1))
                                                                                (("2"
                                                                                  (lemma
                                                                                   "R_sum_star_closed")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -1
                                                                                     "R!1"
                                                                                     "one"
                                                                                     "(inv((a!1 * x!1)))")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "member")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (split)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "monad?")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "member")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "remove")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "member")
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (lemma
                                                                                             "inv_is_member_R")
                                                                                            (("2"
                                                                                              (inst
                                                                                               -1
                                                                                               "R!1"
                                                                                               "a!1*x!1")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (lemma
                                                                                                   "R_prod_star_closed")
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "R!1"
                                                                                                     "a!1"
                                                                                                     "x!1")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "remove")
                      (("2" (expand "member") (("2" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((R_prime_element? const-decl "bool" ring_prime_element_def nil)
    (cancel_right_minus formula-decl nil ring nil)
    (negate_is_right_inv formula-decl nil ring nil)
    (times_negative formula-decl nil ring nil)
    (right_distributive formula-decl nil ring nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (ring? const-decl "bool" ring_def nil)
    (cancel_right_plus formula-decl nil ring nil)
    (zero_plus formula-decl nil ring nil)
    (unit? const-decl "bool" ring_unit_def nil)
    (restrict const-decl "R" restrict nil)
    (commutative? const-decl "bool" operator_defs nil)
    (commutative_ring? const-decl "bool" ring_def nil)
    (r_invertible? const-decl "bool" ring_unit_def nil)
    (l_invertible? const-decl "bool" ring_unit_def nil)
    (plus_zero formula-decl nil ring nil)
    (negate_is_left_inv formula-decl nil ring nil)
    (plus_associative formula-decl nil ring nil)
    (inv_is_member_R formula-decl nil ring_basic_properties nil)
    (R_prod_star_closed formula-decl nil ring_basic_properties nil)
    (monad? const-decl "bool" monad_def nil)
    (member const-decl "bool" sets nil)
    (R_sum_star_closed formula-decl nil ring_basic_properties nil)
    (integral_domain? const-decl "bool" integral_domain_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nz_times_is_zero formula-decl nil ring_nz_closed_aux nil)
    (left_identity formula-decl nil monad nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (inv const-decl "{y | x * y = one AND y * x = one}" group nil)
    (times_one formula-decl nil ring_with_one nil)
    (times_associative formula-decl nil ring nil)
    (divides? const-decl "bool" ring_divides_def nil)
    (TRUE const-decl "bool" booleans nil)
    (remove const-decl "set" sets nil)
    (ring_with_one nonempty-type-eq-decl nil ring_with_one nil)
    (ring_with_one? const-decl "bool" ring_with_one_def nil)
    (x_divides_x formula-decl nil ring_divides nil)
    (integral_domain_w_one? const-decl "bool"
     integral_domain_with_one_def nil)
    (one formal-const-decl "T" ring_prime_element nil)
    (zero formal-const-decl "T" ring_prime_element nil)
    (* formal-const-decl "[T, T -> T]" ring_prime_element nil)
    (+ formal-const-decl "[T, T -> T]" ring_prime_element nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-nonempty-type-decl nil ring_prime_element nil)
    (R_irreducible_element? const-decl "bool"
     ring_irreducible_element_def nil))
   shostak))
 (assoc_irreducible_is_irreducible_TCC1 0
  (assoc_irreducible_is_irreducible_TCC1-1 nil 3856625615
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (one formal-const-decl "T" ring_prime_element nil)
    (integral_domain_w_one? const-decl "bool"
     integral_domain_with_one_def nil)
    (remove const-decl "set" sets nil)
    (left_identity formula-decl nil monad nil)
    (right_identity formula-decl nil monad nil)
    (integral_domain? const-decl "bool" integral_domain_def nil)
    (nz_closed? const-decl "bool" ring_nz_closed_def nil)
    (/= const-decl "boolean" notequal nil)
    (commutative_ring? const-decl "bool" ring_def nil)
    (ring? const-decl "bool" ring_def nil)
    (right_distributive? const-decl "bool" operator_defs_more nil)
    (left_distributive? const-decl "bool" operator_defs_more nil)
    (abelian_group? const-decl "bool" group_def nil)
    (commutative? const-decl "bool" operator_defs nil)
    (group? const-decl "bool" group_def nil)
    (inv_exists? const-decl "bool" group_def nil)
    (monoid? const-decl "bool" monoid_def nil)
    (associative? const-decl "bool" operator_defs nil)
    (monad? const-decl "bool" monad_def nil)
    (identity? const-decl "bool" operator_defs nil)
    (zero_plus formula-decl nil ring nil)
    (restrict const-decl "R" restrict nil)
    (plus_zero formula-decl nil ring nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (member const-decl "bool" sets nil)
    (zero formal-const-decl "T" ring_prime_element nil)
    (* formal-const-decl "[T, T -> T]" ring_prime_element nil)
    (+ formal-const-decl "[T, T -> T]" ring_prime_element nil)
    (T formal-nonempty-type-decl nil ring_prime_element nil)
    (divides? const-decl "bool" ring_divides_def nil)
    (associates? const-decl "bool" ring_divides_def nil))
   nil
   (assoc_irreducible_is_irreducible subtype "ring_prime_element.p"
    "(ring_prime_element.R)")))
 (assoc_irreducible_is_irreducible_TCC2 0
  (assoc_irreducible_is_irreducible_TCC2-1 nil 3856625615
   ("" (subtype-tcc) nil nil)
   ((remove const-decl "set" sets nil)
    (integral_domain_w_one? const-decl "bool"
     integral_domain_with_one_def nil)
    (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (commutative_ring? const-decl "bool" ring_def nil)
    (/= const-decl "boolean" notequal nil)
    (nz_closed? const-decl "bool" ring_nz_closed_def nil)
    (integral_domain? const-decl "bool" integral_domain_def nil)
    (zero formal-const-decl "T" ring_prime_element nil)
    (* formal-const-decl "[T, T -> T]" ring_prime_element nil)
    (+ formal-const-decl "[T, T -> T]" ring_prime_element nil)
    (T formal-nonempty-type-decl nil ring_prime_element nil)
    (divides? const-decl "bool" ring_divides_def nil)
    (associates? const-decl "bool" ring_divides_def nil)
    (member const-decl "bool" sets nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (plus_zero formula-decl nil ring nil)
    (restrict const-decl "R" restrict nil)
    (zero_plus formula-decl nil ring nil)
    (identity? const-decl "bool" operator_defs nil)
    (monad? const-decl "bool" monad_def nil)
    (associative? const-decl "bool" operator_defs nil)
    (monoid? const-decl "bool" monoid_def nil)
    (inv_exists? const-decl "bool" group_def nil)
    (group? const-decl "bool" group_def nil)
    (commutative? const-decl "bool" operator_defs nil)
    (abelian_group? const-decl "bool" group_def nil)
    (left_distributive? const-decl "bool" operator_defs_more nil)
    (right_distributive? const-decl "bool" operator_defs_more nil)
    (ring? const-decl "bool" ring_def nil)
    (one formal-const-decl "T" ring_prime_element nil)
    (right_identity formula-decl nil monad nil)
    (left_identity formula-decl nil monad nil)
    (ring_with_one? const-decl "bool" ring_with_one_def nil))
   nil
   (assoc_irreducible_is_irreducible subtype "ring_prime_element.R"
    "(ring_with_one_def[ring_prime_element.T, ring_prime_element.+, ring_prime_element.*, ring_prime_element.zero, ring_prime_element.one].ring_with_one?)")))
 (assoc_irreducible_is_irreducible_TCC3 0
  (assoc_irreducible_is_irreducible_TCC3-1 nil 3856625615
   ("" (subtype-tcc) nil nil)
   ((remove const-decl "set" sets nil)
    (integral_domain_w_one? const-decl "bool"
     integral_domain_with_one_def nil)
    (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (left_identity formula-decl nil monad nil)
    (right_identity formula-decl nil monad nil)
    (integral_domain? const-decl "bool" integral_domain_def nil)
    (nz_closed? const-decl "bool" ring_nz_closed_def nil)
    (commutative_ring? const-decl "bool" ring_def nil)
    (ring? const-decl "bool" ring_def nil)
    (right_distributive? const-decl "bool" operator_defs_more nil)
    (left_distributive? const-decl "bool" operator_defs_more nil)
    (abelian_group? const-decl "bool" group_def nil)
    (commutative? const-decl "bool" operator_defs nil)
    (group? const-decl "bool" group_def nil)
    (inv_exists? const-decl "bool" group_def nil)
    (monoid? const-decl "bool" monoid_def nil)
    (associative? const-decl "bool" operator_defs nil)
    (monad? const-decl "bool" monad_def nil)
    (identity? const-decl "bool" operator_defs nil)
    (zero_plus formula-decl nil ring nil)
    (restrict const-decl "R" restrict nil)
    (plus_zero formula-decl nil ring nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (member const-decl "bool" sets nil)
    (zero formal-const-decl "T" ring_prime_element nil)
    (* formal-const-decl "[T, T -> T]" ring_prime_element nil)
    (+ formal-const-decl "[T, T -> T]" ring_prime_element nil)
    (T formal-nonempty-type-decl nil ring_prime_element nil)
    (divides? const-decl "bool" ring_divides_def nil)
    (associates? const-decl "bool" ring_divides_def nil)
    (/= const-decl "boolean" notequal nil)
    (l_invertible? const-decl "bool" ring_unit_def nil)
    (r_invertible? const-decl "bool" ring_unit_def nil)
    (unit? const-decl "bool" ring_unit_def nil)
    (one formal-const-decl "T" ring_prime_element nil)
    (R_irreducible_element? const-decl "bool"
     ring_irreducible_element_def nil))
   nil
   (assoc_irreducible_is_irreducible subtype "ring_prime_element.c"
    "(ring_prime_element.R)")))
 (assoc_irreducible_is_irreducible 0
  (assoc_irreducible_is_irreducible-1 nil 3833447764
   ("" (skeep)
    (("" (expand "R_irreducible_element?")
      (("" (case " c /= zero AND (NOT unit?(R)(c))")
        (("1" (assert)
          (("1" (flatten)
            (("1" (assert)
              (("1" (skeep)
                (("1" (expand "associates?")
                  (("1" (flatten)
                    (("1" (hide -1)
                      (("1" (expand "divides?")
                        (("1" (skeep)
                          (("1" (copy -2)
                            (("1" (inst -1 "c" "x")
                              (("1"
                                (assert)
                                (("1"
                                  (replaces -4)
                                  (("1"
                                    (rewrite "times_associative")
                                    (("1"
                                      (inst -3 "a" "b*x")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide 2 5)
                                          (("1"
                                            (lemma
                                             "quot_unit_associates")
                                            (("1"
                                              (inst
                                               -1
                                               "R"
                                               "b*x"
                                               "b"
                                               "x")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lemma
                                                   "int_domain_assoc_unit")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "R"
                                                     "b * x"
                                                     "b")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "remove")
                                                (("2"
                                                  (expand "member")
                                                  (("2"
                                                    (prop)
                                                    (("2"
                                                      (replace -1 1 rl)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (expand "remove")
                                                (("3"
                                                  (split)
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (replace
                                                       -1
                                                       -3
                                                       rl)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (lemma
                                                     "R_prod_star_closed")
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("4"
                                                (typepred "R")
                                                (("4"
                                                  (expand
                                                   "integral_domain_w_one?")
                                                  (("4"
                                                    (expand
                                                     "integral_domain?")
                                                    (("4"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma "R_prod_star_closed")
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (inst -1 "R")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (split)
          (("1" (hide 2)
            (("1" (expand "associates?")
              (("1" (flatten)
                (("1" (hide -2)
                  (("1" (expand "divides?")
                    (("1" (skeep)
                      (("1" (replaces -1) (("1" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 1)
            (("2" (flatten)
              (("2" (lemma "int_domain_assoc_unit")
                (("2" (inst -1 "R" "c" "p")
                  (("2" (assert)
                    (("2" (expand "associates?") (("2" (prop) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (typepred "c")
          (("3" (expand "remove")
            (("3" (flatten) (("3" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((R_irreducible_element? const-decl "bool"
     ring_irreducible_element_def nil)
    (zero_times formula-decl nil ring nil)
    (associates? const-decl "bool" ring_divides_def nil)
    (TRUE const-decl "bool" booleans nil)
    (commutative_ring? const-decl "bool" ring_def nil)
    (ring_with_one nonempty-type-eq-decl nil ring_with_one nil)
    (int_domain_assoc_unit formula-decl nil ring_divides nil)
    (member const-decl "bool" sets nil)
    (times_zero formula-decl nil ring nil)
    (ring? const-decl "bool" ring_def nil)
    (R_prod_star_closed formula-decl nil ring_basic_properties nil)
    (integral_domain? const-decl "bool" integral_domain_def nil)
    (quot_unit_associates formula-decl nil ring_divides nil)
    (times_associative formula-decl nil ring nil)
    (divides? const-decl "bool" ring_divides_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil ring_prime_element nil)
    (/= const-decl "boolean" notequal nil)
    (set type-eq-decl nil sets nil) (remove const-decl "set" sets nil)
    (zero formal-const-decl "T" ring_prime_element nil)
    (+ formal-const-decl "[T, T -> T]" ring_prime_element nil)
    (* formal-const-decl "[T, T -> T]" ring_prime_element nil)
    (one formal-const-decl "T" ring_prime_element nil)
    (integral_domain_w_one? const-decl "bool"
     integral_domain_with_one_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ring_with_one? const-decl "bool" ring_with_one_def nil)
    (unit? const-decl "bool" ring_unit_def nil))
   shostak))
 (assoc_prime_is_prime_TCC1 0
  (assoc_prime_is_prime_TCC2-1 nil 3833447762 ("" (tcc) nil nil)
   ((remove const-decl "set" sets nil)
    (integral_domain_w_one? const-decl "bool"
     integral_domain_with_one_def nil)
    (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (left_identity formula-decl nil monad nil)
    (right_identity formula-decl nil monad nil)
    (integral_domain? const-decl "bool" integral_domain_def nil)
    (nz_closed? const-decl "bool" ring_nz_closed_def nil)
    (commutative_ring? const-decl "bool" ring_def nil)
    (ring? const-decl "bool" ring_def nil)
    (right_distributive? const-decl "bool" operator_defs_more nil)
    (left_distributive? const-decl "bool" operator_defs_more nil)
    (abelian_group? const-decl "bool" group_def nil)
    (commutative? const-decl "bool" operator_defs nil)
    (group? const-decl "bool" group_def nil)
    (inv_exists? const-decl "bool" group_def nil)
    (monoid? const-decl "bool" monoid_def nil)
    (associative? const-decl "bool" operator_defs nil)
    (monad? const-decl "bool" monad_def nil)
    (identity? const-decl "bool" operator_defs nil)
    (zero_plus formula-decl nil ring nil)
    (restrict const-decl "R" restrict nil)
    (plus_zero formula-decl nil ring nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (member const-decl "bool" sets nil)
    (zero formal-const-decl "T" ring_prime_element nil)
    (* formal-const-decl "[T, T -> T]" ring_prime_element nil)
    (+ formal-const-decl "[T, T -> T]" ring_prime_element nil)
    (T formal-nonempty-type-decl nil ring_prime_element nil)
    (divides? const-decl "bool" ring_divides_def nil)
    (associates? const-decl "bool" ring_divides_def nil)
    (/= const-decl "boolean" notequal nil)
    (l_invertible? const-decl "bool" ring_unit_def nil)
    (r_invertible? const-decl "bool" ring_unit_def nil)
    (unit? const-decl "bool" ring_unit_def nil)
    (one formal-const-decl "T" ring_prime_element nil)
    (R_prime_element? const-decl "bool" ring_prime_element_def nil))
   nil
   (assoc_prime_is_prime subtype "ring_prime_element.c"
    "(ring_prime_element.R)")))
 (assoc_prime_is_prime 0
  (assoc_prime_is_prime-1 nil 3833549427
   ("" (skeep)
    (("" (expand "R_prime_element?" 1)
      (("" (lemma "prime_el_is_irreducible")
        (("" (inst -1 "R" "p")
          (("" (assert)
            (("" (lemma "assoc_irreducible_is_irreducible")
              (("" (inst -1 "R" "p" "c")
                (("" (assert)
                  (("" (expand "R_irreducible_element?" -1)
                    (("" (flatten)
                      (("" (assert)
                        (("" (skeep)
                          (("" (expand "associates?")
                            (("" (flatten)
                              ((""
                                (expand "R_prime_element?")
                                ((""
                                  (flatten)
                                  ((""
                                    (expand "divides?")
                                    ((""
                                      (skeep*)
                                      ((""
                                        (replace -3 -6 rl)
                                        ((""
                                          (rewrite "times_associative")
                                          ((""
                                            (inst -5 "a" "b")
                                            ((""
                                              (split)
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (replace -5 -1 rl)
                                                  (("1"
                                                    (rewrite
                                                     "times_associative")
                                                    (("1"
                                                      (inst
                                                       5
                                                       "(x!1 * x!3)")
                                                      (("1"
                                                        (lemma
                                                         "R_prod_star_closed")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "R"
                                                           "x!1"
                                                           "x!3")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skeep)
                                                (("2"
                                                  (replace -5 -1 rl)
                                                  (("2"
                                                    (rewrite
                                                     "times_associative")
                                                    (("2"
                                                      (inst
                                                       6
                                                       "(x!1 * x!3)")
                                                      (("2"
                                                        (lemma
                                                         "R_prod_star_closed")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "R"
                                                           "x!1"
                                                           "x!3")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (inst 1 "(x * x!2)")
                                                (("3"
                                                  (lemma
                                                   "R_prod_star_closed")
                                                  (("3"
                                                    (inst
                                                     -1
                                                     "R"
                                                     "x"
                                                     "x!2")
                                                    (("3"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((R_prime_element? const-decl "bool" ring_prime_element_def nil)
    (T formal-nonempty-type-decl nil ring_prime_element nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" ring_prime_element nil)
    (* formal-const-decl "[T, T -> T]" ring_prime_element nil)
    (zero formal-const-decl "T" ring_prime_element nil)
    (one formal-const-decl "T" ring_prime_element nil)
    (integral_domain_w_one? const-decl "bool"
     integral_domain_with_one_def nil)
    (remove const-decl "set" sets nil)
    (assoc_irreducible_is_irreducible formula-decl nil
     ring_prime_element nil)
    (TRUE const-decl "bool" booleans nil)
    (times_associative formula-decl nil ring nil)
    (ring? const-decl "bool" ring_def nil)
    (member const-decl "bool" sets nil)
    (R_prod_star_closed formula-decl nil ring_basic_properties nil)
    (divides? const-decl "bool" ring_divides_def nil)
    (associates? const-decl "bool" ring_divides_def nil)
    (R_irreducible_element? const-decl "bool"
     ring_irreducible_element_def nil)
    (prime_el_is_irreducible formula-decl nil ring_prime_element nil))
   shostak))
 (irreducible_el_divisors_charac_TCC1 0
  (irreducible_el_divisors_charac_TCC1-1 nil 3833553405
   ("" (tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil ring_prime_element nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" ring_prime_element nil)
    (* formal-const-decl "[T, T -> T]" ring_prime_element nil)
    (zero formal-const-decl "T" ring_prime_element nil)
    (one formal-const-decl "T" ring_prime_element nil)
    (commutative_ring_with_one? const-decl "bool" ring_with_one_def
     nil)
    (remove const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (plus_zero formula-decl nil ring nil)
    (restrict const-decl "R" restrict nil)
    (zero_plus formula-decl nil ring nil)
    (identity? const-decl "bool" operator_defs nil)
    (monad? const-decl "bool" monad_def nil)
    (associative? const-decl "bool" operator_defs nil)
    (monoid? const-decl "bool" monoid_def nil)
    (inv_exists? const-decl "bool" group_def nil)
    (group? const-decl "bool" group_def nil)
    (commutative? const-decl "bool" operator_defs nil)
    (abelian_group? const-decl "bool" group_def nil)
    (left_distributive? const-decl "bool" operator_defs_more nil)
    (right_distributive? const-decl "bool" operator_defs_more nil)
    (ring? const-decl "bool" ring_def nil)
    (right_identity formula-decl nil monad nil)
    (left_identity formula-decl nil monad nil)
    (ring_with_one? const-decl "bool" ring_with_one_def nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (irreducible_el_divisors_charac subtype "ring_prime_element.p"
    "(ring_prime_element.R)")))
 (irreducible_el_divisors_charac_TCC2 0
  (irreducible_el_divisors_charac_TCC2-1 nil 3833553405
   ("" (tcc) nil nil)
   ((remove const-decl "set" sets nil)
    (commutative_ring_with_one? const-decl "bool" ring_with_one_def
     nil)
    (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (ring_with_one? const-decl "bool" ring_with_one_def nil)
    (left_identity formula-decl nil monad nil)
    (right_identity formula-decl nil monad nil)
    (ring? const-decl "bool" ring_def nil)
    (right_distributive? const-decl "bool" operator_defs_more nil)
    (left_distributive? const-decl "bool" operator_defs_more nil)
    (abelian_group? const-decl "bool" group_def nil)
    (commutative? const-decl "bool" operator_defs nil)
    (group? const-decl "bool" group_def nil)
    (inv_exists? const-decl "bool" group_def nil)
    (monoid? const-decl "bool" monoid_def nil)
    (associative? const-decl "bool" operator_defs nil)
    (monad? const-decl "bool" monad_def nil)
    (identity? const-decl "bool" operator_defs nil)
    (zero_plus formula-decl nil ring nil)
    (restrict const-decl "R" restrict nil)
    (plus_zero formula-decl nil ring nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (member const-decl "bool" sets nil)
    (/= const-decl "boolean" notequal nil)
    (l_invertible? const-decl "bool" ring_unit_def nil)
    (r_invertible? const-decl "bool" ring_unit_def nil)
    (unit? const-decl "bool" ring_unit_def nil)
    (one formal-const-decl "T" ring_prime_element nil)
    (zero formal-const-decl "T" ring_prime_element nil)
    (* formal-const-decl "[T, T -> T]" ring_prime_element nil)
    (+ formal-const-decl "[T, T -> T]" ring_prime_element nil)
    (T formal-nonempty-type-decl nil ring_prime_element nil)
    (R_irreducible_element? const-decl "bool"
     ring_irreducible_element_def nil)
    (divides? const-decl "bool" ring_divides_def nil)
    (associates? const-decl "bool" ring_divides_def nil))
   nil
   (irreducible_el_divisors_charac subtype "ring_prime_element.c"
    "(ring_prime_element.R)")))
 (irreducible_el_divisors_charac 0
  (irreducible_el_divisors_charac-1 nil 3833553411
   ("" (skeep)
    (("" (expand "divides?")
      (("" (skeep)
        (("" (expand "R_irreducible_element?")
          (("" (flatten)
            (("" (inst -1 "c" "x")
              (("" (assert)
                (("" (lemma "quot_unit_associates")
                  (("" (inst -1 "R" "p" "c" "x")
                    (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((divides? const-decl "bool" ring_divides_def nil)
    (R_irreducible_element? const-decl "bool"
     ring_irreducible_element_def nil)
    (T formal-nonempty-type-decl nil ring_prime_element nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" ring_prime_element nil)
    (* formal-const-decl "[T, T -> T]" ring_prime_element nil)
    (zero formal-const-decl "T" ring_prime_element nil)
    (one formal-const-decl "T" ring_prime_element nil)
    (commutative_ring_with_one? const-decl "bool" ring_with_one_def
     nil)
    (remove const-decl "set" sets nil)
    (quot_unit_associates formula-decl nil ring_divides nil)
    (commutative_ring? const-decl "bool" ring_def nil)
    (ring_with_one nonempty-type-eq-decl nil ring_with_one nil)
    (ring_with_one? const-decl "bool" ring_with_one_def nil))
   shostak))
 (prime_el_divides_TCC1 0
  (prime_el_divides_TCC1-1 nil 3854923588 ("" (tcc) nil nil)
   ((integral_domain_w_one? const-decl "bool"
     integral_domain_with_one_def nil)
    (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (/= const-decl "boolean" notequal nil)
    (l_invertible? const-decl "bool" ring_unit_def nil)
    (r_invertible? const-decl "bool" ring_unit_def nil)
    (unit? const-decl "bool" ring_unit_def nil)
    (zero formal-const-decl "T" ring_prime_element nil)
    (* formal-const-decl "[T, T -> T]" ring_prime_element nil)
    (+ formal-const-decl "[T, T -> T]" ring_prime_element nil)
    (T formal-nonempty-type-decl nil ring_prime_element nil)
    (divides? const-decl "bool" ring_divides_def nil)
    (one formal-const-decl "T" ring_prime_element nil)
    (R_prime_element? const-decl "bool" ring_prime_element_def nil)
    (member const-decl "bool" sets nil)
    (remove const-decl "set" sets nil))
   nil
   (prime_el_divides subtype "ring_prime_element.p"
    "(sets[ring_prime_element.T].remove(ring_prime_element.zero, ring_prime_element.R))")))
 (prime_el_divides_TCC2 0
  (prime_el_divides_TCC2-1 nil 3854923588
   ("" (skosimp)
    (("" (lemma op_fseq_closed)
      (("" (inst?)
        (("" (hide 2)
          (("" (typepred "R!1")
            (("" (expand "integral_domain_w_one?")
              (("" (flatten)
                (("" (hide -1)
                  (("" (expand "monad?")
                    (("" (prop)
                      (("1" (hide (-2 -3))
                        (("1" (expand "star_closed?")
                          (("1" (skosimp*)
                            (("1" (inst?)
                              (("1"
                                (expand "member")
                                (("1"
                                  (expand "remove")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma R_prod_star_closed)
                                (("2"
                                  (typepred "x!1" "y!1")
                                  (("2"
                                    (inst?)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (lemma R_prod_star_closed)
                                (("3"
                                  (typepred "x!1" "y!1")
                                  (("3"
                                    (inst?)
                                    (("3" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide (-1 -3))
                        (("2" (expand "member")
                          (("2" (expand "remove")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("3" (hide (-1 -2))
                        (("3" (expand "identity?")
                          (("3" (expand "restrict")
                            (("3" (skosimp*)
                              (("3"
                                (inst?)
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((one formal-const-decl "T" ring_prime_element nil)
    (* formal-const-decl "[T, T -> T]" ring_prime_element nil)
    (T formal-nonempty-type-decl nil ring_prime_element nil)
    (op_fseq_closed formula-decl nil op_finseq nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (remove const-decl "set" sets nil)
    (x!1 skolem-const-decl "(R!1)" ring_prime_element nil)
    (y!1 skolem-const-decl "(R!1)" ring_prime_element nil)
    (member const-decl "bool" sets nil)
    (ring? const-decl "bool" ring_def nil)
    (R_prod_star_closed formula-decl nil ring_basic_properties nil)
    (identity? const-decl "bool" operator_defs nil)
    (right_identity formula-decl nil monad nil)
    (left_identity formula-decl nil monad nil)
    (x!1 skolem-const-decl "(R!1)" ring_prime_element nil)
    (restrict const-decl "R" restrict nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (R!1 skolem-const-decl
     "(integral_domain_w_one?[T, +, *, zero, one])" ring_prime_element
     nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (integral_domain_w_one? const-decl "bool"
     integral_domain_with_one_def nil)
    (zero formal-const-decl "T" ring_prime_element nil)
    (+ formal-const-decl "[T, T -> T]" ring_prime_element nil)
    (monad? const-decl "bool" monad_def nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak
   (prime_el_divides subtype
    "op_finseq_def[ring_prime_element.T, ring_prime_element.*, ring_prime_element.one].op_fseq(ring_prime_element.fs)"
    "(ring_prime_element.R)")))
 (prime_el_divides 0
  (prime_el_divides-1 nil 3854923679
   ("" (skolem * ("R!1" "p!1" "_"))
    (("" (measure-induct+ "length(fs)" "fs")
      (("1" (expand "finseq_appl")
        (("1" (case "length(x!1) = 0")
          (("1" (hide (-2 1))
            (("1" (expand "op_fseq")
              (("1" (assert)
                (("1" (expand "divides?")
                  (("1" (skosimp)
                    (("1" (expand "R_prime_element?")
                      (("1" (flatten)
                        (("1" (hide -2)
                          (("1" (typepred "R!1")
                            (("1" (expand "integral_domain_w_one?")
                              (("1"
                                (expand "integral_domain?")
                                (("1"
                                  (expand "commutative_ring?")
                                  (("1"
                                    (expand "commutative?")
                                    (("1"
                                      (expand "restrict")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (hide (-1 -3 -4 1))
                                          (("1"
                                            (expand "unit?")
                                            (("1"
                                              (expand "l_invertible?")
                                              (("1"
                                                (expand
                                                 "r_invertible?")
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (inst 1 "x!2")
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (inst?)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (lemma seq_first_rest_1)
            (("2" (inst?)
              (("2" (assert)
                (("2" (replace -1 -4)
                  (("2" (lemma op_fseq_composition)
                    (("2" (inst?)
                      (("2" (replace -1 -5)
                        (("2" (hide (-1 -2))
                          (("2" (expand "R_prime_element?")
                            (("2" (flatten)
                              (("2"
                                (expand "first")
                                (("2"
                                  (expand "finseq_appl")
                                  (("2"
                                    (rewrite op_fseq_singleton)
                                    (("2"
                                      (case "length(rest(x!1)) = 0")
                                      (("1"
                                        (hide (-2 -3 2 3))
                                        (("1"
                                          (expand "op_fseq")
                                          (("1"
                                            (assert)
                                            (("1" (inst?) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (inst
                                         -2
                                         "x!1`seq(0)"
                                         "op_fseq(rest(x!1))")
                                        (("1"
                                          (prop)
                                          (("1"
                                            (hide (-2 -3 1 2 3 4))
                                            (("1" (inst?) nil nil))
                                            nil)
                                           ("2"
                                            (inst -2 "rest(x!1)")
                                            (("1"
                                              (prop)
                                              (("1"
                                                (skosimp)
                                                (("1"
                                                  (lemma rest_pos)
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "finseq_appl")
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             1)
                                                            (("2"
                                                              (typepred
                                                               i!1)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but (1 2 3))
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (1 2 3))
                                              (("2"
                                                (skosimp)
                                                (("2"
                                                  (lemma rest_pos)
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         "finseq_appl")
                                                        (("2"
                                                          (inst?)
                                                          (("1"
                                                            (typepred
                                                             "x!1`seq(1 + x1!1)")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (typepred
                                                               "x1!1")
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but (1 2 3))
                                          (("2"
                                            (lemma op_fseq_closed)
                                            (("2"
                                              (inst
                                               -1
                                               "R!1"
                                               "rest[T](x!1)")
                                              (("1"
                                                (hide 2)
                                                (("1"
                                                  (skosimp)
                                                  (("1"
                                                    (lemma rest_pos)
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "finseq_appl")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (typepred
                                                               "x!1`seq(1 + x1!1)")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (typepred
                                                                 "x1!1")
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (typepred "R!1")
                                                  (("2"
                                                    (expand
                                                     "integral_domain_w_one?")
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (hide -1)
                                                        (("2"
                                                          (expand
                                                           "monad?")
                                                          (("2"
                                                            (prop)
                                                            (("1"
                                                              (hide
                                                               (-2 -3))
                                                              (("1"
                                                                (expand
                                                                 "star_closed?")
                                                                (("1"
                                                                  (skosimp*)
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (expand
                                                                       "member")
                                                                      (("1"
                                                                        (expand
                                                                         "remove")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (lemma
                                                                       R_prod_star_closed)
                                                                      (("2"
                                                                        (typepred
                                                                         "x!1"
                                                                         "y!1")
                                                                        (("2"
                                                                          (inst?)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (lemma
                                                                       R_prod_star_closed)
                                                                      (("3"
                                                                        (typepred
                                                                         "x!2"
                                                                         "y!1")
                                                                        (("3"
                                                                          (inst?)
                                                                          (("3"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide
                                                               (-1 -3))
                                                              (("2"
                                                                (expand
                                                                 "member")
                                                                (("2"
                                                                  (expand
                                                                   "remove")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (hide
                                                               (-1 -2))
                                                              (("3"
                                                                (expand
                                                                 "identity?")
                                                                (("3"
                                                                  (expand
                                                                   "restrict")
                                                                  (("3"
                                                                    (skosimp*)
                                                                    (("3"
                                                                      (inst?)
                                                                      (("3"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide (-2 2))
        (("2" (skosimp)
          (("2" (expand "R_prime_element?")
            (("2" (flatten)
              (("2" (expand "remove") (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (hide (-1 2))
        (("3" (lemma op_fseq_closed)
          (("3" (inst?)
            (("3" (hide 2)
              (("3" (typepred "R!1")
                (("3" (expand "integral_domain_w_one?")
                  (("3" (flatten)
                    (("3" (hide -1)
                      (("3" (expand "monad?")
                        (("3" (prop)
                          (("1" (hide (-2 -3))
                            (("1" (expand "star_closed?")
                              (("1"
                                (skosimp*)
                                (("1"
                                  (inst?)
                                  (("1"
                                    (expand "member")
                                    (("1"
                                      (expand "remove")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (lemma R_prod_star_closed)
                                    (("2"
                                      (typepred "x!1" "y!1")
                                      (("2"
                                        (inst?)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (lemma R_prod_star_closed)
                                    (("3"
                                      (typepred "x!1" "y!1")
                                      (("3"
                                        (inst?)
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide (-1 -3))
                            (("2" (expand "member")
                              (("2"
                                (expand "remove")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide (-1 -2))
                            (("3" (expand "identity?")
                              (("3"
                                (expand "restrict")
                                (("3"
                                  (skosimp*)
                                  (("3"
                                    (inst?)
                                    (("3" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (hide (-2 -3 2))
        (("4" (expand "R_prime_element?")
          (("4" (expand "remove")
            (("4" (flatten) (("4" (assert) nil nil)) nil)) nil))
          nil))
        nil)
       ("5" (hide (-2 2))
        (("5" (typepred "R!1")
          (("5" (lemma prime_el_is_irreducible_TCC1)
            (("5" (inst -1 "R!1" "p!1") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((prime_el_is_irreducible_TCC1 subtype-tcc nil ring_prime_element
     nil)
    (seq_first_rest_1 formula-decl nil seq_extras structures)
    (op_fseq_composition formula-decl nil op_finseq nil)
    (op_fseq_singleton formula-decl nil op_finseq nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^ const-decl "finseq" finite_sequences nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rest_pos formula-decl nil seq_extras structures)
    (op_fseq_closed formula-decl nil op_finseq nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (member const-decl "bool" sets nil)
    (R_prod_star_closed formula-decl nil ring_basic_properties nil)
    (identity? const-decl "bool" operator_defs nil)
    (left_identity formula-decl nil monad nil)
    (monad? const-decl "bool" monad_def nil)
    (right_identity formula-decl nil monad nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (|#| const-decl "finite_sequence[T]" set2seq structures)
    (/= const-decl "boolean" notequal nil)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (first const-decl "T" seq_extras structures)
    (rest const-decl "finseq" seq_extras structures)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (integral_domain? const-decl "bool" integral_domain_def nil)
    (commutative? const-decl "bool" operator_defs nil)
    (unit? const-decl "bool" ring_unit_def nil)
    (r_invertible? const-decl "bool" ring_unit_def nil)
    (l_invertible? const-decl "bool" ring_unit_def nil)
    (restrict const-decl "R" restrict nil)
    (commutative_ring? const-decl "bool" ring_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ring? const-decl "bool" ring_def nil)
    (divides? const-decl "bool" ring_divides_def nil)
    (op_fseq def-decl "T" op_finseq_def nil)
    (remove const-decl "set" sets nil)
    (R_prime_element? const-decl "bool" ring_prime_element_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (ring_with_one? const-decl "bool" ring_with_one_def nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (integral_domain_w_one? const-decl "bool"
     integral_domain_with_one_def nil)
    (one formal-const-decl "T" ring_prime_element nil)
    (zero formal-const-decl "T" ring_prime_element nil)
    (* formal-const-decl "[T, T -> T]" ring_prime_element nil)
    (+ formal-const-decl "[T, T -> T]" ring_prime_element nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-nonempty-type-decl nil ring_prime_element nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (prime_el_divides_last_pos_TCC1 0
  (prime_el_divides_last_pos_TCC1-1 nil 3856625615
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (integral_domain_w_one? const-decl "bool"
     integral_domain_with_one_def nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (left_identity formula-decl nil monad nil)
    (right_identity formula-decl nil monad nil)
    (integral_domain? const-decl "bool" integral_domain_def nil)
    (nz_closed? const-decl "bool" ring_nz_closed_def nil)
    (remove const-decl "set" sets nil)
    (commutative_ring? const-decl "bool" ring_def nil)
    (ring? const-decl "bool" ring_def nil)
    (right_distributive? const-decl "bool" operator_defs_more nil)
    (left_distributive? const-decl "bool" operator_defs_more nil)
    (abelian_group? const-decl "bool" group_def nil)
    (commutative? const-decl "bool" operator_defs nil)
    (group? const-decl "bool" group_def nil)
    (inv_exists? const-decl "bool" group_def nil)
    (monoid? const-decl "bool" monoid_def nil)
    (associative? const-decl "bool" operator_defs nil)
    (monad? const-decl "bool" monad_def nil)
    (identity? const-decl "bool" operator_defs nil)
    (zero_plus formula-decl nil ring nil)
    (restrict const-decl "R" restrict nil)
    (plus_zero formula-decl nil ring nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (member const-decl "bool" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (l_invertible? const-decl "bool" ring_unit_def nil)
    (r_invertible? const-decl "bool" ring_unit_def nil)
    (unit? const-decl "bool" ring_unit_def nil)
    (zero formal-const-decl "T" ring_prime_element nil)
    (* formal-const-decl "[T, T -> T]" ring_prime_element nil)
    (+ formal-const-decl "[T, T -> T]" ring_prime_element nil)
    (T formal-nonempty-type-decl nil ring_prime_element nil)
    (divides? const-decl "bool" ring_divides_def nil)
    (one formal-const-decl "T" ring_prime_element nil)
    (R_prime_element? const-decl "bool" ring_prime_element_def nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (prime_el_divides_last_pos subtype
    "(number_fields.-)(length(ring_prime_element.fsl), 1)"
    "below[length(fsl)]")))
 (prime_el_divides_last_pos 0
  (prime_el_divides_last_pos-1 nil 3856625696
   ("" (skosimp)
    (("" (expand "finseq_appl")
      (("" (lemma "prime_el_divides")
        (("" (inst?)
          (("" (assert)
            (("" (skosimp)
              (("" (expand "finseq_appl")
                (("" (case-replace "i!1 = 0" :hide? T)
                  (("1" (case "length(rest(fs!1)) = 0")
                    (("1" (lemma "length_rest_0")
                      (("1" (inst?)
                        (("1" (assert)
                          (("1" (rewrite "empty_0")
                            (("1" (lemma "seq_first_rest_1")
                              (("1"
                                (inst?)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "first")
                                    (("1"
                                      (expand "finseq_appl")
                                      (("1"
                                        (replaces -3)
                                        (("1"
                                          (rewrite "seq_o_empty")
                                          (("1"
                                            (inst 1 "#(fs!1`seq(0))")
                                            (("1"
                                              (split)
                                              (("1"
                                                (skosimp)
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (expand "#")
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil)
                                               ("3"
                                                (expand "#")
                                                (("3"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (split)
                                              (("1"
                                                (skosimp)
                                                (("1"
                                                  (expand "#")
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "#")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (inst 2 "rest(fs!1) o #(fs!1`seq(0))")
                      (("1" (split)
                        (("1" (skosimp)
                          (("1" (case "i!2 < length(rest(fs!1))")
                            (("1" (lemma "rest_pos")
                              (("1"
                                (inst?)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "finseq_appl")
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (expand "o ")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but (-1 1))
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (inst 2 "0")
                              (("2"
                                (expand "o ")
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "#")
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "op_fseq" 1 2)
                          (("2" (hide -)
                            (("2" (typepred "R!1")
                              (("2"
                                (expand "integral_domain_w_one?")
                                (("2"
                                  (expand "integral_domain?")
                                  (("2"
                                    (expand "commutative_ring?")
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (hide (-1 -3))
                                        (("2"
                                          (expand "commutative?")
                                          (("2"
                                            (expand "restrict")
                                            (("2"
                                              (inst?)
                                              (("1"
                                                (replaces -1)
                                                (("1"
                                                  (rewrite
                                                   "op_fseq_composition")
                                                  (("1"
                                                    (rewrite
                                                     "op_fseq_singleton")
                                                    (("1"
                                                      (case-replace
                                                       "rest(fs!1) = fs!1 ^ (1, length(fs!1) - 1)")
                                                      (("1"
                                                        (hide 2)
                                                        (("1"
                                                          (decompose-equality
                                                           1)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (decompose-equality
                                                             1)
                                                            (("2"
                                                              (expand
                                                               "^")
                                                              (("2"
                                                                (lift-if)
                                                                (("2"
                                                                  (prop)
                                                                  (("1"
                                                                    (lemma
                                                                     "length_rest_0")
                                                                    (("1"
                                                                      (inst?)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (lemma
                                                                     "length_rest_0")
                                                                    (("2"
                                                                      (inst?)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (lemma
                                                                     "rest_pos")
                                                                    (("3"
                                                                      (inst?)
                                                                      (("3"
                                                                        (assert)
                                                                        (("3"
                                                                          (expand
                                                                           "finseq_appl")
                                                                          (("3"
                                                                            (inst?)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (typepred
                                                                               "x!1")
                                                                              (("2"
                                                                                (hide
                                                                                 (-2
                                                                                  4))
                                                                                (("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (lemma
                                                   "op_fseq_closed")
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "R!1"
                                                     "^(fs!1, (1, length(fs!1) - 1))")
                                                    (("1"
                                                      (skosimp)
                                                      (("1"
                                                        (hide 2)
                                                        (("1"
                                                          (expand "^")
                                                          (("1"
                                                            (prop)
                                                            (("1"
                                                              (hide 1)
                                                              (("1"
                                                                (lemma
                                                                 "length_rest_0")
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (lemma
                                                               "length_rest_0")
                                                              (("2"
                                                                (inst?)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (typepred
                                                               "fs!1`seq(1 + x1!1)")
                                                              (("3"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (expand
                                                         "monad?")
                                                        (("2"
                                                          (prop)
                                                          (("1"
                                                            (hide
                                                             (-2 -3))
                                                            (("1"
                                                              (expand
                                                               "star_closed?")
                                                              (("1"
                                                                (skosimp*)
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (expand
                                                                     "member")
                                                                    (("1"
                                                                      (expand
                                                                       "remove")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (lemma
                                                                     R_prod_star_closed)
                                                                    (("2"
                                                                      (inst?)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (lemma
                                                                     R_prod_star_closed)
                                                                    (("3"
                                                                      (inst?)
                                                                      (("3"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide
                                                             (-1 -3))
                                                            (("2"
                                                              (expand
                                                               "member")
                                                              (("2"
                                                                (expand
                                                                 "remove")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (hide
                                                             (-1 -2))
                                                            (("3"
                                                              (expand
                                                               "identity?")
                                                              (("3"
                                                                (expand
                                                                 "restrict")
                                                                (("3"
                                                                  (skosimp*)
                                                                  (("3"
                                                                    (inst?)
                                                                    (("3"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (hide 2)
                                                (("3"
                                                  (typepred
                                                   "seq(fs!1)(0)")
                                                  (("3"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (expand "o ")
                          (("3" (lift-if)
                            (("3" (expand "#") (("3" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (split)
                        (("1" (skosimp)
                          (("1" (typepred "x1!1")
                            (("1" (expand "o ")
                              (("1"
                                (expand "#")
                                (("1"
                                  (prop)
                                  (("1"
                                    (lemma "rest_pos")
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "finseq_appl")
                                          (("1"
                                            (inst -1 "x1!1")
                                            (("1"
                                              (typepred
                                               "fs!1`seq(1 + x1!1)")
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (hide (-3 -4 -5 2))
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "o")
                          (("2" (expand "#")
                            (("2" (hide -) (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2"
                    (inst 2
                     "fs!1^(0,i!1-1) o fs!1^(i!1+1,length(fs!1)-1) o #(fs!1`seq(i!1))")
                    (("1" (split)
                      (("1" (skosimp)
                        (("1" (typepred "i!2")
                          (("1"
                            (case-replace
                             "fs!1 ^ (0, i!1 - 1) o fs!1 ^ (i!1 + 1, length(fs!1) - 1) = delete(fs!1, i!1)"
                             :hide? T)
                            (("1" (hide (-2 -3 -4))
                              (("1"
                                (expand "o ")
                                (("1"
                                  (expand "#")
                                  (("1"
                                    (case
                                     "i!2 = delete(fs!1, i!1)`length")
                                    (("1"
                                      (inst 1 "i!1")
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (expand "delete")
                                      (("2"
                                        (expand "finseq_appl")
                                        (("2"
                                          (case "i!2 < i!1")
                                          (("1"
                                            (inst 2 "i!2")
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (inst 3 "1 + i!2")
                                            (("1" (assert) nil nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide (- 2))
                              (("2"
                                (decompose-equality 1)
                                (("1"
                                  (expand "delete")
                                  (("1"
                                    (expand "o ")
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (decompose-equality 1)
                                  (("2"
                                    (expand "o ")
                                    (("2"
                                      (expand "delete")
                                      (("2"
                                        (lift-if)
                                        (("2"
                                          (lift-if)
                                          (("2"
                                            (lift-if)
                                            (("2"
                                              (prop)
                                              (("1"
                                                (expand "finseq_appl")
                                                (("1"
                                                  (expand "^")
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "finseq_appl")
                                                (("2"
                                                  (expand "^")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (expand "finseq_appl")
                                                (("3"
                                                  (expand "^")
                                                  (("3"
                                                    (lift-if)
                                                    (("3"
                                                      (prop)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (grind)
                                                        nil
                                                        nil)
                                                       ("3"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("4"
                                                (expand "finseq_appl")
                                                (("4"
                                                  (expand "^")
                                                  (("4"
                                                    (lift-if)
                                                    (("4"
                                                      (prop)
                                                      (("1"
                                                        (typepred
                                                         "x!1")
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (typepred
                                                         "x!1")
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (typepred
                                                         "i!1")
                                                        (("3"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (assert) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide -)
                        (("2" (typepred "R!1")
                          (("2" (expand "integral_domain_w_one?")
                            (("2" (expand "integral_domain?")
                              (("2"
                                (expand "commutative_ring?")
                                (("2"
                                  (flatten)
                                  (("2"
                                    (hide (-1 -3))
                                    (("2"
                                      (rewrite "op_fseq_composition")
                                      (("2"
                                        (rewrite "op_fseq_singleton")
                                        (("2"
                                          (lemma
                                           "op_fseq_split_commute")
                                          (("2"
                                            (inst
                                             -1
                                             "R!1"
                                             "fs!1"
                                             "i!1")
                                            (("1"
                                              (expand "finseq_appl")
                                              (("1"
                                                (replaces -1)
                                                (("1"
                                                  (expand
                                                   "commutative?")
                                                  (("1"
                                                    (expand "restrict")
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (hide 2)
                                                        (("1"
                                                          (lemma
                                                           "op_fseq_closed")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "R!1"
                                                             "o[T] (^[T](fs!1, (0, i!1 - 1)), ^[T](fs!1, (1 + i!1, length(fs!1) - 1)))")
                                                            (("1"
                                                              (hide 2)
                                                              (("1"
                                                                (skosimp)
                                                                (("1"
                                                                  (expand
                                                                   "o")
                                                                  (("1"
                                                                    (prop)
                                                                    (("1"
                                                                      (expand
                                                                       "^")
                                                                      (("1"
                                                                        (prop)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (typepred
                                                                           "fs!1`seq(x1!1)")
                                                                          (("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       -)
                                                                      (("2"
                                                                        (typepred
                                                                         "x1!1")
                                                                        (("2"
                                                                          (expand
                                                                           "^")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (prop)
                                                                              (("1"
                                                                                (grind)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (grind)
                                                                                nil
                                                                                nil)
                                                                               ("3"
                                                                                (typepred
                                                                                 "fs!1`seq(1 - min(i!1, fs!1`length) + i!1 + x1!1)")
                                                                                (("3"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("3"
                                                              (hide 2)
                                                              (("3"
                                                                (expand
                                                                 "monad?")
                                                                (("3"
                                                                  (prop)
                                                                  (("1"
                                                                    (hide
                                                                     (-2
                                                                      -3))
                                                                    (("1"
                                                                      (expand
                                                                       "star_closed?")
                                                                      (("1"
                                                                        (skosimp*)
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (expand
                                                                             "member")
                                                                            (("1"
                                                                              (expand
                                                                               "remove")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (lemma
                                                                             R_prod_star_closed)
                                                                            (("2"
                                                                              (inst?)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (lemma
                                                                             R_prod_star_closed)
                                                                            (("3"
                                                                              (inst?)
                                                                              (("3"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     (-1
                                                                      -3))
                                                                    (("2"
                                                                      (expand
                                                                       "member")
                                                                      (("2"
                                                                        (expand
                                                                         "remove")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (hide
                                                                     (-1
                                                                      -2))
                                                                    (("3"
                                                                      (expand
                                                                       "identity?")
                                                                      (("3"
                                                                        (expand
                                                                         "restrict")
                                                                        (("3"
                                                                          (skosimp*)
                                                                          (("3"
                                                                            (inst?)
                                                                            (("3"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (assert) nil nil)
                                             ("3"
                                              (hide 2)
                                              (("3"
                                                (expand
                                                 "commutative_monoid?")
                                                (("3"
                                                  (expand "monoid?")
                                                  (("3"
                                                    (reveal -2)
                                                    (("3"
                                                      (expand "ring?")
                                                      (("3"
                                                        (flatten)
                                                        (("3"
                                                          (prop)
                                                          (("3"
                                                            (hide-all-but
                                                             (-7 1))
                                                            (("3"
                                                              (expand
                                                               "monad?")
                                                              (("3"
                                                                (prop)
                                                                (("1"
                                                                  (hide
                                                                   (-2
                                                                    -3))
                                                                  (("1"
                                                                    (expand
                                                                     "star_closed?")
                                                                    (("1"
                                                                      (skosimp*)
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (expand
                                                                           "member")
                                                                          (("1"
                                                                            (expand
                                                                             "remove")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (lemma
                                                                           R_prod_star_closed)
                                                                          (("2"
                                                                            (inst?)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (lemma
                                                                           R_prod_star_closed)
                                                                          (("3"
                                                                            (inst?)
                                                                            (("3"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   (-1
                                                                    -3))
                                                                  (("2"
                                                                    (expand
                                                                     "member")
                                                                    (("2"
                                                                      (expand
                                                                       "remove")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (hide
                                                                   (-1
                                                                    -2))
                                                                  (("3"
                                                                    (expand
                                                                     "identity?")
                                                                    (("3"
                                                                      (expand
                                                                       "restrict")
                                                                      (("3"
                                                                        (skosimp*)
                                                                        (("3"
                                                                          (inst?)
                                                                          (("3"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3"
                        (case-replace
                         "(fs!1 ^ (0, i!1 - 1) o fs!1 ^ (i!1 + 1, length(fs!1) - 1) o #(fs!1`seq(i!1)))`seq (length (fs!1 ^ (0, i!1 - 1) o fs!1 ^ (i!1 + 1, length(fs!1) - 1) o #(fs!1`seq(i!1))) - 1) = fs!1`seq(i!1)")
                        (("1" (hide (- 2)) (("1" (grind) nil nil)) nil)
                         ("2" (hide (- 2)) (("2" (grind) nil nil)) nil)
                         ("3" (assert) nil nil))
                        nil))
                      nil)
                     ("2" (split)
                      (("1" (skosimp)
                        (("1" (hide -)
                          (("1" (typepred "x1!1")
                            (("1" (expand "o" -1)
                              (("1"
                                (expand "^" -1)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (prop)
                                        (("1"
                                          (expand "#")
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (expand "#")
                                          (("2" (assert) nil nil))
                                          nil)
                                         ("3"
                                          (expand "#")
                                          (("3" (assert) nil nil))
                                          nil)
                                         ("4"
                                          (expand "#")
                                          (("4"
                                            (expand "o")
                                            (("4"
                                              (expand "^")
                                              (("4"
                                                (assert)
                                                (("4"
                                                  (prop)
                                                  (("1"
                                                    (typepred
                                                     "fs!1`seq(x1!1)")
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("5"
                                          (expand "o")
                                          (("5"
                                            (expand "^")
                                            (("5"
                                              (assert)
                                              (("5"
                                                (prop)
                                                (("1"
                                                  (typepred
                                                   "fs!1`seq(x1!1)")
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (expand "#")
                                                  (("3"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("6"
                                          (expand "o")
                                          (("6"
                                            (expand "^")
                                            (("6"
                                              (assert)
                                              (("6"
                                                (prop)
                                                (("1"
                                                  (typepred
                                                   "fs!1`seq(x1!1)")
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred
                                                   "fs!1`seq(1 - min(i!1, fs!1`length) + i!1 + x1!1)")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (expand "#")
                                                  (("3"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide -) (("2" (grind) nil nil)) nil))
                      nil)
                     ("3" (hide -)
                      (("3" (typepred "i!1") (("3" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (T formal-nonempty-type-decl nil ring_prime_element nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" ring_prime_element nil)
    (* formal-const-decl "[T, T -> T]" ring_prime_element nil)
    (zero formal-const-decl "T" ring_prime_element nil)
    (one formal-const-decl "T" ring_prime_element nil)
    (integral_domain_w_one? const-decl "bool"
     integral_domain_with_one_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (O const-decl "finseq" finite_sequences nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (op_fseq def-decl "T" op_finseq_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (integral_domain? const-decl "bool" integral_domain_def nil)
    (commutative? const-decl "bool" operator_defs nil)
    (op_fseq_composition formula-decl nil op_finseq nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (op_fseq_singleton formula-decl nil op_finseq nil)
    (op_fseq_closed formula-decl nil op_finseq nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (remove const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (ring? const-decl "bool" ring_def nil)
    (R_prod_star_closed formula-decl nil ring_basic_properties nil)
    (identity? const-decl "bool" operator_defs nil)
    (right_identity formula-decl nil monad nil)
    (left_identity formula-decl nil monad nil)
    (monad? const-decl "bool" monad_def nil)
    (restrict const-decl "R" restrict nil)
    (commutative_ring? const-decl "bool" ring_def nil)
    (rest_pos formula-decl nil seq_extras structures)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^ const-decl "finseq" finite_sequences nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length_rest_0 formula-decl nil seq_extras structures)
    (seq_first_rest_1 formula-decl nil seq_extras structures)
    (|#| const-decl "finite_sequence[T]" set2seq structures)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (seq_o_empty formula-decl nil seq_extras structures)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (first const-decl "T" seq_extras structures)
    (empty_0 formula-decl nil seq_extras structures)
    (rest const-decl "finseq" seq_extras structures)
    (int_times_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}"
     real_defs nil)
    (delete const-decl "finseq" seq_extras structures)
    (op_fseq_split_commute formula-decl nil op_finseq nil)
    (monoid? const-decl "bool" monoid_def nil)
    (<= const-decl "bool" reals nil)
    (commutative_monoid? const-decl "bool" monoid_def nil)
    (prime_el_divides formula-decl nil ring_prime_element nil))
   shostak))
 (irreducible_prod_not_unit_TCC1 0
  (irreducible_prod_not_unit_TCC1-1 nil 3856625615
   ("" (subtype-tcc) nil nil)
   ((integral_domain_w_one? const-decl "bool"
     integral_domain_with_one_def nil)
    (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (commutative_ring? const-decl "bool" ring_def nil)
    (/= const-decl "boolean" notequal nil)
    (remove const-decl "set" sets nil)
    (nz_closed? const-decl "bool" ring_nz_closed_def nil)
    (integral_domain? const-decl "bool" integral_domain_def nil)
    (member const-decl "bool" sets nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (zero formal-const-decl "T" ring_prime_element nil)
    (* formal-const-decl "[T, T -> T]" ring_prime_element nil)
    (+ formal-const-decl "[T, T -> T]" ring_prime_element nil)
    (T formal-nonempty-type-decl nil ring_prime_element nil)
    (plus_zero formula-decl nil ring nil)
    (restrict const-decl "R" restrict nil)
    (zero_plus formula-decl nil ring nil)
    (identity? const-decl "bool" operator_defs nil)
    (monad? const-decl "bool" monad_def nil)
    (associative? const-decl "bool" operator_defs nil)
    (monoid? const-decl "bool" monoid_def nil)
    (inv_exists? const-decl "bool" group_def nil)
    (group? const-decl "bool" group_def nil)
    (commutative? const-decl "bool" operator_defs nil)
    (abelian_group? const-decl "bool" group_def nil)
    (left_distributive? const-decl "bool" operator_defs_more nil)
    (right_distributive? const-decl "bool" operator_defs_more nil)
    (ring? const-decl "bool" ring_def nil)
    (one formal-const-decl "T" ring_prime_element nil)
    (right_identity formula-decl nil monad nil)
    (left_identity formula-decl nil monad nil)
    (ring_with_one? const-decl "bool" ring_with_one_def nil))
   nil
   (irreducible_prod_not_unit subtype "ring_prime_element.R"
    "(ring_with_one_def[ring_prime_element.T, ring_prime_element.+, ring_prime_element.*, ring_prime_element.zero, ring_prime_element.one].ring_with_one?)")))
 (irreducible_prod_not_unit_TCC2 0
  (irreducible_prod_not_unit_TCC2-1 nil 3856625615
   ("" (skosimp)
    (("" (lemma op_fseq_closed)
      (("" (inst?)
        (("" (hide 2)
          (("" (typepred "R!1")
            (("" (expand "integral_domain_w_one?")
              (("" (flatten)
                (("" (hide -1)
                  (("" (expand "monad?")
                    (("" (prop)
                      (("1" (hide (-2 -3))
                        (("1" (expand "star_closed?")
                          (("1" (skosimp*)
                            (("1" (inst?)
                              (("1"
                                (expand "member")
                                (("1"
                                  (expand "remove")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma R_prod_star_closed)
                                (("2"
                                  (typepred "x!1" "y!1")
                                  (("2"
                                    (inst?)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (lemma R_prod_star_closed)
                                (("3"
                                  (typepred "x!1" "y!1")
                                  (("3"
                                    (inst?)
                                    (("3" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide (-1 -3))
                        (("2" (expand "member")
                          (("2" (expand "remove")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("3" (hide (-1 -2))
                        (("3" (expand "identity?")
                          (("3" (expand "restrict")
                            (("3" (skosimp*)
                              (("3"
                                (inst?)
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((one formal-const-decl "T" ring_prime_element nil)
    (* formal-const-decl "[T, T -> T]" ring_prime_element nil)
    (T formal-nonempty-type-decl nil ring_prime_element nil)
    (op_fseq_closed formula-decl nil op_finseq nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (remove const-decl "set" sets nil)
    (x!1 skolem-const-decl "(R!1)" ring_prime_element nil)
    (y!1 skolem-const-decl "(R!1)" ring_prime_element nil)
    (member const-decl "bool" sets nil)
    (ring? const-decl "bool" ring_def nil)
    (R_prod_star_closed formula-decl nil ring_basic_properties nil)
    (identity? const-decl "bool" operator_defs nil)
    (right_identity formula-decl nil monad nil)
    (left_identity formula-decl nil monad nil)
    (x!1 skolem-const-decl "(R!1)" ring_prime_element nil)
    (restrict const-decl "R" restrict nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (R!1 skolem-const-decl
     "(integral_domain_w_one?[T, +, *, zero, one])" ring_prime_element
     nil)
    (/= const-decl "boolean" notequal nil)
    (number nonempty-type-decl nil numbers nil)
    (fsIr type-eq-decl nil ring_irreducible_element_def nil)
    (fsIr? const-decl "bool" ring_irreducible_element_def nil)
    (ring_with_one? const-decl "bool" ring_with_one_def nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (integral_domain_w_one? const-decl "bool"
     integral_domain_with_one_def nil)
    (zero formal-const-decl "T" ring_prime_element nil)
    (+ formal-const-decl "[T, T -> T]" ring_prime_element nil)
    (monad? const-decl "bool" monad_def nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (irreducible_prod_not_unit subtype
    "op_finseq_def[ring_prime_element.T, ring_prime_element.*, ring_prime_element.one].op_fseq(ring_prime_element.fsI)"
    "(ring_prime_element.R)")))
 (irreducible_prod_not_unit 0
  (irreducible_prod_not_unit-1 nil 3856625904
   ("" (skosimp)
    (("" (lemma l_r_inv_equal)
      (("" (inst -1 "R!1" "op_fseq(fsI!1)")
        (("" (expand "exists1")
          (("" (flatten)
            (("" (hide (-2 -3))
              (("" (skosimp)
                (("" (lemma seq_first_rest_1)
                  (("" (inst?)
                    (("" (assert)
                      (("" (expand "first")
                        (("" (expand "finseq_appl")
                          (("" (replaces -1)
                            (("" (rewrite op_fseq_composition)
                              ((""
                                (rewrite op_fseq_singleton)
                                ((""
                                  (case "unit?(R!1)(fsI!1`seq(0))")
                                  (("1"
                                    (hide (-2 -3))
                                    (("1"
                                      (typepred "fsI!1")
                                      (("1"
                                        (expand "fsIr?")
                                        (("1"
                                          (expand "finseq_appl")
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (expand
                                               "R_irreducible_element?")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (case "length(rest(fsI!1)) = 0")
                                    (("1"
                                      (expand "op_fseq")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "unit?")
                                          (("1"
                                            (expand "l_invertible?")
                                            (("1"
                                              (expand "r_invertible?")
                                              (("1"
                                                (split)
                                                (("1" (inst?) nil nil)
                                                 ("2" (inst?) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (case
                                       "R!1(op_fseq(rest(fsI!1)))")
                                      (("1"
                                        (typepred R!1)
                                        (("1"
                                          (expand
                                           "integral_domain_w_one?")
                                          (("1"
                                            (expand "integral_domain?")
                                            (("1"
                                              (expand
                                               "commutative_ring?")
                                              (("1"
                                                (expand "commutative?")
                                                (("1"
                                                  (expand "monad?")
                                                  (("1"
                                                    (expand "ring?")
                                                    (("1"
                                                      (expand
                                                       "associative?")
                                                      (("1"
                                                        (expand
                                                         "star_closed?")
                                                        (("1"
                                                          (expand
                                                           "restrict")
                                                          (("1"
                                                            (expand
                                                             "remove")
                                                            (("1"
                                                              (expand
                                                               "member")
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (hide-all-but
                                                                   (-2
                                                                    -3
                                                                    -6
                                                                    -11
                                                                    -12
                                                                    -13
                                                                    2
                                                                    3))
                                                                  (("1"
                                                                    (inst
                                                                     -3
                                                                     "fsI!1`seq(0)"
                                                                     "op_fseq(rest(fsI!1))")
                                                                    (("1"
                                                                      (replace
                                                                       -3
                                                                       -6)
                                                                      (("1"
                                                                        (hide
                                                                         -3)
                                                                        (("1"
                                                                          (inst-cp
                                                                           -2
                                                                           "x!1"
                                                                           "op_fseq(rest(fsI!1))"
                                                                           "fsI!1`seq(0)")
                                                                          (("1"
                                                                            (replace
                                                                             -3
                                                                             -6
                                                                             rl)
                                                                            (("1"
                                                                              (hide
                                                                               -3)
                                                                              (("1"
                                                                                (inst
                                                                                 -2
                                                                                 "fsI!1`seq(0)"
                                                                                 "op_fseq(rest(fsI!1))"
                                                                                 "x!1")
                                                                                (("1"
                                                                                  (replaces
                                                                                   -2)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "unit?")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "l_invertible?")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "r_invertible?")
                                                                                        (("1"
                                                                                          (split)
                                                                                          (("1"
                                                                                            (inst?)
                                                                                            (("1"
                                                                                              (hide
                                                                                               (-3
                                                                                                -4
                                                                                                2))
                                                                                              (("1"
                                                                                                (inst?)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (inst?)
                                                                                            (("2"
                                                                                              (hide
                                                                                               (-3
                                                                                                -4
                                                                                                2))
                                                                                              (("2"
                                                                                                (inst?)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide (- 3))
                                        (("2"
                                          (lemma op_fseq_closed)
                                          (("2"
                                            (inst
                                             -1
                                             "R!1"
                                             "rest(fsI!1)")
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (skosimp)
                                                (("1"
                                                  (lemma rest_pos)
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "finseq_appl")
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (typepred
                                                             "fsI!1`seq(1 + x1!1)")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (typepred
                                                               "x1!1")
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (typepred "R!1")
                                                (("2"
                                                  (expand
                                                   "integral_domain_w_one?")
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (hide -1)
                                                      (("2"
                                                        (expand
                                                         "monad?")
                                                        (("2"
                                                          (prop)
                                                          (("1"
                                                            (hide
                                                             (-2 -3))
                                                            (("1"
                                                              (expand
                                                               "star_closed?")
                                                              (("1"
                                                                (skosimp*)
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (expand
                                                                     "member")
                                                                    (("1"
                                                                      (expand
                                                                       "remove")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (lemma
                                                                     R_prod_star_closed)
                                                                    (("2"
                                                                      (typepred
                                                                       "x!1"
                                                                       "y!1")
                                                                      (("2"
                                                                        (inst?)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (lemma
                                                                     R_prod_star_closed)
                                                                    (("3"
                                                                      (typepred
                                                                       "x!2"
                                                                       "y!1")
                                                                      (("3"
                                                                        (inst?)
                                                                        (("3"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide
                                                             (-1 -3))
                                                            (("2"
                                                              (expand
                                                               "member")
                                                              (("2"
                                                                (expand
                                                                 "remove")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (hide
                                                             (-1 -2))
                                                            (("3"
                                                              (expand
                                                               "identity?")
                                                              (("3"
                                                                (expand
                                                                 "restrict")
                                                                (("3"
                                                                  (skosimp*)
                                                                  (("3"
                                                                    (inst?)
                                                                    (("3"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (rewrite
                                     "irreducible_prod_not_unit_TCC1")
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((one formal-const-decl "T" ring_prime_element nil)
    (zero formal-const-decl "T" ring_prime_element nil)
    (* formal-const-decl "[T, T -> T]" ring_prime_element nil)
    (+ formal-const-decl "[T, T -> T]" ring_prime_element nil)
    (T formal-nonempty-type-decl nil ring_prime_element nil)
    (l_r_inv_equal formula-decl nil ring_unit_def nil)
    (exists1 const-decl "bool" exists1 nil)
    (seq_first_rest_1 formula-decl nil seq_extras structures)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (rest const-decl "finseq" seq_extras structures)
    (|#| const-decl "finite_sequence[T]" set2seq structures)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (op_fseq_composition formula-decl nil op_finseq nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (R_irreducible_element? const-decl "bool"
     ring_irreducible_element_def nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (commutative_ring? const-decl "bool" ring_def nil)
    (monad? const-decl "bool" monad_def nil)
    (associative? const-decl "bool" operator_defs nil)
    (restrict const-decl "R" restrict nil)
    (member const-decl "bool" sets nil)
    (remove const-decl "set" sets nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (ring? const-decl "bool" ring_def nil)
    (commutative? const-decl "bool" operator_defs nil)
    (integral_domain? const-decl "bool" integral_domain_def nil)
    (op_fseq_closed formula-decl nil op_finseq nil)
    (R_prod_star_closed formula-decl nil ring_basic_properties nil)
    (identity? const-decl "bool" operator_defs nil)
    (left_identity formula-decl nil monad nil)
    (rest_pos formula-decl nil seq_extras structures)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (^ const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (r_invertible? const-decl "bool" ring_unit_def nil)
    (l_invertible? const-decl "bool" ring_unit_def nil)
    (right_identity formula-decl nil monad nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (irreducible_prod_not_unit_TCC1 subtype-tcc nil ring_prime_element
     nil)
    (op_fseq_singleton formula-decl nil op_finseq nil)
    (TRUE const-decl "bool" booleans nil)
    (first const-decl "T" seq_extras structures)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (ring_with_one? const-decl "bool" ring_with_one_def nil)
    (unit? const-decl "bool" ring_unit_def nil)
    (integral_domain_w_one? const-decl "bool"
     integral_domain_with_one_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (op_fseq def-decl "T" op_finseq_def nil)
    (fsIr? const-decl "bool" ring_irreducible_element_def nil)
    (fsIr type-eq-decl nil ring_irreducible_element_def nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil))
   shostak))
 (irreducible_prod_unit_length_0_TCC1 0
  (irreducible_prod_unit_length_0_TCC1-1 nil 3856625615
   ("" (skosimp)
    (("" (lemma op_fseq_closed)
      (("" (inst?)
        (("" (hide 2)
          (("" (typepred "R!1")
            (("" (expand "integral_domain_w_one?")
              (("" (flatten)
                (("" (hide -1)
                  (("" (expand "monad?")
                    (("" (prop)
                      (("1" (hide (-2 -3))
                        (("1" (expand "star_closed?")
                          (("1" (skosimp*)
                            (("1" (inst?)
                              (("1"
                                (expand "member")
                                (("1"
                                  (expand "remove")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma R_prod_star_closed)
                                (("2"
                                  (typepred "x!1" "y!1")
                                  (("2"
                                    (inst?)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (lemma R_prod_star_closed)
                                (("3"
                                  (typepred "x!1" "y!1")
                                  (("3"
                                    (inst?)
                                    (("3" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide (-1 -3))
                        (("2" (expand "member")
                          (("2" (expand "remove")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("3" (hide (-1 -2))
                        (("3" (expand "identity?")
                          (("3" (expand "restrict")
                            (("3" (skosimp*)
                              (("3"
                                (inst?)
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((one formal-const-decl "T" ring_prime_element nil)
    (* formal-const-decl "[T, T -> T]" ring_prime_element nil)
    (T formal-nonempty-type-decl nil ring_prime_element nil)
    (op_fseq_closed formula-decl nil op_finseq nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (remove const-decl "set" sets nil)
    (x!1 skolem-const-decl "(R!1)" ring_prime_element nil)
    (y!1 skolem-const-decl "(R!1)" ring_prime_element nil)
    (member const-decl "bool" sets nil)
    (ring? const-decl "bool" ring_def nil)
    (R_prod_star_closed formula-decl nil ring_basic_properties nil)
    (identity? const-decl "bool" operator_defs nil)
    (right_identity formula-decl nil monad nil)
    (left_identity formula-decl nil monad nil)
    (x!1 skolem-const-decl "(R!1)" ring_prime_element nil)
    (restrict const-decl "R" restrict nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (R!1 skolem-const-decl
     "(integral_domain_w_one?[T, +, *, zero, one])" ring_prime_element
     nil)
    (fsIr type-eq-decl nil ring_irreducible_element_def nil)
    (fsIr? const-decl "bool" ring_irreducible_element_def nil)
    (ring_with_one? const-decl "bool" ring_with_one_def nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (integral_domain_w_one? const-decl "bool"
     integral_domain_with_one_def nil)
    (zero formal-const-decl "T" ring_prime_element nil)
    (+ formal-const-decl "[T, T -> T]" ring_prime_element nil)
    (monad? const-decl "bool" monad_def nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (irreducible_prod_unit_length_0 subtype
    "op_finseq_def[ring_prime_element.T, ring_prime_element.*, ring_prime_element.one].op_fseq(ring_prime_element.fsI)"
    "(ring_prime_element.R)")))
 (irreducible_prod_unit_length_0 0
  (irreducible_prod_unit_length_0-1 nil 3856625989
   ("" (skosimp)
    (("" (lemma irreducible_prod_not_unit)
      (("" (inst?) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((irreducible_prod_not_unit formula-decl nil ring_prime_element nil)
    (/= const-decl "boolean" notequal nil)
    (number nonempty-type-decl nil numbers nil)
    (fsIr type-eq-decl nil ring_irreducible_element_def nil)
    (fsIr? const-decl "bool" ring_irreducible_element_def nil)
    (ring_with_one? const-decl "bool" ring_with_one_def nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (integral_domain_w_one? const-decl "bool"
     integral_domain_with_one_def nil)
    (one formal-const-decl "T" ring_prime_element nil)
    (zero formal-const-decl "T" ring_prime_element nil)
    (* formal-const-decl "[T, T -> T]" ring_prime_element nil)
    (+ formal-const-decl "[T, T -> T]" ring_prime_element nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-nonempty-type-decl nil ring_prime_element nil))
   shostak))
 (irreducible_prod_not_zero 0
  (irreducible_prod_not_zero-1 nil 3856626041
   ("" (skolem * ("R!1" "_"))
    (("" (measure-induct+ "length(fsI)" "fsI")
      (("1" (case "length(x!1) = 0")
        (("1" (hide -2)
          (("1" (expand "op_fseq")
            (("1" (assert)
              (("1" (typepred "R!1")
                (("1" (expand "integral_domain_w_one?")
                  (("1" (expand "monad?")
                    (("1" (expand "member")
                      (("1" (expand "remove") (("1" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "op_fseq" -2)
          (("2" (assert)
            (("2" (inst -1 "x!1 ^ (1, length(x!1) - 1)")
              (("1" (prop)
                (("1" (lemma "nz_times_is_zero")
                  (("1"
                    (inst -1 "R!1" "seq(x!1)(0)"
                     "op_fseq(x!1 ^ (1, length(x!1) - 1))")
                    (("1" (prop)
                      (("1" (hide-all-but -2)
                        (("1" (typepred "x!1")
                          (("1" (expand "fsIr?")
                            (("1" (expand "finseq_appl")
                              (("1"
                                (inst?)
                                (("1"
                                  (expand "R_irreducible_element?")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1)
                        (("2" (typepred "R!1")
                          (("2" (expand "integral_domain_w_one?")
                            (("2" (expand "integral_domain?")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("3" (hide-all-but 1)
                        (("3" (typepred "seq(x!1)(0)")
                          (("3" (propax) nil nil)) nil))
                        nil)
                       ("4" (hide (-1 2))
                        (("4" (lemma "op_fseq_closed")
                          (("4"
                            (inst -1 "R!1"
                             "x!1 ^ (1, length(x!1) - 1)")
                            (("1" (hide 2)
                              (("1"
                                (skosimp)
                                (("1"
                                  (expand "^")
                                  (("1"
                                    (prop)
                                    (("1"
                                      (hide 1)
                                      (("1"
                                        (typepred "x1!1")
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 1)
                                      (("2"
                                        (typepred "x1!1")
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (typepred "x!1`seq(1 + x1!1)")
                                      (("3" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2)
                              (("2"
                                (typepred "R!1")
                                (("2"
                                  (expand "integral_domain_w_one?")
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (hide -1)
                                      (("2"
                                        (expand "monad?")
                                        (("2"
                                          (prop)
                                          (("1"
                                            (hide (-2 -3))
                                            (("1"
                                              (expand "star_closed?")
                                              (("1"
                                                (skosimp*)
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (expand "member")
                                                    (("1"
                                                      (expand "remove")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (lemma
                                                     R_prod_star_closed)
                                                    (("2"
                                                      (typepred
                                                       "x!1"
                                                       "y!1")
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (lemma
                                                     R_prod_star_closed)
                                                    (("3"
                                                      (typepred
                                                       "x!2"
                                                       "y!1")
                                                      (("3"
                                                        (inst?)
                                                        (("3"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide (-1 -3))
                                            (("2"
                                              (expand "member")
                                              (("2"
                                                (expand "remove")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (hide (-1 -2))
                                            (("3"
                                              (expand "identity?")
                                              (("3"
                                                (expand "restrict")
                                                (("3"
                                                  (skosimp*)
                                                  (("3"
                                                    (inst?)
                                                    (("3"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide -1) (("2" (grind) nil nil)) nil))
                nil)
               ("2" (split)
                (("1" (skosimp)
                  (("1" (hide -1)
                    (("1" (expand "^")
                      (("1" (prop)
                        (("1" (hide 1)
                          (("1" (typepred "x1!1")
                            (("1" (grind) nil nil)) nil))
                          nil)
                         ("2" (hide 1)
                          (("2" (typepred "x1!1")
                            (("2" (grind) nil nil)) nil))
                          nil)
                         ("3" (typepred "x!1`seq(1 + x1!1)")
                          (("3" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide -1)
                  (("2" (typepred "x!1")
                    (("2" (expand "fsIr?")
                      (("2" (expand "finseq_appl")
                        (("2" (skosimp)
                          (("2" (inst -1 "i!1 + 1")
                            (("1" (expand "^")
                              (("1"
                                (prop)
                                (("1"
                                  (hide (-2 1))
                                  (("1"
                                    (typepred "i!1")
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide (-2 1))
                                  (("2"
                                    (typepred "i!1")
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil)
                                 ("3" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (hide 2)
                              (("2"
                                (typepred "i!1")
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide -1)
        (("2" (typepred "R!1")
          (("2" (expand "integral_domain_w_one?")
            (("2" (expand "integral_domain?")
              (("2" (expand "commutative_ring?")
                (("2" (expand "ring_with_one?")
                  (("2" (expand "monoid?")
                    (("2" (expand "ring?")
                      (("2" (flatten)
                        (("2" (assert)
                          (("2" (hide-all-but (-8 1))
                            (("2" (expand "monad?")
                              (("2"
                                (prop)
                                (("1"
                                  (hide (-1 -3))
                                  (("1"
                                    (expand "member")
                                    (("1"
                                      (expand "remove")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide (-1 -2))
                                  (("2"
                                    (expand "identity?")
                                    (("2"
                                      (expand "restrict")
                                      (("2"
                                        (skosimp*)
                                        (("2"
                                          (inst?)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-nonempty-type-decl nil ring_prime_element nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" ring_prime_element nil)
    (* formal-const-decl "[T, T -> T]" ring_prime_element nil)
    (zero formal-const-decl "T" ring_prime_element nil)
    (one formal-const-decl "T" ring_prime_element nil)
    (integral_domain_w_one? const-decl "bool"
     integral_domain_with_one_def nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (ring_with_one? const-decl "bool" ring_with_one_def nil)
    (fsIr? const-decl "bool" ring_irreducible_element_def nil)
    (fsIr type-eq-decl nil ring_irreducible_element_def nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (op_fseq def-decl "T" op_finseq_def nil)
    (/= const-decl "boolean" notequal nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "finseq" finite_sequences nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nz_times_is_zero formula-decl nil ring_nz_closed_aux nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (R_irreducible_element? const-decl "bool"
     ring_irreducible_element_def nil)
    (integral_domain? const-decl "bool" integral_domain_def nil)
    (op_fseq_closed formula-decl nil op_finseq nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (R_prod_star_closed formula-decl nil ring_basic_properties nil)
    (identity? const-decl "bool" operator_defs nil)
    (right_identity formula-decl nil monad nil)
    (left_identity formula-decl nil monad nil)
    (restrict const-decl "R" restrict nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (ring? const-decl "bool" ring_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (member const-decl "bool" sets nil)
    (remove const-decl "set" sets nil)
    (monad? const-decl "bool" monad_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (monoid? const-decl "bool" monoid_def nil)
    (commutative_ring? const-decl "bool" ring_def nil))
   shostak))
 (prod_unit_irreducible_is_irreducible_TCC1 0
  (prod_unit_irreducible_is_irreducible_TCC1-1 nil 3855325917
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil ring_prime_element nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" ring_prime_element nil)
    (* formal-const-decl "[T, T -> T]" ring_prime_element nil)
    (zero formal-const-decl "T" ring_prime_element nil)
    (one formal-const-decl "T" ring_prime_element nil)
    (integral_domain_w_one? const-decl "bool"
     integral_domain_with_one_def nil)
    (remove const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (plus_zero formula-decl nil ring nil)
    (restrict const-decl "R" restrict nil)
    (zero_plus formula-decl nil ring nil)
    (identity? const-decl "bool" operator_defs nil)
    (monad? const-decl "bool" monad_def nil)
    (associative? const-decl "bool" operator_defs nil)
    (monoid? const-decl "bool" monoid_def nil)
    (inv_exists? const-decl "bool" group_def nil)
    (group? const-decl "bool" group_def nil)
    (commutative? const-decl "bool" operator_defs nil)
    (abelian_group? const-decl "bool" group_def nil)
    (left_distributive? const-decl "bool" operator_defs_more nil)
    (right_distributive? const-decl "bool" operator_defs_more nil)
    (ring? const-decl "bool" ring_def nil)
    (commutative_ring? const-decl "bool" ring_def nil)
    (/= const-decl "boolean" notequal nil)
    (nz_closed? const-decl "bool" ring_nz_closed_def nil)
    (integral_domain? const-decl "bool" integral_domain_def nil)
    (right_identity formula-decl nil monad nil)
    (left_identity formula-decl nil monad nil))
   nil
   (prod_unit_irreducible_is_irreducible subtype "ring_prime_element.p"
    "(ring_prime_element.R)")))
 (prod_unit_irreducible_is_irreducible_TCC2 0
  (prod_unit_irreducible_is_irreducible_TCC2-1 nil 3855325917
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (integral_domain_w_one? const-decl "bool"
     integral_domain_with_one_def nil)
    (remove const-decl "set" sets nil)
    (left_identity formula-decl nil monad nil)
    (right_identity formula-decl nil monad nil)
    (integral_domain? const-decl "bool" integral_domain_def nil)
    (nz_closed? const-decl "bool" ring_nz_closed_def nil)
    (commutative_ring? const-decl "bool" ring_def nil)
    (ring? const-decl "bool" ring_def nil)
    (right_distributive? const-decl "bool" operator_defs_more nil)
    (left_distributive? const-decl "bool" operator_defs_more nil)
    (abelian_group? const-decl "bool" group_def nil)
    (commutative? const-decl "bool" operator_defs nil)
    (group? const-decl "bool" group_def nil)
    (inv_exists? const-decl "bool" group_def nil)
    (monoid? const-decl "bool" monoid_def nil)
    (associative? const-decl "bool" operator_defs nil)
    (monad? const-decl "bool" monad_def nil)
    (identity? const-decl "bool" operator_defs nil)
    (zero_plus formula-decl nil ring nil)
    (restrict const-decl "R" restrict nil)
    (plus_zero formula-decl nil ring nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (member const-decl "bool" sets nil)
    (/= const-decl "boolean" notequal nil)
    (l_invertible? const-decl "bool" ring_unit_def nil)
    (r_invertible? const-decl "bool" ring_unit_def nil)
    (unit? const-decl "bool" ring_unit_def nil)
    (one formal-const-decl "T" ring_prime_element nil)
    (zero formal-const-decl "T" ring_prime_element nil)
    (* formal-const-decl "[T, T -> T]" ring_prime_element nil)
    (+ formal-const-decl "[T, T -> T]" ring_prime_element nil)
    (T formal-nonempty-type-decl nil ring_prime_element nil)
    (R_irreducible_element? const-decl "bool"
     ring_irreducible_element_def nil))
   nil
   (prod_unit_irreducible_is_irreducible subtype "ring_prime_element.u"
    "(ring_prime_element.R)")))
 (prod_unit_irreducible_is_irreducible_TCC3 0
  (prod_unit_irreducible_is_irreducible_TCC3-1 nil 3855325917
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (integral_domain_w_one? const-decl "bool"
     integral_domain_with_one_def nil)
    (remove const-decl "set" sets nil)
    (left_identity formula-decl nil monad nil)
    (right_identity formula-decl nil monad nil)
    (integral_domain? const-decl "bool" integral_domain_def nil)
    (nz_closed? const-decl "bool" ring_nz_closed_def nil)
    (commutative_ring? const-decl "bool" ring_def nil)
    (ring? const-decl "bool" ring_def nil)
    (right_distributive? const-decl "bool" operator_defs_more nil)
    (left_distributive? const-decl "bool" operator_defs_more nil)
    (abelian_group? const-decl "bool" group_def nil)
    (commutative? const-decl "bool" operator_defs nil)
    (group? const-decl "bool" group_def nil)
    (inv_exists? const-decl "bool" group_def nil)
    (monoid? const-decl "bool" monoid_def nil)
    (associative? const-decl "bool" operator_defs nil)
    (monad? const-decl "bool" monad_def nil)
    (identity? const-decl "bool" operator_defs nil)
    (zero_plus formula-decl nil ring nil)
    (restrict const-decl "R" restrict nil)
    (plus_zero formula-decl nil ring nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (member const-decl "bool" sets nil)
    (/= const-decl "boolean" notequal nil)
    (l_invertible? const-decl "bool" ring_unit_def nil)
    (r_invertible? const-decl "bool" ring_unit_def nil)
    (unit? const-decl "bool" ring_unit_def nil)
    (one formal-const-decl "T" ring_prime_element nil)
    (zero formal-const-decl "T" ring_prime_element nil)
    (* formal-const-decl "[T, T -> T]" ring_prime_element nil)
    (+ formal-const-decl "[T, T -> T]" ring_prime_element nil)
    (T formal-nonempty-type-decl nil ring_prime_element nil)
    (R_irreducible_element? const-decl "bool"
     ring_irreducible_element_def nil))
   nil
   (prod_unit_irreducible_is_irreducible subtype
    "ring_prime_element.*(ring_prime_element.u, ring_prime_element.p)"
    "(ring_prime_element.R)")))
 (prod_unit_irreducible_is_irreducible 0
  (prod_unit_irreducible_is_irreducible-1 nil 3855325919
   ("" (skosimp)
    (("" (expand "R_irreducible_element?")
      (("" (prop)
        (("1" (hide (-2 2))
          (("1" (lemma "nz_times_is_zero")
            (("1" (inst -1 "R!1" "u!1" "p!1")
              (("1" (prop)
                (("1" (hide (-1 -3))
                  (("1" (expand "unit?")
                    (("1" (expand "l_invertible?")
                      (("1" (flatten)
                        (("1" (hide -3)
                          (("1" (skosimp)
                            (("1" (replaces -1)
                              (("1"
                                (rewrite "times_zero")
                                (("1"
                                  (typepred "R!1")
                                  (("1"
                                    (expand "integral_domain_w_one?")
                                    (("1"
                                      (expand "monad?")
                                      (("1"
                                        (expand "member")
                                        (("1"
                                          (expand "remove")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (typepred "R!1")
                  (("2" (expand "integral_domain_w_one?")
                    (("2" (expand "integral_domain?")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil)
                 ("3" (typepred "u!1")
                  (("3" (expand "remove")
                    (("3" (expand "member") (("3" (assert) nil nil))
                      nil))
                    nil))
                  nil)
                 ("4" (typepred "p!1")
                  (("4" (expand "remove")
                    (("4" (expand "member") (("4" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide (-2 -3))
          (("2" (expand "unit?")
            (("2" (expand "l_invertible?")
              (("2" (expand "r_invertible?")
                (("2" (flatten)
                  (("2" (skosimp*)
                    (("2" (typepred "R!1")
                      (("2" (expand "integral_domain_w_one?")
                        (("2" (expand "integral_domain?")
                          (("2" (expand "commutative_ring?")
                            (("2" (expand "ring?")
                              (("2"
                                (flatten)
                                (("2"
                                  (hide (-1 -4 -5 -7 -8))
                                  (("2"
                                    (expand "star_closed?")
                                    (("2"
                                      (expand "associative?")
                                      (("2"
                                        (expand "commutative?")
                                        (("2"
                                          (expand "restrict")
                                          (("2"
                                            (expand "member")
                                            (("2"
                                              (prop)
                                              (("1"
                                                (inst
                                                 -2
                                                 "y!1"
                                                 "u!1"
                                                 "p!1")
                                                (("1"
                                                  (replace -2 -4 rl)
                                                  (("1"
                                                    (inst
                                                     1
                                                     "y!1 * u!1")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "y!1"
                                                       "u!1")
                                                      (("1"
                                                        (hide-all-but
                                                         1)
                                                        (("1"
                                                          (typepred
                                                           "u!1")
                                                          (("1"
                                                            (expand
                                                             "remove")
                                                            (("1"
                                                              (expand
                                                               "member")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (typepred "p!1")
                                                    (("2"
                                                      (expand "remove")
                                                      (("2"
                                                        (expand
                                                         "member")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (hide-all-but 1)
                                                  (("3"
                                                    (typepred "u!1")
                                                    (("3"
                                                      (expand "remove")
                                                      (("3"
                                                        (expand
                                                         "member")
                                                        (("3"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (inst -3 "u!1" "p!1")
                                                (("1"
                                                  (replaces -3)
                                                  (("1"
                                                    (inst
                                                     -2
                                                     "p!1"
                                                     "u!1"
                                                     "y!2")
                                                    (("1"
                                                      (replaces -2)
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (hide-all-but
                                                             1)
                                                            (("1"
                                                              (typepred
                                                               "u!1")
                                                              (("1"
                                                                (expand
                                                                 "remove")
                                                                (("1"
                                                                  (expand
                                                                   "member")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2"
                                                        (typepred
                                                         "u!1")
                                                        (("2"
                                                          (expand
                                                           "remove")
                                                          (("2"
                                                            (expand
                                                             "member")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (hide-all-but 1)
                                                      (("3"
                                                        (typepred
                                                         "p!1")
                                                        (("3"
                                                          (expand
                                                           "remove")
                                                          (("3"
                                                            (expand
                                                             "member")
                                                            (("3"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (typepred "p!1")
                                                    (("2"
                                                      (expand "remove")
                                                      (("2"
                                                        (expand
                                                         "member")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (hide-all-but 1)
                                                  (("3"
                                                    (typepred "u!1")
                                                    (("3"
                                                      (expand "remove")
                                                      (("3"
                                                        (expand
                                                         "member")
                                                        (("3"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (skosimp)
          (("3" (expand "unit?" -3)
            (("3" (flatten)
              (("3" (hide -4)
                (("3" (expand "l_invertible?")
                  (("3" (skosimp)
                    (("3" (case "p!1 = (y!1 * a!1) * b!1")
                      (("1" (hide (-2 -4))
                        (("1" (inst?)
                          (("1" (assert)
                            (("1" (hide (-1 2 3 4))
                              (("1"
                                (expand "unit?")
                                (("1"
                                  (expand "l_invertible?")
                                  (("1"
                                    (expand "r_invertible?")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (typepred "R!1")
                                          (("1"
                                            (expand
                                             "integral_domain_w_one?")
                                            (("1"
                                              (expand
                                               "integral_domain?")
                                              (("1"
                                                (expand
                                                 "commutative_ring?")
                                                (("1"
                                                  (expand "ring?")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (hide
                                                       (-1
                                                        -4
                                                        -5
                                                        -7
                                                        -8))
                                                      (("1"
                                                        (expand
                                                         "star_closed?")
                                                        (("1"
                                                          (expand
                                                           "associative?")
                                                          (("1"
                                                            (expand
                                                             "commutative?")
                                                            (("1"
                                                              (expand
                                                               "restrict")
                                                              (("1"
                                                                (expand
                                                                 "member")
                                                                (("1"
                                                                  (prop)
                                                                  (("1"
                                                                    (inst
                                                                     -2
                                                                     "y!2"
                                                                     "y!1"
                                                                     "a!1")
                                                                    (("1"
                                                                      (replace
                                                                       -2
                                                                       -4
                                                                       rl)
                                                                      (("1"
                                                                        (inst
                                                                         1
                                                                         "y!2 * y!1")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "y!2"
                                                                           "y!1")
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (inst
                                                                     -3
                                                                     "y!1"
                                                                     "a!1")
                                                                    (("2"
                                                                      (replaces
                                                                       -3)
                                                                      (("2"
                                                                        (inst
                                                                         -2
                                                                         "a!1"
                                                                         "y!1"
                                                                         "y!3")
                                                                        (("2"
                                                                          (replaces
                                                                           -2)
                                                                          (("2"
                                                                            (inst?)
                                                                            (("2"
                                                                              (inst?)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but 1)
                            (("2" (typepred "y!1")
                              (("2"
                                (typepred "a!1")
                                (("2"
                                  (lemma R_prod_star_closed)
                                  (("2"
                                    (inst -1 "R!1" "y!1" "a!1")
                                    (("2"
                                      (expand "member")
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but (-1 -3 1))
                        (("2" (typepred "R!1")
                          (("2" (expand "integral_domain_w_one?")
                            (("2" (expand "integral_domain?")
                              (("2"
                                (expand "commutative_ring?")
                                (("2"
                                  (expand "ring?")
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (hide-all-but (-3 -9 -10 1))
                                      (("2"
                                        (expand "associative?")
                                        (("2"
                                          (expand "restrict")
                                          (("2"
                                            (inst-cp
                                             -1
                                             "y!1"
                                             "a!1"
                                             "b!1")
                                            (("2"
                                              (replaces -2)
                                              (("2"
                                                (replace -2 1 rl)
                                                (("2"
                                                  (inst?)
                                                  (("1"
                                                    (replace -1 1 rl)
                                                    (("1"
                                                      (replaces -3)
                                                      (("1"
                                                        (rewrite
                                                         "one_times")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (typepred "p!1")
                                                      (("2"
                                                        (expand
                                                         "remove")
                                                        (("2"
                                                          (expand
                                                           "member")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (hide-all-but 1)
                                                    (("3"
                                                      (typepred "u!1")
                                                      (("3"
                                                        (expand
                                                         "remove")
                                                        (("3"
                                                          (expand
                                                           "member")
                                                          (("3"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((R_irreducible_element? const-decl "bool"
     ring_irreducible_element_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (R_prod_star_closed formula-decl nil ring_basic_properties nil)
    (one_times formula-decl nil ring_with_one nil)
    (associative? const-decl "bool" operator_defs nil)
    (restrict const-decl "R" restrict nil)
    (commutative? const-decl "bool" operator_defs nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (commutative_ring? const-decl "bool" ring_def nil)
    (r_invertible? const-decl "bool" ring_unit_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (ring? const-decl "bool" ring_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (one formal-const-decl "T" ring_prime_element nil)
    (integral_domain_w_one? const-decl "bool"
     integral_domain_with_one_def nil)
    (remove const-decl "set" sets nil)
    (integral_domain? const-decl "bool" integral_domain_def nil)
    (l_invertible? const-decl "bool" ring_unit_def nil)
    (TRUE const-decl "bool" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (monad? const-decl "bool" monad_def nil)
    (member const-decl "bool" sets nil)
    (times_zero formula-decl nil ring nil)
    (unit? const-decl "bool" ring_unit_def nil)
    (nz_times_is_zero formula-decl nil ring_nz_closed_aux nil)
    (T formal-nonempty-type-decl nil ring_prime_element nil)
    (+ formal-const-decl "[T, T -> T]" ring_prime_element nil)
    (* formal-const-decl "[T, T -> T]" ring_prime_element nil)
    (zero formal-const-decl "T" ring_prime_element nil))
   shostak))
 (prod_unit_irreducible_is_associates_TCC1 0
  (prod_unit_irreducible_is_associates_TCC1-1 nil 3856625615
   ("" (subtype-tcc) nil nil)
   ((integral_domain_w_one? const-decl "bool"
     integral_domain_with_one_def nil)
    (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (left_identity formula-decl nil monad nil)
    (right_identity formula-decl nil monad nil)
    (integral_domain? const-decl "bool" integral_domain_def nil)
    (nz_closed? const-decl "bool" ring_nz_closed_def nil)
    (commutative_ring? const-decl "bool" ring_def nil)
    (ring? const-decl "bool" ring_def nil)
    (right_distributive? const-decl "bool" operator_defs_more nil)
    (left_distributive? const-decl "bool" operator_defs_more nil)
    (abelian_group? const-decl "bool" group_def nil)
    (commutative? const-decl "bool" operator_defs nil)
    (group? const-decl "bool" group_def nil)
    (inv_exists? const-decl "bool" group_def nil)
    (monoid? const-decl "bool" monoid_def nil)
    (associative? const-decl "bool" operator_defs nil)
    (monad? const-decl "bool" monad_def nil)
    (identity? const-decl "bool" operator_defs nil)
    (zero_plus formula-decl nil ring nil)
    (restrict const-decl "R" restrict nil)
    (plus_zero formula-decl nil ring nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (/= const-decl "boolean" notequal nil)
    (l_invertible? const-decl "bool" ring_unit_def nil)
    (r_invertible? const-decl "bool" ring_unit_def nil)
    (unit? const-decl "bool" ring_unit_def nil)
    (one formal-const-decl "T" ring_prime_element nil)
    (zero formal-const-decl "T" ring_prime_element nil)
    (* formal-const-decl "[T, T -> T]" ring_prime_element nil)
    (+ formal-const-decl "[T, T -> T]" ring_prime_element nil)
    (T formal-nonempty-type-decl nil ring_prime_element nil)
    (R_irreducible_element? const-decl "bool"
     ring_irreducible_element_def nil)
    (member const-decl "bool" sets nil)
    (remove const-decl "set" sets nil))
   nil
   (prod_unit_irreducible_is_associates subtype
    "ring_prime_element.*(ring_prime_element.u, ring_prime_element.p)"
    "(sets[ring_prime_element.T].remove(ring_prime_element.zero, ring_prime_element.R))")))
 (prod_unit_irreducible_is_associates 0
  (prod_unit_irreducible_is_associates-1 nil 3856626334
   ("" (skosimp)
    (("" (lemma "prod_unit_irreducible_is_irreducible")
      (("" (inst?)
        (("" (assert)
          (("" (lemma "irreducible_el_divisors_charac")
            (("" (inst -1 "R!1" "u!1 * p!1" "p!1")
              (("1" (prop)
                (("1" (lemma "associates_equiv_relation")
                  (("1" (inst?)
                    (("1" (expand "equivalence?")
                      (("1" (expand "symmetric?")
                        (("1" (flatten)
                          (("1" (hide-all-but (-2 -4 1))
                            (("1" (inst -1 "u!1 * p!1" "p!1")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide (- 2))
                      (("2" (typepred "R!1")
                        (("2" (expand "integral_domain_w_one?")
                          (("2" (expand "integral_domain?")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide (-2 -4 1))
                  (("2" (expand "R_irreducible_element?")
                    (("2" (assert) nil nil)) nil))
                  nil)
                 ("3" (hide (- 2))
                  (("3" (expand "divides?")
                    (("3" (typepred "u!1" "p!1" "R!1")
                      (("3" (expand "integral_domain_w_one?")
                        (("3" (expand "integral_domain?")
                          (("3" (expand "commutative_ring?")
                            (("3" (expand "commutative?")
                              (("3"
                                (expand "restrict")
                                (("3"
                                  (expand "remove")
                                  (("3"
                                    (expand "member")
                                    (("3"
                                      (flatten)
                                      (("3"
                                        (hide (-3 -5 -6))
                                        (("3"
                                          (inst?)
                                          (("3"
                                            (inst?)
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide (- 2))
                (("2" (typepred "R!1")
                  (("2" (expand "commutative_ring_with_one?")
                    (("2" (expand "ring_with_one?")
                      (("2" (expand "integral_domain_w_one?")
                        (("2" (expand "integral_domain?")
                          (("2" (expand "commutative_ring?")
                            (("2" (expand "monoid?")
                              (("2"
                                (expand "monad?")
                                (("2"
                                  (expand "ring?")
                                  (("2"
                                    (expand "member")
                                    (("2"
                                      (expand "remove")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (hide-all-but (-10 1 2))
                                            (("2"
                                              (expand "identity?")
                                              (("2"
                                                (expand "restrict")
                                                (("2"
                                                  (skosimp)
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (expand "remove")
                                                      (("2"
                                                        (expand
                                                         "member")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((prod_unit_irreducible_is_irreducible formula-decl nil
     ring_prime_element nil)
    (commutative_ring_with_one? const-decl "bool" ring_with_one_def
     nil)
    (commutative? const-decl "bool" operator_defs nil)
    (member const-decl "bool" sets nil)
    (restrict const-decl "R" restrict nil)
    (divides? const-decl "bool" ring_divides_def nil)
    (R_irreducible_element? const-decl "bool"
     ring_irreducible_element_def nil)
    (associates_equiv_relation formula-decl nil ring_divides nil)
    (integral_domain? const-decl "bool" integral_domain_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (equivalence? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (ring_with_one? const-decl "bool" ring_with_one_def nil)
    (ring_with_one nonempty-type-eq-decl nil ring_with_one nil)
    (commutative_ring? const-decl "bool" ring_def nil)
    (monoid? const-decl "bool" monoid_def nil)
    (ring? const-decl "bool" ring_def nil)
    (identity? const-decl "bool" operator_defs nil)
    (right_identity formula-decl nil monad nil)
    (left_identity formula-decl nil monad nil)
    (monad? const-decl "bool" monad_def nil)
    (irreducible_el_divisors_charac formula-decl nil ring_prime_element
     nil)
    (remove const-decl "set" sets nil)
    (integral_domain_w_one? const-decl "bool"
     integral_domain_with_one_def nil)
    (one formal-const-decl "T" ring_prime_element nil)
    (zero formal-const-decl "T" ring_prime_element nil)
    (* formal-const-decl "[T, T -> T]" ring_prime_element nil)
    (+ formal-const-decl "[T, T -> T]" ring_prime_element nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-nonempty-type-decl nil ring_prime_element nil))
   shostak)))

