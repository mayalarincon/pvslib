(ring_zn
 (IMP_quotient_rings_with_one_TCC1 0
  (IMP_quotient_rings_with_one_TCC1-1 nil 3813420475
   ("" (expand "ring_with_one?")
    (("" (expand "ring?")
      (("" (split)
        (("1" (expand "abelian_group?")
          (("1" (expand "group?")
            (("1" (expand "monoid?")
              (("1" (split)
                (("1" (expand "monad?")
                  (("1" (split)
                    (("1" (grind) nil nil) ("2" (grind) nil nil)
                     ("3" (grind) nil nil))
                    nil))
                  nil)
                 ("2" (grind) nil nil)
                 ("3" (expand "inv_exists?")
                  (("3" (skosimp)
                    (("3" (inst 1 "-x!1")
                      (("1" (assert) nil nil)
                       ("2" (expand "fullset") (("2" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("4" (grind) nil nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (grind) nil nil) ("3" (grind) nil nil)
         ("4" (expand "left_distributive?")
          (("4" (skosimp)
            (("4" (expand "restrict") (("4" (propax) nil nil)) nil))
            nil))
          nil)
         ("5" (expand "right_distributive?")
          (("5" (skosimp)
            (("5" (expand "restrict") (("5" (propax) nil nil)) nil))
            nil))
          nil)
         ("6" (expand "monoid?")
          (("6" (expand "monad?")
            (("6" (split)
              (("1" (grind) nil nil) ("2" (grind) nil nil)
               ("3" (grind) nil nil) ("4" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ring? const-decl "bool" ring_def nil)
    (right_distributive? const-decl "bool" operator_defs_more nil)
    (left_distributive? const-decl "bool" operator_defs_more nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (abelian_group? const-decl "bool" group_def nil)
    (monoid? const-decl "bool" monoid_def nil)
    (commutative? const-decl "bool" operator_defs nil)
    (inv_exists? const-decl "bool" group_def nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (x!1 skolem-const-decl "(fullset[int])" ring_zn nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (associative? const-decl "bool" operator_defs nil)
    (monad? const-decl "bool" monad_def nil)
    (restrict const-decl "R" restrict nil)
    (identity? const-decl "bool" operator_defs nil)
    (fullset const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (group? const-decl "bool" group_def nil)
    (ring_with_one? const-decl "bool" ring_with_one_def nil))
   nil
   (IMP_quotient_rings_with_one assuming
    "quotient_rings_with_one[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.*), 0, 1].quotient_rings_with_one"
    "fullset_is_ring_with_one: ASSUMPTION ring_with_one_def[quotient_rings_with_one.T, quotient_rings_with_one.+, quotient_rings_with_one.*, quotient_rings_with_one.zero, quotient_rings_with_one.one].ring_with_one?(sets[quotient_rings_with_one.T].fullset)")))
 (nZ_add_TCC1 0
  (nZ_add_TCC1-1 nil 3797004843
   ("" (skosimp)
    (("" (typepred "x!1" "y!1")
      (("" (expand "nZ")
        (("" (skosimp*)
          (("" (inst 1 "k!1+k!2")
            (("" (replaces -1)
              (("" (replaces -1)
                (("" (lemma "left_distributive")
                  (("" (inst -1 "k!1" "k!2" "n!1")
                    (("" (replace -1 1 rl) (("" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nZ const-decl "set[int]" ring_zn nil)
    (set type-eq-decl nil sets nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (left_distributive formula-decl nil ring nil)
    (restrict const-decl "R" restrict nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_plus_int_is_int application-judgement "int" integers nil))
   nil
   (nZ_add subtype "(number_fields.+)(ring_zn.x, ring_zn.y)"
    "(ring_zn.nZ(ring_zn.n))")))
 (Z_ring 0
  (Z_ring-1 nil 3797004884
   ("" (lemma "IMP_quotient_rings_with_one_TCC1")
    (("" (expand "ring_with_one?") (("" (assert) nil nil)) nil)) nil)
   ((ring_with_one? const-decl "bool" ring_with_one_def nil)
    (IMP_quotient_rings_with_one_TCC1 assuming-tcc nil ring_zn nil))
   shostak))
 (Z_TCC1 0
  (Z_TCC1-1 nil 3797005119
   ("" (lemma "IMP_quotient_rings_with_one_TCC1")
    (("" (expand "ring_with_one?") (("" (assert) nil nil)) nil)) nil)
   ((ring_with_one? const-decl "bool" ring_with_one_def nil)
    (IMP_quotient_rings_with_one_TCC1 assuming-tcc nil ring_zn nil))
   nil
   (Z subtype "sets[int].fullset"
    "ring[int, restrict[[numfield, numfield], [int, int], numfield](+), restrict[[numfield, numfield], [int, int], numfield](*), 0]")))
 (Z1_is_Z 0
  (Z1_is_Z-1 nil 3797005160
   ("" (decompose-equality 1)
    (("" (iff)
      (("" (prop)
        (("1" (expand "nZ")
          (("1" (skosimp)
            (("1" (assert)
              (("1" (expand "Z")
                (("1" (expand "fullset") (("1" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "Z")
          (("2" (expand "fullset")
            (("2" (expand "nZ") (("2" (inst?) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((fullset const-decl "set" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     ring_zn nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (ring? const-decl "bool" ring_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nZ const-decl "set[int]" ring_zn nil)
    (set type-eq-decl nil sets nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil))
   nil))
 (Z_commutative_ring_w_one 0
  (Z_commutative_ring_w_one-1 nil 3797005226
   ("" (expand "commutative_ring_with_one?")
    (("" (expand "ring_with_one?")
      (("" (expand "Z")
        (("" (expand "fullset")
          (("" (split)
            (("1" (expand "monoid?")
              (("1" (split)
                (("1" (expand "monad?")
                  (("1" (split)
                    (("1" (expand "star_closed?")
                      (("1" (skosimp)
                        (("1" (expand "member")
                          (("1" (propax) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (expand "member") (("2" (propax) nil nil))
                      nil)
                     ("3" (expand "identity?")
                      (("3" (expand "restrict")
                        (("3" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "associative?")
                  (("2" (expand "restrict") (("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "commutative?")
              (("2" (expand "restrict") (("2" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ring_with_one? const-decl "bool" ring_with_one_def nil)
    (fullset const-decl "set" sets nil)
    (commutative? const-decl "bool" operator_defs nil)
    (monoid? const-decl "bool" monoid_def nil)
    (associative? const-decl "bool" operator_defs nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (monad? const-decl "bool" monad_def nil)
    (identity? const-decl "bool" operator_defs nil)
    (restrict const-decl "R" restrict nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (member const-decl "bool" sets nil)
    (Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     ring_zn nil)
    (commutative_ring_with_one? const-decl "bool" ring_with_one_def
     nil))
   nil))
 (nZ_ideal 0
  (nZ_ideal-1 nil 3797005287
   ("" (skosimp)
    (("" (case "subring?(nZ(n!1), Z)")
      (("1" (expand "ideal?")
        (("1" (prop)
          (("1" (expand "left_ideal?")
            (("1" (prop)
              (("1" (hide -1)
                (("1" (expand "left_swallow?")
                  (("1" (skosimp)
                    (("1" (expand "member")
                      (("1" (typepred "x!1")
                        (("1" (expand "nZ")
                          (("1" (skosimp)
                            (("1" (inst 1 "r!1*k!1")
                              (("1"
                                (replaces -1)
                                (("1"
                                  (rewrite "associative_mult")
                                  nil
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "right_ideal?")
            (("2" (prop)
              (("2" (hide -1)
                (("2" (expand "right_swallow?")
                  (("2" (skosimp)
                    (("2" (expand "member")
                      (("2" (typepred "x!1")
                        (("2" (expand "nZ")
                          (("2" (skosimp)
                            (("2" (inst 1 "k!1*r!1")
                              (("2"
                                (replaces -1)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (expand "subring?")
          (("2" (prop)
            (("1" (expand "subset?")
              (("1" (skosimp)
                (("1" (expand "member")
                  (("1" (expand* "Z" "nZ" "fullset") nil nil)) nil))
                nil))
              nil)
             ("2" (expand "ring?")
              (("2" (prop)
                (("1" (expand "abelian_group?")
                  (("1" (prop)
                    (("1" (expand "group?")
                      (("1" (prop)
                        (("1" (expand "monoid?")
                          (("1" (prop)
                            (("1" (expand "monad?")
                              (("1"
                                (prop)
                                (("1"
                                  (expand "star_closed?")
                                  (("1"
                                    (skosimp)
                                    (("1"
                                      (expand "member")
                                      (("1"
                                        (typepred "x!1" "y!1")
                                        (("1"
                                          (expand "nZ")
                                          (("1"
                                            (skosimp*)
                                            (("1"
                                              (inst 1 "k!1 + k!2")
                                              (("1"
                                                (replaces -1)
                                                (("1"
                                                  (replaces -1)
                                                  (("1"
                                                    (lemma
                                                     "distributive")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "n!1"
                                                       "k!1"
                                                       "k!2")
                                                      (("1"
                                                        (stop-rewrite
                                                         "plus_zero"
                                                         "zero_plus"
                                                         "one_right"
                                                         "one_left"
                                                         "right_identity"
                                                         "left_identity")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "member")
                                  (("2"
                                    (expand "nZ")
                                    (("2"
                                      (inst?)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (expand "identity?")
                                  (("3"
                                    (expand "restrict")
                                    (("3" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "associative?")
                              (("2"
                                (expand "restrict")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "inv_exists?")
                          (("2" (skosimp)
                            (("2" (inst 1 "-x!1")
                              (("1"
                                (lemma "inverse_add")
                                (("1"
                                  (inst?)
                                  (("1" (prop) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (typepred "x!1")
                                (("2"
                                  (expand "nZ")
                                  (("2"
                                    (skosimp)
                                    (("2"
                                      (inst 1 "-k!1")
                                      (("2"
                                        (replaces -1)
                                        (("2"
                                          (lemma "mult_neg")
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (replace -1 1 rl)
                                              (("2"
                                                (hide -1)
                                                (("2"
                                                  (lemma
                                                   "both_sides_times2")
                                                  (("2"
                                                    (inst?)
                                                    (("1"
                                                      (lemma "expt_m1")
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (expand "^")
                                                          (("1"
                                                            (expand
                                                             "power")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "commutative?")
                      (("2" (expand "restrict")
                        (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "star_closed?")
                  (("2" (skosimp)
                    (("2" (expand "member")
                      (("2" (typepred "x!1" "y!1")
                        (("2" (expand "nZ")
                          (("2" (skosimp*)
                            (("2" (inst 1 "n!1*k!1*k!2")
                              (("2"
                                (replaces -1)
                                (("2"
                                  (replaces -1)
                                  (("2"
                                    (lemma "associative_mult")
                                    (("2"
                                      (inst?)
                                      (("2" (replaces -1) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (expand "associative?")
                  (("3" (expand "restrict") (("3" (propax) nil nil))
                    nil))
                  nil)
                 ("4" (expand "left_distributive?")
                  (("4" (expand "restrict") (("4" (propax) nil nil))
                    nil))
                  nil)
                 ("5" (expand "right_distributive?")
                  (("5" (expand "restrict") (("5" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     ring_zn nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (nZ const-decl "set[int]" ring_zn nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (subring? const-decl "bool" ring_def nil)
    (ring? const-decl "bool" ring_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (left_swallow? const-decl "bool" ring_ideal_def nil)
    (member const-decl "bool" sets nil)
    (associative_mult formula-decl nil number_fields nil)
    (TRUE const-decl "bool" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (left_ideal? const-decl "bool" ring_ideal_def nil)
    (right_swallow? const-decl "bool" ring_ideal_def nil)
    (right_ideal? const-decl "bool" ring_ideal_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (right_distributive? const-decl "bool" operator_defs_more nil)
    (left_distributive? const-decl "bool" operator_defs_more nil)
    (abelian_group? const-decl "bool" group_def nil)
    (commutative? const-decl "bool" operator_defs nil)
    (group? const-decl "bool" group_def nil)
    (inv_exists? const-decl "bool" group_def nil)
    (minus_int_is_int application-judgement "int" integers nil) nil
    (- const-decl "[numfield -> numfield]" number_fields nil) nil
    (inverse_add formula-decl nil number_fields nil)
    (mult_neg formula-decl nil extra_tegies nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (monoid? const-decl "bool" monoid_def nil)
    (associative? const-decl "bool" operator_defs nil)
    (monad? const-decl "bool" monad_def nil)
    (identity? const-decl "bool" operator_defs nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (zero_times formula-decl nil ring nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (distributive formula-decl nil number_fields nil)
    (subset? const-decl "bool" sets nil)
    (fullset const-decl "set" sets nil))
   nil))
 (Z_nz_closed 0
  (Z_nz_closed-1 nil 3809081264
   ("" (expand "nz_closed?")
    (("" (expand "star_closed?")
      (("" (skosimp)
        (("" (expand "member")
          (("" (expand "remove")
            (("" (typepred "x!1" "y!1")
              (("" (expand "remove")
                (("" (flatten)
                  (("" (split)
                    (("1" (expand "/=")
                      (("1"
                        (case "0 = x!1 * y!1 IMPLIES 0 = abs(x!1) * abs(y!1)")
                        (("1" (assert)
                          (("1" (replaces -1 -2)
                            (("1" (lemma posreal_mult_closed)
                              (("1"
                                (inst -1 "abs(x!1)" "abs(y!1)")
                                (("1"
                                  (case "abs(x!1) > 0 AND abs(y!1)>0")
                                  (("1" (assert) nil nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (prop)
                          (("2" (hide-all-but (-1 1))
                            (("2" (expand "abs")
                              (("2"
                                (lift-if)
                                (("2"
                                  (lift-if)
                                  (("2"
                                    (case "x!1 < 0")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (assert)
                                      (("2"
                                        (case "y!1<0")
                                        (("1" (assert) nil nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma R_prod_star_closed)
                      (("2" (inst -1 "Z" "x!1" "y!1")
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((star_closed? const-decl "bool" groupoid_def nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (member const-decl "bool" sets nil)
    (Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     ring_zn nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (ring? const-decl "bool" ring_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (set type-eq-decl nil sets nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (R_prod_star_closed formula-decl nil ring_basic_properties nil)
    (/= const-decl "boolean" notequal nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (posreal_mult_closed formula-decl nil real_axioms nil)
    (> const-decl "bool" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (remove const-decl "set" sets nil)
    (nz_closed? const-decl "bool" ring_nz_closed_def nil))
   shostak))
 (Z_integral_domain_w_one 0
  (Z_integral_domain_w_one-1 nil 3809080335
   ("" (expand "integral_domain_w_one?")
    (("" (split)
      (("1" (expand "integral_domain?")
        (("1" (expand "commutative_ring?")
          (("1" (lemma Z_commutative_ring_w_one)
            (("1" (expand "commutative_ring_with_one?")
              (("1" (flatten)
                (("1" (split)
                  (("1" (propax) nil nil)
                   ("2" (lemma Z_nz_closed) (("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (lemma Z_commutative_ring_w_one)
        (("2" (expand "commutative_ring_with_one?")
          (("2" (expand "ring_with_one?")
            (("2" (expand "monoid?")
              (("2" (flatten)
                (("2" (assert)
                  (("2" (expand "monad?")
                    (("2" (flatten)
                      (("2" (split)
                        (("1" (hide-all-but 1)
                          (("1" (expand "star_closed?")
                            (("1" (skosimp)
                              (("1"
                                (lemma Z_nz_closed)
                                (("1"
                                  (expand "nz_closed?")
                                  (("1"
                                    (expand "star_closed?")
                                    (("1"
                                      (inst -1 "x!1" "y!1")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "member")
                          (("2" (expand "remove")
                            (("2" (expand "member")
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil)
                         ("3" (hide-all-but (-3 1))
                          (("3" (expand "identity?")
                            (("3" (skosimp)
                              (("3"
                                (inst -1 "x!1")
                                (("1"
                                  (expand "restrict")
                                  (("1" (propax) nil nil))
                                  nil)
                                 ("2"
                                  (typepred "x!1")
                                  (("2"
                                    (expand "remove")
                                    (("2"
                                      (expand "member")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((commutative_ring? const-decl "bool" ring_def nil)
    (commutative_ring_with_one? const-decl "bool" ring_with_one_def
     nil)
    (Z_nz_closed formula-decl nil ring_zn nil)
    (Z_commutative_ring_w_one formula-decl nil ring_zn nil)
    (integral_domain? const-decl "bool" integral_domain_def nil)
    (monoid? const-decl "bool" monoid_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil) nil
    (identity? const-decl "bool" operator_defs nil)
    (member const-decl "bool" sets nil)
    (nz_closed? const-decl "bool" ring_nz_closed_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil) (remove const-decl "set" sets nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ring? const-decl "bool" ring_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     ring_zn nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (monad? const-decl "bool" monad_def nil)
    (ring_with_one? const-decl "bool" ring_with_one_def nil)
    (integral_domain_w_one? const-decl "bool"
     integral_domain_with_one_def nil))
   shostak))
 (Zn_finite_set 0
  (Zn_finite_set-1 nil 3797005355
   (""
    (stop-rewrite "plus_zero" "zero_plus" "one_right" "one_left"
     "right_identity" "left_identity")
    (("" (skosimp*)
      (("" (expand "is_finite")
        ((""
          (inst 1 "n!1"
           "(LAMBDA (A:(Z(n!1))): rem(n!1)(lc_gen(Z,nZ(n!1))(A)))")
          (("1" (expand "injective?")
            (("1" (skosimp*)
              (("1" (typepred "x1!1" "x2!1")
                (("1" (expand "Z")
                  (("1" (expand "/")
                    (("1" (expand "coset?")
                      (("1" (flatten)
                        (("1" (hide (-2 -4))
                          (("1" (expand "left_coset?")
                            (("1" (skosimp*)
                              (("1"
                                (replaces -1)
                                (("1"
                                  (replaces -1)
                                  (("1"
                                    (lemma "lcos_eq2")
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (prop)
                                        (("1"
                                          (hide 2)
                                          (("1"
                                            (rewrite "same_remainder")
                                            (("1"
                                              (expand "divides")
                                              (("1"
                                                (skosimp)
                                                (("1"
                                                  (lemma "lc_gen_eq")
                                                  (("1"
                                                    (copy -1)
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "nZ(n!1)"
                                                       "fullset[int]"
                                                       "a!1")
                                                      (("1"
                                                        (inst
                                                         -2
                                                         "nZ(n!1)"
                                                         "fullset[int]"
                                                         "a!2")
                                                        (("1"
                                                          (lemma
                                                           "nZ_ideal")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (typepred
                                                               "a!1"
                                                               "a!2")
                                                              (("1"
                                                                (expand
                                                                 "Z")
                                                                (("1"
                                                                  (prop)
                                                                  (("1"
                                                                    (skosimp*)
                                                                    (("1"
                                                                      (replaces
                                                                       -1)
                                                                      (("1"
                                                                        (replaces
                                                                         -1)
                                                                        (("1"
                                                                          (hide
                                                                           (-1
                                                                            -2
                                                                            -3))
                                                                          (("1"
                                                                            (typepred
                                                                             "h!1"
                                                                             "h!2")
                                                                            (("1"
                                                                              (expand
                                                                               "nZ")
                                                                              (("1"
                                                                                (skosimp*)
                                                                                (("1"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("1"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("1"
                                                                                      (inst
                                                                                       1
                                                                                       "nZ_add(n!1)(n!1 * x!1,n!1 * k!1) - n!1 * k!2")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "nZ_add")
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1
                                                                                           1
                                                                                           rl)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide
                                                                                         -1)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "nZ_add")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "nZ")
                                                                                            (("2"
                                                                                              (inst
                                                                                               1
                                                                                               "k!1 - k!2 + x!1")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (hide
                                                                                         -1)
                                                                                        (("3"
                                                                                          (expand
                                                                                           "nZ")
                                                                                          (("3"
                                                                                            (inst
                                                                                             1
                                                                                             "k!1")
                                                                                            (("3"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("4"
                                                                                        (hide
                                                                                         -1)
                                                                                        (("4"
                                                                                          (expand
                                                                                           "nZ")
                                                                                          (("4"
                                                                                            (inst
                                                                                             1
                                                                                             "x!1")
                                                                                            (("4"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide
                                                           (-1 -2 2))
                                                          (("2"
                                                            (lemma
                                                             "Z_ring")
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide
                                                         (-1 -2 2))
                                                        (("2"
                                                          (lemma
                                                           "Z_ring")
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide (-1 2))
                                          (("2"
                                            (lemma "nZ_ideal")
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "ideal?")
                                                  (("2"
                                                    (expand
                                                     "left_ideal?")
                                                    (("2"
                                                      (expand
                                                       "subring?")
                                                      (("2"
                                                        (expand
                                                         "ring?")
                                                        (("2"
                                                          (expand
                                                           "abelian_group?")
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skosimp*)
            (("2" (expand "left_coset?")
              (("2" (typepred "A!1")
                (("2" (expand "Z")
                  (("2" (expand "/")
                    (("2" (expand "coset?")
                      (("2" (prop)
                        (("2" (hide -2)
                          (("2" (expand "left_coset?")
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_plus_int_is_int application-judgement "int" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nZ const-decl "set[int]" ring_zn nil)
    (Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     ring_zn nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (ring? const-decl "bool" ring_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (left_coset? const-decl "bool" cosets_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (set type-eq-decl nil sets nil) nil
    (Z const-decl "setofsets[int]" ring_zn nil)
    (setofsets type-eq-decl nil sets nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (setof type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
         modulo_arithmetic nil)
    (left_coset type-eq-decl nil cosets_def nil)
    (lc_gen const-decl "T" cosets_def nil)
    (coset? const-decl "bool" cosets_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (subring? const-decl "bool" ring_def nil)
    (abelian_group? const-decl "bool" group_def nil)
    (left_ideal? const-decl "bool" ring_ideal_def nil) nil
    (lc_gen_eq formula-decl nil ring_cosets_lemmas nil)
    (Z_ring formula-decl nil ring_zn nil)
    (nZ_ideal formula-decl nil ring_zn nil) nil nil
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nZ_add const-decl "(nZ(n))" ring_zn nil) nil
    (int_minus_int_is_int application-judgement "int" integers nil)
    (same_remainder formula-decl nil modulo_arithmetic nil)
    (fullset const-decl "set" sets nil) nil
    (lcos_eq2 formula-decl nil ring_cosets_lemmas nil)
    (TRUE const-decl "bool" booleans nil)
    (/ const-decl "setof[set[T]]" cosets_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (injective? const-decl "bool" functions nil)
    (is_finite const-decl "bool" finite_sets nil))
   nil))
 (Zn_card_n_TCC1 0
  (Zn_card_n_TCC1-1 nil 3797005406
   ("" (skosimp) (("" (rewrite "Zn_finite_set") nil nil)) nil)
   ((Zn_finite_set formula-decl nil ring_zn nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil))
   nil
   (Zn_card_n subtype "ring_zn.Z(ring_zn.n)"
    "finite_set[setof[int]]")))
 (Zn_card_n 0
  (Zn_card_n-1 nil 3797005417
   (""
    (stop-rewrite "plus_zero" "zero_plus" "one_right" "one_left"
     "right_identity" "left_identity")
    (("" (skosimp)
      (("" (lemma "card_bij[set[int]]")
        (("" (inst?)
          (("" (assert)
            (("" (hide 2)
              ((""
                (inst 1
                 "(LAMBDA (A:(Z(n!1))): rem(n!1)(lc_gen(fullset[int],nZ(n!1))(A)))")
                (("1" (expand "bijective?")
                  (("1" (prop)
                    (("1" (expand "injective?")
                      (("1" (skosimp*)
                        (("1" (typepred "x1!1" "x2!1")
                          (("1" (expand "Z")
                            (("1" (expand "/")
                              (("1"
                                (expand "coset?")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (hide (-2 -4))
                                    (("1"
                                      (expand "left_coset?")
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (replaces -1)
                                            (("1"
                                              (lemma "lcos_eq2")
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (hide 2)
                                                    (("1"
                                                      (rewrite
                                                       "same_remainder")
                                                      (("1"
                                                        (expand
                                                         "divides")
                                                        (("1"
                                                          (skosimp)
                                                          (("1"
                                                            (lemma
                                                             "lc_gen_eq")
                                                            (("1"
                                                              (copy -1)
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "nZ(n!1)"
                                                                 "fullset[int]"
                                                                 "a!1")
                                                                (("1"
                                                                  (inst
                                                                   -2
                                                                   "nZ(n!1)"
                                                                   "fullset[int]"
                                                                   "a!2")
                                                                  (("1"
                                                                    (lemma
                                                                     "nZ_ideal")
                                                                    (("1"
                                                                      (inst?)
                                                                      (("1"
                                                                        (typepred
                                                                         "a!1"
                                                                         "a!2")
                                                                        (("1"
                                                                          (expand
                                                                           "Z")
                                                                          (("1"
                                                                            (prop)
                                                                            (("1"
                                                                              (skosimp*)
                                                                              (("1"
                                                                                (replaces
                                                                                 -1)
                                                                                (("1"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("1"
                                                                                    (hide
                                                                                     (-1
                                                                                      -2
                                                                                      -3))
                                                                                    (("1"
                                                                                      (typepred
                                                                                       "h!1"
                                                                                       "h!2")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "nZ")
                                                                                        (("1"
                                                                                          (skosimp*)
                                                                                          (("1"
                                                                                            (replaces
                                                                                             -1)
                                                                                            (("1"
                                                                                              (replaces
                                                                                               -1)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 1
                                                                                                 "nZ_add(n!1)(n!1 * x!1,n!1 * k!1) - n!1 * k!2")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "nZ_add")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "nZ_add")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "nZ")
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         1
                                                                                                         "k!1 - k!2 + x!1")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("3"
                                                                                                  (hide
                                                                                                   -1)
                                                                                                  (("3"
                                                                                                    (expand
                                                                                                     "nZ")
                                                                                                    (("3"
                                                                                                      (inst
                                                                                                       1
                                                                                                       "k!1")
                                                                                                      (("3"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("4"
                                                                                                  (hide
                                                                                                   -1)
                                                                                                  (("4"
                                                                                                    (expand
                                                                                                     "nZ")
                                                                                                    (("4"
                                                                                                      (inst
                                                                                                       1
                                                                                                       "x!1")
                                                                                                      (("4"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     (-1
                                                                      -2
                                                                      2))
                                                                    (("2"
                                                                      (lemma
                                                                       "Z_ring")
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   (-1
                                                                    -2
                                                                    2))
                                                                  (("2"
                                                                    (lemma
                                                                     "Z_ring")
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide (-1 2))
                                                    (("2"
                                                      (lemma
                                                       "nZ_ideal")
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (expand
                                                           "ideal?")
                                                          (("2"
                                                            (expand
                                                             "left_ideal?")
                                                            (("2"
                                                              (expand
                                                               "subring?")
                                                              (("2"
                                                                (expand
                                                                 "ring?")
                                                                (("2"
                                                                  (expand
                                                                   "abelian_group?")
                                                                  (("2"
                                                                    (flatten)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "surjective?")
                      (("2" (skosimp)
                        (("2" (lemma "lc_gen_eq")
                          (("2"
                            (inst -1 "nZ(n!1)" "fullset[int]" "y!1")
                            (("1" (lemma "nZ_ideal")
                              (("1"
                                (inst?)
                                (("1"
                                  (expand "Z")
                                  (("1"
                                    (prop)
                                    (("1"
                                      (skosimp*)
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (lemma "rem_def")
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (hide (-1 2 3))
                                                  (("1"
                                                    (typepred "h!1")
                                                    (("1"
                                                      (expand "nZ")
                                                      (("1"
                                                        (skosimp)
                                                        (("1"
                                                          (replaces -1)
                                                          (("1"
                                                            (inst
                                                             1
                                                             "k!1")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide -1)
                                          (("2"
                                            (expand "Z")
                                            (("2"
                                              (expand "/")
                                              (("2"
                                                (lemma
                                                 "lcoset_iff_coset")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (prop)
                                                    (("2"
                                                      (hide (-1 1 3))
                                                      (("2"
                                                        (expand
                                                         "left_coset?")
                                                        (("2"
                                                          (inst
                                                           1
                                                           "y!1")
                                                          (("2"
                                                            (expand
                                                             "Z")
                                                            (("2"
                                                              (expand
                                                               "fullset")
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide (-1 2))
                                      (("2"
                                        (expand "fullset")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2)
                              (("2"
                                (lemma "Z_ring")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skosimp)
                  (("2" (typepred "A!1")
                    (("2" (expand "Z")
                      (("2" (expand "/")
                        (("2" (expand "coset?")
                          (("2" (expand "Z") (("2" (prop) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (Z const-decl "setofsets[int]" ring_zn nil)
    (bijective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (lcoset_iff_coset formula-decl nil ring_cosets_lemmas nil)
    (rem_def formula-decl nil modulo_arithmetic nil) nil
    (injective? const-decl "bool" functions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (/ const-decl "setof[set[T]]" cosets_def nil)
    (TRUE const-decl "bool" booleans nil)
    (lcos_eq2 formula-decl nil ring_cosets_lemmas nil) nil
    (same_remainder formula-decl nil modulo_arithmetic nil)
    (int_minus_int_is_int application-judgement "int" integers nil) nil
    (nZ_add const-decl "(nZ(n))" ring_zn nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    nil nil (nZ_ideal formula-decl nil ring_zn nil)
    (Z_ring formula-decl nil ring_zn nil)
    (lc_gen_eq formula-decl nil ring_cosets_lemmas nil) nil
    (ideal? const-decl "bool" ring_ideal_def nil)
    (subring? const-decl "bool" ring_def nil)
    (abelian_group? const-decl "bool" group_def nil)
    (left_ideal? const-decl "bool" ring_ideal_def nil)
    (ring? const-decl "bool" ring_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     ring_zn nil)
    (coset? const-decl "bool" cosets_def nil)
    (lc_gen const-decl "T" cosets_def nil)
    (left_coset type-eq-decl nil cosets_def nil)
    (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
         modulo_arithmetic nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil) nil
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (left_coset? const-decl "bool" cosets_def nil)
    (fullset const-decl "set" sets nil)
    (nZ const-decl "set[int]" ring_zn nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (card_bij formula-decl nil finite_sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil))
   nil))
 (Zn_commutative_ring_w_one_TCC1 0
  (Zn_commutative_ring_w_one_TCC1-1 nil 3797005481
   ("" (skosimp)
    (("" (inst 1 "nZ(n!1)")
      (("" (rewrite "ideal_is_coset")
        (("" (hide 2) (("" (rewrite "nZ_ideal") nil nil)) nil)) nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (coset? const-decl "bool" cosets_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ring? const-decl "bool" ring_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     ring_zn nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nZ const-decl "set[int]" ring_zn nil)
    (coset type-eq-decl nil cosets_def nil)
    (n!1 skolem-const-decl "posnat" ring_zn nil)
    (nZ_ideal formula-decl nil ring_zn nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ideal_is_coset formula-decl nil ring_cosets_lemmas nil))
   nil
   (Zn_commutative_ring_w_one existence ""
    "cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset(ring_zn.Z, ring_zn.nZ(ring_zn.n))")))
 (Zn_commutative_ring_w_one_TCC2 0
  (Zn_commutative_ring_w_one_TCC2-1 nil 3797005481
   ("" (skosimp)
    (("" (lemma "coset_add")
      (("" (inst -1 "Z" "nZ(n!1)" "x1!1`1" "x1!1`2")
        (("1" (assert) nil nil)
         ("2" (hide 2) (("2" (rewrite "nZ_ideal") nil nil)) nil))
        nil))
      nil))
    nil)
   ((* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (coset_add formula-decl nil quotient_rings nil)
    (nZ_ideal formula-decl nil ring_zn nil)
    (coset type-eq-decl nil cosets_def nil)
    (coset? const-decl "bool" cosets_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (ring? const-decl "bool" ring_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nZ const-decl "set[int]" ring_zn nil)
    (n!1 skolem-const-decl "posnat" ring_zn nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     ring_zn nil))
   nil
   (Zn_commutative_ring_w_one subtype
    "cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].add(ring_zn.Z, ring_zn.nZ(ring_zn.n))"
    "[[cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset(ring_zn.Z, ring_zn.nZ(ring_zn.n)), cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset(ring_zn.Z, ring_zn.nZ(ring_zn.n))] -> cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset(ring_zn.Z, ring_zn.nZ(ring_zn.n))]")))
 (Zn_commutative_ring_w_one_TCC3 0
  (Zn_commutative_ring_w_one_TCC3-1 nil 3797005481
   ("" (skosimp)
    (("" (lemma "coset_product")
      (("" (inst -1 "Z" "nZ(n!1)" "x1!1`1" "x1!1`2")
        (("1" (assert) nil nil)
         ("2" (hide 2) (("2" (rewrite "nZ_ideal") nil nil)) nil))
        nil))
      nil))
    nil)
   ((* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (coset_product formula-decl nil quotient_rings nil)
    (nZ_ideal formula-decl nil ring_zn nil)
    (coset type-eq-decl nil cosets_def nil)
    (coset? const-decl "bool" cosets_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (ring? const-decl "bool" ring_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nZ const-decl "set[int]" ring_zn nil)
    (n!1 skolem-const-decl "posnat" ring_zn nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     ring_zn nil))
   nil
   (Zn_commutative_ring_w_one subtype
    "product_coset_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.*)].product(ring_zn.Z, ring_zn.nZ(ring_zn.n))"
    "[[cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset(ring_zn.Z, ring_zn.nZ(ring_zn.n)), cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset(ring_zn.Z, ring_zn.nZ(ring_zn.n))] -> cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset(ring_zn.Z, ring_zn.nZ(ring_zn.n))]")))
 (Zn_commutative_ring_w_one_TCC4 0
  (Zn_commutative_ring_w_one_TCC4-1 nil 3797005481
   ("" (skosimp)
    (("" (rewrite "ideal_is_coset")
      (("" (hide 2) (("" (rewrite "nZ_ideal") nil nil)) nil)) nil))
    nil)
   ((ideal_is_coset formula-decl nil ring_cosets_lemmas nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (ring? const-decl "bool" ring_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     ring_zn nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nZ const-decl "set[int]" ring_zn nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nZ_ideal formula-decl nil ring_zn nil))
   nil
   (Zn_commutative_ring_w_one subtype "ring_zn.nZ(ring_zn.n)"
    "cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset(ring_zn.Z, ring_zn.nZ(ring_zn.n))")))
 (Zn_commutative_ring_w_one_TCC5 0
  (Zn_commutative_ring_w_one_TCC5-1 nil 3797005481
   ("" (skosimp)
    (("" (rewrite "lcoset_iff_coset" :dir rl)
      (("" (expand "left_coset?")
        (("" (inst 1 "1")
          (("" (expand "Z")
            (("" (expand "fullset") (("" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((int_plus_int_is_int application-judgement "int" integers nil)
    (lcoset_iff_coset formula-decl nil ring_cosets_lemmas nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (+ const-decl "set[T]" cosets_def nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nZ const-decl "set[int]" ring_zn nil)
    (ring? const-decl "bool" ring_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     ring_zn nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (fullset const-decl "set" sets nil)
    (left_coset? const-decl "bool" cosets_def nil))
   nil
   (Zn_commutative_ring_w_one subtype
    "(cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].+)(1, ring_zn.nZ(ring_zn.n))"
    "cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset(ring_zn.Z, ring_zn.nZ(ring_zn.n))")))
 (Zn_commutative_ring_w_one 0
  (Zn_commutative_ring_w_one-1 nil 3797005494
   ("" (skeep)
    (("" (expand "commutative_ring_with_one?")
      (("" (split)
        (("1" (lemma "quotient_ring_with_one")
          (("1" (expand "Z")
            (("1" (inst -1 "Z" "nZ(n)")
              (("1" (hide 2) (("1" (rewrite "nZ_ideal") nil nil)) nil)
               ("2" (hide 2)
                (("2" (expand "ring_with_one?")
                  (("2" (expand "monoid?")
                    (("2" (expand "monad?")
                      (("2" (split)
                        (("1" (expand "star_closed?")
                          (("1" (grind) nil nil)) nil)
                         ("2" (grind) nil nil) ("3" (grind) nil nil)
                         ("4" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "commutative?")
          (("2" (skeep)
            (("2" (expand "restrict")
              (("2" (expand "product")
                (("2" (expand "lproduct") (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((commutative_ring_with_one? const-decl "bool" ring_with_one_def
     nil)
    (commutative? const-decl "bool" operator_defs nil)
    (lproduct const-decl "set[T]" product_coset_def nil)
    (lc_gen const-decl "T" cosets_def nil)
    (product const-decl "set[T]" product_coset_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (quotient_ring_with_one formula-decl nil quotient_rings_with_one
     nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (ring_with_one? const-decl "bool" ring_with_one_def nil)
    (ring? const-decl "bool" ring_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     ring_zn nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nZ const-decl "set[int]" ring_zn nil) nil
    (nZ_ideal formula-decl nil ring_zn nil)
    (monad? const-decl "bool" monad_def nil)
    (associative? const-decl "bool" operator_defs nil)
    (left_identity formula-decl nil monad nil)
    (identity? const-decl "bool" operator_defs nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (member const-decl "bool" sets nil)
    (fullset const-decl "set" sets nil)
    (monoid? const-decl "bool" monoid_def nil)
    (Z const-decl "setofsets[int]" ring_zn nil))
   nil))
 (equal_cosets_div 0
  (equal_cosets_div-1 nil 3797005592
   (""
    (stop-rewrite "plus_zero" "zero_plus" "one_right" "one_left"
     "right_identity" "left_identity")
    (("" (skosimp*)
      (("" (prop)
        (("1" (lemma "lcos_eq")
          (("1" (inst -1 "nZ(n!1)" "b!1" "a!1")
            (("1" (prop)
              (("1" (skosimp)
                (("1" (typepred "h!1")
                  (("1" (hide -3)
                    (("1" (expand "nZ")
                      (("1" (skosimp)
                        (("1" (replaces -1)
                          (("1" (expand "divides")
                            (("1" (inst 1 "k!1")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2) (("2" (assert) nil nil)) nil)
               ("3" (hide (-1 2))
                (("3" (expand "nZ")
                  (("3" (inst?) (("3" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "divides")
          (("2" (skosimp)
            (("2" (lemma "divby")
              (("2" (inst?)
                (("2" (inst -1 "a!1" "n!1 * x!1")
                  (("2" (prop)
                    (("1" (hide (-2 -3))
                      (("1" (lemma "lcos_eq2")
                        (("1" (inst -1 "nZ(n!1)" "b!1" "a!1")
                          (("1" (prop)
                            (("1" (assert) nil nil)
                             ("2" (hide 2)
                              (("2"
                                (replaces -1)
                                (("2"
                                  (inst?)
                                  (("2"
                                    (expand "nZ")
                                    (("2"
                                      (inst 1 "x!1")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (hide (-1 2))
                              (("3"
                                (lemma "nZ_ideal")
                                (("3"
                                  (inst?)
                                  (("3"
                                    (expand "ideal?")
                                    (("3"
                                      (expand "left_ideal?")
                                      (("3"
                                        (expand "subring?")
                                        (("3"
                                          (expand "ring?")
                                          (("3"
                                            (expand "abelian_group?")
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2 3) (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((divby formula-decl nil group nil)
    (left_ideal? const-decl "bool" ring_ideal_def nil)
    (ring? const-decl "bool" ring_def nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (abelian_group? const-decl "bool" group_def nil)
    (subring? const-decl "bool" ring_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (nZ_ideal formula-decl nil ring_zn nil) nil nil
    (lcos_eq2 formula-decl nil ring_cosets_lemmas nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (lcos_eq formula-decl nil ring_cosets_lemmas nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil) nil
    (zero_times formula-decl nil ring nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nZ const-decl "set[int]" ring_zn nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil))
   nil))
 (nZ_mZ_sum_TCC1 0
  (nZ_mZ_sum_TCC1-1 nil 3797005919 ("" (subtype-tcc) nil nil) nil nil
   (nZ_mZ_sum subtype "ring_zn.m"
    "{jj: integers.int | booleans.=>(ring_zn.n = 0, jj /= 0)}")))
 (nZ_mZ_sum 0
  (nZ_mZ_sum-1 nil 3797005928
   (""
    (stop-rewrite "plus_zero" "zero_plus" "one_right" "one_left"
     "right_identity" "left_identity")
    (("" (skosimp)
      (("" (decompose-equality 1)
        (("" (iff)
          (("" (prop)
            (("1" (expand "sum")
              (("1" (skosimp)
                (("1" (typepred "h!1" "k!1")
                  (("1" (expand "nZ")
                    (("1" (lemma "gcd_divides")
                      (("1" (inst?)
                        (("1" (prop)
                          (("1" (expand "divides")
                            (("1" (skosimp*)
                              (("1"
                                (replaces -3)
                                (("1"
                                  (replaces -3)
                                  (("1"
                                    (replace -1 -3)
                                    (("1"
                                      (name-replace
                                       "temp1"
                                       "gcd(n!1, m!1) * x!2 * k!2")
                                      (("1"
                                        (replace -2 -3)
                                        (("1"
                                          (expand "temp1")
                                          (("1"
                                            (hide (-1 -2))
                                            (("1"
                                              (lemma "distributive")
                                              (("1"
                                                (inst
                                                 -1
                                                 "gcd(n!1, m!1)"
                                                 "k!2 * x!2"
                                                 "k!3 * x!3")
                                                (("1"
                                                  (replace -1 -2 rl)
                                                  (("1"
                                                    (hide -1)
                                                    (("1"
                                                      (inst
                                                       1
                                                       "(k!2 * x!2 + k!3 * x!3)")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "sum")
              (("2" (expand "nZ")
                (("2" (skosimp)
                  (("2" (lemma "gcd_factors")
                    (("2" (inst?)
                      (("2" (prop)
                        (("1" (skosimp)
                          (("1" (replaces -1)
                            (("1" (lemma "distributive")
                              (("1"
                                (inst?)
                                (("1"
                                  (replaces -1)
                                  (("1"
                                    (rewrite "associative_mult")
                                    (("1"
                                      (rewrite "associative_mult")
                                      (("1"
                                        (inst
                                         1
                                         "ip!1 * k!1 * n!1"
                                         "jp!1 * k!1 * m!1")
                                        (("1"
                                          (expand "nZ")
                                          (("1"
                                            (inst 1 "jp!1 * k!1")
                                            nil
                                            nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (expand "nZ")
                                            (("2"
                                              (inst 1 "ip!1 * k!1")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   (nil nil nil nil nil
    (associative_mult formula-decl nil number_fields nil)
    (gcd_factors formula-decl nil gcd ints)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (gcd_divides formula-decl nil gcd ints)
    (int_times_int_is_int application-judgement "int" integers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    nil (distributive formula-decl nil number_fields nil)
    (TRUE const-decl "bool" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (gcd const-decl "{k: posnat | divides(k, i) AND divides(k, j)}" gcd
         ints)
    nil (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nZ const-decl "set[int]" ring_zn nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (sum const-decl "set[T]" cosets_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int_plus_int_is_int application-judgement "int" integers nil))
   nil))
 (nZ_mZ_intersection_TCC1 0
  (nZ_mZ_intersection_TCC1-1 nil 3797006687
   ("" (skosimp) (("" (grind) nil nil)) nil)
   ((divides const-decl "bool" divides nil)
    (lcm const-decl "int" divides_lems ints)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (nZ_mZ_intersection subtype "divides_lems.lcm(ring_zn.n, ring_zn.m)"
    "posnat")))
 (nZ_mZ_intersection 0
  (nZ_mZ_intersection-2 "tt" 3797007253
   (""
    (stop-rewrite "plus_zero" "zero_plus" "one_right" "one_left"
     "right_identity" "left_identity")
    (("" (skosimp)
      (("" (decompose-equality 1)
        (("1" (iff)
          (("1" (prop)
            (("1" (expand "intersection")
              (("1" (expand "member")
                (("1" (expand "nZ")
                  (("1" (flatten)
                    (("1" (skosimp*)
                      (("1" (lemma "euclid_int")
                        (("1" (inst -1 "lcm(n!1, m!1)" "x!1")
                          (("1" (skosimp)
                            (("1" (case-replace "r!1 = 0" :hide? t)
                              (("1"
                                (assert)
                                (("1"
                                  (inst 1 "q!1")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma "min_def[posnat]")
                                (("2"
                                  (inst
                                   -1
                                   "lcm(n!1, m!1)"
                                   "{k: posnat | divides(n!1, k) AND divides(m!1, k)}")
                                  (("1"
                                    (prop)
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (expand "minimum?")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (expand "divides" (-1 -2))
                                            (("1"
                                              (skosimp*)
                                              (("1"
                                                (copy -4)
                                                (("1"
                                                  (replace -6 -1)
                                                  (("1"
                                                    (replace -2 -1)
                                                    (("1"
                                                      (replace -7 -5)
                                                      (("1"
                                                        (replace -3 -5)
                                                        (("1"
                                                          (hide
                                                           (-2
                                                            -3
                                                            -6
                                                            -7))
                                                          (("1"
                                                            (case
                                                             "r!1 = k!1 * n!1 - n!1 * x!2 * q!1")
                                                            (("1"
                                                              (hide -2)
                                                              (("1"
                                                                (case
                                                                 "r!1 = k!2 * m!1 - m!1 * x!3 * q!1")
                                                                (("1"
                                                                  (hide
                                                                   -4)
                                                                  (("1"
                                                                    (inst
                                                                     -3
                                                                     "r!1")
                                                                    (("1"
                                                                      (prop)
                                                                      (("1"
                                                                        (hide
                                                                         (-2
                                                                          -3))
                                                                        (("1"
                                                                          (typepred
                                                                           "r!1")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         (-1
                                                                          2
                                                                          3))
                                                                        (("2"
                                                                          (expand
                                                                           "divides")
                                                                          (("2"
                                                                            (inst
                                                                             1
                                                                             "k!1 - x!2 * q!1")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (hide
                                                                         (-2
                                                                          2
                                                                          3))
                                                                        (("3"
                                                                          (expand
                                                                           "divides")
                                                                          (("3"
                                                                            (inst
                                                                             1
                                                                             "k!2 - x!3 * q!1")
                                                                            (("3"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   (-1
                                                                    -2
                                                                    2
                                                                    3))
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide
                                                               (-2
                                                                -3
                                                                2
                                                                3))
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide (- 1 3 4))
                                      (("2"
                                        (expand "lcm")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide (-1 2 3))
                                    (("2"
                                      (expand "nonempty?")
                                      (("2"
                                        (expand "empty?")
                                        (("2"
                                          (inst -1 "n!1 * m!1")
                                          (("2"
                                            (expand "member")
                                            (("2"
                                              (expand "divides")
                                              (("2"
                                                (prop)
                                                (("1" (inst?) nil nil)
                                                 ("2"
                                                  (inst 1 "n!1")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2) (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "intersection")
              (("2" (expand "member")
                (("2" (expand "nZ")
                  (("2" (skosimp*)
                    (("2" (lemma "min_def[posnat]")
                      (("2"
                        (inst -1 "lcm(n!1, m!1)"
                         "{k: posnat | divides(n!1, k) AND divides(m!1, k)}")
                        (("1" (expand "minimum?")
                          (("1" (expand "lcm" -1 1)
                            (("1" (flatten)
                              (("1"
                                (prop)
                                (("1"
                                  (hide (-2 -3))
                                  (("1"
                                    (expand "divides")
                                    (("1"
                                      (skosimp)
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (inst 1 "k!1 * x!2")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide (-1 -3))
                                  (("2"
                                    (expand "divides")
                                    (("2"
                                      (skosimp)
                                      (("2"
                                        (replaces -1)
                                        (("2"
                                          (inst 1 "k!1 * x!2")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide (-1 2))
                          (("2" (expand "nonempty?")
                            (("2" (expand "empty?")
                              (("2"
                                (inst -1 "n!1 * m!1")
                                (("2"
                                  (expand "member")
                                  (("2"
                                    (expand "divides")
                                    (("2"
                                      (prop)
                                      (("1" (inst?) nil nil)
                                       ("2"
                                        (inst 1 "n!1")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (hide (-1 2)) (("3" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (grind) nil nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nonempty? const-decl "bool" sets nil) nil
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    nil
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minimum? const-decl "bool" min_nat nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (empty? const-decl "bool" sets nil)
    (min_def formula-decl nil min_nat nil)
    (euclid_int formula-decl nil euclidean_division nil)
    (member const-decl "bool" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nZ const-decl "set[int]" ring_zn nil)
    (intersection const-decl "set" sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (lcm const-decl "int" divides_lems ints) nil nil
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil)
  (yes "tt" 3797006928
   (""
    (stop-rewrite "plus_zero" "zero_plus" "one_right" "one_left"
     "right_identity" "left_identity")
    (("" (skosimp)
      (("" (skoletin* 1)
        (("" (decompose-equality 1)
          (("1" (iff)
            (("1" (prop)
              (("1" (expand "intersection")
                (("1" (expand "member")
                  (("1" (flatten)
                    (("1" (expand "nZ")
                      (("1" (skosimp*)
                        (("1" (assert) (("1" (postpone) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "intersection")
                (("2" (expand "member")
                  (("2" (expand "nZ")
                    (("2" (skosimp)
                      (("2" (replaces -2)
                        (("2" (split)
                          (("1" (inst 1 "(m!1 / gcd(n!1, m!1)) * k!1")
                            (("1" (assert) nil nil)
                             ("2" (rewrite "closed_times")
                              (("2"
                                (hide 2)
                                (("2"
                                  (lemma "div_by_gcd_prep")
                                  (("2"
                                    (rewrite "gcd_sym")
                                    (("2"
                                      (inst -1 "m!1" "n!1")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (replaces -1)
                            (("2" (lemma "times_div1")
                              (("2"
                                (inst?)
                                (("2"
                                  (replace -1 1 rl)
                                  (("2"
                                    (hide -1)
                                    (("2"
                                      (lemma "div_by_gcd_prep")
                                      (("2"
                                        (inst -1 "n!1" "m!1")
                                        (("2"
                                          (prop)
                                          (("2"
                                            (inst
                                             1
                                             "k!1   * (n!1 / gcd(n!1, m!1) )")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (hide -2 -3)
                                              (("2"
                                                (name-replace
                                                 "ndgcd"
                                                 "n!1 / gcd(n!1, m!1)")
                                                (("2"
                                                  (typepred "k!1")
                                                  (("2"
                                                    (grind)
                                                    (("2"
                                                      (rewrite
                                                       "closed_times")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (rewrite "gcd_sym")
            (("2" (lemma "div_by_gcd_prep")
              (("2" (case "lcm_1 = n!1 * ( m!1 / gcd(m!1, n!1))")
                (("1" (hide -3)
                  (("1" (replaces -1)
                    (("1" (inst -1 "m!1" "n!1")
                      (("1" (prop)
                        (("1" (hide -2 -3)
                          (("1" (rewrite "closed_times") nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (nZ_mZ_intersection-1 nil 3797006778
   (""
    (stop-rewrite "plus_zero" "zero_plus" "one_right" "one_left"
     "right_identity" "left_identity")
    (("" (skosimp)
      (("" (skoletin* 1)
        (("" (decompose-equality 1)
          (("1" (iff)
            (("1" (prop)
              (("1" (expand "intersection")
                (("1" (expand "member")
                  (("1" (flatten)
                    (("1" (expand "nZ")
                      (("1" (skosimp*)
                        (("1" (lemma "lcm_div")
                          (("1"
                            (inst -1 "n!1" "m!1" "x!1" "gcd(n!1, m!1)")
                            (("1" (assert)
                              (("1"
                                (prop)
                                (("1"
                                  (expand "divides")
                                  (("1"
                                    (skosimp)
                                    (("1"
                                      (replace -4 -1 rl)
                                      (("1"
                                        (inst 1 "x!2")
                                        (("1" (assert) nil)))))))))
                                 ("2"
                                  (hide (-3 2))
                                  (("2"
                                    (expand "divides")
                                    (("2"
                                      (inst 1 "k!1")
                                      (("2" (assert) nil)))))))
                                 ("3"
                                  (hide (-3 2))
                                  (("3"
                                    (expand "divides")
                                    (("3"
                                      (inst 1 "k!2")
                                      (("3"
                                        (assert)
                                        nil)))))))))))))))))))))))))
               ("2" (expand "intersection")
                (("2" (expand "member")
                  (("2" (expand "nZ")
                    (("2" (skosimp)
                      (("2" (replaces -2)
                        (("2" (split)
                          (("1" (inst 1 "(m!1 / gcd(n!1, m!1)) * k!1")
                            (("1" (assert) nil)
                             ("2" (rewrite "closed_times")
                              (("2"
                                (hide 2)
                                (("2"
                                  (lemma "div_by_gcd_prep")
                                  (("2"
                                    (rewrite "gcd_sym")
                                    (("2"
                                      (inst -1 "m!1" "n!1")
                                      (("2" (assert) nil)))))))))))))
                           ("2" (replaces -1)
                            (("2" (lemma "times_div1")
                              (("2"
                                (inst?)
                                (("2"
                                  (replace -1 1 rl)
                                  (("2"
                                    (hide -1)
                                    (("2"
                                      (lemma "div_by_gcd_prep")
                                      (("2"
                                        (inst -1 "n!1" "m!1")
                                        (("2"
                                          (prop)
                                          (("2"
                                            (inst
                                             1
                                             "k!1   * (n!1 / gcd(n!1, m!1) )")
                                            (("1" (assert) nil)
                                             ("2"
                                              (hide -2 -3)
                                              (("2"
                                                (name-replace
                                                 "ndgcd"
                                                 "n!1 / gcd(n!1, m!1)")
                                                (("2"
                                                  (typepred "k!1")
                                                  (("2"
                                                    (grind)
                                                    (("2"
                                                      (rewrite
                                                       "closed_times")
                                                      nil)))))))))))))))))))))))))))))))))))))))))))
           ("2" (rewrite "gcd_sym")
            (("2" (lemma "div_by_gcd_prep")
              (("2" (case "lcm_1 = n!1 * ( m!1 / gcd(m!1, n!1))")
                (("1" (hide -3)
                  (("1" (replaces -1)
                    (("1" (inst -1 "m!1" "n!1")
                      (("1" (prop)
                        (("1" (hide -2 -3)
                          (("1" (rewrite "closed_times") nil)))))))))))
                 ("2" (assert) nil))))))))))))))
    nil)
   nil nil))
 (nZ_mZ_rel_prime_intersection 0
  (nZ_mZ_rel_prime_intersection-1 nil 3797007317
   ("" (skosimp)
    (("" (lemma "nZ_mZ_intersection")
      (("" (inst?)
        (("" (lemma "lcm_rel_prime")
          (("" (inst?) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((nZ_mZ_intersection formula-decl nil ring_zn nil)
    (lcm_rel_prime formula-decl nil lcm nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (Zn_charac 0
  (Zn_charac-1 nil 3808853188
   (""
    (stop-rewrite "right_identity" "left_identity" "one_left"
     "plus_zero" "zero_plus" "one_right" "one_left")
    (("" (skosimp)
      (("" (decompose-equality)
        (("" (iff)
          (("" (split)
            (("1" (prop)
              (("1" (expand "Z")
                (("1" (expand "/")
                  (("1" (expand "coset?")
                    (("1" (flatten)
                      (("1" (hide -2)
                        (("1" (expand "left_coset?")
                          (("1" (skosimp)
                            (("1"
                              (inst 1
                               "mod(n!1*(abs(div(a!1,n!1))+1)+a!1,n!1)")
                              (("1"
                                (lemma equal_cosets_div)
                                (("1"
                                  (inst
                                   -1
                                   "mod(n!1 * (abs(div(a!1, n!1)) + 1) + a!1, n!1)"
                                   "a!1"
                                   "n!1")
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (prop)
                                        (("1"
                                          (replace -1 -2 rl)
                                          (("1" (propax) nil nil))
                                          nil)
                                         ("2"
                                          (hide-all-but 1)
                                          (("2"
                                            (expand "divides")
                                            (("2"
                                              (lemma mod_div)
                                              (("2"
                                                (inst
                                                 -1
                                                 "n!1"
                                                 "abs(div(a!1, n!1)) * n!1 + a!1 + n!1")
                                                (("1"
                                                  (replaces -1 1)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (inst
                                                       1
                                                       "-1* abs(div(a!1, n!1)) -1 + div(abs(div(a!1, n!1)) * n!1 + a!1 + n!1, n!1)")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (expand "abs")
                                                    (("2"
                                                      (lift-if)
                                                      (("2"
                                                        (prop)
                                                        (("1"
                                                          (case
                                                           "-div(a!1, n!1) * n!1 >= 0")
                                                          (("1"
                                                            (case
                                                             "a!1 >= 0")
                                                            (("1"
                                                              (lemma
                                                               nonneg_real_add_closed)
                                                              (("1"
                                                                (inst-cp
                                                                 -1
                                                                 "  -div(a!1, n!1) * n!1 "
                                                                 "  a!1")
                                                                (("1"
                                                                  (inst-cp
                                                                   -1
                                                                   "  -div(a!1, n!1) * n!1 +  a!1"
                                                                   "n!1")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (case
                                                               "-div(a!1, n!1) * n!1 + n!1 >= - a!1")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 3)
                                                                (("2"
                                                                  (expand
                                                                   "div")
                                                                  (("2"
                                                                    (expand
                                                                     "abs")
                                                                    (("2"
                                                                      (lift-if)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "sgn")
                                                                          (("2"
                                                                            (lemma
                                                                             floor_def)
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "-a!1 / n!1")
                                                                              (("2"
                                                                                (flatten
                                                                                 -1)
                                                                                (("2"
                                                                                  (hide
                                                                                   -1)
                                                                                  (("2"
                                                                                    (case-replace
                                                                                     "-(floor(-a!1 / n!1) * -1)=floor(-a!1 / n!1)")
                                                                                    (("1"
                                                                                      (hide
                                                                                       -1)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         both_sides_times_pos_ge1)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "n!1"
                                                                                           "-a!1 / n!1"
                                                                                           "floor(-a!1 / n!1) + 1")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (lemma
                                                             nnreal_times_nnreal_is_nnreal)
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "-div(a!1, n!1)"
                                                               "n!1")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (case
                                                           "div(a!1, n!1) * n!1 >= 0")
                                                          (("1"
                                                            (case
                                                             "a!1 >= 0")
                                                            (("1"
                                                              (lemma
                                                               nonneg_real_add_closed)
                                                              (("1"
                                                                (inst-cp
                                                                 -1
                                                                 "  div(a!1, n!1) * n!1 "
                                                                 "  a!1")
                                                                (("1"
                                                                  (inst-cp
                                                                   -1
                                                                   "  div(a!1, n!1) * n!1 +  a!1"
                                                                   "n!1")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (case
                                                               "abs(a!1) < abs(n!1)")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 (-1
                                                                  4))
                                                                (("2"
                                                                  (lemma
                                                                   div_le_0)
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "a!1"
                                                                     "n!1")
                                                                    (("2"
                                                                      (expand
                                                                       "sgn")
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (hide
                                                                           -2)
                                                                          (("2"
                                                                            (lift-if)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (lemma
                                                                                 div_is_0)
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "a!1"
                                                                                   "n!1")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (lemma
                                                             both_sides_times_pos_ge1)
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "n!1"
                                                               "div(a!1, n!1)"
                                                               "0")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (prop)
              (("2" (skosimp)
                (("2" (expand "Z")
                  (("2" (expand "/")
                    (("2" (rewrite "lcoset_iff_coset" :dir rl)
                      (("2" (expand "left_coset?")
                        (("2" (inst 1 "a!1")
                          (("2" (expand "Z")
                            (("2" (expand "fullset")
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((lcoset_iff_coset formula-decl nil ring_cosets_lemmas nil) nil
    (fullset const-decl "set" sets nil)
    (/ const-decl "setof[set[T]]" cosets_def nil)
    (left_coset? const-decl "bool" cosets_def nil)
    (nil application-judgement "below(m)" mod nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (integer nonempty-type-from-decl nil integers nil)
    (div const-decl "integer" div ints)
    (ring? const-decl "bool" ring_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     ring_zn nil)
    (mod_div formula-decl nil mod_div_lems ints)
    (abs_nat_rew formula-decl nil abs_rews ints)
    (div_le_0 formula-decl nil div ints)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (div_is_0 formula-decl nil div ints)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (zero_times formula-decl nil ring nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (sgn const-decl "int" real_defs nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (both_sides_times_pos_ge1 formula-decl nil real_props nil)
    (<= const-decl "bool" reals nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (floor_def formula-decl nil floor_ceil nil)
    (sgn_nat_rew formula-decl nil abs_rews ints)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (nonneg_real_add_closed formula-decl nil real_types nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (nnreal_times_nnreal_is_nnreal judgement-tcc nil real_types nil)
    (TRUE const-decl "bool" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil) nil
    nil
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    nil
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (equal_cosets_div formula-decl nil ring_zn nil)
    (coset? const-decl "bool" cosets_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nZ const-decl "set[int]" ring_zn nil) nil
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Z const-decl "setofsets[int]" ring_zn nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int_plus_int_is_int application-judgement "int" integers nil))
   nil))
 (Z2_charac 0
  (Z2_charac-1 nil 3797765637
   ("" (decompose-equality)
    (("" (iff)
      (("" (split)
        (("1" (prop)
          (("1" (lemma Zn_charac)
            (("1" (inst -1 "2")
              (("1" (decompose-equality)
                (("1" (inst -1 "x!1")
                  (("1" (iff)
                    (("1" (flatten)
                      (("1" (assert)
                        (("1" (skosimp)
                          (("1" (typepred "a!1")
                            (("1" (hide -3)
                              (("1"
                                (case "a!1=0 OR a!1=1")
                                (("1"
                                  (split)
                                  (("1"
                                    (replace -1 -3)
                                    (("1" (propax) nil nil))
                                    nil)
                                   ("2"
                                    (replace -1 -3)
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but (-1 1))
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (prop)
          (("1" (expand "Z")
            (("1" (expand "/")
              (("1" (rewrite "lcoset_iff_coset" :dir rl)
                (("1" (expand "left_coset?")
                  (("1" (inst 1 "0")
                    (("1" (expand "Z")
                      (("1" (expand "fullset") (("1" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "Z")
            (("2" (expand "/")
              (("2" (rewrite "lcoset_iff_coset" :dir rl)
                (("2" (expand "Z")
                  (("2" (expand "left_coset?")
                    (("2" (inst 1 "1")
                      (("2" (expand "fullset") (("2" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((/ const-decl "setof[set[T]]" cosets_def nil)
    (left_coset? const-decl "bool" cosets_def nil)
    (fullset const-decl "set" sets nil)
    (lcoset_iff_coset formula-decl nil ring_cosets_lemmas nil)
    (ring? const-decl "bool" ring_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     ring_zn nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Zn_charac formula-decl nil ring_zn nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nZ const-decl "set[int]" ring_zn nil) nil
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Z const-decl "setofsets[int]" ring_zn nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int_plus_int_is_int application-judgement "int" integers nil))
   nil))
 (Zp_prime_is_nz_closed 0
  (Zp_prime_is_nz_closed-1 nil 3808853019
   ("" (skosimp)
    (("" (expand "nz_closed?")
      (("" (expand "star_closed?")
        (("" (skosimp)
          (("" (expand "member")
            (("" (expand "remove")
              (("" (split)
                (("1" (expand "/=")
                  (("1" (expand "product")
                    (("1" (expand "lproduct")
                      (("1" (lemma "left_zero[int,+,*,0]")
                        (("1" (inst -1 "nZ(n!1)")
                          (("1"
                            (case "0 + nZ(n!1) =
                          (lc_gen(Z, nZ(n!1))(x!1) * lc_gen(Z, nZ(n!1))(y!1)) + nZ(n!1)")
                            (("1" (hide (-2 -3))
                              (("1"
                                (rewrite equal_cosets_div)
                                (("1"
                                  (lemma prime_divides_prod)
                                  (("1"
                                    (inst -1 "n!1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst
                                         -1
                                         "lc_gen(Z, nZ(n!1))(x!1)"
                                         "lc_gen(Z, nZ(n!1))(y!1)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide-all-but -1)
                                            (("1"
                                              (split)
                                              (("1"
                                                (typepred "x!1")
                                                (("1"
                                                  (expand "remove")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (case
                                                       "lc_gen(Z, nZ(n!1))(x!1) = lc_gen(Z, nZ(n!1))(x!1) - 0")
                                                      (("1"
                                                        (replaces
                                                         -1
                                                         -4)
                                                        (("1"
                                                          (lemma
                                                           "equal_cosets_div")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "0"
                                                             "lc_gen(Z, nZ(n!1))(x!1)"
                                                             "n!1")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (lemma
                                                                 "left_zero[int,+,*,0]")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "nZ(n!1)")
                                                                  (("1"
                                                                    (replaces
                                                                     -1
                                                                     -2)
                                                                    (("1"
                                                                      (hide-all-but
                                                                       (-1
                                                                        1))
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (typepred "y!1")
                                                (("2"
                                                  (expand "remove")
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (case
                                                       "lc_gen(Z, nZ(n!1))(y!1) = lc_gen(Z, nZ(n!1))(y!1) - 0")
                                                      (("1"
                                                        (replace -1 -4)
                                                        (("1"
                                                          (lemma
                                                           "equal_cosets_div")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "0"
                                                             "lc_gen(Z, nZ(n!1))(y!1)"
                                                             "n!1")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (lemma
                                                                 "left_zero[int,+,*,0]")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "nZ(n!1)")
                                                                  (("1"
                                                                    (replaces
                                                                     -1
                                                                     -2)
                                                                    (("1"
                                                                      (hide-all-but
                                                                       (-1
                                                                        1))
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "member")
                  (("2" (expand "restrict")
                    (("2" (expand "Z")
                      (("2" (expand "/")
                        (("2" (lemma "product_is_coset")
                          (("2" (inst -1 "Z" "nZ(n!1)" "x!1" "y!1")
                            (("1" (skosimp)
                              (("1"
                                (expand "Z")
                                (("1"
                                  (replace -1 1)
                                  (("1"
                                    (lemma lcoset_iff_coset)
                                    (("1"
                                      (inst
                                       -1
                                       "a!1 + nZ(n!1)"
                                       "nZ(n!1)"
                                       "fullset[int]")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "left_coset?")
                                          (("1"
                                            (inst 1 "a!1")
                                            (("1"
                                              (typepred "a!1")
                                              (("1"
                                                (expand "Z")
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lemma nZ_ideal)
                              (("2" (inst -1 "n!1") nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nz_closed? const-decl "bool" ring_nz_closed_def nil)
    (remove const-decl "set" sets nil)
    (product_is_coset formula-decl nil quotient_rings nil)
    (nZ_ideal formula-decl nil ring_zn nil) nil
    (lcoset_iff_coset formula-decl nil ring_cosets_lemmas nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil) nil
    (/ const-decl "setof[set[T]]" cosets_def nil)
    (/= const-decl "boolean" notequal nil)
    (lproduct const-decl "set[T]" product_coset_def nil)
    (nZ const-decl "set[int]" ring_zn nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (prime_divides_prod formula-decl nil primes ints)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (fullset const-decl "set" sets nil)
    (TRUE const-decl "bool" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (equal_cosets_div formula-decl nil ring_zn nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil) nil
    (left_coset? const-decl "bool" cosets_def nil)
    (left_coset type-eq-decl nil cosets_def nil)
    (lc_gen const-decl "T" cosets_def nil)
    (ring? const-decl "bool" ring_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     ring_zn nil)
    (coset? const-decl "bool" cosets_def nil)
    (coset type-eq-decl nil cosets_def nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (Z const-decl "setofsets[int]" ring_zn nil)
    (left_zero formula-decl nil ring_cosets_lemmas nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (product const-decl "set[T]" product_coset_def nil)
    (member const-decl "bool" sets nil)
    (star_closed? const-decl "bool" groupoid_def nil))
   nil))
 (Zp_nz_closed_is_prime_or_one 0
  (Zp_nz_closed_is_prime_or_one-1 nil 3811154656
   (""
    (stop-rewrite "right_identity" "left_identity" "one_left"
     "plus_zero" "zero_plus" "one_right" "one_left")
    (("" (skeep)
      (("" (expand "prime?")
        (("" (split)
          (("1" (skeep)
            (("1" (expand "divides")
              (("1" (skeep)
                (("1" (expand "nz_closed?")
                  (("1" (expand "star_closed?")
                    (("1" (inst -2 "+(j,nZ(n))" "+(x,nZ(n))")
                      (("1" (expand "member")
                        (("1" (expand "remove")
                          (("1" (expand "member")
                            (("1" (expand "restrict")
                              (("1"
                                (flatten)
                                (("1"
                                  (rewrite "product_charac")
                                  (("1"
                                    (decompose-equality 3)
                                    (("1"
                                      (iff)
                                      (("1"
                                        (replace -1 1)
                                        (("1"
                                          (replace -1 1 rl)
                                          (("1"
                                            (case-replace
                                             "n + nZ(n) =  nZ(n)")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (hide-all-but 1)
                                              (("2"
                                                (lemma "self_coset")
                                                (("2"
                                                  (inst
                                                   -1
                                                   "nZ(n)"
                                                   "Z"
                                                   "n")
                                                  (("2"
                                                    (lemma "nZ_ideal")
                                                    (("2"
                                                      (inst -1 "n")
                                                      (("2"
                                                        (expand
                                                         "ideal?")
                                                        (("2"
                                                          (expand
                                                           "left_ideal?")
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (hide-all-but
                                                                 1)
                                                                (("2"
                                                                  (expand
                                                                   "nZ")
                                                                  (("2"
                                                                    (inst
                                                                     1
                                                                     "1")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2"
                                      (expand "Z")
                                      (("2"
                                        (expand "fullset")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (hide-all-but 1)
                                    (("3"
                                      (expand "Z")
                                      (("3"
                                        (expand "fullset")
                                        (("3" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("4"
                                    (hide-all-but 1)
                                    (("4"
                                      (rewrite "nZ_ideal")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "remove")
                        (("2" (expand "member")
                          (("2" (expand "restrict")
                            (("2" (expand "Z")
                              (("2"
                                (expand "/")
                                (("2"
                                  (rewrite "lcoset_iff_coset" :dir rl)
                                  (("2"
                                    (rewrite
                                     "lcoset_iff_coset"
                                     :dir
                                     rl)
                                    (("2"
                                      (expand "left_coset?")
                                      (("2"
                                        (split)
                                        (("1"
                                          (inst 1 "x")
                                          (("1"
                                            (expand "fullset")
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "/=")
                                          (("2"
                                            (lemma left_zero)
                                            (("2"
                                              (inst -1 "nZ(n)")
                                              (("2"
                                                (lemma
                                                 equal_cosets_div)
                                                (("2"
                                                  (inst -1 "0" "x" "n")
                                                  (("2"
                                                    (replaces -2 -1)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (lemma
                                                         divides_lt_abs)
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "x"
                                                           "n")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "<=")
                                                              (("2"
                                                                (split)
                                                                (("1"
                                                                  (typepred
                                                                   "j")
                                                                  (("1"
                                                                    (typepred
                                                                     "x")
                                                                    (("1"
                                                                      (case
                                                                       "x <= 0")
                                                                      (("1"
                                                                        (expand
                                                                         "<=")
                                                                        (("1"
                                                                          (lemma
                                                                           pos_times_gt)
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "x"
                                                                             "j")
                                                                            (("1"
                                                                              (typepred
                                                                               "n")
                                                                              (("1"
                                                                                (replaces
                                                                                 -9
                                                                                 -1)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "abs")
                                                                        (("2"
                                                                          (lift-if)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (case
                                                                               "divides(x, n)")
                                                                              (("1"
                                                                                (lemma
                                                                                 divides_lt_abs)
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "n"
                                                                                   "x")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "divides")
                                                                                (("2"
                                                                                  (inst
                                                                                   1
                                                                                   "j")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (replaces
                                                                   -1
                                                                   -4)
                                                                  (("2"
                                                                    (expand
                                                                     "abs")
                                                                    (("2"
                                                                      (case
                                                                       "x>0")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (case
                                                                           "1*x = j * x")
                                                                          (("1"
                                                                            (lemma
                                                                             both_sides_times1)
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "x"
                                                                               "1"
                                                                               "j")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (typepred
                                                                           "j")
                                                                          (("2"
                                                                            (case
                                                                             "-x >= 0")
                                                                            (("1"
                                                                              (replaces
                                                                               -5
                                                                               -1)
                                                                              (("1"
                                                                                (lemma
                                                                                 pos_times_ge)
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "j"
                                                                                   "x")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               (1
                                                                                2))
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (inst 1 "x")
                                          (("3"
                                            (expand "Z")
                                            (("3"
                                              (expand "fullset")
                                              (("3" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (expand "remove")
                        (("3" (expand "member")
                          (("3" (expand "restrict")
                            (("3" (expand "Z")
                              (("3"
                                (expand "/")
                                (("3"
                                  (rewrite "lcoset_iff_coset" :dir rl)
                                  (("3"
                                    (rewrite
                                     "lcoset_iff_coset"
                                     :dir
                                     rl)
                                    (("3"
                                      (expand "left_coset?")
                                      (("3"
                                        (split)
                                        (("1"
                                          (inst 1 "j")
                                          (("1"
                                            (expand "fullset")
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "/=")
                                          (("2"
                                            (lemma left_zero)
                                            (("2"
                                              (inst -1 "nZ(n)")
                                              (("2"
                                                (lemma
                                                 equal_cosets_div)
                                                (("2"
                                                  (inst -1 "0" "j" "n")
                                                  (("2"
                                                    (replaces -2 -1)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (lemma
                                                         divides_lt_abs)
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "j"
                                                           "n")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "<=")
                                                              (("2"
                                                                (split)
                                                                (("1"
                                                                  (case
                                                                   "divides(j,n)")
                                                                  (("1"
                                                                    (lemma
                                                                     divides_lt)
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "n"
                                                                       "j")
                                                                      (("1"
                                                                        (typepred
                                                                         "n")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "divides")
                                                                    (("2"
                                                                      (inst
                                                                       1
                                                                       "x")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (inst 1 "j")
                                          (("3"
                                            (expand "Z")
                                            (("3"
                                              (expand "fullset")
                                              (("3" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   (nil (nz_closed? const-decl "bool" ring_nz_closed_def nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (Z const-decl "setofsets[int]" ring_zn nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (remove const-decl "set" sets nil)
    (coset type-eq-decl nil cosets_def nil) nil nil nil
    (nZ const-decl "set[int]" ring_zn nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     ring_zn nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (ring? const-decl "bool" ring_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (coset? const-decl "bool" cosets_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (set type-eq-decl nil sets nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil) nil
    (ideal type-eq-decl nil ring_ideal_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (product_charac formula-decl nil quotient_rings nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (left_ideal? const-decl "bool" ring_ideal_def nil)
    (one_times formula-decl nil ring_with_one nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (nZ_ideal formula-decl nil ring_zn nil)
    (self_coset formula-decl nil ring_cosets_lemmas nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (fullset const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (lcoset_iff_coset formula-decl nil ring_cosets_lemmas nil)
    (left_coset? const-decl "bool" cosets_def nil)
    (/= const-decl "boolean" notequal nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (pos_times_ge formula-decl nil real_props nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (pos_times_gt formula-decl nil real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (abs_nat_rew formula-decl nil abs_rews ints)
    (divides_lt_abs formula-decl nil divides_lems ints)
    (TRUE const-decl "bool" booleans nil)
    (equal_cosets_div formula-decl nil ring_zn nil)
    (left_zero formula-decl nil ring_cosets_lemmas nil)
    (/ const-decl "setof[set[T]]" cosets_def nil)
    (divides_lt formula-decl nil divides_lems ints)
    (star_closed? const-decl "bool" groupoid_def nil)
    (prime? const-decl "bool" primes ints))
   shostak))
 (Zp_prime_is_division_ring 0
  (Zp_prime_is_division_ring-2 nil 3811152450
   (""
    (stop-rewrite "right_identity" "left_identity" "one_left"
     "plus_zero" "zero_plus" "one_right" "one_left")
    (("" (skosimp)
      (("" (rewrite div_ring_nz_unit)
        (("1" (split)
          (("1" (expand "/=")
            (("1" (decompose-equality)
              (("1" (inst -1 "1+nZ(n!1)")
                (("1" (iff)
                  (("1" (flatten)
                    (("1" (hide-all-but -1)
                      (("1" (lemma Zn_commutative_ring_w_one)
                        (("1" (inst -1 "n!1")
                          (("1" (expand "commutative_ring_with_one?")
                            (("1" (expand "ring_with_one?")
                              (("1"
                                (expand "monoid?")
                                (("1"
                                  (expand "monad?")
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (hide-all-but -7)
                                        (("1"
                                          (expand "singleton")
                                          (("1"
                                            (lemma equal_cosets_div)
                                            (("1"
                                              (case
                                               "1 + nZ(n!1) = 0 + nZ(n!1)")
                                              (("1"
                                                (inst -2 "0" "1" "n!1")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide-all-but -2)
                                                    (("1"
                                                      (lemma
                                                       divides_lt)
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "1"
                                                         "n!1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (reveal
                                                             -13)
                                                            (("1"
                                                              (expand
                                                               "prime?")
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (lemma "left_zero")
                                                (("2"
                                                  (inst -1 "nZ(n!1)")
                                                  (("2"
                                                    (replaces -3 1)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (lemma lcoset_iff_coset)
                  (("2" (inst -1 "1 + nZ(n!1)" "nZ(n!1)" "Z")
                    (("2" (expand "left_coset?")
                      (("2" (flatten)
                        (("2"
                          (case "(EXISTS (a: (Z)): 1 + nZ(n!1) = a + nZ(n!1))")
                          (("1" (assert) nil nil)
                           ("2" (inst 1 "1")
                            (("2" (expand "Z")
                              (("2"
                                (hide-all-but 1)
                                (("2"
                                  (expand "fullset")
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skosimp)
            (("2" (expand "unit?")
              (("2" (typepred "x!1")
                (("2" (expand "remove")
                  (("2" (expand "coset?")
                    (("2" (flatten)
                      (("2" (hide -2 -3)
                        (("2" (expand "left_coset?")
                          (("2" (skosimp)
                            (("2" (case "rel_prime(a!1,n!1)")
                              (("1"
                                (lemma "rel_prime_lem")
                                (("1"
                                  (inst -1 "a!1" "n!1")
                                  (("1"
                                    (case "(a!1 /= 0 OR n!1 /= 0)")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (skosimp)
                                          (("1"
                                            (case
                                             "divides(n!1, m!1 * a!1 + n!2 * n!1 - m!1 * a!1)")
                                            (("1"
                                              (case "Z(m!1)")
                                              (("1"
                                                (case
                                                 "ideal?
                             [int, restrict[[numfield, numfield], [int, int], numfield](+),
                              restrict[[numfield, numfield], [int, int], numfield](*), 0]
                             (nZ(n!1), Z)")
                                                (("1"
                                                  (case
                                                   "Z(n!1)
                            ((+[int, restrict[[numfield, numfield], [int, int], numfield](+)])
                                 (m!1, nZ(n!1)))")
                                                  (("1"
                                                    (case
                                                     " (EXISTS (a: (Z)): m!1 + nZ(n!1) = a + nZ(n!1))")
                                                    (("1"
                                                      (case
                                                       "coset?[int, restrict[[numfield, numfield], [int, int], numfield](+)]
                                   (Z, nZ(n!1))
                                   ((+[int, restrict[[numfield, numfield], [int, int], numfield](+)])
                                        (m!1, nZ(n!1)))")
                                                      (("1"
                                                        (expand
                                                         "restrict")
                                                        (("1"
                                                          (split)
                                                          (("1"
                                                            (expand
                                                             "l_invertible?")
                                                            (("1"
                                                              (replace
                                                               -9
                                                               1)
                                                              (("1"
                                                                (replace
                                                                 -7
                                                                 1)
                                                                (("1"
                                                                  (inst
                                                                   1
                                                                   "m!1 + nZ(n!1)")
                                                                  (("1"
                                                                    (lemma
                                                                     product_charac)
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "Z"
                                                                       "nZ(n!1)"
                                                                       "m!1"
                                                                       "a!1")
                                                                      (("1"
                                                                        (lemma
                                                                         equal_cosets_div)
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "m!1 * a!1"
                                                                           "m!1 * a!1 + n!2 * n!1"
                                                                           "n!1")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "r_invertible?")
                                                            (("2"
                                                              (replace
                                                               -9
                                                               1)
                                                              (("2"
                                                                (replace
                                                                 -7
                                                                 1)
                                                                (("2"
                                                                  (inst
                                                                   1
                                                                   "m!1 + nZ(n!1)")
                                                                  (("1"
                                                                    (lemma
                                                                     product_charac)
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "Z"
                                                                       "nZ(n!1)"
                                                                       "a!1"
                                                                       "m!1")
                                                                      (("1"
                                                                        (lemma
                                                                         equal_cosets_div)
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "m!1 * a!1"
                                                                           "m!1 * a!1 + n!2 * n!1"
                                                                           "n!1")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (lemma
                                                         lcoset_iff_coset)
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "m!1 + nZ(n!1)"
                                                           "nZ(n!1)"
                                                           "Z")
                                                          (("2"
                                                            (expand
                                                             "left_coset?")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (inst 1 "m!1")
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand "Z")
                                                    (("2"
                                                      (expand "/")
                                                      (("2"
                                                        (lemma
                                                         lcoset_iff_coset)
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "m!1 + nZ(n!1)"
                                                           "nZ(n!1)"
                                                           "Z")
                                                          (("2"
                                                            (expand
                                                             "left_coset?")
                                                            (("2"
                                                              (case
                                                               "(EXISTS (a: (Z)): m!1 + nZ(n!1) = a + nZ(n!1))")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (inst
                                                                 1
                                                                 "m!1")
                                                                (("2"
                                                                  (expand
                                                                   "Z")
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (lemma nZ_ideal)
                                                  (("2"
                                                    (inst -1 "n!1")
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (skosimp)
                                                  (("3"
                                                    (hide-all-but 1)
                                                    (("3"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("4"
                                                  (skosimp)
                                                  (("4"
                                                    (hide-all-but 1)
                                                    (("4"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "Z")
                                                (("2"
                                                  (expand "fullset")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but 1)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "divides")
                                                  (("2"
                                                    (inst 1 "n!2")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (typepred "n!1")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 3)
                                (("2"
                                  (expand "rel_prime")
                                  (("2"
                                    (lemma gcd_def)
                                    (("2"
                                      (inst -1 "a!1" "n!1" "1")
                                      (("2"
                                        (typepred "n!1")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split)
                                            (("1"
                                              (expand "divides")
                                              (("1"
                                                (inst 1 "a!1")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "divides")
                                              (("2"
                                                (inst 1 "n!1")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (skosimp)
                                              (("3"
                                                (expand "prime?")
                                                (("3"
                                                  (prop)
                                                  (("3"
                                                    (inst -5 "mm!1")
                                                    (("3"
                                                      (case
                                                       "mm!1 /= 1 AND mm!1 /= n!1")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (hide-all-but
                                                           (-1
                                                            -4
                                                            -6
                                                            1
                                                            2
                                                            4))
                                                          (("2"
                                                            (expand
                                                             "divides")
                                                            (("2"
                                                              (skosimp)
                                                              (("2"
                                                                (replaces
                                                                 -1
                                                                 -2)
                                                                (("2"
                                                                  (replaces
                                                                   -1
                                                                   -2)
                                                                  (("2"
                                                                    (lemma
                                                                     equal_cosets_div)
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "0"
                                                                       "n!1 * x!2 "
                                                                       "n!1")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (case
                                                                           "divides(n!1, n!1 * x!2)")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (replace
                                                                               -2
                                                                               -3
                                                                               rl)
                                                                              (("1"
                                                                                (hide-all-but
                                                                                 (-3
                                                                                  2))
                                                                                (("1"
                                                                                  (lemma
                                                                                   "left_zero")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     " nZ(n!1)")
                                                                                    (("1"
                                                                                      (replaces
                                                                                       -1
                                                                                       -2)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide-all-but
                                                                             1)
                                                                            (("2"
                                                                              (expand
                                                                               "divides")
                                                                              (("2"
                                                                                (inst
                                                                                 1
                                                                                 "x!2")
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide-all-but 1)
          (("2" (lemma Zn_commutative_ring_w_one)
            (("2" (inst -1 "n!1")
              (("2" (expand "commutative_ring_with_one?")
                (("2" (propax) nil nil)) nil))
              nil))
            nil))
          nil)
         ("3" (hide-all-but 1)
          (("3" (rewrite "fullset_quot_ring_with_one")
            (("1" (hide 2) (("1" (rewrite "nZ_ideal") nil nil)) nil)
             ("2" (hide 2)
              (("2" (lemma "Z_commutative_ring_w_one")
                (("2" (expand "commutative_ring_with_one?")
                  (("2" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("4" (hide 2)
          (("4" (lemma Zp_prime_is_nz_closed)
            (("4" (inst -1 "n!1")
              (("4" (assert)
                (("4" (expand "nz_closed?")
                  (("4" (expand "star_closed?")
                    (("4" (skeep)
                      (("4" (inst?)
                        (("1" (expand "member")
                          (("1" (expand "remove")
                            (("1" (assert)
                              (("1"
                                (split)
                                (("1" (flatten) nil nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (expand "restrict")
                                    (("2"
                                      (expand "fullset")
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (typepred "y")
                            (("2" (expand "remove")
                              (("2"
                                (flatten)
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "fullset")
                                    (("2"
                                      (expand "restrict")
                                      (("2"
                                        (expand "Z")
                                        (("2"
                                          (expand "/")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (hide 2)
                          (("3" (typepred "x")
                            (("3" (expand "remove")
                              (("3"
                                (flatten)
                                (("3"
                                  (assert)
                                  (("3"
                                    (expand "fullset")
                                    (("3"
                                      (expand "restrict")
                                      (("3"
                                        (expand "Z")
                                        (("3"
                                          (expand "/")
                                          (("3" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("5" (hide-all-but 1)
          (("5" (rewrite "lcoset_iff_coset" :dir rl)
            (("5" (expand "left_coset?")
              (("5" (inst 1 "1")
                (("5" (expand "Z")
                  (("5" (expand "fullset") (("5" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("6" (hide-all-but 1)
          (("6" (rewrite "lcoset_iff_coset" :dir rl)
            (("6" (expand "left_coset?")
              (("6" (inst 1 "0")
                (("1" (lemma "left_zero")
                  (("1" (inst -1 " nZ(n!1)") (("1" (assert) nil nil))
                    nil))
                  nil)
                 ("2" (expand "Z")
                  (("2" (expand "fullset") (("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("7" (hide-all-but 1)
          (("7" (skosimp)
            (("7" (lemma "coset_product")
              (("7" (inst -1 "Z" "nZ(n!1)" "x1!1`1" "x1!1`2")
                (("1" (assert) nil nil)
                 ("2" (hide 2) (("2" (rewrite "nZ_ideal") nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("8" (hide 2)
          (("8" (skeep)
            (("8" (lemma "coset_add")
              (("8" (inst -1 "Z" "nZ(n!1)" "x1`1" "x1`2")
                (("1" (assert) nil nil)
                 ("2" (hide 2) (("2" (rewrite "nZ_ideal") nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("9" (inst 1 "1+nZ(n!1)")
          (("9" (hide-all-but 1)
            (("9" (rewrite "lcoset_iff_coset" :dir rl)
              (("9" (expand "left_coset?")
                (("9" (inst 1 "1")
                  (("9" (expand "Z")
                    (("9" (expand "fullset") (("9" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((coset_add formula-decl nil quotient_rings nil)
    (coset_product formula-decl nil quotient_rings nil) nil nil
    (star_closed? const-decl "bool" groupoid_def nil)
    (Zp_prime_is_nz_closed formula-decl nil ring_zn nil)
    (Z_commutative_ring_w_one formula-decl nil ring_zn nil)
    (fullset_quot_ring_with_one formula-decl nil
     quotient_rings_with_one nil)
    (singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (lcoset_iff_coset formula-decl nil ring_cosets_lemmas nil)
    (left_coset? const-decl "bool" cosets_def nil)
    (monad? const-decl "bool" monad_def nil)
    (member const-decl "bool" sets nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (divides_lt formula-decl nil divides_lems ints)
    (abs_nat_rew formula-decl nil abs_rews ints)
    (prime? const-decl "bool" primes ints)
    (nzint nonempty-type-eq-decl nil integers nil)
    (left_zero formula-decl nil ring_cosets_lemmas nil)
    (equal_cosets_div formula-decl nil ring_zn nil)
    (monoid? const-decl "bool" monoid_def nil)
    (commutative_ring_with_one? const-decl "bool" ring_with_one_def
     nil)
    (Zn_commutative_ring_w_one formula-decl nil ring_zn nil) nil
    (/= const-decl "boolean" notequal nil)
    (unit? const-decl "bool" ring_unit_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (rel_prime const-decl "bool" gcd ints)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nZ_ideal formula-decl nil ring_zn nil) nil
    (ideal type-eq-decl nil ring_ideal_def nil)
    (product_charac formula-decl nil quotient_rings nil)
    (l_invertible? const-decl "bool" ring_unit_def nil)
    (r_invertible? const-decl "bool" ring_unit_def nil)
    (/ const-decl "setof[set[T]]" cosets_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    nil (int_minus_int_is_int application-judgement "int" integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (rel_prime_lem formula-decl nil gcd ints)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (one_times formula-decl nil ring_with_one nil)
    (gcd_def formula-decl nil gcd ints)
    (remove const-decl "set" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil) nil nil
    (product const-decl "set[T]" product_coset_def nil)
    (add const-decl "set[T]" cosets_def nil)
    (coset type-eq-decl nil cosets_def nil)
    (nZ const-decl "set[int]" ring_zn nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     ring_zn nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (ring? const-decl "bool" ring_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (coset? const-decl "bool" cosets_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Z const-decl "setofsets[int]" ring_zn nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (ring_with_one nonempty-type-eq-decl nil ring_with_one nil)
    (ring_with_one? const-decl "bool" ring_with_one_def nil)
    (div_ring_nz_unit formula-decl nil division_ring_extras nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (TRUE const-decl "bool" booleans nil)
    (nz_closed? const-decl "bool" ring_nz_closed_def nil)
    (fullset const-decl "set" sets nil))
   nil)
  (Zp_prime_is_division_ring-1 nil 3808853093
   (""
    (stop-rewrite "right_identity" "left_identity" "one_left"
     "plus_zero" "zero_plus" "one_right" "one_left")
    (("" (skosimp)
      (("" (rewrite div_ring_nz_unit)
        (("1" (split)
          (("1" (expand "/=")
            (("1" (decompose-equality)
              (("1" (inst -1 "1+nZ(n!1)")
                (("1" (iff)
                  (("1" (flatten)
                    (("1" (hide-all-but -1)
                      (("1" (lemma Zn_commutative_ring_w_one)
                        (("1" (inst -1 "n!1")
                          (("1" (expand "commutative_ring_with_one?")
                            (("1" (expand "ring_with_one?")
                              (("1"
                                (expand "monoid?")
                                (("1"
                                  (expand "monad?")
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (hide-all-but -7)
                                        (("1"
                                          (expand "singleton")
                                          (("1"
                                            (lemma equal_cosets_div)
                                            (("1"
                                              (case
                                               "1 + nZ(n!1) = 0 + nZ(n!1)")
                                              (("1"
                                                (inst -2 "0" "1" "n!1")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide-all-but -2)
                                                    (("1"
                                                      (lemma
                                                       divides_lt)
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "1"
                                                         "n!1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (reveal
                                                             -13)
                                                            (("1"
                                                              (expand
                                                               "prime?")
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (lemma "left_zero")
                                                (("2"
                                                  (inst -1 "nZ(n!1)")
                                                  (("2"
                                                    (replaces -3 1)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (lemma lcoset_iff_coset)
                  (("2" (inst -1 "1 + nZ(n!1)" "nZ(n!1)" "Z")
                    (("2" (expand "left_coset?")
                      (("2" (flatten)
                        (("2"
                          (case "(EXISTS (a: (Z)): 1 + nZ(n!1) = a + nZ(n!1))")
                          (("1" (assert) nil nil)
                           ("2" (inst 1 "1")
                            (("2" (expand "Z")
                              (("2"
                                (hide-all-but 1)
                                (("2"
                                  (expand "fullset")
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skosimp)
            (("2" (expand "unit?")
              (("2" (typepred "x!1")
                (("2" (expand "remove")
                  (("2" (expand "coset?")
                    (("2" (flatten)
                      (("2" (hide -2 -3)
                        (("2" (expand "left_coset?")
                          (("2" (skosimp)
                            (("2" (case "rel_prime(a!1,n!1)")
                              (("1"
                                (lemma "rel_prime_lem")
                                (("1"
                                  (inst -1 "a!1" "n!1")
                                  (("1"
                                    (case "(a!1 /= 0 OR n!1 /= 0)")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (skosimp)
                                          (("1"
                                            (case
                                             "divides(n!1, m!1 * a!1 + n!2 * n!1 - m!1 * a!1)")
                                            (("1"
                                              (case "Z(m!1)")
                                              (("1"
                                                (case
                                                 "ideal?
          [int, restrict[[numfield, numfield], [int, int], numfield](+),
           restrict[[numfield, numfield], [int, int], numfield](*), 0]
          (nZ(n!1), Z)")
                                                (("1"
                                                  (case
                                                   "Z(n!1)
       ((+[int, restrict[[numfield, numfield], [int, int], numfield](+)])
            (m!1, nZ(n!1)))")
                                                  (("1"
                                                    (case
                                                     " (EXISTS (a: (Z)): m!1 + nZ(n!1) = a + nZ(n!1))")
                                                    (("1"
                                                      (case
                                                       "coset?[int, restrict[[numfield, numfield], [int, int], numfield](+)]
          (Z, nZ(n!1))
          ((+[int, restrict[[numfield, numfield], [int, int], numfield](+)])
               (m!1, nZ(n!1)))")
                                                      (("1"
                                                        (expand
                                                         "restrict")
                                                        (("1"
                                                          (split)
                                                          (("1"
                                                            (expand
                                                             "l_invertible?")
                                                            (("1"
                                                              (replace
                                                               -9
                                                               1)
                                                              (("1"
                                                                (replace
                                                                 -7
                                                                 1)
                                                                (("1"
                                                                  (inst
                                                                   1
                                                                   "m!1 + nZ(n!1)")
                                                                  (("1"
                                                                    (lemma
                                                                     product_charac)
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "Z"
                                                                       "nZ(n!1)"
                                                                       "m!1"
                                                                       "a!1")
                                                                      (("1"
                                                                        (lemma
                                                                         equal_cosets_div)
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "m!1 * a!1"
                                                                           "m!1 * a!1 + n!2 * n!1"
                                                                           "n!1")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "r_invertible?")
                                                            (("2"
                                                              (replace
                                                               -9
                                                               1)
                                                              (("2"
                                                                (replace
                                                                 -7
                                                                 1)
                                                                (("2"
                                                                  (inst
                                                                   1
                                                                   "m!1 + nZ(n!1)")
                                                                  (("1"
                                                                    (lemma
                                                                     product_charac)
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "Z"
                                                                       "nZ(n!1)"
                                                                       "a!1"
                                                                       "m!1")
                                                                      (("1"
                                                                        (lemma
                                                                         equal_cosets_div)
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "m!1 * a!1"
                                                                           "m!1 * a!1 + n!2 * n!1"
                                                                           "n!1")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (lemma
                                                         lcoset_iff_coset)
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "m!1 + nZ(n!1)"
                                                           "nZ(n!1)"
                                                           "Z")
                                                          (("2"
                                                            (expand
                                                             "left_coset?")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (inst 1 "m!1")
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand "Z")
                                                    (("2"
                                                      (expand "/")
                                                      (("2"
                                                        (lemma
                                                         lcoset_iff_coset)
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "m!1 + nZ(n!1)"
                                                           "nZ(n!1)"
                                                           "Z")
                                                          (("2"
                                                            (expand
                                                             "left_coset?")
                                                            (("2"
                                                              (case
                                                               "(EXISTS (a: (Z)): m!1 + nZ(n!1) = a + nZ(n!1))")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (inst
                                                                 1
                                                                 "m!1")
                                                                (("2"
                                                                  (expand
                                                                   "Z")
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (lemma nZ_ideal)
                                                  (("2"
                                                    (inst -1 "n!1")
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (skosimp)
                                                  (("3"
                                                    (hide-all-but 1)
                                                    (("3"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("4"
                                                  (skosimp)
                                                  (("4"
                                                    (hide-all-but 1)
                                                    (("4"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "Z")
                                                (("2"
                                                  (expand "fullset")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but 1)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "divides")
                                                  (("2"
                                                    (inst 1 "n!2")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (typepred "n!1")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 3)
                                (("2"
                                  (expand "rel_prime")
                                  (("2"
                                    (lemma gcd_def)
                                    (("2"
                                      (inst -1 "a!1" "n!1" "1")
                                      (("2"
                                        (typepred "n!1")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split)
                                            (("1"
                                              (expand "divides")
                                              (("1"
                                                (inst 1 "a!1")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "divides")
                                              (("2"
                                                (inst 1 "n!1")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (skosimp)
                                              (("3"
                                                (expand "prime?")
                                                (("3"
                                                  (prop)
                                                  (("3"
                                                    (inst -5 "mm!1")
                                                    (("3"
                                                      (case
                                                       "mm!1 /= 1 AND mm!1 /= n!1")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (hide-all-but
                                                           (-1
                                                            -4
                                                            -6
                                                            1
                                                            2
                                                            4))
                                                          (("2"
                                                            (expand
                                                             "divides")
                                                            (("2"
                                                              (skosimp)
                                                              (("2"
                                                                (replaces
                                                                 -1
                                                                 -2)
                                                                (("2"
                                                                  (replaces
                                                                   -1
                                                                   -2)
                                                                  (("2"
                                                                    (lemma
                                                                     equal_cosets_div)
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "0"
                                                                       "n!1 * x!2 "
                                                                       "n!1")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (case
                                                                           "divides(n!1, n!1 * x!2)")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (replace
                                                                               -2
                                                                               -3
                                                                               rl)
                                                                              (("1"
                                                                                (hide-all-but
                                                                                 (-3
                                                                                  2))
                                                                                (("1"
                                                                                  (lemma
                                                                                   "left_zero")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     " nZ(n!1)")
                                                                                    (("1"
                                                                                      (replaces
                                                                                       -1
                                                                                       -2)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide-all-but
                                                                             1)
                                                                            (("2"
                                                                              (expand
                                                                               "divides")
                                                                              (("2"
                                                                                (inst
                                                                                 1
                                                                                 "x!2")
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide-all-but 1)
          (("2" (lemma Zn_commutative_ring_w_one)
            (("2" (inst -1 "n!1")
              (("2" (expand "commutative_ring_with_one?")
                (("2" (propax) nil nil)) nil))
              nil))
            nil))
          nil)
         ("3" (hide-all-but 1) (("3" (postpone) nil nil)) nil)
         ("4" (hide 2)
          (("4" (lemma Zp_prime_is_nz_closed)
            (("4" (inst -1 "n!1")
              (("4" (assert) (("4" (postpone) nil nil)) nil)) nil))
            nil))
          nil)
         ("5" (hide-all-but 1)
          (("5" (rewrite "lcoset_iff_coset" :dir rl)
            (("5" (expand "left_coset?")
              (("5" (inst 1 "1")
                (("5" (expand "Z")
                  (("5" (expand "fullset") (("5" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("6" (hide-all-but 1)
          (("6" (rewrite "lcoset_iff_coset" :dir rl)
            (("6" (expand "left_coset?")
              (("6" (inst 1 "0")
                (("1" (lemma "left_zero")
                  (("1" (inst -1 " nZ(n!1)") (("1" (assert) nil nil))
                    nil))
                  nil)
                 ("2" (expand "Z")
                  (("2" (expand "fullset") (("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("7" (hide-all-but 1)
          (("7" (skosimp)
            (("7" (rewrite "lcoset_iff_coset" :dir rl)
              (("7" (expand "left_coset?") (("7" (postpone) nil nil))
                nil))
              nil))
            nil))
          nil)
         ("8" (postpone) nil nil)
         ("9" (inst 1 "1+nZ(n!1)")
          (("9" (hide-all-but 1)
            (("9" (rewrite "lcoset_iff_coset" :dir rl)
              (("9" (expand "left_coset?")
                (("9" (inst 1 "1")
                  (("9" (expand "Z")
                    (("9" (expand "fullset") (("9" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil))
 (Zp_prime_is_field 0
  (Zp_prime_is_field-1 nil 3811152529
   ("" (skosimp)
    (("" (split)
      (("1" (prop)
        (("1" (expand "field?")
          (("1" (lemma Zp_prime_is_division_ring)
            (("1" (inst -1 "n!1")
              (("1" (assert)
                (("1" (lemma Zn_commutative_ring_w_one)
                  (("1" (inst -1 "n!1")
                    (("1" (expand "commutative_ring_with_one?")
                      (("1" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (prop)
        (("2" (expand "field?")
          (("2" (expand "division_ring?")
            (("2" (expand "group?")
              (("2" (expand "monoid?")
                (("2" (expand "monad?")
                  (("2" (flatten)
                    (("2" (hide-all-but (-2 -6 1))
                      (("2" (lemma "Zp_nz_closed_is_prime_or_one")
                        (("2" (inst -1 "n!1")
                          (("2" (expand "nz_closed?")
                            (("2" (assert)
                              (("2"
                                (expand "prime?")
                                (("2"
                                  (split)
                                  (("1"
                                    (skosimp)
                                    (("1"
                                      (lemma divides_lt)
                                      (("1"
                                        (inst -1 "n!1" "j!1")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide -3)
                                    (("2"
                                      (expand "star_closed?")
                                      (("2"
                                        (replaces -1 -2)
                                        (("2"
                                          (inst
                                           -1
                                           "+(1, nZ(1))"
                                           "+(1, nZ(1))")
                                          (("1"
                                            (expand "member")
                                            (("1"
                                              (expand "remove")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (lemma
                                                   product_charac)
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "Z"
                                                     "nZ(1)"
                                                     "1"
                                                     "1")
                                                    (("1"
                                                      (replaces -1 1)
                                                      (("1"
                                                        (hide -1)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (name-replace
                                                             "A"
                                                             "nZ(1)")
                                                            (("1"
                                                              (expand
                                                               "A"
                                                               1
                                                               1)
                                                              (("1"
                                                                (rewrite
                                                                 "left_zero"
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (expand
                                                                   "A")
                                                                  (("1"
                                                                    (rewrite
                                                                     "equal_cosets_div")
                                                                    (("1"
                                                                      (expand
                                                                       "divides")
                                                                      (("1"
                                                                        (inst
                                                                         1
                                                                         "1")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand "Z")
                                                      (("2"
                                                        (expand
                                                         "fullset")
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (lemma nZ_ideal)
                                                      (("3"
                                                        (inst -1 "n!1")
                                                        (("3"
                                                          (reveal -4)
                                                          (("3"
                                                            (replaces
                                                             -1
                                                             -2)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (split)
                                            (("1"
                                              (rewrite
                                               "lcoset_iff_coset"
                                               :dir
                                               rl)
                                              (("1"
                                                (expand "left_coset?")
                                                (("1"
                                                  (inst 1 "1")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (expand "Z")
                                                    (("2"
                                                      (expand
                                                       "fullset")
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "remove")
                                              (("2"
                                                (split)
                                                (("1"
                                                  (expand "/=")
                                                  (("1"
                                                    (reveal (-2 -6))
                                                    (("1"
                                                      (replaces
                                                       -1
                                                       (-2 -3))
                                                      (("1"
                                                        (expand
                                                         "member")
                                                        (("1"
                                                          (expand
                                                           "remove")
                                                          (("1"
                                                            (flatten)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "member")
                                                  (("2"
                                                    (expand "restrict")
                                                    (("2"
                                                      (expand "Z")
                                                      (("2"
                                                        (expand "/")
                                                        (("2"
                                                          (rewrite
                                                           "lcoset_iff_coset"
                                                           :dir
                                                           rl)
                                                          (("2"
                                                            (expand
                                                             "left_coset?")
                                                            (("2"
                                                              (inst
                                                               1
                                                               "1")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "Z")
                                                                (("2"
                                                                  (expand
                                                                   "fullset")
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((field? const-decl "bool" field_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (Zn_commutative_ring_w_one formula-decl nil ring_zn nil)
    (commutative_ring_with_one? const-decl "bool" ring_with_one_def
     nil)
    (Zp_prime_is_division_ring formula-decl nil ring_zn nil)
    (group? const-decl "bool" group_def nil)
    (monad? const-decl "bool" monad_def nil)
    (divides_lt formula-decl nil divides_lems ints)
    (abs_nat_rew formula-decl nil abs_rews ints)
    (/= const-decl "boolean" notequal nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (Z const-decl "setofsets[int]" ring_zn nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (remove const-decl "set" sets nil)
    (coset type-eq-decl nil cosets_def nil) nil nil
    (nZ const-decl "set[int]" ring_zn nil)
    (Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     ring_zn nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (ring? const-decl "bool" ring_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (coset? const-decl "bool" cosets_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (product_charac formula-decl nil quotient_rings nil)
    (nZ_ideal formula-decl nil ring_zn nil)
    (fullset const-decl "set" sets nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    nil nil
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (equal_cosets_div formula-decl nil ring_zn nil)
    (left_zero formula-decl nil ring_cosets_lemmas nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (member const-decl "bool" sets nil)
    (/ const-decl "setof[set[T]]" cosets_def nil)
    (lcoset_iff_coset formula-decl nil ring_cosets_lemmas nil)
    (left_coset? const-decl "bool" cosets_def nil)
    (TRUE const-decl "bool" booleans nil)
    (prime? const-decl "bool" primes ints)
    (nz_closed? const-decl "bool" ring_nz_closed_def nil)
    (Zp_nz_closed_is_prime_or_one formula-decl nil ring_zn nil)
    (monoid? const-decl "bool" monoid_def nil)
    (division_ring? const-decl "bool" division_ring_def nil))
   nil))
 (nZ_mZ_subset 0
  (nZ_mZ_subset-1 nil 3810213490
   ("" (skosimp)
    (("" (prop)
      (("1" (expand "divides")
        (("1" (expand "subset?")
          (("1" (expand "member")
            (("1" (inst?)
              (("1" (prop)
                (("1" (expand "nZ")
                  (("1" (skosimp)
                    (("1" (inst 1 "k!1") (("1" (assert) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (expand "nZ")
                    (("2" (inst 1 "1") (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "divides")
        (("2" (expand "subset?")
          (("2" (expand "member")
            (("2" (skosimp*)
              (("2" (expand "nZ")
                (("2" (skosimp)
                  (("2" (replaces -1)
                    (("2" (rewrite "commutative_mult")
                      (("2" (inst 1 "k!1 * x!1")
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset? const-decl "bool" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (left_identity formula-decl nil monad nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nZ const-decl "set[int]" ring_zn nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (member const-decl "bool" sets nil) nil
    (commutative_mult formula-decl nil number_fields nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (power_sum_nat 0
  (power_sum_nat-1 nil 3810213550
   ("" (induct "n")
    (("1" (typepred "n!1") (("1" (propax) nil nil)) nil)
     ("2" (assert) nil nil)
     ("3" (skosimp*)
      (("3" (case-replace "j!1 = 0")
        (("1" (hide (-2 -3))
          (("1" (expand "^")
            (("1" (expand "power")
              (("1" (expand "power") (("1" (assert) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (prop)
          (("1" (lemma "expt_def1")
            (("1" (inst?)
              (("1" (replaces -1)
                (("1" (inst?)
                  (("1" (replaces -1)
                    (("1" (lemma "commutative_mult")
                      (("1" (inst-cp -1 "j!1" "x!1")
                        (("1" (inst -1 "(j!1 + 1)" "x!1")
                          (("1" (replaces -1) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (typepred "j!1") (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((commutative_mult formula-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (TRUE const-decl "bool" booleans nil)
    (expt_def1 formula-decl nil group nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (power def-decl "T" monoid_def nil)
    (left_identity formula-decl nil monad nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (zero_times formula-decl nil ring nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (^ const-decl "T" group nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (> const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_plus_int_is_int application-judgement "int" integers nil))
   shostak))
 (power_sum_int 0
  (power_sum_int-1 nil 3810213569
   ("" (skosimp)
    (("" (case-replace "k!1 = 0")
      (("1" (expand "^")
        (("1" (expand "power") (("1" (assert) nil nil)) nil)) nil)
       ("2" (case "k!1 > 0")
        (("1" (lemma "power_sum_nat")
          (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
         ("2" (expand "^")
          (("2" (lift-if)
            (("2" (prop)
              (("1" (lemma "power_sum_nat")
                (("1" (inst -1 "-k!1" "inv(x!1)")
                  (("1" (expand "^")
                    (("1" (lift-if)
                      (("1" (prop)
                        (("1" (hide (-2 1)) (("1" (assert) nil nil))
                          nil)
                         ("2" (replaces -1) (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2) (("2" (assert) nil nil)) nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (power def-decl "T" monoid_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (zero_times formula-decl nil ring nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (^ const-decl "T" group nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (inv const-decl "{y | x * y = one AND y * x = one}" group nil)
    (TRUE const-decl "bool" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (power_sum_nat formula-decl nil ring_zn nil)
    (int_times_int_is_int application-judgement "int" integers nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil))
   shostak))
 (nZ_is_cyclic 0
  (nZ_is_cyclic-1 nil 3810213595
   ("" (skosimp)
    (("" (decompose-equality 1)
      (("" (iff)
        (("" (prop)
          (("1" (expand* "nZ" "generated_by")
            (("1" (skosimp)
              (("1" (inst 1 "k!1")
                (("1" (lemma "power_sum_int")
                  (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil)
           ("2" (expand* "nZ" "generated_by")
            (("2" (skosimp)
              (("2" (inst 1 "i!1")
                (("2" (lemma "power_sum_int")
                  (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_plus_int_is_int application-judgement "int" integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (set type-eq-decl nil sets nil)
    (nZ const-decl "set[int]" ring_zn nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (group? const-decl "bool" group_def nil)
    (group nonempty-type-eq-decl nil group nil)
    (generated_by const-decl "group" group nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (power_sum_int formula-decl nil ring_zn nil)
    (int_times_int_is_int application-judgement "int" integers nil))
   shostak))
 (mZ_nZ_is_cyclic_TCC1 0
  (mZ_nZ_is_cyclic_TCC1-1 nil 3810213549
   ("" (skosimp)
    (("" (lemma "lcoset_iff_coset")
      (("" (inst?)
        (("" (assert)
          (("" (hide 2)
            (("" (expand "left_coset?")
              (("" (inst?)
                (("" (expand "nZ")
                  (("" (inst 1 "1") (("" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (lcoset_iff_coset formula-decl nil ring_cosets_lemmas nil)
    (left_coset? const-decl "bool" cosets_def nil)
    (left_identity formula-decl nil monad nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (m!1 skolem-const-decl "posnat" ring_zn nil)
    (nZ const-decl "set[int]" ring_zn nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (+ const-decl "set[T]" cosets_def nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int_plus_int_is_int application-judgement "int" integers nil))
   nil
   (mZ_nZ_is_cyclic subtype
    "(cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].+)(ring_zn.m, ring_zn.nZ(ring_zn.n))"
    "cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset(ring_zn.nZ(ring_zn.m), ring_zn.nZ(ring_zn.n))")))
 (mZ_nZ_is_cyclic_TCC2 0
  (mZ_nZ_is_cyclic_TCC2-1 nil 3810213549
   ("" (skosimp)
    (("" (inst 1 "nZ(n!1)")
      (("" (rewrite "ideal_is_coset")
        (("1" (hide 2)
          (("1" (lemma "nZ_mZ_subset")
            (("1" (inst?)
              (("1" (assert)
                (("1" (lemma "nZ_ideal")
                  (("1" (inst-cp -1 "n!1")
                    (("1" (inst -1 "m!1")
                      (("1" (expand "ideal?" -1)
                        (("1" (expand "left_ideal?")
                          (("1" (flatten)
                            (("1" (hide (-2 -3))
                              (("1"
                                (lemma "ideal_transitive")
                                (("1"
                                  (inst -1 "nZ(m!1)" "nZ(n!1)" "Z")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (lemma "nZ_ideal")
            (("2" (inst?)
              (("2" (expand "ideal?")
                (("2" (expand "left_ideal?")
                  (("2" (expand "subring?") (("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (coset? const-decl "bool" cosets_def nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nZ const-decl "set[int]" ring_zn nil)
    (coset type-eq-decl nil cosets_def nil)
    (n!1 skolem-const-decl "posnat" ring_zn nil)
    (m!1 skolem-const-decl "posnat" ring_zn nil)
    (subring? const-decl "bool" ring_def nil)
    (nZ_ideal formula-decl nil ring_zn nil)
    (left_ideal? const-decl "bool" ring_ideal_def nil)
    (Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     ring_zn nil)
    (ideal_transitive formula-decl nil ring_ideal nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (nZ_mZ_subset formula-decl nil ring_zn nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (ring? const-decl "bool" ring_def nil)
    (ideal_is_coset formula-decl nil ring_cosets_lemmas nil))
   nil
   (mZ_nZ_is_cyclic existence ""
    "cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset(ring_zn.nZ(ring_zn.m), ring_zn.nZ(ring_zn.n))")))
 (mZ_nZ_is_cyclic_TCC3 0
  (mZ_nZ_is_cyclic_TCC3-1 nil 3810213549
   ("" (skosimp*)
    (("" (lemma "lcoset_iff_coset")
      (("" (inst?)
        (("" (assert)
          (("" (hide 2)
            (("" (expand "left_coset?")
              (("" (lemma "add_is_coset")
                (("" (inst -1 "nZ(m!1)" "nZ(n!1)" "x1!1`1" "x1!1`2")
                  (("1" (skosimp)
                    (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
                   ("2" (hide 2)
                    (("2" (lemma "nZ_mZ_subset")
                      (("2" (inst?)
                        (("2" (assert)
                          (("2" (lemma "nZ_ideal")
                            (("2" (inst-cp -1 "n!1")
                              (("2"
                                (inst -1 "m!1")
                                (("2"
                                  (expand "ideal?" -1)
                                  (("2"
                                    (expand "left_ideal?")
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (hide (-2 -3))
                                        (("2"
                                          (lemma "ideal_transitive")
                                          (("2"
                                            (inst
                                             -1
                                             "nZ(m!1)"
                                             "nZ(n!1)"
                                             "Z")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (hide 2)
                    (("3" (lemma "nZ_ideal")
                      (("3" (inst?)
                        (("3" (expand "ideal?")
                          (("3" (expand "left_ideal?")
                            (("3" (expand "subring?")
                              (("3" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (lcoset_iff_coset formula-decl nil ring_cosets_lemmas nil)
    (left_coset? const-decl "bool" cosets_def nil)
    (ring? const-decl "bool" ring_def nil)
    (m!1 skolem-const-decl "posnat" ring_zn nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (n!1 skolem-const-decl "posnat" ring_zn nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (nZ_mZ_subset formula-decl nil ring_zn nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (ideal_transitive formula-decl nil ring_ideal nil)
    (Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     ring_zn nil)
    (left_ideal? const-decl "bool" ring_ideal_def nil)
    (nZ_ideal formula-decl nil ring_zn nil)
    (subring? const-decl "bool" ring_def nil)
    (add_is_coset formula-decl nil quotient_rings nil)
    (nZ const-decl "set[int]" ring_zn nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (add const-decl "set[T]" cosets_def nil)
    (coset type-eq-decl nil cosets_def nil)
    (coset? const-decl "bool" cosets_def nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int_plus_int_is_int application-judgement "int" integers nil))
   nil
   (mZ_nZ_is_cyclic subtype
    "cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].add(ring_zn.nZ(ring_zn.m), ring_zn.nZ(ring_zn.n))"
    "[[cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset(ring_zn.nZ(ring_zn.m), ring_zn.nZ(ring_zn.n)), cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset(ring_zn.nZ(ring_zn.m), ring_zn.nZ(ring_zn.n))] -> cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset(ring_zn.nZ(ring_zn.m), ring_zn.nZ(ring_zn.n))]")))
 (mZ_nZ_is_cyclic_TCC4 0
  (mZ_nZ_is_cyclic_TCC4-1 nil 3810213549
   ("" (skosimp)
    (("" (rewrite "ideal_is_coset")
      (("1" (hide 2)
        (("1" (lemma "nZ_mZ_subset")
          (("1" (inst?)
            (("1" (assert)
              (("1" (lemma "nZ_ideal")
                (("1" (inst-cp -1 "n!1")
                  (("1" (inst -1 "m!1")
                    (("1" (expand "ideal?" -1)
                      (("1" (expand "left_ideal?")
                        (("1" (flatten)
                          (("1" (hide (-2 -3))
                            (("1" (lemma "ideal_transitive")
                              (("1"
                                (inst -1 "nZ(m!1)" "nZ(n!1)" "Z")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (lemma "nZ_ideal")
          (("2" (inst?)
            (("2" (expand "ideal?")
              (("2" (expand "left_ideal?")
                (("2" (expand "subring?") (("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ideal_is_coset formula-decl nil ring_cosets_lemmas nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (ring? const-decl "bool" ring_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nZ const-decl "set[int]" ring_zn nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nZ_mZ_subset formula-decl nil ring_zn nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (ideal_transitive formula-decl nil ring_ideal nil)
    (Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     ring_zn nil)
    (left_ideal? const-decl "bool" ring_ideal_def nil)
    (nZ_ideal formula-decl nil ring_zn nil)
    (subring? const-decl "bool" ring_def nil))
   nil
   (mZ_nZ_is_cyclic subtype "ring_zn.nZ(ring_zn.n)"
    "cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset(ring_zn.nZ(ring_zn.m), ring_zn.nZ(ring_zn.n))")))
 (mZ_nZ_is_cyclic_TCC5 0
  (mZ_nZ_is_cyclic_TCC5-1 nil 3810213549
   ("" (skosimp)
    (("" (lemma "fullset_quot_group_is_ring")
      (("" (inst -1 "nZ(m!1)" "nZ(n!1)")
        (("1" (expand "ring?")
          (("1" (expand "abelian_group?") (("1" (flatten) nil nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (lemma "nZ_mZ_subset")
            (("2" (inst?)
              (("2" (assert)
                (("2" (lemma "nZ_ideal")
                  (("2" (inst-cp -1 "n!1")
                    (("2" (inst -1 "m!1")
                      (("2" (expand "ideal?" -1)
                        (("2" (expand "left_ideal?")
                          (("2" (flatten)
                            (("2" (hide (-2 -3))
                              (("2"
                                (lemma "ideal_transitive")
                                (("2"
                                  (inst -1 "nZ(m!1)" "nZ(n!1)" "Z")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (hide 2)
          (("3" (lemma "nZ_ideal")
            (("3" (inst?)
              (("3" (expand "ideal?")
                (("3" (expand "left_ideal?")
                  (("3" (expand "subring?") (("3" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (fullset_quot_group_is_ring formula-decl nil quotient_rings nil)
    (subring? const-decl "bool" ring_def nil)
    (nZ_ideal formula-decl nil ring_zn nil)
    (left_ideal? const-decl "bool" ring_ideal_def nil)
    (Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     ring_zn nil)
    (ideal_transitive formula-decl nil ring_ideal nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (nZ_mZ_subset formula-decl nil ring_zn nil)
    (abelian_group? const-decl "bool" group_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (n!1 skolem-const-decl "posnat" ring_zn nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (ring? const-decl "bool" ring_def nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nZ const-decl "set[int]" ring_zn nil)
    (m!1 skolem-const-decl "posnat" ring_zn nil))
   nil
   (mZ_nZ_is_cyclic assuming
    "group[cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset(ring_zn.nZ(ring_zn.m), ring_zn.nZ(ring_zn.n)), cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].add(ring_zn.nZ(ring_zn.m), ring_zn.nZ(ring_zn.n)), ring_zn.nZ(ring_zn.n)].group"
    "fullset_is_group: ASSUMPTION group_def[group.T, group.*, group.one].group?(sets[group.T].fullset)")))
 (mZ_nZ_is_cyclic 0
  (mZ_nZ_is_cyclic-1 nil 3810215271
   ("" (skosimp*)
    (("" (decompose-equality 1)
      (("1" (iff)
        (("1" (prop)
          (("1" (expand "/")
            (("1" (expand "extend")
              (("1" (assert)
                (("1" (expand "generated_by")
                  (("1" (expand "coset?")
                    (("1" (flatten)
                      (("1" (hide -2)
                        (("1" (expand "left_coset?")
                          (("1" (skosimp)
                            (("1" (replaces -1)
                              (("1"
                                (typepred "a!1")
                                (("1"
                                  (lemma "nZ_is_cyclic")
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (replaces -1)
                                      (("1"
                                        (expand "generated_by")
                                        (("1"
                                          (skosimp)
                                          (("1"
                                            (replaces -1)
                                            (("1"
                                              (inst 1 "i!1")
                                              (("1"
                                                (lemma
                                                 "lcoset_power_int")
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (replace -1 1 rl)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (expand "nZ")
                                                      (("2"
                                                        (inst 1 "1")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (hide 2)
                                                    (("3"
                                                      (lemma
                                                       "nZ_mZ_subset")
                                                      (("3"
                                                        (inst?)
                                                        (("3"
                                                          (assert)
                                                          (("3"
                                                            (lemma
                                                             "nZ_ideal")
                                                            (("3"
                                                              (inst-cp
                                                               -1
                                                               "n!1")
                                                              (("3"
                                                                (inst
                                                                 -1
                                                                 "m!1")
                                                                (("3"
                                                                  (expand
                                                                   "ideal?"
                                                                   -1)
                                                                  (("3"
                                                                    (expand
                                                                     "left_ideal?")
                                                                    (("3"
                                                                      (flatten)
                                                                      (("3"
                                                                        (hide
                                                                         (-2
                                                                          -3))
                                                                        (("3"
                                                                          (lemma
                                                                           "ideal_transitive")
                                                                          (("3"
                                                                            (inst
                                                                             -1
                                                                             "nZ(m!1)"
                                                                             "nZ(n!1)"
                                                                             "Z")
                                                                            (("3"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("4"
                                                    (hide 2)
                                                    (("4"
                                                      (lemma
                                                       "nZ_ideal")
                                                      (("4"
                                                        (inst?)
                                                        (("4"
                                                          (expand
                                                           "ideal?")
                                                          (("4"
                                                            (expand
                                                             "left_ideal?")
                                                            (("4"
                                                              (expand
                                                               "subring?")
                                                              (("4"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "/")
            (("2" (expand "extend") (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil)
       ("2" (lemma "fullset_quot_group_is_ring")
        (("2" (inst -1 "nZ(m!1)" "nZ(n!1)")
          (("1" (expand "ring?")
            (("1" (expand "abelian_group?") (("1" (propax) nil nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (lemma "nZ_mZ_subset")
              (("2" (inst?)
                (("2" (assert)
                  (("2" (lemma "nZ_ideal")
                    (("2" (inst-cp -1 "n!1")
                      (("2" (inst -1 "m!1")
                        (("2" (expand "ideal?" -1)
                          (("2" (expand "left_ideal?")
                            (("2" (flatten)
                              (("2"
                                (hide (-2 -3))
                                (("2"
                                  (lemma "ideal_transitive")
                                  (("2"
                                    (inst -1 "nZ(m!1)" "nZ(n!1)" "Z")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (hide 2)
            (("3" (lemma "nZ_ideal")
              (("3" (inst?)
                (("3" (expand "ideal?")
                  (("3" (expand "left_ideal?")
                    (("3" (expand "subring?") (("3" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (rewrite "ideal_is_coset")
        (("1" (hide 2)
          (("1" (lemma "nZ_mZ_subset")
            (("1" (inst?)
              (("1" (assert)
                (("1" (lemma "nZ_ideal")
                  (("1" (inst-cp -1 "n!1")
                    (("1" (inst -1 "m!1")
                      (("1" (expand "ideal?" -1)
                        (("1" (expand "left_ideal?")
                          (("1" (flatten)
                            (("1" (hide (-2 -3))
                              (("1"
                                (lemma "ideal_transitive")
                                (("1"
                                  (inst -1 "nZ(m!1)" "nZ(n!1)" "Z")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (lemma "nZ_ideal")
            (("2" (inst?)
              (("2" (expand "ideal?")
                (("2" (expand "left_ideal?")
                  (("2" (expand "subring?") (("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (skosimp)
        (("4" (lemma "lcoset_iff_coset")
          (("4" (inst?)
            (("4" (assert)
              (("4" (hide 2)
                (("4" (expand "left_coset?")
                  (("4" (lemma "add_is_coset")
                    (("4"
                      (inst -1 "nZ(m!1)" "nZ(n!1)" "x1!1`1" "x1!1`2")
                      (("1" (skosimp)
                        (("1" (inst?) (("1" (assert) nil nil)) nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (lemma "nZ_mZ_subset")
                          (("2" (inst?)
                            (("2" (assert)
                              (("2"
                                (lemma "nZ_ideal")
                                (("2"
                                  (inst-cp -1 "n!1")
                                  (("2"
                                    (inst -1 "m!1")
                                    (("2"
                                      (expand "ideal?" -1)
                                      (("2"
                                        (expand "left_ideal?")
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (hide (-2 -3))
                                            (("2"
                                              (lemma
                                               "ideal_transitive")
                                              (("2"
                                                (inst
                                                 -1
                                                 "nZ(m!1)"
                                                 "nZ(n!1)"
                                                 "Z")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (hide 2)
                        (("3" (lemma "nZ_ideal")
                          (("3" (inst?)
                            (("3" (expand "ideal?")
                              (("3"
                                (expand "left_ideal?")
                                (("3"
                                  (expand "subring?")
                                  (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_plus_int_is_int application-judgement "int" integers nil)
    (add const-decl "set[T]" cosets_def nil)
    (coset type-eq-decl nil cosets_def nil) nil nil
    (nZ const-decl "set[int]" ring_zn nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (coset? const-decl "bool" cosets_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (fullset const-decl "set" sets nil)
    (group? const-decl "bool" group_def nil)
    (setof type-eq-decl nil defined_types nil)
    (/ const-decl "setof[set[T]]" cosets_def nil)
    (FALSE const-decl "bool" booleans nil)
    (extend const-decl "R" extend nil)
    (group nonempty-type-eq-decl nil group nil)
    (generated_by const-decl "group" group nil) nil
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (left_coset? const-decl "bool" cosets_def nil)
    (TRUE const-decl "bool" booleans nil)
    (nZ_is_cyclic formula-decl nil ring_zn nil)
    (ring? const-decl "bool" ring_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (left_identity formula-decl nil monad nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (nZ_mZ_subset formula-decl nil ring_zn nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (ideal_transitive formula-decl nil ring_ideal nil)
    (Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     ring_zn nil)
    (left_ideal? const-decl "bool" ring_ideal_def nil)
    (nZ_ideal formula-decl nil ring_zn nil)
    (subring? const-decl "bool" ring_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (lcoset_power_int formula-decl nil quotient_rings nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (abelian_group? const-decl "bool" group_def nil)
    (fullset_quot_group_is_ring formula-decl nil quotient_rings nil)
    (ideal_is_coset formula-decl nil ring_cosets_lemmas nil)
    (lcoset_iff_coset formula-decl nil ring_cosets_lemmas nil)
    (add_is_coset formula-decl nil quotient_rings nil))
   shostak)))

